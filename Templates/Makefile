# This is a makefile which can be run in any make program
# Make programs are like following:
# - make
# - gmake

# Rule syntax:
# target1 target2 ...: prerequisite1 prerequisite2
# 	recipe
# 
# OR,
# target1 target2 ...: prerequisite1 prerequisite2 ; recipe

# The calling convention of $PROGRAM
# Make has special variables to call programs like $MAKE calls make in another process and gives it the parameters passed from user
# Make also uses other programs in special syntax like $(CC) for the value of env variable CC, default it 'cc' program.
# Make has 

# Including other makefiles, the file name supports expansions, wildcards
include deps.make

# VPATH
# VPATH is used to let make search other folders which are not current folder for the target or prerequisite files.
VPATH=src:../othersrc
# VPATH can also be used as directive like following
vpath pattern directories
vpath *.h ../headers

# Automatic variables:
# $@: Name of target
# $%: Name of member of target
# $<: Name of first prerequisite.
# $?: Names of all prerequisite, newer than target
# $^: Names of all prerequisite, deduplicated.
# $+: Names of all prerequisite.
# $|: Names of all order-only prerequisites.
# $*: The actual target file's stem which matches the implicit rule.
# 		Like for file dir/a.foo.b and target pattern a.%.b then stem is dir/foo

# Phony target
# Phony target whose dependencies are not creating by
# same name and must be run always even if file by name exists
.PHONY: all clean

# First rule default rule
# The first rule executed by only calling make without parameter
all:
	echo "all"

# Implicit rules
# Make contains implicit rules which can be shown using "make -p"
main.o: main.c

# Wildcard in make
# Wildcards are expanded when the rule is being executed by make.
# If this rule's parts are used in another rule, then it will see willdcard without expansion
# In that case where wildcard needs expansion on reading of makefile use $(wildcard *.c) like function
# Wildcard expansion does not happen when setting variable, inside the arguments of a function.
build: *.c $(wildcard *.h)
	echo "makes all c files"


clean:
	echo "Cleans the project files which were generated by make"
head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.43.54;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.14.02.37;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/**************************************************************************
* GeoClient - Opensource SVG webmap 
* Copyright() 2003 Amri Rosyada & Nedjo Rogers.
* This code is free software; you can redistribute it and/or modify it 
* under the terms of the GNU GPL as published by the Free Software Foundation;
****************************************************************************/
var svgnsz = "http://www.w3.org/2000/svg";
var xlnsz = "http://www.w3.org/1999/xlink";
var widgetArray= new Array();
GeoRect.prototype  = new GeoWidget();
GeoButton.prototype  = new GeoWidget();
GeoScrollPane.prototype  = new GeoWidget();
GeoLabel.prototype  = new GeoWidget();
GeoCheckBox.prototype  = new GeoWidget();
GeoTextField.prototype  = new GeoWidget();
GeoTable.prototype  = new GeoWidget();
GeoListBox.prototype  = new GeoWidget();
GeoMultiListBox.prototype  = new GeoWidget();
GeoComboBox.prototype  = new GeoWidget();
GeoWindow.prototype  = new GeoWidget();
columnChart.prototype  = new GeoWidget();
ColorPicker.prototype  = new GeoWidget();

/*******************************
* 				WIDGET				 *
********************************/
function unloadWidget(){
	if(widgetArray) {
		for(var i=0;i<widgetArray.length;i++){
			if(widgetArray[i].kill) widgetArray[i].kill();
		}
	}
}
function GeoWidget(){
	widgetArray[widgetArray.length] = this;
	this.caller=null;
}
GeoWidget.prototype.getNode=function(){
	if(this.node==null) this.createNode();
	return this.node;
}
GeoWidget.prototype.handleEvent = function(e) {
    var type = e.type;
    if (this[type] != null ) this[type](e);
}
GeoWidget.prototype.makeCopy=function(){
	var abc=new GeoWidget();
	CopyProperties(this,abc);
	return abc;
}
GeoWidget.prototype.updateNode=function(){
	this.createNode();
	return this.node;
}
GeoWidget.prototype.kill=function(){
	this.removeEvents();
	if(this.node){
		var prtnode = this.node.getParentNode();
		if(prtnode) prtnode.removeChild(this.getNode());
	}
	for(var props in this){
		//this[props]=null;
	}
}
GeoWidget.prototype.createNode=function(){}
GeoWidget.prototype.setSelected=function(isSelected){}
GeoWidget.prototype.addEvents=function(){
	if(this==null) return;
	if(this.node==null) return;
	this.node.addEventListener("click",this,false);
	this.node.addEventListener("mousedown",this,false);
	this.node.addEventListener("mouseup",this,false);
	this.node.addEventListener("mouseout",this,false);
	this.node.addEventListener("mouseover",this,false);
}
GeoWidget.prototype.removeEvents=function(){
//thanks for Kevin advice on removing 'this' and handleEvent problem.
	if(this==null) return;
	if(this.node==null) return;
	this.node.removeEventListener("click",this,false);
	this.node.removeEventListener("mousedown",this,false);
	this.node.removeEventListener("mouseup",this,false);
	this.node.removeEventListener("mouseout",this,false);
	this.node.removeEventListener("mouseover",this,false);
	this.node.removeEventListener("mousemove",this,false);//this should've been removed when drag operation ends; just in case..
	this.node.removeEventListener("keypress",this,false); //this should've been removed when ENTER pressed on texfield; just in case..
}
GeoWidget.prototype.click=function(evt){}
GeoWidget.prototype.mousedown=function(evt){}
GeoWidget.prototype.mouseup=function(evt){}
GeoWidget.prototype.mouseout=function(evt){}
GeoWidget.prototype.mouseover=function(evt){}
GeoWidget.prototype.assignDefault=function(dprops){
	for (var prop in dprops){
		var value = dprops[prop];
		if(this[prop]==null) this[prop]=value;
	}
}

/*******************************
* 				BUTTON				 *
********************************/
function GeoButton(){
	var buttonprops	= ["x","y","width","height","name","value","label","icon","action","backcolor","forecolor","selcolor","overcolor","tag","align","adjust","clickable","tristate","bordersize"];
	assignProp(this,buttonprops,arguments[0]);
}
GeoButton.prototype.createNode=function(){
	this.assignDefault({name:"btnm",clickable:true,forecolor:"black",align:"middle",tristate:false,state:false,bordersize:"thin"});
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	this.buttonface= new GeoRect({name:"bf", x:0, y:0, width:this.width, height:this.height, backcolor:this.backcolor,selcolor:this.selcolor,overcolor:this.overcolor,clickable:this.clickable, bordered:true, bordertype:"outset",bordersize:this.bordersize,tristate:this.tristate});
	this.node.appendChild(this.buttonface.getNode());
	this.label=this.value;
	if (this.icon!=null) {
		this.buttonicon=createButtonIcon(this)
		this.node.appendChild(this.buttonicon);
	}else{
		if(this.label!=null){
			this.textnode=createTextNode(this)
			this.node.appendChild(this.textnode);
		}
	}
	this.addEvents();
}
GeoButton.prototype.click=function(evt){
	if(this.tristate) this.state=!this.state
   if(this.action) eval(this.action);
	if(!this.clickable) return;
}
GeoButton.prototype.mousedown=function(evt){
	if(!this.clickable) return;
	this.selected=true;
	this.setIconState(evt,"down");
	this.setTextState(evt,"down");
}
GeoButton.prototype.mouseup=function(evt){
	if(!this.clickable) return;
	this.selected=false;
	this.setIconState(evt,"up");
	this.setTextState(evt,"up");
}
GeoButton.prototype.mouseout=function(evt){
	if(!this.clickable) return;
	this.selected=false;
	this.setIconState(evt,"up");
	this.setTextState(evt,"up");
}
GeoButton.prototype.setValue=function(newvalue){
	this.value=newvalue
	if((this.textnode)||(this.textnode!=null)){
		this.label=newvalue
		this.textnode.getFirstChild().setData(newvalue);
	}
	if(this.adjust=="fit"){
		if((newvalue!="")||(newvalue!=null)) fitTextData(this.width,this.height,this.textnode)	
	}
	if(this.adjust=="trim"){
		if((newvalue!="")||(newvalue!=null)) trimTextData(this.width,this.textnode)
	}
}
GeoButton.prototype.getValue=function(){
	return this.value;
}
GeoButton.prototype.getLabel=function(){
	if((this.textnode)||(this.textnode!=null)) return this.textnode.getFirstChild().getData();
	return null;
}
GeoButton.prototype.setTextState=function(evt,state){
	if(this.textnode==null) return;
	var nts="translate(0,0)"
	if(state=="down"){
		nts="translate("+this.buttonface.bwidth/2.0+","+this.buttonface.bwidth/2.0+")";
	}
	this.textnode.setAttribute("transform",nts)
}
GeoButton.prototype.setIconState=function(evt,state){
	if(this.buttonicon==null) return;
	var nts="translate(0,0)"
	if(state=="down"){
		nts="translate("+this.buttonface.bwidth/2.0+","+this.buttonface.bwidth/2.0+")";
	}
	this.buttonicon.setAttribute("transform",nts)
}
var svgnsz = "http://www.w3.org/2000/svg";
var xlnsz = "http://www.w3.org/1999/xlink";
function createButtonIcon(obj){
	var buttonicon = svgdoc.createElementNS(svgnsz,"use");
	buttonicon.setAttribute("id","buttonicon");
	buttonicon.setAttribute("pointer-events","none");
	buttonicon.setAttributeNS(xlnsz,"href",obj.icon);
	buttonicon.setAttribute("x",0.05*obj.width);
	buttonicon.setAttribute("y",0.05*obj.height);
	buttonicon.setAttribute("width",0.9*obj.width);
	buttonicon.setAttribute("height",0.9*obj.height);
	return buttonicon;
}


/*******************************
* 				LABEL					 *
********************************/
function GeoLabel(){
	var labelprops	= ["x","y","width","height","name","value","action","forecolor","backcolor","opacity","overcolor","selcolor","align","adjust","selected","bordered","bordertype","bordersize"];
	assignProp(this,labelprops,arguments[0]);
}
GeoLabel.prototype.createNode=function(){
	this.assignDefault({name:"lbnm",selected:false,forecolor:"black",align:"middle"});
	this.node = svgdoc.createElement("g");
	this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	this.rect = new GeoRect({name:"lr", x:0, y:0, width:this.width, height:this.height, backcolor:this.backcolor,overcolor:this.overcolor,selcolor:this.selcolor,clickable:false, bordered:this.bordered, bordertype:this.bordertype,bordersize:this.bordersize,opacity:this.opacity});
	this.label=this.value;
	this.textnode = createTextNode(this)
	this.node.appendChild(this.rect.getNode());
	this.node.appendChild(this.textnode);
	this.addEvents();
}
GeoLabel.prototype.click=function(evt){
   if(this.action) eval(this.action);
	this.setSelected(true);
}
GeoLabel.prototype.mouseout=function(evt){
}
GeoLabel.prototype.mouseover=function(evt){
}
GeoLabel.prototype.setValue=function(newvalue){
	this.value=newvalue;
	this.label=this.value;
	this.textnode.getFirstChild().setData(this.value);
	if(this.adjust=="fit"){
		if((newvalue!="")||(newvalue!=null)) fitTextData(this.width,this.height,this.textnode)	
	}
	if(this.adjust=="trim"){
		if((newvalue!="")||(newvalue!=null)) trimTextData(this.width,this.textnode)
	}
}
GeoLabel.prototype.getValue=function(){
	return this.value
}
GeoLabel.prototype.getLabel=function(){
	if((this.textnode)||(this.textnode!=null)) return this.textnode.getFirstChild().getData();
	return null;
}
GeoLabel.prototype.setSelected=function(isSelected){
	this.selected=isSelected;
	if(isSelected)	{
		this.rect.select();
	}else{
		this.rect.unselect();
	}
}

/*******************************
* 				CHECKBOX				 *
********************************/
function GeoCheckBox(){
	var checkprops	= ["x","y","width","height","name","selected","value","action","forecolor","backcolor","opacity","offset"];
	assignProp(this,checkprops,arguments[0]);
}
GeoCheckBox.prototype.createNode=function(){
	this.assignDefault({name:"cbnm",offset:0.0,forecolor:"black",backcolor:"white"});
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+parseFloat(this.x+this.offset*this.width)+","+parseFloat(this.y+this.offset*this.height)+")";
   this.node.setAttribute("transform",tr);
	this.width =parseFloat((1.0-2.0*this.offset)*this.width);
	this.height=parseFloat((1.0-2.0*this.offset)*this.height);
	if(this.value) this.selected=this.value;
	this.outline=this.forecolor;
	this.strokewidth=0.1*this.height;
	this.checkMarker=this.createCheckMarker()
	this.node.appendChild(createGRectangle(this));
	this.node.appendChild(this.checkMarker);
	this.setValue(this.selected);
	this.addEvents();
}
GeoCheckBox.prototype.click=function(evt){
   if(this.action) eval(this.action);
}
GeoCheckBox.prototype.mousedown=function(evt){
	this.toggle();
}
GeoCheckBox.prototype.getValue=function(){
	return this.selected;
}
GeoCheckBox.prototype.setValue=function(ischecked){
	this.selected=ischecked
	ischecked ?	this.checkMarker.setAttribute("display","") : this.checkMarker.setAttribute("display","none");
}
GeoCheckBox.prototype.setSelected=function(isSelected){
	this.setValue(isSelected)
}
GeoCheckBox.prototype.toggle=function(){
	this.setValue(!this.selected)
}
GeoCheckBox.prototype.createCheckMarker=function(){
	var p = svgdoc.createElement("path");
	var pathdata ="M"+(0.2*this.width)+","+(0.5*this.height)+" L"+(0.5*this.width)+","+(0.8*this.height)+" "+(0.8*this.width)+","+(0.2*this.height)
   p.setAttribute("d",pathdata);
   p.setAttribute("id","checkmark");
	var thestyle = "fill:none;stroke:"+this.forecolor+";stroke-width:"+2.0*this.strokewidth+";pointer-events:none;"
	p.setAttribute("style",thestyle);
	return p;
}

/*******************************
* 			TEXTFIELD				 *
********************************/
function GeoTextField(){
	var textprops	= ["x","y","width","height","name","action","value","forecolor","backcolor","align","adjust","editable"];
	assignProp(this,textprops,arguments[0]);
}
GeoTextField.prototype.createNode=function(){
	this.assignDefault({name:"tfnm",forecolor:"black",backcolor:"white",editable:true,align:"left",adjust:"trim"});
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	this.outline="black";
	this.strokewidth=0.1*this.height;
	this.label=this.value;
	this.phrase="";
	this.rect = new GeoRect({name:"tr", x:0, y:0, width:this.width, height:this.height, clickable:false, bordered:true, bordertype:"inset",bordersize:"thin",backcolor:this.backcolor,lightborder:"#DDDDDD",opacity:1.0});
	this.textnode=createTextNode(this);
	this.node.appendChild(this.rect.getNode());
	this.node.appendChild(this.textnode);
	this.addEvents();
}
GeoTextField.prototype.click=function(evt){
	if(!this.editable) {
		if(this.action) eval(this.action);
		return;
	}
	if(evt.button!=0) return;
	this.textnode.getFirstChild().setData(this.getValue());
	if(thistf) stopBlink(evt);
	var theRoot = svgDocument.documentElement;
	theRoot.addEventListener("keypress",this,false);
	thistf=this;
	showBlinkCursor(evt);
}
var cursortimeout;
var thistf;
var doAlign=true;
function showBlinkCursor(evt){
	if(thistf==null) stopBlink(evt);
	if(cursortimeout) clearTimeout(cursortimeout);
	if(thistf.phrase.charAt(thistf.phrase.length-1)=="|"){
		doAlign=false;
		thistf.phrase=thistf.phrase.substring(0,thistf.phrase.length-1);
	}else{
		doAlign=true;
		thistf.phrase+="|";
	}
	thistf.setValue(thistf.phrase);
	cursortimeout=setTimeout( "showBlinkCursor()", 500)
}
function stopBlink(evt){
	if(cursortimeout) clearTimeout(cursortimeout);
	cursortimeout = null;
	if(thistf!=null) {
		var theRoot = svgDocument.documentElement;
		theRoot.removeEventListener("keypress",thistf,false);
		if(thistf.phrase.charAt(thistf.phrase.length-1)=="|"){
			thistf.phrase=thistf.phrase.substring(0,thistf.phrase.length-1);
		}
		thistf.setValue(thistf.phrase);
	}
	doAlign=true;
	thistf=null;
}
GeoTextField.prototype.lengthNotFit=function(){
	if(this.getValue()=="") return false;
	var tnlength=this.textnode.getComputedTextLength();
	if(tnlength>=(0.95*this.width)) return true;
	return false;
}
GeoTextField.prototype.keypress=function(evt){
	var key = evt.getCharCode();
	if(this.phrase.charAt(this.phrase.length-1)=="|"){
		this.phrase=this.phrase.substring(0,this.phrase.length-1);
	}
	if (key==8) {	//backspace
		if(this.phrase!="") {
			this.phrase=this.phrase.substring(0,this.phrase.length-1);
		}
		this.textnode.getFirstChild().setData(this.phrase)
	}else if((key==13)){				//returnkey
		var theRoot = svgDocument.documentElement;
		theRoot.removeEventListener("keypress",this,false);
		if(this.phrase.charAt(this.phrase.length-1)==" "){
			this.phrase=this.phrase.substring(0,this.phrase.length-1);
		}
		stopBlink(evt);
		this.textnode.getFirstChild().setData(this.phrase)
		if(this.action) eval(this.action);
	}else{
		if(this.lengthNotFit()) {
			var theRoot = svgDocument.documentElement;
			theRoot.removeEventListener("keypress",this,false);
			stopBlink(evt);
			return;
		}
		this.phrase+=String.fromCharCode(key);
		this.textnode.getFirstChild().setData(this.phrase)
	}; 
}
GeoTextField.prototype.alignText=function(){
	if(this.getValue()=="") return;
	if(!doAlign) return;
	var textpos=0.02*this.width;
	switch(this.align){
		case "middle":	textpos=0.5*this.width;		break;
		case "right":	textpos=0.95*this.width-this.textnode.getComputedTextLength();		break;
		default:		break;
	}
	this.textnode.setAttribute("x",textpos);
}
GeoTextField.prototype.getValue=function(){
	if(this.textnode==null) return "";
	if(this.textnode.getFirstChild()==null) return "";
	return this.textnode.getFirstChild().getData();
}
GeoTextField.prototype.setValue=function(newphrase){
	this.phrase=String(newphrase);
	this.textnode.getFirstChild().setData(this.phrase);
	this.alignText();
	if(this.adjust=="fit"){
		if((this.phrase!="")||(this.phrase!=null)) fitTextData(this.width,this.height,this.textnode)	
	}
	if(this.adjust=="trim"){
		if((this.phrase!="")||(this.phrase!=null)) trimTextData(this.width,this.textnode)
	}
}
/*******************************
* 				TABLE					 *
********************************/
function GeoTable(){
	var tableprops	= ["x","y","width","height","name","action","rowheight","row","column","columnmodel","title","titlemodel","data","coladjust","gap"];
	assignProp(this,tableprops,arguments[0]);
}
GeoTable.prototype.createNode=function(){
	this.assignDefault({name:"tbnm",gap:0.0,coladjust:"all",selectedCol:0,selectedRow:0,overRow:0,overCol:0});
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	var titlerows=0;
	if(this.rowheight==null) this.rowheight=this.getRowHeight();
	if(this.title!=null){
		titlerows=1;
		this.rowheight=this.getRowHeight();
		var titlecell=this.titlemodel;
		setWidgetLayout(titlecell,this.gap,this.gap,this.width-this.gap,this.rowheight)
		titlecell.value=this.title
		titlecell.align="middle"
		this.node.appendChild(titlecell.updateNode());
	}
	this.height=parseFloat(this.data[0].length*(this.rowheight+this.gap))
	this.GeoWidgets=new Array();
	var colxpos=this.gap;
	for(var col=0;col<this.columnmodel.length;col++){
		var cmcol=this.columnmodel[col];
		var colwidth=this.getColumnWidth(col)
		this.GeoWidgets[col]=new Array()
		for(var row=0;row<this.row;row++){
			var tname=this.name+"_"+col+"_"+row;
			var colypos=parseFloat(this.gap+(row+titlerows)*(this.rowheight+this.gap));
			var tvalue="";
			if(this.data[col][row]!=null)	tvalue=this.data[col][row];
			var tablecell = cmcol;
			setWidgetLayout(tablecell,colxpos,colypos,colwidth,this.rowheight);
			tablecell.value=tvalue;
			tablecell.name=tname;
			tablecell.caller=this;
			var acm ="this.caller.setSelectedColRow("+col+","+row+");";
			tablecell.action=acm;
			this.GeoWidgets[col][row]=tablecell.makeCopy();
			this.node.appendChild(this.GeoWidgets[col][row].updateNode());

			//var a = this.GeoWidgets[col][row].getNode();
			//a.addEventListener("mouseover",this.setOverColRow,false);
		}
		colxpos+=parseFloat(this.gap+colwidth);
	}
	this.addEvents();
}
GeoTable.prototype.setData=function(newdata){
	if((this.data.length!=newdata.length) || (this.data[0].length!=newdata[0].length) ){
		this.col=newdata.length;
		this.row=newdata[0].length;
		this.data=newdata;
		this.createNode();
	}else{
		this.data=newdata;
		for(var col=0;col<this.data.length;col++){
			for(var row=0;row<this.data[col].length;row++){
				this.setValue(col,row,this.data[col][row])
			}
		}
	}
}
GeoTable.prototype.setSelectedColRow=function(col,row){
	this.selectedCol=col;
	this.selectedRow=row;
}
GeoTable.prototype.setOverColRow=function(evt){
	//alert(evt.getTarget().getParentNode().getParentNode().getAttribute("id"))
	//this.overCol=col;
	//this.overRow=row;
}
GeoTable.prototype.getSelectedWidget=function(){
	return getGeoWidget(this.selectedCol,this.selectedRow);
}
GeoTable.prototype.click=function(evt){
   if(this.action) eval(this.action);
}
GeoTable.prototype.getGeoWidget=function(col,row){
	return this.GeoWidgets[col][row];
}
GeoTable.prototype.getValue=function(col,row){
	var gl = this.getGeoWidget(col,row);
	if(gl==null) return null;
	return gl.getValue();
}
GeoTable.prototype.setValue=function(col,row,newvalue){
	var gl = this.getGeoWidget(col,row);
	if(gl==null) return;
	gl.setValue(newvalue);
}
GeoTable.prototype.getRowHeight=function(){
	var actualrows=this.row
	if(this.title) actualrows=this.row+1;
	var rh=parseFloat((this.height-this.gap*this.row)/actualrows);
	return rh;
}
GeoTable.prototype.getColumnWidthFraction=function(col){
	if ((this.maxl==null)||(this.maxc==null)) {
		this.maxl=0.0;
		this.maxc=new Array();
		for(var c=0;c<this.data.length;c++){
			this.maxc[c]=0.0
			for(var row=0;row<this.data[c].length;row++){
				var val = String(this.data[c][row])
				this.maxc[c]=Math.max(this.maxc[c],val.length);
			}
			this.maxl+=this.maxc[c]
		}
	}
	return parseFloat(this.maxc[col]/this.maxl);
}
GeoTable.prototype.getColumnWidth=function(col){
	if (this.column==1) this.coladjust="all";
	var colwidth=0;
	var remaincols=this.column-1;
	switch(this.coladjust){
		case "all":
			colwidth=parseFloat((this.width-this.gap*(remaincols))/this.column);
			break;
		case "auto":
			var remainwidth=parseFloat(this.width-this.gap*(remaincols))
			colwidth=remainwidth*this.getColumnWidthFraction(col);
			break;
		case "first":
			var cmfirst=this.columnmodel[0];
			if(remaincols<1) remaincols=1;
			var rightwidth= parseFloat((this.width-this.gap-cmfirst.width))
			colwidth=parseFloat((rightwidth-this.gap*(remaincols))/(remaincols));
			if(col==0) colwidth=cmfirst.width;
			break;
		case "last":
			var cmlast=this.columnmodel[this.columnmodel.length-1]
			if(remaincols<1) remaincols=1;
			var leftwidth= parseFloat((this.width-this.gap-cmlast.width))
			colwidth=parseFloat((leftwidth-this.gap*(remaincols))/(remaincols));
			if(col==remaincols) colwidth=cmlast.width;
			break;
		default :
			colwidth=parseFloat((this.width-this.gap*(remaincols))/(this.column)); break;
	}
	return colwidth;
}


/*******************************
* 				LISTBOX				 *
********************************/
function GeoListBox(){
	var listprops	= ["x","y","width","height","name","selindex","action","listmodel","listdata","selcolor"];
	assignProp(this,listprops,arguments[0]);
}
GeoListBox.prototype.createNode=function(){
	this.assignDefault({name:"ltbnm",forecolor:"black",selcolor:"#99CCFF",selindex:0});
	var listrow=this.listdata.length;
	var thedata=[this.listdata];
	var lmodel=[this.listmodel];
	this.backcolor=this.listmodel.backcolor;
	this.listmodel.selcolor=this.selcolor;
	this.GeoTable = new GeoTable({gap:0,name:this.name,x:this.x, y:this.y, width:this.width, height:this.height, row:listrow, column:1, columnmodel:lmodel,data:thedata, coladjust:"all"});
	var thenode=this.GeoTable.getNode();
	this.node=thenode;
	this.outline="none";
	this.strokewidth=parseFloat(0.01*this.width);
	this.rect=createGRectangle(this)
	this.node.insertBefore(this.rect,thenode.getFirstChild());
	this.outline="black";
	this.boxborder=createGRectangle(this)
	this.boxborder.setAttribute("fill","none");
	this.node.appendChild(this.boxborder)
	this.addEvents();
	this.initSelection();
}
GeoListBox.prototype.setListData=function(newdata){
	this.listdata=newdata;
	this.selindex=0;
	this.initSelection();
}
GeoListBox.prototype.click=function(evt){
	this.selindex=this.GeoTable.selectedRow;
   if(this.action) eval(this.action);
}
GeoListBox.prototype.getValue=function(idx){
	var wgt = this.GeoTable.getGeoWidget(this.GeoTable.column-1,idx)
	return wgt.getValue(wgt.getNode());
}
GeoListBox.prototype.initSelection=function(){
	if(this.selindex==null) this.selindex=0;
	for(var i=0;i<this.listdata.length;i++){
		var wgt = this.GeoTable.getGeoWidget(this.GeoTable.column-1,i)
		if(this.selindex==i) {
			wgt.setSelected(true);
		}else{
			wgt.setSelected(false);
		}
	}
}

/*******************************
* 			CHECKEDLISTBOX			 *
********************************/
function GeoMultiListBox(){
	var chekedlistprops = ["x","y","width","height","name","selindices","action","listmodel","listdata"];
	assignProp(this,chekedlistprops,arguments[0]);
}
GeoMultiListBox.prototype.createNode=function(){
	this.assignDefault({name:"clbnm"});
	var listrow=this.listdata.length;
	var gcbh=parseFloat(this.height/listrow);
	var gcbdata=this.getSelectedRowsData();
	var gcb = new GeoCheckBox({name:"gcb",x:0, y:0, width:gcbh, height:gcbh, offset:0.15, action:"", forecolor:this.listmodel.forecolor,backcolor:this.listmodel.backcolor,opacity:this.listmodel.opacity})
	var thedata=[gcbdata,this.listdata];
	var lmodel=[gcb,this.listmodel];
	var colnumber=2
	this.GeoTable = new GeoTable({gap:0,name:this.name,x:this.x, y:this.y, width:this.width, height:this.height, row:listrow, column:2, columnmodel:lmodel,data:thedata, coladjust:"first"});
	var thenode=this.GeoTable.getNode();
	this.backcolor=this.listmodel.backcolor;
	this.outline="none";
	this.strokewidth=parseFloat(0.00*this.width);
	this.clickedRow = 0;
	this.node=thenode;
	this.opacity=this.listmodel.opacity
	this.rect=createGRectangle(this)
	this.node.insertBefore(this.rect,thenode.getFirstChild());
	this.addEvents()
}
GeoMultiListBox.prototype.click=function(evt){
	if(this.GeoTable.selectedCol!=0)	this.toggleSelected();
	this.clickedRow=this.GeoTable.selectedRow;
   if(this.action) eval(this.action);
}
GeoMultiListBox.prototype.setListData=function(newdata){
	if(newdata==null) return;
	var checkarray=new Array();
	for(var i=0;i<newdata.length;i++){
		checkarray[i]=false;
	}
	this.listdata=newdata;
	var tabledata=[checkarray,newdata];
	this.setSelectedIndices(new Array());
}
GeoMultiListBox.prototype.toggleSelected=function(){
	this.selectedRow=this.GeoTable.selectedRow
	var wgt = this.GeoTable.getGeoWidget(0,this.selectedRow)
	var wval= wgt.toggle();
	this.updateSelectedIndices();
}
GeoMultiListBox.prototype.isIndexSelected=function(idx){
	var wgt = this.GeoTable.getGeoWidget(0,idx)
	if(!wgt) return false;
	return wgt.getValue();
}
GeoMultiListBox.prototype.getSelectedIndices=function(){
	return this.selindices;
}
GeoMultiListBox.prototype.getSelectedValues=function(){
	var valarray=new Array();
	for(var i=0;i<this.listdata.length;i++){
		if(this.isIndexSelected(i)) valarray[valarray.length]=this.listdata[i]
	}
	return valarray;
}
GeoMultiListBox.prototype.setSelectedIndices=function(indicesarray){
	if(indicesarray==null) return;
	this.selindices=indicesarray;
	for(var i=0;i<this.listdata.length;i++){
		var wgt = this.GeoTable.getGeoWidget(0,i);
		if(wgt==null) continue;
		wgt.setValue(false);
		for(var j=0;j<indicesarray.length;j++){
			if(this.selindices[j]==i) wgt.setValue(true);
		}
	}
}
GeoMultiListBox.prototype.updateSelectedIndices=function(){
	var selarray=new Array()
	for(var i=0;i<this.listdata.length;i++){
		if(this.isIndexSelected(i)) selarray[selarray.length]=i
	}
	this.selindices=selarray;
}
GeoMultiListBox.prototype.getSelectedRowsData=function(){
	var sr = new Array();
	if( (this.selindices==null)||(this.selindices.length==0)) return;
	for(var i=0;i<this.listdata.length;i++){
		sr[i]=false;
		for(var j=0;j<this.selindices.length;j++){
			if(this.selindices[j]==i) sr[i]=true;
		}
	}
	return sr;
}

/*******************************
* 				COMBOBOX				 *
********************************/
function GeoComboBox(){
	var comboprops	= ["x","y","width","height","name","index","action","forecolor","backcolor","align","adjust","visiblerows","selindex","listdata","editable"];
	assignProp(this,comboprops,arguments[0]);
}
GeoComboBox.prototype.createNode=function(){
	this.assignDefault({name:"cbnm",selindex:0,editable:false,visiblerows:5,adjust:"fit"});
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	var downbutton = new GeoButton({name:"dancuk",action:null,icon:"#droparrow"});
	setWidgetLayout(downbutton,(this.width-this.height),0,this.height,this.height);
	var txgstr="";
	if(this.listdata[this.selindex]) txgstr=""+this.listdata[this.selindex];
	this.textfield = new GeoTextField({name:"txg", value:txgstr, forecolor:"black", backcolor:"white",editable:this.editable,adjust:this.adjust});
	if((this.editable)&&(this.action!=null)) this.textfield.action = this.action;
	setWidgetLayout(this.textfield,0,0,(this.width-(this.height*1.05)),this.height);

	downbutton.caller=this;
	downbutton.action="this.caller.toggleScrollList()";
	this.textfield.caller=this;
	if(!this.editable) this.textfield.action="this.caller.toggleScrollList()";

	this.textfieldnode=this.textfield.getNode()
	this.node.appendChild(this.textfieldnode);
	this.node.appendChild(downbutton.getNode());
	this.textnode=this.textfield.textnode;
	this.scrollgroup=null;
	this.addEvents();
}
GeoComboBox.prototype.click=function(evt){
	//this.toggleScrollList();
   //if(this.action) eval(this.action); //moved to listbox action + index changed 
}
GeoComboBox.prototype.getValue=function(){
	return this.textfield.getValue()
}
GeoComboBox.prototype.setSelectedIndex=function(newindex){
	var newdata = this.listdata[newindex];
	var txgstr="";
	if(this.listdata[newindex]==null) return;
	this.selindex=newindex;
	var av = this.listdata[newindex]
	this.textfield.setValue(av)
	if(this.action) eval(this.action)
}
GeoComboBox.prototype.getSelectedIndex=function(){
	return this.selindex;
}
GeoComboBox.prototype.updateSelectedIndex=function(){
	this.setSelectedIndex(this.listbox.selindex);
}
GeoComboBox.prototype.setListData=function(newdata){
	this.listdata=newdata;
	this.setSelectedIndex(0);
}
GeoComboBox.prototype.listClick=function(){
	var oldindex=this.selindex;
	this.updateSelectedIndex();
	this.setScrollGroup();
	if(this.action) {
	//	if(this.selindex!=oldindex) eval(this.action);
	}
}
GeoComboBox.prototype.toggleScrollList=function(){
	this.setScrollGroup();
	if(this.scrollgroup==null) return;
	if(this.listdata.length==0) return;
	var rc=this.visiblerows;
	var noscroll=false
	if(this.listdata.length<rc) {
		rc = this.listdata.length;
		noscroll=true
	}
	var lbh=this.listdata.length*this.height;
	var listmdl=new GeoLabel({name:"anjing", forecolor:"black", backcolor:"white", opacity:1.0 , overcolor:"#CCFFFF", align:"left",adjust:"fit"});
	this.listbox = new GeoListBox({name:"glb", listmodel:listmdl, selindex:this.selindex, listdata:this.listdata});
	setWidgetLayout(this.listbox,0,0,(this.width-this.height),lbh)
	this.listbox.caller=this;
	this.listbox.action="this.caller.listClick()";
	if(noscroll){
		setWidgetLayout(this.listbox,this.x,(this.y+(this.height*1.075)),(this.width-this.height),lbh)
		this.scrollgroup.appendChild(this.listbox.getNode());
		return;
	}
	this.scrollpane= new GeoScrollPane({name:"gsp",scrollsize:this.height})
	setWidgetLayout(this.scrollpane,this.x,(this.y+(this.height*1.075)),this.width,parseFloat(rc*this.height))
	this.scrollpane.setContent(this.listbox);
	this.scrollgroup.appendChild(this.scrollpane.getNode());
	if(this.listbox.selindex>2){
		var selindexscroll=parseFloat(this.listbox.height*(this.listbox.selindex-1)/this.listdata.length)
		this.scrollpane.setScrollPos(selindexscroll)
	}
}
GeoComboBox.prototype.setScrollGroup=function(){
	var vpe = this.node.getViewportElement();
	if (vpe==null) return null;
	var sg = vpe.getElementById("scrollergroup");
	if (sg){
		var sgp = sg.getParentNode();
		sgp.removeChild(sg);
		this.scrollgroup=null;
	}else{
		this.scrollgroup=svgdoc.createElement("g");
		this.scrollgroup.setAttribute("id","scrollergroup");
		vpe.appendChild(this.scrollgroup);
	}
}
GeoComboBox.prototype.removeScrollGroup=function(){
	if(this.scrollgroup==null) return;
	var sgp = this.scrollgroup.getParentNode();
	if(sgp) sgp.removeChild(this.scrollgroup);
	this.scrollgroup=null;
}

/*******************************
* 			SCROLLPANE				 *
********************************/
function GeoScrollPane(){
slidetime=null;slideRange=null;slidePos=null;
	var scrollprops	= ["x","y","width","height","scrollsize","name","action"];
	assignProp(this,scrollprops,arguments[0]);
}
GeoScrollPane.prototype.createNode=function(){
	this.assignDefault({name:"spnm",scrollsize:0.15*this.width,innerY:0.0,innerHeight:0.1});
	this.node = svgdoc.createElement("svg");
	setLayout(this.node,this.x,this.y,this.width,this.height);
	this.outerSVG=this.node;
   this.node.setAttribute("id",this.name);
	this.innerSVG = svgdoc.createElement("svg");
   this.innerSVG.setAttribute("id","innerSVG");
   this.innerSVG.setAttribute("preserveAspectRatio","none");
	this.node.appendChild(this.innerSVG)
	setLayout(this.innerSVG,"0","0","1","1");
	var scrollx = this.width-this.scrollsize;
	var upbutton = new GeoButton({name:"bup", x:scrollx, y:0,width:this.scrollsize,height:this.scrollsize, action:null,icon:"#uparrow"});
	var downbutton = new GeoButton({name:"bdown", x:scrollx, y:this.height-this.scrollsize,width:this.scrollsize,height:this.scrollsize, action:null,icon:"#droparrow"});
	this.slidebutton = new GeoButton({name:"bslide", x:scrollx, y:this.scrollsize,width:this.scrollsize,height:0.2*this.height, action:null,clickable:false});
	var tsb = new GeoRect({name:"slideback", x:scrollx, y:this.scrollsize, width:this.scrollsize, height:this.height-2.0*this.scrollsize, backcolor:"#CCCCCC",clickable:false, bordered:false});
	this.slideback=tsb.getNode();
	this.slideRange=this.height-2.0*this.scrollsize;
	this.sliderHeight=0.2*this.height;
	this.ub = upbutton.getNode();
	this.db = downbutton.getNode();
	this.sb = this.slidebutton.getNode();
	this.node.appendChild(this.ub);
	this.node.appendChild(this.db);
	this.node.appendChild(this.slideback);
	this.node.appendChild(this.sb);
	this.addEvents();
}
GeoScrollPane.prototype.setContent = function(obj) {
	if(this.node==null) this.createNode();
	obj.x=0;
	obj.y=0;
	obj.width=this.width-1.1*this.scrollsize;		//should remove this for horz scroll in the future
	setLayout(this.innerSVG,0,0,obj.width,obj.height);
	this.innerHeight=obj.height;
	clearchilds(this.innerSVG);
	if(this.innerSVG) this.innerSVG.appendChild(obj.updateNode());
}
GeoScrollPane.prototype.setContentNode = function(anode,x,y,w,h) {
	if(!anode) return;
	setLayout(this.innerSVG,x,y,w,h);
	this.innerHeight=h;
	if(this.innerSVG) {
		clearchilds(this.innerSVG);
		this.innerSVG.appendChild(anode);
	}
}

GeoScrollPane.prototype.mousedown = function(evt) {
	var t = evt.getTarget();
	var p = t.getParentNode();
	var gp= p.getParentNode();
	switch(gp){
		case this.ub:
			this.buttonScroll(-1,1)
			break;
		case this.db:
			this.buttonScroll(1,1)
			break;
		case this.sb:
			this.startDrag(evt);
			break;
		default:
			if(p==this.slideback){
				this.backScroll(evt)
			}
			break;
	}
}
GeoScrollPane.prototype.mouseup = function(evt) {
	var t = evt.getTarget();
	var p = t.getParentNode();
	var gp= p.getParentNode();
	switch(gp){
		case this.ub:
			this.stopScroll(evt);
			break;
		case this.db:
			this.stopScroll(evt);
			break;
		case this.sb:
			this.stopDrag(evt);
			break;
		default:
			if(p==this.slideback){
				this.stopDrag(evt);
			}
			break;
	}
}
GeoScrollPane.prototype.backScroll = function(evt){
	var maxslide = parseFloat(this.innerHeight-this.height);
	var halfslide = 0.5*maxslide;
	var curSlide=(-this.innerY);
	var newpos=maxslide;
	if(curSlide<halfslide){
		newpos=maxslide;
	}else{
		newpos=0;
	}
	this.setScrollPos(newpos)
}

var slidetime,lastDragPosY,slidePos;
var isDrag=false;
GeoScrollPane.prototype.buttonScroll = function(type,incr){
	var stepsize=0.1;
	var offy=parseFloat(this.innerHeight*incr*stepsize);
	var newpos = type*offy-this.innerY;
	this.setScrollPos(newpos);
	if(slidetime) clearTimeout(slidetime)
	if(type<0) {
		curthis=this;
		slidetime = setTimeout( "repeatScroll(-1,3)", incr*200 )
	}else{
		curthis=this;
		slidetime = setTimeout( "repeatScroll(1,3)", incr*200 )
	}
}

var curthis = null;
function repeatScroll(type,incr){
	if(curthis==null) return;
	var stepsize=0.1;
	var offy=parseFloat(curthis.innerHeight*incr*stepsize);
	var newpos = type*offy-curthis.innerY;
	curthis.setScrollPos(newpos);
	if(slidetime) clearTimeout(slidetime)
	if(type<0) {
		slidetime = setTimeout( "repeatScroll(-1,3)", incr*100 )
	}else{
		slidetime = setTimeout( "repeatScroll(1,3)", incr*100 )
	}
}

GeoScrollPane.prototype.stopScroll = function(evt){
	if( slidetime ) clearTimeout( slidetime )
	curthis=null;
	slidetime = null;
}
GeoScrollPane.prototype.setScrollPos=function( newpos ){
	var maxslide = parseFloat(this.innerHeight-this.height);
	if( newpos < 0 )	{
		newpos=0;
		this.stopScroll(evt);
	}else if( newpos > maxslide){
		this.stopScroll(evt);
		newpos=maxslide;
	}
	slidePos = newpos;
	this.innerY=(-slidePos)
	setLayout(this.innerSVG,null,this.innerY,null,null)
	var ntsx=parseFloat(this.width-this.scrollsize);
	var ntsy=parseFloat(this.scrollsize+slidePos*(this.slideRange-this.sliderHeight)/maxslide);
	if((this.innerHeight==this.height)||(ntsy<this.scrollsize)) ntsy=this.scrollsize;
	var nts = 'translate(' + ntsx +',' + ntsy+')';
	if(this.sb) this.sb.setAttribute('transform',nts)
}

GeoScrollPane.prototype.startDrag=function(evt){
	isDrag = true;
	lastDragPosY = evt.clientY;
	slidePos = -1.0*this.innerY
	this.sb.setAttribute("pointerEvents","none");
	this.slideback.addEventListener("mousemove",this,false);
}
GeoScrollPane.prototype.mousemove=function(evt){
	if(!isDrag)	return;
	var newy = evt.clientY;
	if(newy==lastDragPosY) return;
	var dragOffset = parseFloat(newy-lastDragPosY)
	lastDragPosY+= dragOffset;
	var maxslide = parseFloat(this.innerHeight-this.height);
	this.setScrollPos( parseFloat(slidePos+dragOffset*maxslide/this.slideRange) )
}
GeoScrollPane.prototype.stopDrag=function(evt){
	isDrag = false;
	if(this.slideback) this.slideback.removeEventListener("mousemove",this,false);
	if(this.sb) this.sb.setAttribute("pointerEvents","all");
}


/*******************************
* 			RECTANGLE				 *
********************************/
function GeoRect(){
	var rectprops	= ["x","y","width","height","name","action","clickable","bordered","bordertype","bordersize","darkborder","lightborder","backcolor","overcolor","selcolor","opacity","outline","tristate"];
	assignProp(this,rectprops,arguments[0]);
}
GeoRect.prototype.createNode=function(){
	this.assignDefault({name:"rcnm",tristate:false,state:false,clickable:true,opacity:1.0,bwidth:0.0,backcolor:"#CCCCCC",lightborder:"#EEEEEE",darkborder:"#666666"});
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	var minsize = Math.min(this.width,this.height);
	if(this.bordered){
		if(isNaN(parseFloat(this.bordersize))) {
			this.bwidth = parseFloat(minsize*0.1);
			if(this.borderwidth=="thick") this.bwidth = parseFloat(minsize*0.2)
		}else{
			this.bwidth = parseFloat(this.bordersize);
		}
		if(this.bordertype!="solid"){
			this.upperborder=this.createUpperBorder();
			this.lowerborder=this.createLowerBorder();
			this.node.appendChild(this.upperborder);
			this.node.appendChild(this.lowerborder);
		}
	}
	this.background = this.createBackground();
	this.node.appendChild(this.background);
	if(this.outline!=null){
		this.outlinenode=this.createOutline(minsize*0.03);
		this.node.appendChild(this.outlinenode);
	}
	this.addEvents();
}
GeoRect.prototype.click=function(evt){
	if(this.tristate) {
		if(this.state){
			this.up(evt);
			this.unselect();
		}else{
			this.down(evt);
			this.select();
		}
		this.state=(!this.state);
	}
	if(this.action) eval(this.action);
}
GeoRect.prototype.mousedown=function(evt){
	if(!this.tristate) this.down(evt)
}
GeoRect.prototype.mouseup=function(evt){
	if(!this.tristate) this.up(evt)
}
GeoRect.prototype.mouseover=function(evt){
	this.over(evt)
}
GeoRect.prototype.mouseout=function(evt){
	if((this.tristate)&&(this.state)) return;
	this.out(evt)
}
GeoRect.prototype.up=function(evt){
	if((!this.clickable)||(this.upperborder==null)||(this.lowerborder==null)) return;
	this.upperborder.setAttribute("fill",this.lightborder);
	this.lowerborder.setAttribute("fill",this.darkborder);
}
GeoRect.prototype.down=function(evt){
	if((!this.clickable)||(this.upperborder==null)||(this.lowerborder==null)) return;
	this.upperborder.setAttribute("fill",this.darkborder);
	this.lowerborder.setAttribute("fill",this.lightborder);
}
GeoRect.prototype.over=function(evt){
	if((this.background==null)|| (this.overcolor==null) ) return;
	if(this.background.getAttribute("fill")==this.selcolor) return;
	this.background.setAttribute("fill-opacity","1.0")
	this.background.setAttribute("fill",this.overcolor)
}
GeoRect.prototype.out=function(evt){
	this.up(evt);
	if(this.background==null) return;
	if(this.background.getAttribute("fill")==this.selcolor) return;
	this.background.setAttribute("fill-opacity",this.opacity)
	if(this.backcolor) this.background.setAttribute("fill",this.backcolor);
}
GeoRect.prototype.select=function(){
	if( (this.background==null)||(this.selcolor==null) ) return;
	this.background.setAttribute("fill-opacity","1.0")
	this.background.setAttribute("fill",this.selcolor)
}
GeoRect.prototype.unselect=function(){
	if( (this.background==null)||(this.selcolor==null) ) return;
	this.background.setAttribute("fill-opacity",this.opacity)
	this.background.setAttribute("fill",this.backcolor)
}
GeoRect.prototype.createOutline=function(olwidth){
	var r = svgdoc.createElement("rect");
	setLayout(r,0,0,this.width,this.height);
	r.setAttribute("stroke",this.outline);
	r.setAttribute("stroke-width",olwidth);
	r.setAttribute("fill","none");
	return r;
}
GeoRect.prototype.createBackground=function(){
	var r = svgdoc.createElement("rect");
	if(this.bordered){
		setLayout(r,this.bwidth,this.bwidth,parseFloat(this.width-2.0*this.bwidth),parseFloat(this.height-2.0*this.bwidth));
	}else{
		setLayout(r,0,0,this.width,this.height);
	}
	r.setAttribute("stroke","none")
	if(this.bordertype=="solid"){
		setLayout(r,0,0,this.width,this.height);
		r.setAttribute("stroke",this.darkborder);
		r.setAttribute("stroke-width",this.bwidth);
	}
	r.setAttribute("fill",this.backcolor)
	if(this.opacity!=null) r.setAttribute("fill-opacity",this.opacity);
	return r;
}
GeoRect.prototype.createUpperBorder=function(){
	var p = svgdoc.createElement("path");
	var bcolor = this.lightborder
	if(this.bordertype=="inset") bcolor = this.darkborder;
	p.setAttribute("fill",bcolor);
	p.setAttribute("stroke","none");
	var bright=parseFloat(this.width-this.bwidth)
	var blower=parseFloat(this.height-this.bwidth)
	var pd = "M0,0 L0,"+this.height+" "+ this.bwidth+","+blower+" "+bright+","+this.bwidth +" "+this.width+",0 z";
	p.setAttribute("d",pd)
	return p;
}
GeoRect.prototype.createLowerBorder=function(){
	var p = svgdoc.createElement("path");
	var bcolor = this.darkborder
	if(this.bordertype=="inset") bcolor = this.lightborder;
	p.setAttribute("fill",bcolor);
	p.setAttribute("stroke","none");
	var bright=parseFloat(this.width-this.bwidth)
	var blower=parseFloat(this.height-this.bwidth)
	var pd = "M0,"+this.height+" L"+ this.bwidth+","+blower+" "+bright+","+this.bwidth +" "+this.width+",0 "+this.width+","+this.height+" z";
	p.setAttribute("d",pd)
	return p;
}

/*******************************
* 			Column CHART			 *
********************************/
function columnChart(){
	var chcolprops	= ["x","y","width","height","name","title","action","colsize","columnmodel","chartdata","ordered","direction","backcolor","colortype","colorlow","colorhi"];
	assignProp(this,chcolprops,arguments[0]);
}
columnChart.prototype.createNode=function(){
	this.assignDefault({name:"cch",currentIndex:0,gap:0.0,titlesize:0.075,colsize:"auto",direction:"horizontal",ordered:true,colortype:"ramp",colorlow:"#FFFFCC",colorhi:"#663333"});
	this.effH=(1.0-2.0*this.titlesize)*this.height
	this.effW=this.width
	this.node = svgdoc.createElement("g");
   this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	this.createColumns();
	this.addLabel();
	this.addEvents();
}
columnChart.prototype.addLabel=function(){
	this.label = new GeoLabel({x:0, y:0, width:this.width, height:this.titlesize*this.height, value:this.title, forecolor:"#CCFFFF", backcolor:"#66CCFF",opacity:0, overcolor:"#003399",align:"middle",adjust:"fit"});
	this.label2 = new GeoLabel({x:0, y:this.titlesize*this.height, width:this.width, height:this.titlesize*this.height, value:"", forecolor:"#CCFFFF", backcolor:"#66CCFF",opacity:0, overcolor:"#003399",align:"middle",adjust:"fit"});
	this.node.appendChild(this.label.getNode());
	this.node.appendChild(this.label2.getNode());
}
columnChart.prototype.createColumns=function(){
	this.doMinMax();
	this.doZeroAxis();
	for(var i=0;i<this.chartdata.length;i++){
		if(this.direction=="horizontal"){
			var clength = this.effH*Math.abs(this.chartdata[i][0]/this.maxlength);
			var cx =i*this.columnsize+this.gap
			var cy=this.zeroaxis-clength
			if(this.chartdata[i][0]<0) cy=this.zeroaxis
			var cw=this.columnsize;
			var ch=clength;
		}else{
			var clength = this.effW*Math.abs(this.chartdata[i][0]/this.maxlength);
			var cy =i*this.columnsize+this.gap+2.0*this.titlesize*this.height
			var cx=this.zeroaxis;
			if(this.chartdata[i][0]<0) cx=this.zeroaxis-clength;
			var cw=clength;
			var ch=this.columnsize;
		}
		var clm = this.columnmodel.makeCopy()
		setWidgetLayout(clm,cx,cy,cw,ch);
		clm.name=i;
		clm.id=this.chartdata[i][2];
		if(this.colortype=="ramp") clm.backcolor = this.createRampColor(this.chartdata[i][0])
		if(this.colortype=="random") clm.backcolor = this.createRandomColor();
		clm.caller=this
		this.node.appendChild(clm.updateNode());
		clm.getNode().addEventListener("mouseover",clm.caller.mouseover,false)
		clm.getNode().addEventListener("mouseout",clm.caller.mouseout,false)
	}
}
columnChart.prototype.click=function(evt){
	if(this.action) eval(this.action);
}
columnChart.prototype.mouseover=function(evt){
	var nodid = evt.getTarget().getParentNode().getAttribute("id")
	if(isNaN(parseInt(nodid))) return;
	var idx = parseInt(nodid);
	if(this.chartdata==null) return;
	if(this.chartdata[idx]==null) return;
	var str = this.chartdata[idx][1]+" : "+this.chartdata[idx][0]
	if(this.label2) this.label2.setValue(str);
	this.currentIndex=idx;
}
columnChart.prototype.mouseout=function(evt){}
columnChart.prototype.doMinMax=function(){
	if(this.ordered){
		this.chartdata = sortArray(this.chartdata,0);
		this.minimum = this.chartdata[0][0];
		this.maximum = this.chartdata[this.chartdata.length-1][0];
	}else{
		this.minimum = 10E10; this.maximum=-10E10;
		for (var i=0;i<this.chartdata.length;i++){
			this.minimum = Math.min(this.chartdata[i][0],this.minimum);
			this.maximum = Math.max(this.chartdata[i][0],this.maximum);
		}
	}
	this.maxrange=this.maximum-this.minimum;
}
columnChart.prototype.doZeroAxis=function(){
	if( isNaN(parseFloat(this.colsize)) ) this.colsize="auto";
	this.columnsize=this.colsize;
	var cdl=this.chartdata.length;
	if(this.colsize=="auto") {
		var chartsize = this.effH
		if(this.direction=="horizontal")	chartsize = this.effW
		this.columnsize=parseFloat((chartsize-cdl*this.gap)/cdl);
	}else{
		if(this.colsize=="usemodel") {
			this.columnsize=parseFloat(this.columnmodel.width);
		}else{
			this.columnsize=parseFloat(this.colsize);
		}
		if(this.direction=="horizontal")	{
			this.width=cdl*(this.columnsize+this.gap)
		}else{
			this.height=cdl*(this.columnsize+this.gap)*(1.0+2.0*this.titlesize)
		}
	}
	if(this.minimum>=0) {
		this.zeroaxis=0;
		if(this.direction=="horizontal") this.zeroaxis=this.height;
		this.maxlength=this.maximum
	}else if(this.maximum<0){
		this.zeroaxis=this.width;
		if(this.direction=="horizontal") this.zeroaxis=0;
		this.maxlength=Math.abs(this.minimum);
	}else{
		this.zeroaxis=this.height*Math.abs(this.maximum/this.maxrange);
		if(this.direction=="horizontal") this.zeroaxis=this.width*Math.abs(this.maximum/this.maxrange);
		this.maxlength=this.maxrange
	}
}
columnChart.prototype.createRandomColor=function(){
	var rgb=makeColorString(255*Math.random(),255*Math.random(),255*Math.random());
	return rgb;
}
columnChart.prototype.createRampColor=function(value){
	var value=Math.abs(value-this.minimum)
	if(this.colorlow.indexOf("#")>-1) this.colorlow = fromHexColor(this.colorlow);
	if(this.colorhi.indexOf("#")>-1) this.colorhi = fromHexColor(this.colorhi);
	var rgb1 = (this.colorlow.substring(4,this.colorlow.length-1)).split(',');
	var rgb2 = (this.colorhi.substring(4,this.colorhi.length-1)).split(',');
	var rc=parseInt(rgb1[0])+(parseInt(rgb2[0])-parseInt(rgb1[0]))*(value/this.maxrange);
	var gc=parseInt(rgb1[1])+(parseInt(rgb2[1])-parseInt(rgb1[1]))*(value/this.maxrange);
	var bc=parseInt(rgb1[2])+(parseInt(rgb2[2])-parseInt(rgb1[2]))*(value/this.maxrange);
	return makeColorString(rc,gc,bc);
}

/*******************************
* 				WINDOW				 *
********************************/
function GeoWindow(){
	var winprops	= ["x","y","width","height","name","title"];
	assignProp(this,winprops,arguments[0]);
}
GeoWindow.prototype.createNode=function(){
	var gwg = svgdoc.getElementById("geoWin");
	var gwb = svgdoc.getElementById("windowcover");
	this.assignDefault({name:"gw",title:"GeoClient",opacity:0.7,y:30.0,parent:gwg,cover:gwb,isshow:false,winLastX:0,winLastY:0,winDrag:false});
	this.node=svgdoc.createElement("g");
	this.node.setAttribute("id",this.name);
	var tr = "translate("+this.x+","+this.y+")";
   this.node.setAttribute("transform",tr);
	this.widgets=new Array();
	this.winbar = this.createWinbar();
	this.winbuttons = this.createWinButtons();
	this.wintitle=this.createWinTitle();
	this.winback = this.createWinBack();
	this.panel = this.createWinPanel();
	this.addEvents();
}
GeoWindow.prototype.createWinbar=function(){
	var winbar=svgdoc.createElement("rect");
	this.winbarh=0.03*getInnerHeight();
	//if(this.width<(2.85*this.winbarh)) this.width=2.85*this.winbarh;
	if(this.width<(2.85*this.winbarh)) this.width=4.0*this.winbarh;
	if(this.height<(1.01*this.winbarh)) this.height=1.01*this.winbarh;
	setLayout(winbar,0,0,this.width,this.winbarh);
	winbar.setAttribute("fill","url(#bargrad)");
	winbar.setAttribute("style","stroke:black;stroke-width:0.1");
	return this.node.appendChild(winbar);
}
GeoWindow.prototype.createWinButtons=function(){
	var bg=svgdoc.createElement("g");
	var cbsize = 0.7*this.winbarh;
	var cbmarg = 0.5*(this.winbarh-cbsize);
	var mbutton = new GeoButton({x:0, y:0, width: cbsize, height: cbsize, action:"this.caller.minimize()",backcolor:"#99CCFF",name:"closebutton",icon:"#minimizewin"});
	mbutton.caller=this;
	var rbutton = new GeoButton({x:cbsize+cbmarg, y:0, width: cbsize, height: cbsize, action:"this.caller.restore()",backcolor:"#99CCFF",name:"closebutton",icon:"#restorewin"});
	rbutton.caller=this;
	var cbutton = new GeoButton({x:2.0*cbsize+3.0*cbmarg, y:0, width: cbsize, height: cbsize, action:"this.caller.close()",backcolor:"#99CCFF",name:"closebutton",icon:"#closewin"});
	cbutton.caller=this;
	bg.appendChild(mbutton.getNode());	bg.appendChild(rbutton.getNode());		bg.appendChild(cbutton.getNode());
	this.buttonsw=3.0*cbsize+5.0*cbmarg;
	var bsx=this.width-this.buttonsw;
	var nts = "translate("+bsx+","+cbmarg+")"
	bg.setAttribute("transform",nts);
	return this.node.appendChild(bg);
}
GeoWindow.prototype.createWinTitle=function(){
	var titlenode = doCreateTextNode(this.title,"#99CCFF",this.width-this.buttonsw,this.winbarh,"left","trim");
	return this.node.appendChild(titlenode);
}
GeoWindow.prototype.createWinBack=function(){
	var winb=svgdoc.createElement("rect");
	setLayout(winb,0,this.winbarh,this.width,this.height-this.winbarh);
	winb.setAttribute("class","toolbarback");
	winb.setAttribute("style","opacity:0.7;stroke:black;stroke-width:0.1;");
	return this.node.appendChild(winb);
}
GeoWindow.prototype.createWinPanel=function(){
	var winp=svgdoc.createElement("svg");
	setLayout(winp,0,this.winbarh,this.width,this.height-this.winbarh);
	return this.node.appendChild(winp);
}
GeoWindow.prototype.addWidget=function(widget){
	for(var i=0;i<this.widgets.length;i++){
		if(this.widgets[i]==widget) return null;
	}
	this.widgets[this.widgets.length]=widget;
	this.panel.appendChild(widget.getNode());
	widget.container=this;
	return widget;
}
GeoWindow.prototype.removeWidget=function(widget){
	if(widget==null) return null;
	//if(widget.node) this.panel.removeChild(widget.node);
	var prt=widget.node.getParentNode()
	if(prt) prt.removeChild(widget.node);
	for(var i=0;i<this.widgets.length;i++){
		if(this.widgets[i]!=widget) continue;
		this.widgets[i]=null;
		return widget;
	}
	return null;
}
GeoWindow.prototype.getWidget=function(widgetname){
	for(var i=0;i<this.widgets.length;i++){
		if(this.widgets[i].name==widgetname) return widget[i];
	}
	return null;	
}
GeoWindow.prototype.show=function(){
	if(this.isshow) return;
	var a=this.getNode()
	if(this.parent) this.parent.appendChild(a);
	this.isshow=true;
}
GeoWindow.prototype.close=function(){
	for(var i=0;i<this.widgets.length;i++){
		if(this.widgets[i]==null) continue;
		if(this.widgets[i].kill()) this.widgets[i].kill();
	}
	if(this.node){
		var prt = this.node.getParentNode();
		if(prt) prt.removeChild(this.node);
	}
	this.widgets=new Array();
	this.isshow=false;
	this.node=null;
}
GeoWindow.prototype.resize=function(neww,newh){
	if(neww<=2.0*this.buttonsw) neww=2.0*this.buttonsw;
	if(newh<=this.winbarh) newh=this.winbarh;
	setLayout(this.winbar,null,null,neww,null);
	setLayout(this.winback,null,null,neww,newh-this.winbarh);
	var wbmarg = 0.5*(this.winbarh-0.7*this.winbarh);
	var wbx = neww - this.buttonsw;
	var nts="translate("+wbx+","+wbmarg+")"
	this.winbuttons.setAttribute("transform",nts);
	this.wintitle.getFirstChild().setData(this.title);
	trimTextData(neww-this.buttonsw,this.wintitle);
	setLayout(this.panel,0,this.winbarh,neww,newh-this.winbarh);
}
GeoWindow.prototype.pack=function(){
	var bbx = this.panel.getBBox();
	this.width=bbx.x+1.05*(bbx.width);
	this.height=bbx.y+1.05*(bbx.height+this.winbarh);
	this.resize(this.width,this.height);
}
GeoWindow.prototype.minimize=function(){
	this.resize(0,0);
}
GeoWindow.prototype.restore=function(){
	this.resize(this.width,this.height);
}
GeoWindow.prototype.bringToFront=function(){
	if(this.parent) this.parent.removeChild(this.getNode());
	this.parent.appendChild(this.getNode());
}
GeoWindow.prototype.sendToBack=function(){
	if(this.parent) this.parent.removeChild(this.getNode());
	var ab=this.parent.getFirstChild();
	this.parent.insertBefore(this.getNode(),ab);
}
GeoWindow.prototype.addEvents=function(){
	this.winbar.addEventListener("mouseup",this,false);
	this.winbar.addEventListener("mousedown",this,false);
	this.panel.addEventListener("mousedown",this,false);
	this.winback.addEventListener("mousedown",this,false);
}
GeoWindow.prototype.isTopWindow=function(evt){
	if(this.parent==null) return true;
	var cns=this.parent.getChildNodes();
	var gt=new Array();
	for(var i=0;i<cns.length;i++){
		if(cns.item(i).nodeName=="g") gt[gt.length]=cns.item(i)
	}
	if(gt[gt.length-1]==this.getNode()) return true;
	return false;
}
GeoWindow.prototype.mousedown=function(evt){
	var t = evt.getTarget();
	var p = t.getParentNode();
	if(t==this.winbar){
		this.winDrag=true
		this.winLastX=evt.clientX
		this.winLastY=evt.clientY
		this.winbar.setAttribute("pointer-events","none");
		this.cover.setAttribute("pointer-events","all");
		this.cover.addEventListener("mousemove",this,false);
		this.cover.addEventListener("mouseup",this,false);
		this.cover.addEventListener("mouseout",this,false);
	}
	if(this.isTopWindow()) return;
	this.bringToFront();
}
GeoWindow.prototype.mousemove=function(evt){
	if(!this.winDrag) return
	var xOffset = parseFloat(evt.clientX-this.winLastX);
	var yOffset = parseFloat(evt.clientY-this.winLastY);
	this.winLastX+=xOffset;
	this.winLastY+=yOffset;
	var theRoot = svgDocument.documentElement;
	var xpos= parseFloat(this.x+xOffset)
	var ypos= parseFloat(this.y+yOffset)
	if(xpos<0.0) xpos=0.0;
	this.x=xpos;
	this.y=ypos;
	var nts = "translate("+xpos+","+ypos+")"
	this.node.setAttribute("transform",nts);
}
GeoWindow.prototype.mouseout=function(evt){
	this.mouseup(evt);
}
GeoWindow.prototype.mouseup=function(evt){
	var t = evt.getTarget();
	var p = t.getParentNode();
	if(t==this.cover){
		this.winDrag=false;
		this.winLastX=evt.clientX;
		this.winLastY=evt.clientY;
		this.cover.setAttribute("pointer-events","none");
		this.cover.removeEventListener("mousemove",this,false);
		this.cover.removeEventListener("mouseup",this,false);
		this.cover.removeEventListener("mouseout",this,false);
		this.winbar.setAttribute("pointer-events","all");
	}
}

/*******************************
* 				ColorPicker			 *
********************************/
function ColorPicker(){
	var cpprops	= ["x","y","picksize","column","gap","action"];
	assignProp(this,cpprops,arguments[0]);
}
ColorPicker.prototype.createNode=function(){
	var cv=this.createColorValues();
	this.row=Math.round(cv.length/this.column);
	var tr = "translate("+this.x+","+this.y+")";
	var cr="<g transform='"+tr+"' onclick='"+this.action+"' >";
	var xp=0;
	var yp=0;
	var cvi=0
	for(var row=0;row<this.row;row++){
		yp=row*(this.picksize+this.gap)
		for(var col=0;col<this.column;col++){
			xp=col*(this.picksize+this.gap);
			if((cvi)<(this.row*this.column))	cr+=this.createRect(xp,yp,cv[cvi]);
			cvi+=1;
		}
	}
	cr+="</g>";
	var xd=pxml(cr);
	this.node=xd.getFirstChild();
	this.createDownBorder();
	this.addEvents();
}
ColorPicker.prototype.mousedown=function(evt){
	var et=evt.getTarget().getParentNode().getAttribute("transform");
	if(this.downborder){
		this.downborder.setAttribute("transform",et);
		this.downborder.setAttribute("display","inline");
	}
}
ColorPicker.prototype.mouseup=function(evt){
	if(this.downborder) this.downborder.setAttribute("display","none");
}
ColorPicker.prototype.createColorValues=function(){
	var cv=new Array();
	var cs=["00","33","66","99","CC","FF"];
	var cr=["00","FF","CC","99","66"];
	for(var r=0;r<cr.length;r++){
		for(var g=0;g<cs.length;g++){
			for(var b=0;b<cs.length;b++){
				cv[cv.length]="#"+cr[r]+""+cs[b]+""+cs[g];
			}
		}
	}
	return cv;
}
ColorPicker.prototype.createRect=function(xpos,ypos,color){
	var tr = "translate("+xpos+","+ypos+")";
	var rs="<g transform='"+tr+"'>"
	rs+="<rect x='0' y='0' width='"+this.picksize+"' height='"+this.picksize+"'";
	rs+=" fill='"+color+"' stroke='none'";
	rs+="/>";
	rs+=this.createBorder("up")
	rs+="</g>";
	return rs;
}
ColorPicker.prototype.createDownBorder=function(){
	if(!this.node) return;
	var g = svgdoc.createElement("g")
	var tr = "translate("+0+","+0+")";
	g.setAttribute("transform",tr)
	g.setAttribute("display","none")
	var rs="<g>" +this.createBorder("down")+"</g>"
	var xd=pxml(rs);
	this.downborder=this.node.appendChild(xd.getFirstChild());
}
ColorPicker.prototype.createBorder=function(type){
	var bw=this.picksize*0.075;	var bl=this.picksize*0.85;
	var uppercolor="#CCCCCC";	var lowercolor="#666666";
	if(type=="down"){
		uppercolor="#666666";	lowercolor="#CCCCCC";
	}
	var rs=""
	rs+="<path pointer-events='none' fill='"+uppercolor+"' stroke='none' d='M0,0 v"+this.picksize+" l"+bw+","+(-bw)+" v"+(-bl)+" h"+bl+" l"+bw+","+(-bw)
	rs+="z'/>";
	rs+="<path pointer-events='none' fill='"+lowercolor+"' stroke='none' d='M0,"+this.picksize+" h"+this.picksize+" v"+(-this.picksize)+" l"+(-bw)+","+bw+" v"+bl+" h"+(-bl)
	rs+="z'/>";
	return rs
}

/*******************************
* 				TextUtil				 *
********************************/
function createTextNode(obj){
//alert(" h "+obj.label)
	var at= doCreateTextNode(obj.label,obj.forecolor,obj.width,obj.height,obj.align,obj.adjust);
	return at;
}
function doCreateTextNode(textvalue,tcolor,twidth,theight,talign,tadjust){
	var textnode = svgdoc.createElement("text");
	textnode.setAttribute("id","textlabel");
//alert(" g "+textvalue)
	if(textvalue==null) textvalue="."
	var textdata = svgdoc.createTextNode(textvalue);
	textnode.setAttribute("fill", tcolor);
	textnode.setAttribute('font-size',0.75*theight); 
	textnode.setAttribute("y", 0.75*theight);
	textnode.setAttribute("stroke", "none");
	textnode.setAttribute("pointer-events","none");
	textnode.setAttribute('font-family',"verdana,arial,sans-serif");
	textnode.setAttribute("style","text-anchor:"+talign+";glyph-anchor:centerline;glyph-orientation-horizontal:0;")
	textnode.appendChild(textdata);
	if(tadjust=="fit"){
		if(textvalue!="")	fitTextData(twidth,theight,textnode);
	}else{
		trimTextData(twidth,textnode);
	}
	textnode.setAttribute("x", getTextXPost(talign,twidth,textnode));
	return textnode;
}

function getTextXPost(aligntype,thewidth,textnode){
	var textpos=0.02*thewidth;
	switch(aligntype){
		case "middle":	textpos=0.5*thewidth;		break;
		case "right":	textpos=0.95*thewidth-textnode.getComputedTextLength();		break;
		default:		break;
	}
	return textpos;
}
function trimTextData(thewidth,textnode){
	var str=textnode.getFirstChild().getData()
	if(str.length==0) return;
	spacetrim=""+str;
	while(spacetrim.charAt(spacetrim.length-1)==" "){
		spacetrim=spacetrim.substring(0,spacetrim.length-1);
	}
	if(spacetrim=="") return;
	if(thewidth>textnode.getComputedTextLength()) return;
	while(thewidth<=textnode.getComputedTextLength()){
		var newval = textnode.getFirstChild().getData();
		textnode.getFirstChild().setData(newval.substring(0,newval.length-1));
	}
}
function fitTextData(thewidth,theheight,textnode){
	var a = textnode.getFirstChild().getData();
	if(a=="") return;
	var newfsize;
	if(0.95*thewidth>textnode.getComputedTextLength()) {
		newfsize=0.75*theheight
	}else{
		newfsize=parseFloat(0.95*0.75*theheight*thewidth/textnode.getComputedTextLength());
	}
	textnode.setAttribute('font-size',newfsize);
	textnode.setAttribute("y", newfsize);
}


/*******************************
* 			UTILITIES				 *
********************************/
function createGRectangle(obj){
	var r = svgdoc.createElement("rect");
   r.setAttribute("id","bgrect");
	r.setAttribute("x","0");
	r.setAttribute("y","0");
	r.setAttribute("width",obj.width);
	r.setAttribute("height",obj.height);
	if(obj.backcolor!=null) r.setAttribute("fill",obj.backcolor);
	if(obj.outline!=null) r.setAttribute("stroke",obj.outline);
	if(obj.strokewidth!=null) r.setAttribute("stroke-width",obj.strokewidth);
	if(obj.opacity!=null) r.setAttribute("fill-opacity",obj.opacity);
	return r;
}
function setWidgetLayout(widget,x,y,w,h){
	if(!widget) return;
	widget.x=x;
	widget.y=y;
	widget.width=w;
	widget.height=h;
}
function assignProp(obj,propNames,propValues){
	//if(!obj) return;
	//if(!propValues) return;
	for ( var i = 0; i < propNames.length; i++ ) {
		var propName = propNames[i];
		if (propValues) obj[propName] = propValues[propName];
	}
	widgetArray[widgetArray.length] = obj;
}
function CopyProperties(fromwidget,towidget){
	if(!fromwidget) return;
	if(!towidget) return;
	for(var props in fromwidget){
		if(props!="node")	towidget[props]=fromwidget[props];
	}
}
function iterateProps(widget){
	if(!widget) return;
	var ia = new Array()
	for(var props in widget){
		var its = "" + widget[props];
		if(its.indexOf("function")>-1) continue;
		ia[ia.length] = props + ": " + widget[props];
	}
	alert("l "+ia)
}




@


1.1
log
@*** empty log message ***
@
text
@@


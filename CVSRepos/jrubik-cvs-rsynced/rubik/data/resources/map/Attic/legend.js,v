head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.43.53;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.14.02.37;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/******************************
This is an open source project (see definition at http://www.opensource.org/docs/definition_plain.html).
and is distributed under the GNU General Public License (see http://www.gnu.org/copyleft/gpl.html).
*******************************/

/******************************
*	constructor : legendList  *	
*******************************/
function legendList(){
	this.List=new Array(); 		//of type: Legend
	this.prev=null;		//for preview legend editing
}
legendList.prototype.append=function(aLeg){
	var jj=this.List.length; this.List[jj]=aLeg; return aLeg;
}
legendList.prototype.arrange=function(theDoc){
	var nexty=0;
	for (lidx=0;lidx<this.List.length;lidx++){
		var tlegs = this.List[lidx];
		var thegap=tlegs.gap;
		//if ((tlegs.Type=='single symbol')||(tlegs.Type=='dot symbol')) thegap=tlegs.gap;
		var labnod =theDoc.getElementById(tlegs.Id+'label');			
		var legnod =tlegs.node
		var bbx = legnod.getBBox();
		tlegs.xpos = 0;	tlegs.ypos = nexty;
		nexty+=thegap+bbx.y+bbx.height;
		var newtrans = makeTransform(tlegs.xpos,tlegs.ypos,tlegs.scale);
		labnod.setAttribute('transform',newtrans);
		legnod.setAttribute('transform',newtrans);
	}
}
legendList.prototype.findLeg=function(aSymbolID){
	var theName = aSymbolID.substring(aSymbolID.indexOf("_")+1,aSymbolID.lastIndexOf("_"))
//alert(theName)
	var foundLeg=null
	for (var il=0;il<this.List.length;il++){
		if(this.List[il].Name==theName) {
			foundLeg = this.List[il]; break;
		}
	}
	return foundLeg;
}

/**************************
*	constructor : Legend  *	
***************************/
function Legend(theId){
	this.Type_Names = ['single symbol','unique value','graduated color','chart symbol'];
	this.Type		= ''; 
	this.fValues 	= null;
	this.ClassType  ='';
	this.ChartType  ='column';
	this.ChartSize  = 20;
	this.Classes	= new Array(); 			//member type : Class; simple : only one Class
	this.Symbols	= new Array(); 			//member of Symbols corresponds one on one with Classes member
											//if classes.length=0 --> symbols[0]=last symbol
	this.Name		='';
	this.labelName	='';
	this.fName		='';
	this.Id			= theId;				//needed for reference to the g element, in legend or preview display
	this.node		= null;
	this.xpos=0; this.ypos=0; this.scale=1;
	this.labelSize	= 7;	this.gap=13;
	this.symbolList =new SymbolList();
	this.fieldList = null;
	this.fieldListNumeric = null;
}
Legend.prototype.getClassificationType=function(){
	return this.ClassType
}
Legend.prototype.setType=function(aType){
	this.Type = aType;
	if (aType=='single symbol'){
		this.Classes=new Array();
	}
}
Legend.prototype.SingleSymbol=function(){
	this.Type='single symbol';
	this.Classes=new Array();
	this.appendC(new Class());
}
Legend.prototype.Unique=function(aFieldName){
	this.Type='unique value';
	this.fName=aFieldName;
	this.Classes=new Array();
	//this.fValues = getFieldValues(aFieldName);
	this.fValues = returnUnique(getFieldValues(aFieldName))
	var lgt =this.fValues.length;
	if (lgt>50) {
		alert('Classes limited to 50'+'\r'+ 'That should be enough for everybody.');
		lgt=50;
	}
	for(ci=0;ci<lgt;ci++){ 
		var aClass = new Class();
		//aClass.setClass(aFieldName,aFieldName+ci,this.fValues[ci],this.fValues[ci]);
		aClass.setClass(aFieldName,this.fValues[ci],this.fValues[ci],this.fValues[ci]);
		this.appendC(aClass);
	}
}

Legend.prototype.Quantile=function(aFieldName,ClassesNum){
	this.Type='graduated color';
	this.ClassType="quantile"
	this.fName=aFieldName;
	this.Classes=new Array();
	this.fValues = getFieldValues(aFieldName);
	var isItNaN = NaNField(this.fValues);
	if (!isItNaN) {
		var numprec=returnPrecission(this.fValues);
		var nn = this.fValues.length;
		var nrclass=ClassesNum;	if (nrclass>nn) nrclass=nn;
		var freqClass=nn; //var freqClass=1+3.3*Math.log(nn);
		var freqArray=makeFrequencyArray(this.fValues,freqClass)

		var frange=this.fValues[this.fValues.length-1]-this.fValues[0];	
		var clength=roundValue((frange/freqClass),numprec);
		var Quant = new Array();
		for(ci=1;ci<nrclass;ci++){
			neededData=Math.ceil(parseFloat(nn*ci/nrclass))
			fafif=0;
			for(fi=0;fi<freqArray.length;fi++){
				fafif+=freqArray[fi][2];
				if (fafif>=neededData) {
					xb=freqArray[fi][0]+parseFloat(1.0/Math.pow(10,numprec+1))
					xFsmaller=parseFloat(fafif-freqArray[fi][2])
					Quant[ci]=roundValue(parseFloat(xb+clength*( ((ci*nn)/nrclass) - xFsmaller )/freqArray[fi][2]),numprec+1)
					break;
				}
			}
		}

		Quant[0]=this.fValues[0];		Quant[Quant.length]=this.fValues[this.fValues.length-1];
		for (qi=0;qi<Quant.length-1;qi++){
			var aClass = new Class();
			aClass.setClass(aFieldName,null,Quant[qi],Quant[qi+1]);
			aClass.setClass(null,Quant[qi]+" ",null,null);
			this.appendC(aClass);
		}
		
	}else{
		alert('The field : "'+ aFieldName + '" not exist or not a numeric field (..I think) \r'+'Switching to Unique Symbols..');
		this.Unique(aFieldName);
	}
}
Legend.prototype.Interval=function(aFieldName,ClassesNum){
	this.Type='graduated color';
	this.ClassType="equal interval"
	this.fName=aFieldName;
	this.Classes=new Array();
	this.fValues = getFieldValues(aFieldName);
	var isItNaN = NaNField(this.fValues);
	if (!isItNaN) {
		var nrclass=ClassesNum;	var nn = this.fValues.length;
		var Quant = new Array();	
		var frng = this.fValues[this.fValues.length-1]-this.fValues[0];
		var numprec=returnPrecission(this.fValues)+1;
		for(ci=0;ci<nrclass;ci++){
			var qi = parseFloat(ci*(frng)/nrclass)
			Quant[ci]=Math.round(Math.pow(10,numprec)*qi)/Math.pow(10,numprec)
		};
		Quant[0]=this.fValues[0];
		Quant[nrclass]=this.fValues[this.fValues.length-1];
		for (qi=0;qi<Quant.length-1;qi++){
			var aClass = new Class();
			//aClass.setClass(aFieldName,Quant[qi]+" - "+Quant[qi+1],Quant[qi],Quant[qi+1]);
			classlabel=Quant[qi]+" "
			if (Quant[qi]==Quant[qi+1]) classlabel=" ";
			aClass.setClass(aFieldName,classlabel,Quant[qi],Quant[qi+1]);
			this.appendC(aClass);
		};
	}else{
		alert('The field : '+ aFieldName + ' contains a NaN value \r'+'Switching to Unique Symbols..');
		this.Unique(aFieldName);
	};
}

Legend.prototype.Chart=function(sFieldNames,charttype,chartsize){
	this.Type='chart symbol';
	this.ChartType=charttype;
	this.ChartSize=chartsize;
	this.Classes=new Array();
	this.fName=sFieldNames.join("|");
	for (ci=0;ci<sFieldNames.length;ci++){
		var aClass = new Class();
		aFName=sFieldNames[ci]
		tmpl=aFName.split(".")
		aLName=tmpl[tmpl.length-1]
		sValues=getFieldValues(aFName)
		aClass.setClass(aFName,aLName,sValues[0],sValues[sValues.length-1])
		this.appendC(aClass);
	}
}
Legend.prototype.PieChart=function(sFieldNames){
	this.Type='chart symbol';
}
Legend.prototype.GradSymbol=function(){
	this.Type='graduated symbol';
	this.Classes=new Array();
	this.symbolList.RampSizes(10,40);
}
Legend.prototype.makeSymbolList=function(st,ln,lf,ls,sz,ss,sw){
	this.symbolList = new SymbolList();
	var numclass = this.Classes.length;
	this.Name=ln;
	if (this.Type=='graduated color') sz=15;
	if (this.Type=="chart symbol") st="fill";
	for (j=0;j<numclass;j++){
		var aSymbol = this.symbolList.append(new Symbol());
		aSymbol.xLink='#'+st; aSymbol.id=st+'symbol_'+ln+'_'+j; 
		aSymbol.Type=st; aSymbol.size=sz;
		aSymbol.setColor(lf,ls,lf,ls);
		if (st=="pen") aSymbol.strokeWidth=ss;
		if (st=="fill") aSymbol.strokeWidth=sw;
		if (st=="marker") aSymbol.strokeWidth=sw;
	};
	if (this.Type=='unique value') {
		if (st=="pen") {
			this.symbolList.Type='RANDOMPENS';
		}else{
			this.symbolList.Type='RANDOMFILLS';
		};
		this.symbolList.RandomColors();
	}
	if (this.Type=='graduated color') {
		this.symbolList.Type='COLORRAMP';
		this.symbolList.RampColors();
	};
	if (this.Type=='chart symbol') {
		this.symbolList.Type='RANDOMFILLS';
		this.symbolList.RandomColors();
	}

	this.Symbols = new Array();
	for (j=0;j<this.symbolList.List.length;j++){
		var aSymbol = this.appendS(this.symbolList.List[j]); //class already appended to Legend
	}
}
Legend.prototype.modifySymbolList=function(aColorList){
	symb1 =this.symbolList.List[0]
	symbn =this.symbolList.List[this.symbolList.List.length-1]
	st=symb1.Type
	this.symbolList = new SymbolList();
	var numclass = this.Classes.length;
	for (j=0;j<numclass;j++){
		var aSymbol = this.symbolList.append(new Symbol());
		aSymbol.xLink='#'+st; aSymbol.id=st+'symbol_'+this.Name+'_'+j; 
		aSymbol.Type=st; aSymbol.size=12;
		if (this.Type=='graduated color') aSymbol.size=15;
		//aSymbol.setColor('#FFEECC','#000000','#FFEECC','#000000');
		aSymbol.setColor(symb1.bgFill,symb1.bgStroke,symb1.fgFill,symb1.fgStroke);
		aSymbol.strokeWidth=symb1.strokeWidth;
	}
	if (this.Type=='unique value') {
		if (st=="pen") {
			this.symbolList.Type='RANDOMPENS';
		}else{
			this.symbolList.Type='RANDOMFILLS';
		};
		this.symbolList.RandomColors(aColorList);
	}
	if (this.Type=='graduated color') {
		this.symbolList.Type='COLORRAMP';
		if (aColorList) {
			if (aColorList[0]) {
				if (aColorList[0].indexOf("#")>-1) aColorList[0]=fromHexColor(aColorList[0])
				if (aColorList[0].indexOf("rgb")>-1) rgb1=aColorList[0]
			}
			if (aColorList[1]) {
				if (aColorList[1].indexOf("#")>-1) aColorList[1]=fromHexColor(aColorList[1])
				if (aColorList[1].indexOf("rgb")>-1) rgb2=aColorList[1]
			}
		}else{
			if (symb1.bgFill==symbn.bgFill) {
				r1=255*Math.random();	g1=255*Math.random();	b1=255*Math.random();	
				rgb1=makeColorString(r1,g1,b1);
				rgb2=makeColorString((255-r1),(255-g1),(255-b1));
			}else{
				rgb1=symb1.bgFill
				rgb2=symbn.bgFill;
			}
		}
		this.symbolList.RampColors(rgb1,rgb2);
	};
	if (this.Type=='chart symbol') {
		this.symbolList.Type='RANDOMFILLS';
		this.symbolList.RandomColors(aColorList);
	}

	this.Symbols = new Array();
	for (j=0;j<this.symbolList.List.length;j++){
		var aSymbol = this.appendS(this.symbolList.List[j]); //class already appended to Legend
	}
}
Legend.prototype.Update=function(){
	for (j=0;j<this.Classes.length;j++){
		this.Symbols[j].makeUse(legUse,legDoc,this.Id);
	};
}
Legend.prototype.arrange=function(theDoc){
	var nexty=5+this.labelSize;
	if (this.Type=='single symbol') 	nexty=0;
	for (si=0;si<this.Symbols.length;si++){
		var ts = this.Symbols[si];
		if (this.Type=='graduated color') ts.gap=0.0;
		ts.x=0;ts.y=nexty;
		if (ts.nodeUse!=null) ts.nodeUse.setAttribute('y',nexty);
		if (ts.Type=="marker")ts.nodeUse.setAttribute('y',-nexty);
		if (ts.nodeLabel!=null) ts.nodeLabel.setAttribute('x',ts.size+2);
		if (ts.nodeLabel!=null) ts.nodeLabel.setAttribute('y',nexty+ts.size);
		nexty+=ts.gap+ts.size;
	}
}
Legend.prototype.getSymbols=function(){
	var abc = new SymbolList();
	for (si=0;si<this.Symbols.length;si++){	var aS =this.Symbols[si]; abc.append(aS);};
	return abc;
}
Legend.prototype.getClasses=function(){
	var abc = new Array();
	for (ci=0;ci<this.Classes.length;ci++){	var aC =this.Classes[si]; abc[ci]=aC;};
	return abc;
}
Legend.prototype.getIndex=function(aValue){
	var anjing;
	for (cidx=0;cidx<this.Classes.length;cidx++){ 
		if (this.Classes[cidx].contains(aValue)) anjing=cidx;
	}
	return anjing;
}
Legend.prototype.appendS=function(aS){
	var jj = this.Symbols.length; this.Symbols[jj]=aS;	return aS;
}
Legend.prototype.appendC=function(aC){
	var jj = this.Classes.length; this.Classes[jj]=aC;	return aC;
}
Legend.prototype.makeLabel=function(theDoc){
	dotpos = this.fName.indexOf(".")
	var theFname =' : '+this.fName.substring(dotpos+1,this.fName.length) 
	if ((theFname.indexOf("|")>-1)||(this.Type=="single symbol")) {
		theFname='';
	}
	this.labelName = this.Name+theFname;
	parentName = this.Id+"label"
	if( (this.Type=='single symbol')|| (this.Type=='dot symbol') ){
		var sz=this.Symbols[0].size; var gp=this.Symbols[0].gap;
		var xlegt=this.xpos+sz+5;
		var ylegt=this.Symbols[0].y+gp +(sz-this.labelSize);	
	}else{
		var xlegt=this.xpos; var ylegt=this.ypos-2;
		for(sc=0;sc<this.Symbols.length;sc++){
			var tssc=this.Symbols[sc]; var sz=tssc.size; var gp=tssc.gap;
			var xt=this.xpos+sz+5;	
			var yt=gp + tssc.y+0.5*(sz-this.labelSize);
			var ylegt=this.labelSize;
			var nlbsz = (this.labelSize-1)+'pt';
			var thelabel=this.Classes[sc].label;	
			var tnod =createText(theDoc,this.Symbols[0].Type+'label'+this.Id+'_'+(sc+1),xt,yt,'black','none',nlbsz,'Verdana, Arial',thelabel);
			tnod.setAttribute("onmouseover","setToolBarInfo('click to change class number')")
			tnod.setAttribute("onmouseout","setToolBarInfo('')")
			var parent = theDoc.getElementById(parentName);
			tssc.nodeLabel = parent.appendChild(tnod);
		}
		if (this.Type=='graduated color') {
			var yt=gp + tssc.y+sz+0.5*(sz-this.labelSize)
			var thelabel=this.Classes[sc-1].max;
			var tnod =createText(theDoc,this.Symbols[0].Type+'label'+this.Id+'_'+(sc+1),xt,yt,'black','none',nlbsz,'Verdana, Arial',thelabel);
			tnod.setAttribute("onmouseover","setToolBarInfo('click to change class number')")
			tnod.setAttribute("onmouseout","setToolBarInfo('')")
			var parent = theDoc.getElementById(parentName);
			tssc.nodeLabel = parent.appendChild(tnod);
		}
	}
	var usel =createText(theDoc,this.Symbols[0].Type+'label'+this.Id+'_0',xlegt,ylegt,'black','none',this.labelSize+'pt','Tahoma',this.labelName);
	//usel.setAttribute("onclick","")
	usel.setAttribute("onmouseover","setToolBarInfo('click to change classification')")
	return theDoc.getElementById(parentName).appendChild(usel);
}
Legend.prototype.makeG=function(theDoc,parentName){
	var newtrans = makeTransform(this.xpos,this.ypos,this.scale);
	var labparent = theDoc.getElementById("keylabels");
	var theg1 = theDoc.createElement('g');	theg1.setAttribute('id',this.Id+'label');	theg1.setAttribute('transform',newtrans);
	labparent.appendChild(theg1);
	var parent = theDoc.getElementById(parentName);
	var theg2 = theDoc.createElement('g');	theg2.setAttribute('id',this.Id);	theg2.setAttribute('transform',newtrans);
	theg2.setAttribute("onmouseover","setToolBarInfo('click to change symbol color')")
	theg2.setAttribute("onmouseout","setToolBarInfo('')")
	this.node = parent.appendChild(theg2);
}
Legend.prototype.copyTo=function(newLeg){	//clone to and from legend display - preview display
	newLeg.Type_Names=this.Type_Names;
	newLeg.Type = this.Type;
	newLeg.fValues = this.fValues;
	newLeg.Classes = this.Classes;
	newLeg.Symbols = this.Symbols;
	newLeg.Name = this.Name;
	newLeg.labelName = this.labelName;
	newLeg.fName=this.fName;
	newLeg.node = this.node;
//	newLeg.xpos = this.xpos;
//	newLeg.ypos = this.ypos;
	newLeg.scale = this.scale;
	newLeg.labelSize = this.labelSize;
	newLeg.gap = this.gap;
	return newLeg;
}

Legend.prototype.drawChart= function(charttype){
	mg=svgdoc.getElementById("map");
	ml=svgdoc.getElementById("mapLayers");
	bbxml=ml.getBBox();
	cg=svgdoc.getElementById("chartLayers");
	if (cg) {
		clearchilds(cg);
	}else{
		theg=svgdoc.createElement("g")
		theg.setAttribute("id","chartLayers")
		theg.setAttribute("transform",ml.getAttribute('transform'))
		cg=mg.appendChild(theg);
	}
	cthis=svgdoc.getElementById("c"+this.Name);
	if(cthis) {
		clearchilds(cthis);
	}else{
		theg=svgdoc.createElement("g")		
		theg.setAttribute("id","c"+this.Name)
		cthis=cg.appendChild(theg)
	}
	aLayer=svgdoc.getElementById("l"+this.Name)
	sFeats=aLayer.getChildNodes()
	chs=this.ChartSize/100.0
	thedim=parseFloat(chs*Math.max(bbxml.width,bbxml.height))
	allmm=this.minmaxChart()

	if(charttype=="pie"){
		piemaxradius=-10E16;
		pieminradius=10E16;
		for (i=0;i<sFeats.length;i++){
			thenod=sFeats.item(i)
			if (thenod.nodeName=="#text") continue;
			dataNode=getDataNode(thenod.getAttribute("id"));
			var total=this.getTotalPie(dataNode);
			piemaxradius=Math.max(piemaxradius,total)
			pieminradius=Math.min(pieminradius,total)
		}
	}
	for (i=0;i<sFeats.length;i++){
		thenod=sFeats.item(i)
		if (thenod.nodeName=="#text") continue;
		if (charttype=="column") this.doColumn(cthis,thenod,thedim,allmm)
		if (charttype=="pie") this.doPie(cthis,thenod,thedim/2,allmm,piemaxradius,pieminradius)
	}
}
Legend.prototype.getTotalPie=function(dataNode){
	var tot=0
			for (var jx=0;jx<this.Classes.length;jx++){
				clj=this.Classes[jx]
				if(dataNode.getElementsByTagName(clj.fieldName).length==0) continue
				theval=parseFloat(dataNode.getElementsByTagName(clj.fieldName).item(0).firstChild.nodeValue);
				tot+=Math.abs(theval)  // no negative value in pie slice
			}
	return tot;
}

Legend.prototype.minmaxChart=function(){
	allmin=10E16;	allmax=-10E16;
	for (i=0;i<this.Classes.length;i++){
		cli=this.Classes[i]
		allmin=Math.min(cli.min,allmin)
		allmax=Math.max(cli.max,allmax)
	}
	return [allmin,allmax];
}
Legend.prototype.doPie=function(cg,thenod,thedim,allmm,piemaxradius,pieminradius){
	newsvg=svgdoc.createElement("svg");
	csvg=cg.appendChild(newsvg);
	csvg.setAttribute("preserveAspectRatio","xMidyMid meet");
	dataNode=getDataNode(thenod.getAttribute("id"));
	bbx=thenod.getBBox();
	zeroXaxis = bbx.x+bbx.width/2.0;
	zeroYaxis = bbx.y+bbx.height/2.0;
	if (thenod.nodeName=='use'){
		zeroXaxis = parseFloat(thenod.getAttribute("x"));
		zeroYaxis = parseFloat(thenod.getAttribute("y"));
	}
	setLayout(csvg,zeroXaxis-thedim/2.0,zeroYaxis-thedim/2.0,thedim,thedim)
	csvg.setAttribute("viewBox","0.0 0.0 100.0 100.0")
	allmax=Math.max(Math.abs(allmm[0]),Math.abs(allmm[1]))
	var total=roundValue(this.getTotalPie(dataNode),2);
	h=parseFloat(360.0/total);		
	var pieradius=50.0*total/piemaxradius; var cx=50.0; var cy=50.0;
	var piestrokewidth = Math.max(1.0,(2.5*pieminradius/piemaxradius));
	xA=cx+pieradius;yA=cy;
	var angle=0;	var laf=0;
	for (var jx=0;jx<this.Classes.length;jx++){
		clj=this.Classes[jx]
		if(dataNode.getElementsByTagName(clj.fieldName).length==0) continue
		theval=parseFloat(dataNode.getElementsByTagName(clj.fieldName).item(0).firstChild.nodeValue);
		if (theval==0) continue;
		var pctg=roundValue((100.0*theval/total),1)
		str="setinfo('quickinfo','" + clj.fieldName + " : " + theval + " ("+ pctg + "% of " + total + ")')"
		str2="setinfo('quickinfo','')"
		angle+=h*Math.abs(theval)
		if (this.Classes.length>1){
			xB=(cx+pieradius*Math.cos(angle*Math.PI/180));
			yB=(cy-pieradius*Math.sin(angle*Math.PI/180));
			(h*Math.abs(theval) <= 180) ? laf='0' : laf ='1'; //large-arc flag
			piearc = ' A ' + pieradius + ' ' + pieradius + ' 0 ' + laf + ' 0 ';
			piecent =' L ' + cx + ',' + cy + ' z';
			piepath='M '+xA+' '+yA+ piearc + +xB+' '+yB + piecent;
			xA=xB;yA=yB;
			var p = svgdoc.createElement('path')
			p.setAttribute('d',piepath)
		}else{
			var p = svgdoc.createElement('circle')
			p.setAttribute('cx',cx);p.setAttribute('cy',cy);p.setAttribute('r',pieradius);
		}
		p.setAttribute('fill',this.Symbols[jx].bgFill)
		p.setAttribute("stroke","#000"); p.setAttribute("stroke-width",piestrokewidth)
		p.setAttribute("onmouseover",str);	p.setAttribute("onmouseout",str2);
		p.setAttribute("id","chart_symbol_"+jx)
		p.setAttribute("opacity","0.75")
		nodeid = thenod.getAttribute("id")
		p.setAttribute("onclick","showNodeIdentity('"+nodeid+"')");
		csvg.appendChild(p);
	}
}
Legend.prototype.doColumn=function(cg,thenod,thedim,allmm){
	newsvg=svgdoc.createElement("svg");	csvg=cg.appendChild(newsvg);	csvg.setAttribute("preserveAspectRatio","xMidyMid meet");
	dataNode=getDataNode(thenod.getAttribute("id"));
	bbx=thenod.getBBox();
	zeroXaxis = bbx.x+bbx.width/2.0;
	zeroYaxis = bbx.y+bbx.height/2.0;
	if (thenod.nodeName=='use'){
		zeroXaxis = parseFloat(thenod.getAttribute("x"));
		zeroYaxis = parseFloat(thenod.getAttribute("y"));
	}
	setLayout(csvg,zeroXaxis-thedim/2.0,zeroYaxis-thedim/2.0,thedim,thedim)
	csvg.setAttribute("viewBox","0.0 -100.0 100.0 200.0");	colX=0;
	this.Classes.length > 5 ? colW=parseFloat(100.0/this.Classes.length) : colW=parseFloat(100.0/5.0);
	allmax=Math.max(Math.abs(allmm[0]),Math.abs(allmm[1]))
	var total=roundValue(this.getTotalPie(dataNode),2);
	for (var jx=0;jx<this.Classes.length;jx++){
		colX+=colW
		clj=this.Classes[jx];
		if (dataNode.getElementsByTagName(clj.fieldName).length==0) continue;
		theval=parseFloat(dataNode.getElementsByTagName(clj.fieldName).item(0).firstChild.nodeValue);
		var pctg=roundValue((100.0*theval/total),1);
		str="setinfo('quickinfo','"+clj.fieldName + " : " + theval+" ("+pctg + "% of "+total+")')"
		str2="setinfo('quickinfo','')"
		if (theval==0) continue;
		colH=Math.abs(100.0*theval/allmax)
		theval > 0.0 ? colY=0 :colY=-colH;
		daColor=this.Symbols[jx].bgFill
		b=makeDaRect(csvg,colX,colY,colW,colH,daColor,"")
		b.setAttribute("stroke","#000");b.setAttribute("stroke-width",colW*0.05)
		b.setAttribute("onmouseover",str);		b.setAttribute("onmouseout",str2);
		b.setAttribute("opacity","0.75")
		nodeid = thenod.getAttribute("id")
		b.setAttribute("onclick","showNodeIdentity('"+nodeid+"')");
	}
}


/**************************
*	constructor : Symbol  *	
***************************/
function Symbol(){
	this.Type_Names = ['pen','marker','fill','text','chart'];
	this.Type='';
	this.xLink='';								//string for xlink:href
	this.bgFill='none';	this.bgStroke='black';	//non-pattern/non-gradient stroke
	this.fgFill='none';	this.fgStroke='black';	//for pattern/gradient
	this.opac='1.0'
	this.strokeWidth='1';
	this.Filter='';
	this.x=0; this.y=0; this.size=0;this.gap=3;			
	this.nodeUse=null; this.nodeLabel=null ; this.id=''; 				//node and id of the use element
	this.nodeLink=null;	this.nodeFill=null;	this.nodeStroke=null; this.nodeFilter=null;
}

Symbol.prototype.setColor=function(bgF,bgS,fgF,fgS){
	if((bgF!=null)&&(bgF!='')) this.bgFill=bgF; 
	if((bgS!=null)&&(bgS!='')) this.bgStroke=bgS;	
	if((fgF!=null)&&(fgF!='')) this.fgFill=fgF; 
	if((fgS!=null)&&(fgS!='')) this.fgStroke=fgS;
	if (this.Type=='pen'){
		this.bgFill='none';	this.fgFill='none';
		if (this.fgStroke=='none') this.fgStroke='black';
		if (this.bgStroke=='none') this.fgStroke='black';
	}			
	if (this.Type=='fill'){
		//if ((this.bgFill=='')||(this.bgFill=='none')) this.bgFill='lime';
		if (this.fgFill==this.fgStroke) this.fgStroke='black';
		if (this.bgFill==this.bgStroke) this.bgStroke='black';
	}
}
Symbol.prototype.setLinkSize=function(scle){
	if ( (this.Type=='pen') || (this.Type=='fill')|| (this.Type=='chart') ) return;
	this.size = 20*(scle/20);
}
Symbol.prototype.setPos=function(x,y,size){
	if(x!=null) this.x=x;	
	if(y!=null) this.y=y;
	if(size!=null) this.size=size;
}
Symbol.prototype.makeUse=function(usenod,theDoc,parentName){
	if(usenod==null) alert('makeUse : usenod null');
	if(theDoc==null) alert('makeUse : theDoc null');
	if(parentName=='') alert('makeUse : parentId null');
	var usel = usenod.cloneNode(true);
	usel.setAttribute('id',this.id);
	if (this.xLink!=null) usel.setAttribute('xlink:href',this.xLink);
	tstrans="scale(1) matrix(1 0 0 -1 0 "+ (this.size) +")" + "translate(0,0)"
	if (this.Type=="marker") usel.setAttribute('transform',tstrans);
	usel.setAttribute('x',this.x);	usel.setAttribute('y',this.y);
	usel.setAttribute('width',this.size);	usel.setAttribute('height',this.size);
	usel.setAttribute('fill',this.bgFill);	
	usel.setAttribute('stroke',this.bgStroke);	
	usel.setAttribute('opacity',this.opac);
	usel.setAttribute('stroke-width',this.strokeWidth);

	if ((this.Filter!='') &&(this.Filter!=null)) usel.setAttribute('filter',this.Filter);
	var parent = theDoc.getElementById(parentName);
//	if (this.nodeUse!=null) parent.removeChild(this.nodeUse);
	this.nodeUse = parent.appendChild(usel);
//this.nodeUse.setAttribute("onclick","xxx(evt.getTarget())")
}
Symbol.prototype.getUse=function(theDoc){
	if (this.id!='') var unode = theDoc.getElementById(this.id);
	if (unode!=null) this.nodeUse=unode;
}
Symbol.prototype.getProp=function(theDoc){	//this doc maybe/not identical to current svgdoc
	var xstr=this.xLink; 					//unode.getAttribute('xlink:href')
	var fstr=this.bgFill; 					//unode.getAttribute('fill')
	var sstr=this.fgStroke; 				//unode.getAttribute('stroke')
	var filterstr=this.Filter; 				//unode.getAttribute('filter')
	this.nodeLink=findNode(theDoc,xstr);
	this.nodeFill=findNode(theDoc,fstr);
	this.nodeStroke=findNode(theDoc,sstr);
	this.nodeFilter=findNode(theDoc,filterstr);
}
Symbol.prototype.clone=function(node,toDoc,toPar){  
	//clone to Map svg, legend handled by legend.clone
}

/************************
*	constructor : Class *
*************************/
function Class(){
	this.fieldName='';			//chart : vary
	this.label='';				//value for this class, or maybe the rangeString
	this.min=null;				//unique,isText : min=max, simple : min=max=null		
	this.max=null;				
	this.isText=false;
	this.precission=2;
}
Class.prototype.rangeString=function(){
	if (this.min == this.max) {
		if (this.max) return this.max;
		if (!this.max) return "[all]";
	}
	if (this.min != this.max) {
		var fac=Math.pow(10,this.precission);
		var tmin=Math.round(fac*this.min)/fac;
		var tmax=Math.round(fac*this.max)/fac;
		return tmin + ' - ' + tmax;
	}
}
Class.prototype.getType=function(){
	//determine numeric or non-numeric of values related to fieldName
}
Class.prototype.setClass=function(fnC,lC,mnC,mxC){
	if(fnC) this.fieldName=fnC; 
	if(lC) this.label=lC;	
	if(mnC) this.min=mnC;	
	if(mxC) this.max=mxC;
}
Class.prototype.contains=function(aValue){
	if ( isNaN(parseFloat(aValue)) ){
		var isit=false;	
		if ( (aValue==this.min) || (aValue==this.max) )	isit=true; 
		return isit;
	}else{
		var isit=false;	
		if ( (aValue>=this.min) && (aValue<=this.max)) isit=true; 
		return isit;
	}
}

/******************************
*	constructor : SymbolList  *	
*******************************/
function SymbolList(){
	this.Type_Names = ['COLORRAMP','COLORSCHEME','RANDOMMARKERS','RANDOMPENS','RANDOMFILLS'];
	this.Type='';
	this.minRampColor='rgb(255,255,0)';	this.maxRampColor='rgb(255,0,0)';
	this.minRampSize=0;	this.maxRampSize=0;
	this.colWidth=0;
	this.List=new Array();		//member:Symbol, simple legend only one Symbol  ...and SymbolList(?)
}
SymbolList.prototype.append=function(aSymb){
	var jj=this.List.length; this.List[jj]=aSymb; return aSymb;
}
SymbolList.prototype.RampColors=function(minC,maxC){
	if (minC!=null) {
		if(minC.indexOf("#")>-1) minC = fromHexColor(minC);
		this.minRampColor=minC;	
	}
	if (maxC!=null)	{
		if(maxC.indexOf("#")>-1) maxC = fromHexColor(maxC);
		this.maxRampColor=maxC;
	}
	var abc1 = this.minRampColor.substring(4,this.minRampColor.length-1);
	var rgb1 = abc1.split(',');
	var abc2 = this.maxRampColor.substring(4,this.maxRampColor.length-1);
	var rgb2 = abc2.split(',');
	for (tli=0;tli<this.List.length;tli++){
		var rc=parseInt(rgb1[0])+tli*(parseInt(rgb2[0])-parseInt(rgb1[0]))/(this.List.length-1);
		var gc=parseInt(rgb1[1])+tli*(parseInt(rgb2[1])-parseInt(rgb1[1]))/(this.List.length-1);
		var bc=parseInt(rgb1[2])+tli*(parseInt(rgb2[2])-parseInt(rgb1[2]))/(this.List.length-1);

		var rgb=makeColorString(rc,gc,bc);
		//if(this.Type=='COLORRAMP') this.List[tli].setColor(rgb,'black',rgb,rgb);
		this.List[tli].setColor(rgb,rgb,rgb,rgb);
	}	
}
SymbolList.prototype.RampSizes=function(minS,maxS){
	this.minRampSize=minS;	this.maxRampSize=maxS;
	for (tli=0;tli<this.List.length;tli++){
		var nscl=0.5*(maxS-minS) + tli*(maxS-minS)/this.List.length;
		this.List[tli].setLinkSize(nscl);
	}
}
SymbolList.prototype.RandomColors=function(preDetermined){
	for (tli=0;tli<this.List.length;tli++){
		if (preDetermined!=null){
			if (preDetermined[tli]!=null) {
				if (preDetermined[tli].indexOf("#")>-1) preDetermined[tli] =fromHexColor(preDetermined[tli])
				if(this.Type=='RANDOMPENS') {
					this.List[tli].setColor(null,preDetermined[tli],null,preDetermined[tli]);
				}
				if(this.Type=='RANDOMFILLS') {
					this.List[tli].setColor(preDetermined[tli],null,preDetermined[tli],null);
				}
			}
		}else{ 
			var rgb=makeColorString(255*Math.random(),255*Math.random(),255*Math.random());
			if(this.Type=='RANDOMPENS') this.List[tli].setColor(null,rgb,null,rgb);
			if(this.Type=='RANDOMFILLS') this.List[tli].setColor(rgb,null,rgb,null);
		}
	}
}

/**************************
*	Utilities			  *	
***************************/

function fromHexColor(str) {
	hexchars = '0123456789ABCDEF';
	var dred = (16 * hexchars.indexOf(str.charAt(1))) + hexchars.indexOf(str.charAt(2));
	var dgreen = (16 * hexchars.indexOf(str.charAt(3))) + hexchars.indexOf(str.charAt(4));
	var dblue = (16 * hexchars.indexOf(str.charAt(5))) + hexchars.indexOf(str.charAt(6));
	return makeColorString(dred,dgreen,dblue)
}

function makeColorString(r,g,b){
	str = 'rgb(' + Math.round(r) + ',' + Math.round(g) + ',' + Math.round(b) + ')';
	return str;
}
function findNode(theDoc,str){
	if((str=='')||(str==null)) return;	var aw=str.indexOf('#'); if (aw<0) return;
	aw==0 ? ak=str.length : ak=str.length-1;	//'#someid' or 'url(#someid)'
	var idstr = str.substring(aw+1,ak);
	return theDoc.getElementById(idstr);
}
function makeTransform(tx,ty,scale){
	var strTst ='';var strScl ='';
	strTst = 'translate('+tx +','+ty+') ';
	if (scale<=0) alert('you set scale < 0');
	if (scale!=1) strScl = 'scale('+scale+') ';
	strTfr = strScl + strTst;
	return strTfr;
}
function clearchilds(ingrup){		//removing child nodes from a group
	if(ingrup==null) return;
	childs=ingrup.getChildNodes();
	while(childs.length>0){	ingrup.removeChild(childs.item(0))	} ;
}
function createText(theDoc,txtid,xt,yt,fill,stroke,fsize,ffam,txtstr){
	var tnod = theDoc.createElement('text');
	tnod.setAttribute('id',txtid); tnod.setAttribute('x',xt); tnod.setAttribute('y',yt);
	tnod.setAttribute('stroke',stroke); tnod.setAttribute('fill',fill); 
	tnod.setAttribute('font-size',fsize); tnod.setAttribute('font-family',ffam);
	tnod.appendChild(theDoc.createTextNode(txtstr));
	return tnod;
}

/**************************
*	Data gather			  *	
***************************/
function getFieldValues(cfnodename){
	var fVal=new Array();
	var dd = new Array();
	var abc = svgdoc.getElementsByTagName(cfnodename);
	var myArr=new Array();
	for (ijk=0;ijk<abc.length;ijk++){ 
		myArr[ijk]=abc.item(ijk).firstChild.nodeValue;
	}
//alert(myArr)
	var isItNaN=NaNField(myArr);
	for (icf=0;icf<myArr.length;icf++){
		var hh = myArr[icf];
		if (isItNaN) {
			if ( !(isThere(dd,hh)) ) fVal[fVal.length]=hh;
			dd[icf]=hh;
		}else{
			fVal[icf]=parseFloat(hh);
		}
	}
	return sortArray(fVal)
}
function returnUnique(anArray){
	var unArray=new Array();
	for(m=0;m<anArray.length;m++){
		if (!(isThere(unArray,anArray[m])) ) unArray[unArray.length]=anArray[m];
	}
	return unArray;
}

function sortArray(anArray,fIdx){
	var tempe=null;
	for(m=0;m<anArray.length;m++){
		for(n=m+1;n<anArray.length;n++){
			fIdx!=null ? mvalue=anArray[m][fIdx] : mvalue=anArray[m] ;
			fIdx!=null ? nvalue=anArray[n][fIdx] : nvalue=anArray[n] ;
			if (mvalue>nvalue) {	tempe=anArray[m]; anArray[m]=anArray[n]; anArray[n]=tempe;	};
		};
	};
	return anArray;
}

function returnPrecission(anArray,fIdx){
	var prec=0;
	for(m=0;m<anArray.length;m++){
		fIdx!=null ? theValue=anArray[m][fIdx] : theValue=anArray[m];
		precs=theValue+"";		dotpos=precs.indexOf(".");
		dotpos<0 ?	numprec = 0 : numprec = precs.split(".")[1].length ;
		if (numprec>prec) prec=numprec;
	};
	return prec;
}

function NaNField(theArr,fIdx){
	var theNaN=false;
	for (xyz=0;xyz<theArr.length;xyz++){
		fIdx!=null ? thevalue=theArr[xyz][fIdx] : thevalue=theArr[xyz];
		if ( isNaN(parseFloat(thevalue)) ) {
			theNaN = true;break;
		};
	};
	return theNaN;
}
function isThere(anArray,aValue){ //to determine distinct values
	var ada=false; for(jcf=0;jcf<anArray.length;jcf++){	if (anArray[jcf]==aValue) ada = true; }; return ada;
}

function roundValue(aValue,aPrecission){
	return Math.round(Math.pow(10,aPrecission)*aValue)/Math.pow(10,aPrecission);
}
function makeFrequencyArray(anArray,freqClass){
		var numprec=returnPrecission(anArray);
		var nn = anArray.length;
		var fVMin=anArray[0]; var fVMax=anArray[anArray.length-1];
		var clength=roundValue(((fVMax-fVMin)/freqClass),numprec)
		var freqArray=new Array();
		for(ci=0;ci<freqClass;ci++){
			freqArray[ci]=new Array()
			freqArray[ci][0]=roundValue(fVMin+(ci*clength),numprec)
			freqArray[ci][1]=roundValue(fVMin+((ci+1)*clength)-parseFloat(1.0/Math.pow(10,numprec)),numprec)
			freqArray[ci][2]=0;
		}
		if (freqArray[freqArray.length-1][1]<fVMax) freqArray[freqArray.length-1][1]=fVMax;
		for(ci=0;ci<freqArray.length;ci++){
			faci=freqArray[ci]
			for(cj=0;cj<nn;cj++){
				fvcj=anArray[cj]
				if ((fvcj>=faci[0])&&(fvcj<=faci[1])) {
					freqArray[ci][2]+=1
				}
			}
		}
	return freqArray;
}
@


1.1
log
@*** empty log message ***
@
text
@@


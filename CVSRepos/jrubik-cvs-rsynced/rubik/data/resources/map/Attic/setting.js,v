head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.43.54;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.14.02.37;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/******************************
*				Help About			*
*******************************/
var aboutWin;
function helpabout(){
	if(aboutWin){
		aboutWin.close(); aboutWin=null;
	}
	aboutWin=new GeoWindow({x:50, y:20, width:1, height:1,title:"About GeoClient"});
	aboutWin.show();
	var lb1 = new GeoLabel({x:110, y:10, width:200, height:25, value:"GeoClient",opacity:1, forecolor:"#003399", backcolor:"url(#litegrad)", align:"middle",adjust:"fit"});
	var lb2 = new GeoLabel({x:10, y:55, width:400, height:15, value:"only redistribute and/or modify under the terms of the GNU GPL.",opacity:0, forecolor:"#99CCFF", backcolor:"#66CCFF",align:"middle",adjust:"fit"});
	var lb3 = new GeoLabel({x:60, y:70, width:300, height:15, value:"Copyright 2003 Nedjo Rogers & Amri Rosyada.",opacity:0, forecolor:"#CCFFFF", backcolor:"#66CCFF", overcolor:"#003399",align:"middle",adjust:"fit"});
	var bt1 = new GeoButton({x:180, y:100, width:40, height:15, action:"this.container.close()", value:"OK", adjust:"fit"});
	aboutWin.addWidget(lb1)
	aboutWin.addWidget(lb2)
	aboutWin.addWidget(lb3)
	aboutWin.addWidget(bt1)
	aboutWin.pack();
}
/******************************
*		SHOW : ColorPicker		*
*******************************/
var SymEditorWin;
function showSymbolEditor(evt,act){
	var targ=evt.getTarget();
	var targid=targ.getAttribute("id");
	if(SymEditorWin){
		SymEditorWin.close();
		SymEditorWin=null;
	}
/*
	if (cid.indexOf("_label")>-1) ssorsw.firstChild.setData("Stroke width")
	if (cid.indexOf("fillsymbol")>-1) ssorsw.firstChild.setData("Stroke width")
	if (cid.indexOf("pensymbol")>-1) ssorsw.firstChild.setData("Stroke width")
	if (cid.indexOf("markersymbol")>-1) ssorsw.firstChild.setData("Symbol size")
*/
	SymEditorWin=new GeoWindow({x:150, y:50, width:1, height:1,title:"Symbol Editor"});
	SymEditorWin.target=evt.getTarget();
	SymEditorWin.show();
	var cp=new ColorPicker({x:0,y:0,picksize:13,column:6,gap:0,action:act});
	var wd=(cp.column+1)*(cp.picksize+cp.gap);
	var ht=12*(cp.picksize+cp.gap);
	var whatcombo = new GeoComboBox({x:10, y:5, width:wd, height:15, selindex:null,listdata:["fill","stroke"]});
	var scrollp= new GeoScrollPane({x:10, y:25,width:wd, height:ht, scrollsize:13});
	SymEditorWin.addWidget(whatcombo);
	SymEditorWin.addWidget(scrollp);
	SymEditorWin.pack();
	var cpn=cp.getNode();
	scrollp.setContentNode(cpn,0,0,cp.column*(cp.picksize+cp.gap),cp.row*(cp.picksize+cp.gap));
	SymEditorWin.colpick=cp;
	SymEditorWin.what=whatcombo;
	SymEditorWin.colpick.mouseup();
}
function changeLabelColor(evt){
	var newcolor = evt.getTarget().getAttribute("fill");
	var targ=SymEditorWin.target;
	pa=targ.getParentNode();
	pa.setAttribute("fill",newcolor);
}
function changeSymbolColor(evt){
	var newcolor = evt.getTarget().getAttribute("fill");
	var what = SymEditorWin.what.getValue();
	var targ=SymEditorWin.target;
	var cid=targ.getAttribute("id");
	var layername = cid.substring(cid.indexOf("_")+1,cid.lastIndexOf("_"));
	symbIdx = parseInt(cid.substring(cid.lastIndexOf("_")+1,cid.length));
	var aLeg=getALegend(layername);
	if (cid.indexOf("fillsymbol")>-1) {
		if(what=="fill"){
			targ.setAttribute("fill",newcolor);
			aLeg.Symbols[symbIdx].bgFill=newcolor;
		}else{
			targ.setAttribute("stroke",newcolor);
			aLeg.Symbols[symbIdx].bgStroke=newcolor;
		}
	}else	if (cid.indexOf("pensymbol")>-1) {
		if(newcolor!="none") {
			targ.setAttribute("stroke",newcolor);
			aLeg.Symbols[symbIdx].bgStroke=newcolor;
		}else{
			alert("Set this symbol color to 'none' will make it inaccessible"+"\r"+"Please choose another color.")
		}
	}else	if (cid.indexOf("markersymbol")>-1) {
		if(what=="fill"){
			targ.setAttribute("fill",newcolor);
			aLeg.Symbols[symbIdx].bgFill=newcolor;
		}else{
			targ.setAttribute("stroke",newcolor);
			aLeg.Symbols[symbIdx].bgStroke=newcolor;
		}
	}
	applyToMap(layername,aLeg);
}


/******************************
*		SHOW : InstantLEGEND		*
*******************************/
var instantlegend;
function showInstantLegend(){
	if(instantlegend){
		if(instantlegend.node) return;
	}
	instantlegend=new GeoWindow({x:10, y:10, width:1, height:1,title:"Instant Legend"});
	instantlegend.show();
	var qlt = svgdoc.getElementsByTagName("quickLegend");
	if(qlt.length==0) return;
	var qlc=qlt.item(0).getChildNodes();
	var ly=5;
	for(var i=0;i<qlc.length;i++){
		if(qlc.item(i).nodeName=="#text") continue;
		var qi=qlc.item(i).getElementsByTagName("info").item(0);
		var qp=qlc.item(i).getElementsByTagName("params").item(0);
		var qiv=qi.firstChild.nodeValue; //text
		var qpv=qp.firstChild.nodeValue;
		var chcf="changeCF("+qpv+")"
		var lh=13;		var lw=350.0;
		var lb2 = new GeoLabel({name:("gl"+i),x:2, y:ly, width:lw, height:lh, action:chcf, value:qiv,opacity:0, forecolor:"#99CCFF", backcolor:"#66CCFF", overcolor:"#003399",align:"left",adjust:"fit"});
		instantlegend.addWidget(lb2);
		ly+=2+lh;
	}
	instantlegend.pack();
}
/******************************
*				PREFERENCES			*
*******************************/
var prefwin;
function showPreferences(){
	if(prefwin){
		if(prefwin.node) return;
	}
	prefwin=new GeoWindow({x:10, y:10, width:1, height:1,title:"Preferences"});
	prefwin.show();
	var indices = new Array();
	if(getVisibility("keyMap")) indices[indices.length]=0
	if(getVisibility("legend")) indices[indices.length]=1
	if(hiliteon) indices[indices.length]=2
	var lbx=2;	var lby=5;	var cbh=14;	var gap=2;	var cgmlw=200;
	var pdata =["show Keymap","show Legend","highlight feauture on mouseover"]
	var listmdl0= new GeoLabel({opacity:0, backcolor:"#0066CC", forecolor:"#CCFFFF", overcolor:"#003399", align:"left",adjust:"fit"});
	var cbprefs = new GeoMultiListBox({action:"setPrefs(this.clickedRow,this.isIndexSelected(this.clickedRow))",x:lbx, y:lby, width:cgmlw, height:cbh*pdata.length, selindices:indices, listmodel:listmdl0, listdata:pdata})
	lby+=cbh*pdata.length+gap
	var legl= new GeoLabel({x:lbx, y:lby, width:0.85*cgmlw, height:cbh, value:"Coordinate Display Precission : ", opacity:0, forecolor:"#CCFFFF", overcolor:"#003399",align:"right",adjust:"fit"});
	var cprecsize= new GeoTextField({action:"setCPrecission(this.getValue())",x:lbx+(0.85*cgmlw)+gap, y:lby, width:0.25*cgmlw, height:cbh,align:"right",value:cprec, forecolor:"black", backcolor:"white",editable:true});
	prefwin.addWidget(cbprefs);
	prefwin.addWidget(legl);
	prefwin.addWidget(cprecsize);
	prefwin.pack();
}
function setCPrecission(num){
	cprec=parseInt(num);
}
function setPrefs(row,newstate){
	switch(row){
		case 0:
			showhide("keyMap",newstate);	break;
		case 1:
			showhide("legend",newstate);	break;
		case 2:
			hiliteon=newstate;				break;
		default :
			break;
	}
}
function showhide(nodeID,isvisible){
	var theNode = svgdoc.getElementById(nodeID);
	var tndis = theNode.getAttribute("visibility");
	if (isvisible){
		theNode.setAttribute("visibility","visible");
	}else{
		theNode.setAttribute("visibility","hidden");
	}
}
function getVisibility(nodeID){
	var theNode = svgdoc.getElementById(nodeID);
	var tndis = theNode.getAttribute("visibility");
	if (tndis=="hidden") return false;
	return true;
}

/******************************
*		SHOW : LABELSETTING		*
*******************************/
var labelwin;
function showLabelSetting(){
	if(labelwin){
		if(labelwin.node) return;
	}
	labelwin=new GeoWindow({x:10, y:10, width:1, height:1,title:"Label Setting"});
	labelwin.show();
	var gap=5;
	var lx=5;	var cx=lx+gap
	var ly=5;	var lh=14;
	var legn = new GeoLabel({x:lx, y:ly, width:100, height:lh+0.5, value:"Layer", forecolor:"#99CCFF",opacity:0, backcolor:"#0066CC",overcolor:"#003399", align:"middle", adjust:"fit"});
	var legv = new GeoLabel({x:lx+gap+100, y:ly, width:100, height:lh+0.75, value:"Label Field", forecolor:"#99CCFF",opacity:0, backcolor:"#0066CC",overcolor:"#003399", align:"middle", adjust:"fit"});
	var legs = new GeoLabel({x:lx+2.0*gap+200, y:ly, width:40, height:lh+0.5, value:"Size", forecolor:"#99CCFF",opacity:0, backcolor:"#0066CC",overcolor:"#003399", align:"middle", adjust:"fit"});
	labelwin.addWidget(legn);	labelwin.addWidget(legv);	labelwin.addWidget(legs);
	labelwin.tag=new Array();
	var legends = getLegendNames();
	for(var i=0;i<legends.length;i++){
		ly+=gap+lh;
		labelwin.tag[i]=new Array();
		labelwin.tag[i][0]=legends[i];
		var legtext = new GeoLabel({name:("l"+i),x:lx, y:ly, width:100, height:lh, value:legends[i], forecolor:"#003399", opacity:1.0, backcolor:"#99CCFF", overcolor:"cyan", align:"right", adjust:"fit"});
		var fields  = getFieldNames(legends[i]);
		var titlefield=getTitleField(legends[i]);
		var sli = getFieldIndex(legends[i],(legends[i]+"."+titlefield),false);
		labelwin.tag[i][1]=titlefield;
		var facmd="setLabelTag("+i+",1,this.getValue())"
		var fieldscombo = new GeoComboBox({action:facmd,name:("fieldscombo_"+i), x:lx+gap+100, y:ly, width:100, height:lh,selindex:sli,listdata:fields});
		var labsize = getLabelSize(legends[i])
		labelwin.tag[i][2]=labsize;
		var sacmd="setLabelTag("+i+",2,this.getValue())"
		var txtsize = new GeoTextField({action:sacmd, name:("txtsize_"+i),x:lx+2.0*gap+200, y:ly, width:50, height:lh, align:"right",value:labsize, forecolor:"black", backcolor:"white",editable:true});
		labelwin.addWidget(legtext);	labelwin.addWidget(fieldscombo);	labelwin.addWidget(txtsize);
	}
	ly+=gap+lh;
	var labnone = new GeoLabel({x:lx, y:ly, width:250, height:lh, value:"layers with zero label size are not labeled", forecolor:"#99CCFF", opacity:0, backcolor:"#99CCFF", overcolor:"#003399", align:"left", adjust:"fit"});
	ly+=gap+3.0*lh;
	var appl = new GeoButton({name:"app", x:lx+2.0*gap+200, y:ly, width:50, height:lh+2, action:"applyLabel()", value:"Apply", align:"middle",adjust:"fit", forecolor:"black",backcolor:"#CCCCCC"});
	labelwin.addWidget(labnone);
	labelwin.addWidget(appl);
	labelwin.pack();
}
function applyLabel(){
	for (var i=0;i<labelwin.tag.length;i++){
		if(isNaN(parseFloat(labelwin.tag[i][2]))) labelwin.tag[i][2]=0;
		setNameField(labelwin.tag[i][0],labelwin.tag[i][1],parseFloat(labelwin.tag[i][2]))
	}
	autoapplylabel()
}
function setLabelTag(idx,what,value){
	if (what==2){
		if(isNaN(parseFloat(value))) alert("'"+labelwin.tag[idx][0]+"' has non numeric size.")
	}
	labelwin.tag[idx][what]=value;
}
function getLabelSize(layerName){
	var nmlnode  = findNamedLayer(layerName);
	if(!nmlnode) return null;
	var lbszs = nmlnode.getElementsByTagName("LabelSize")
	if(lbszs.length==0) return 10.0;
	var lbsize = lbszs.item(0).firstChild.nodeValue;
	return lbsize;
}

/******************************
* 			SHOW : IDENTITY		*
*******************************/
var infoWin;
var chartWin;
function showIdentity(evt){
	var targ=evt.getTarget();
	var nodeid=targ.getAttribute('id');
	showIdentityFromId(nodeid);
}
function showIdentityFromId(nodid,x,y){
	nodid=String(nodid)
	fpos = nodid.lastIndexOf("f");
	idnumber = nodid.substring(fpos+1,nodid.length);
	layername = nodid.substring(1,fpos);
	if(!x) x=5;
	if(!y) y=5;
	showAttributeData(layername,idnumber,x,y);
}
function showAttributeData(layername,idnumber,x,y){
	var attdata =getAttributeData(layername,idnumber);
	showInfoWindow(x,y,170,200,layername,attdata)
}
function showInfoWindow(ox,oy,ow,oh,otitle,tabledata){
	if(infoWin){
		//if(infoWin.node) return;
		infoWin.close();	infoWin=null;
	}
	infoWin=new GeoWindow({x:ox, y:oy, width:1, height:1,title:"Info"});
	infoWin.show();
	var rowht=13;
	var infoTable = createTable(3,3,ow,rowht,otitle,tabledata,createColumnModel(tabledata))
	infoWin.Table=infoTable;
	infoTable.action="showChartWindow(this.title,this.getValue(0,this.selectedRow),infoWin)"
	var infoTableNode = infoTable.getNode();
	if(infoTable.height>oh){
		var scrollp= new GeoScrollPane({name:"a",x:3,y:3,width:ow,height:oh,scrollsize:13});
		var nexty=oh+rowht+6
		var itl = new GeoLabel({x:3, y:nexty, width:ow, height:rowht, value:"Click a field name for chart", opacity:0, backcolor:"#CCFFFF",forecolor:"#99CCFF",overcolor:"#003399", align:"left",adjust:"fit"});
		infoWin.addWidget(scrollp);
		infoWin.addWidget(itl);
		infoWin.pack();
		scrollp.setContent(infoTable);
	}else{
		var nexty=infoTable.height+rowht+6
		var itl = new GeoLabel({x:3, y:nexty, width:ow, height:rowht, value:"Click a field name for chart", opacity:0, backcolor:"#CCFFFF",forecolor:"#99CCFF",overcolor:"#003399", align:"left",adjust:"fit"});
		infoWin.addWidget(infoTable);
		infoWin.addWidget(itl);
		infoWin.pack();
	}
}
function showChartWindow(layername,fieldname,callerWindow){
	var chdata = getChartData(layername,fieldname);
	if(chdata==null) {
		alert("'"+fieldname+"' is not a numeric field.");		return;
	}
	if(chartWin){
		chartWin.close();		charWin=null;
	}
	var cx=5;	var cy=5;	var cw=250;	var ch=150;
	if(callerWindow){
		cx=callerWindow.x+callerWindow.width+1
		cy=callerWindow.y
		ch=(callerWindow.height)/1.25
	}
	chartWin=new GeoWindow({x:cx, y:cy, width:1, height:1,title:layername});
	chartWin.show();
	var brd=true;
	if(chdata.length>20) brd =false;
	var acmd = "setInfoWinData('"+layername+"',this.id)"
	var colmod = new GeoRect ({action:acmd,x:0,y:0,width:4,height:5, backcolor:"wheat", overcolor:"red",bordered:brd,outline:"black"});
	var infoChart = new columnChart({title:fieldname,x:5,y:0,width:cw,height:ch,colsize:"auto",columnmodel:colmod,chartdata:chdata,ordered:true,colortype:"ramp",direction:"horizontal"});
	infoChart.lyrname=layername;
	var itl = new GeoLabel({x:0, y:ch+2, width:cw, height:12, value:"Click a column to see its info", opacity:0, backcolor:"#CCFFFF",forecolor:"#99CCFF",overcolor:"#003399", align:"left",adjust:"fit"});
	chartWin.Chart=infoChart;
	chartWin.txt=itl;
	chartWin.addWidget(infoChart)
	chartWin.addWidget(itl)
	infoChart.getNode().addEventListener("mouseover",infoChartOver,false);
	infoChart.getNode().addEventListener("mouseout",infoChartOut,false);
	chartWin.pack();
}
function setInfoWinData(layername,idnumber){
	if(infoWin==null) return;
	if(infoWin.node==null) {
		showAttributeData(layername,idnumber,infoWin.x,infoWin.y);		return;
	}
	if(infoWin.Table==null) return;
	var attdata=getAttributeData(layername,idnumber);
	infoWin.Table.setData(attdata);
}
function infoChartOver(evt){
	if(!chartWin) return;	if(!chartWin.Chart) return;
	hiliteFeature(chartWin.Chart.currentIndex,true)
}
function infoChartOut(evt){
	if(!chartWin) return;	if(!chartWin.Chart) return;
	hiliteFeature(chartWin.Chart.currentIndex,false)
}
function hiliteFeature(rowindex,state){
	if(!chartWin) return;	if(!chartWin.Chart) return;
	var nodid="l"+chartWin.Chart.lyrname+"f"+chartWin.Chart.chartdata[rowindex][2]
	var mapfeature =svgdoc.getElementById(nodid);
	if(mapfeature)	hilightFeature(mapfeature,state)
}
function createColumnModel(tabledata){
	var colmodel= new Array();
	colmodel[0] = new GeoButton({width:100, action:null, align:"right",adjust:"fit", forecolor:"#003399"});
	colmodel[1] = new GeoLabel ({width:100, action:null, align:"left" ,adjust:"fit", forecolor:"black", backcolor:"#99CCFF", overcolor:null});
	var cml = colmodel.length;
	for (var i=cml;i<tabledata.length;i++){
		colmodel[i]=colmodel[1];
	}
	return colmodel;
}
function createTable(ox,oy,ow,rh,otitle,tabledata,tblmodel){
	if(!tabledata) return;	if(tabledata.length==0) return;	if(tabledata[0].length==0) return;
	var ocol=tabledata.length;
	var orow=tabledata[0].length;
	var cm_title= new GeoLabel({adjust:"fit", forecolor:"#CCFFFF", backcolor:"#003399"});
	var thetable = new GeoTable({name:"tt", action:"", gap:0.25,x:ox, y:oy, width:ow, height:rh*(orow+1.0), rowheight:rh, row:orow, column:ocol, title:otitle, columnmodel:tblmodel, titlemodel:cm_title, data:tabledata, coladjust:"auto"});
	return thetable
}
function getAttributeData(layername,idnumber){
	idnumber=parseInt(idnumber);
	featNameIDs = svgdoc.getElementsByTagName(layername+".FeatureID");
	var foundfeat =null;
	for (k=0;k<featNameIDs.length;k++){
		if (featNameIDs.item(k).firstChild.nodeValue==parseInt(idnumber)) {
			foundfeat = featNameIDs.item(k);
			break;
		}
	}
	if (!foundfeat) return null;
	fikparc = foundfeat.getParentNode().getChildNodes();
	var fldnames=new Array();
	var values=new Array();
	for (j=0;j<fikparc.length;j++){
		fpj=fikparc.item(j);
		if ( fpj.nodeName=="#text") continue
		if ( (fpj.nodeName==(layername+".XMin")) ||(fpj.nodeName==(layername+".YMin"))||(fpj.nodeName==(layername+".XMax"))||(fpj.nodeName==(layername+".YMax")) ) continue;
		if ( (fpj.nodeName==(layername+".Shape"))||(fpj.nodeName==(layername+".FeatureID"))||(fpj.nodeName==(layername+".Geometry")) ) continue;
		var fldname = fpj.nodeName.substring(layername.length+1,fpj.nodeName.length)
		fldnames[fldnames.length]=fldname
		values[values.length]  = fpj.firstChild.nodeValue
	}
	return [fldnames,values];
}
function getChartData(layername,fieldname){
	var chartdata=new Array();
	var featColl = svgdoc.getElementsByTagName("featureCollection").item(0);
	var fValues = featColl.getElementsByTagName(layername+"."+fieldname);
	var nmlnode  = findNamedLayer(layername);
	var titleField = nmlnode.getElementsByTagName("NameField").item(0).firstChild.nodeValue;
	for (var i=0;i<fValues.length;i++){
		var featNode = fValues.item(i).getParentNode()
		var idnumber = featNode.getElementsByTagName(layername+".FeatureID").item(0).firstChild.nodeValue
		var aTitle = featNode.getElementsByTagName(layername+"."+titleField).item(0).firstChild.nodeValue
		var aValue = fValues.item(i).firstChild.nodeValue;
		if(isNaN(parseFloat(aValue))) return null;
		chartdata[i]=[parseFloat(aValue),aTitle,idnumber]
	}
	return chartdata;
}
function createTable(ox,oy,ow,rh,otitle,tabledata,tblmodel){
	if(!tabledata) return;
	if(tabledata.length==0) return;
	if(tabledata[0].length==0) return;
	var ocol=tabledata.length;
	var orow=tabledata[0].length;
	var cm_title= new GeoLabel({adjust:"fit", forecolor:"#CCFFFF", backcolor:"#003399"});
	var thetable = new GeoTable({name:"tt", action:"", gap:0.25,x:ox, y:oy, width:ow, height:rh*(orow+1.0), rowheight:rh, row:orow, column:ocol, title:otitle, columnmodel:tblmodel, titlemodel:cm_title, data:tabledata, coladjust:"auto"});
	return thetable
}


/******************************
*		SHOW : SEARCH WINDOW		*
*******************************/
var searchWin
function showSearchWindow(){
	if(searchWin){
		if(searchWin.node) return;
		//searchWin.close();	searchWin=null;
	}
	searchWin=new GeoWindow({x:5, y:5, width:1, height:1,title:"Search"});
	searchWin.show();
	var legends = getLegendNames()
	var fields  = getFieldNames(legends[0]);
	var ops =["==","<","<=","!=",">=",">","contains"]
	var valuesu = getUniqueValuesOf(legends[0],fields[0])
	searchWin.tag=[legends[0],fields[0],ops[4],valuesu[0]];
	var cbx=5;	var lby=5;	var cby=11;	var cbh=13;	var gap=2;
	var lbw=60;	var cbw=100;
	var lyrl = new GeoLabel({x:cbx, y:lby, width:lbw, height:cbh, value:"Layer", forecolor:"#003366",opacity:0, backcolor:"#0066CC",overcolor:"#99CCFF",align:"right", adjust:"fit"});
	var lyrc = new GeoComboBox({action:"setSearchTag(0,this.getValue())", x:cbx+lbw+gap, y:lby, width:cbw, height:cbh,selindex:null,listdata:legends});
	var fldl = new GeoLabel({x:cbx, y:lby+cbh+gap, width:lbw, height:cbh, value:"Field", forecolor:"#003366",opacity:0, backcolor:"#0066CC",overcolor:"#99CCFF",align:"right", adjust:"fit"});
	var fldc = new GeoComboBox({action:"setSearchTag(1,this.getValue())", x:cbx+lbw+gap, y:lby+cbh+gap, width:cbw, height:cbh,selindex:null,listdata:fields});
	var opsl = new GeoLabel({x:cbx, y:lby+2.0*(cbh+gap), width:lbw, height:cbh, value:"Operator", forecolor:"#003366",opacity:0, backcolor:"#0066CC",overcolor:"#99CCFF",align:"right", adjust:"fit"});
	var opsc = new GeoComboBox({action:"setSearchTag(2,this.getValue())", x:cbx+lbw+gap, y:lby+2.0*(cbh+gap), width:cbw, height:cbh,selindex:4,listdata:ops});
	var vall = new GeoLabel({x:cbx, y:lby+3.0*(cbh+gap), width:lbw, height:cbh, value:"Value", forecolor:"#003366",opacity:0, backcolor:"#0066CC",overcolor:"#99CCFF",align:"right", adjust:"fit"});
	var valc = new GeoComboBox({action:"setSearchTag(3,this.getValue())", x:cbx+lbw+gap, y:lby+3.0*(cbh+gap), width:cbw, height:cbh,selindex:null,listdata:valuesu,editable:true});
	var infl = new GeoLabel({x:cbx, y:lby+4.0*(cbh+gap), width:lbw+cbw, height:cbh, value:"value may be typed directly", forecolor:"#99CCFF",opacity:0, backcolor:"#0066CC",overcolor:"#003399",align:"middle", adjust:"fit"});
	var srchlabel= new GeoLabel({x:cbx, y:lby+6.0*(cbh+gap), width:lbw+cbw, height:cbh, value:"Display Search Result As : ", forecolor:"#003366",opacity:0, backcolor:"#0066CC",overcolor:"#99CCFF",align:"left", adjust:"fit"});
	var srchgraph= new GeoButton({x:cbx, y:lby+7.0*(cbh+gap), width:lbw, height:cbh+1, action:"searchFeature(0)", value:"Graph", adjust:"fit"});
	var srchtable= new GeoButton({x:cbx+lbw+gap, y:lby+7.0*(cbh+gap), width:lbw, height:cbh+1, action:"searchFeature(1)", value:"Table", adjust:"fit"});

	searchWin.addWidget(lyrl);
	searchWin.addWidget(lyrc);	searchWin.combolayers=lyrc;
	searchWin.addWidget(fldl);
	searchWin.addWidget(fldc); searchWin.combofields=fldc;
	searchWin.addWidget(opsl);
	searchWin.addWidget(opsc);
	searchWin.addWidget(vall);
	searchWin.addWidget(valc);	searchWin.combovalues=valc;
	searchWin.addWidget(infl);	searchWin.searchstate=infl;
	searchWin.addWidget(srchlabel);	
	searchWin.addWidget(srchgraph);	
	searchWin.addWidget(srchtable);	
	searchWin.pack();
}
function setSearchTag(idx,value){
	if(idx==0) setFieldsCombo();
	if(idx==1) setValuesCombo();
	searchWin.tag[idx]=value;
}
function setFieldsCombo(){
	var legname = searchWin.combolayers.getValue();
	searchWin.combofields.setListData(getFieldNames(legname));
}
function setValuesCombo(){
	var legname = searchWin.combolayers.getValue();
	var aflname = searchWin.combofields.getValue();
	var valuesu = getUniqueValuesOf(legname,aflname)
	searchWin.combovalues.setListData(valuesu)
}
function searchFeature(searchresulttype){
	searchWin.searchstate.setValue("Searching...please wait");
	var searchArray=new Array();
	var idArray=new Array();	var titleArray=new Array();	var valueArray=new Array();
	var layername= searchWin.tag[0];
	var fieldname= searchWin.tag[1];
	var featColl = svgdoc.getElementsByTagName("featureCollection").item(0);
	var fValues  = featColl.getElementsByTagName(layername+"."+fieldname);
	var nmlnode  = findNamedLayer(layername);
	var titleField = nmlnode.getElementsByTagName("NameField").item(0).firstChild.nodeValue;
	var found=0;
	for (var i=0;i<fValues.length;i++){
		var featNode = fValues.item(i).getParentNode()
		var featId = featNode.getElementsByTagName(layername+".FeatureID").item(0).firstChild.nodeValue
		var aTitle = featNode.getElementsByTagName(layername+"."+titleField).item(0).firstChild.nodeValue
		var aValue = fValues.item(i).firstChild.nodeValue;
		var qValue = searchWin.tag[3];
		switch (searchWin.tag[2]) {
			case "contains" :
				xValue=(aValue+"").toLowerCase();		yValue=(qValue+"").toLowerCase();
				if (xValue.indexOf(yValue)>-1) {
					idArray[idArray.length]="l"+layername+"f"+featId
					titleArray[titleArray.length]=aTitle;
					valueArray[valueArray.length]=aValue;
					found+=1;
				}
				break;
			default:
				if (!isNaN(parseFloat(aValue))){
					xValue=parseFloat(aValue);				yValue=parseFloat(qValue);
				}else{
					xValue="'"+aValue+"'";					yValue="'"+qValue+"'";
				}
				var str = xValue+searchWin.tag[2]+yValue;
				var ev = eval(str);
				if(ev){
					idArray[idArray.length]="l"+layername+"f"+featId
					titleArray[titleArray.length]=aTitle
					valueArray[valueArray.length]=aValue
					found+=1;
				}
				break;
		}
	}
	if (idArray.length==0) {
		searchWin.searchstate.setValue("NO matching features")
		searchWin.removeWidget(searchWin.result);
		searchWin.pack();
	}else{
		searchWin.searchstate.setValue("Found : "+found+" features");
		if(searchresulttype>0)	{
			showSearchTable(idArray,titleArray,valueArray,layername,fieldname);
		}else{
			showSearchGraph(idArray,titleArray,valueArray,layername,fieldname);
		}
	}
}
var searchTableWin;
function showSearchTable(idArray,titleArray,valueArray,layername,fieldname){
	if(searchTableWin){
		searchTableWin.close();	searchTableWin=null;
	}
	searchTableWin=new GeoWindow({x:searchWin.x, y:(searchWin.y+searchWin.height+1), width:1, height:1,title:"Search Result Table"});
	searchTableWin.tag=idArray;
	searchTableWin.displaytype=0;
	searchTableWin.show();
	var rwh=13;
	var srchtagval=searchWin.tag[0]+"."+searchWin.tag[1]+" "+searchWin.tag[2]+" "+searchWin.tag[3];
	var srchinf= new GeoLabel({x:5, y:3, width:0.45*searchWin.width, height:rwh, value:"Cell click action", forecolor:"#99CCFF",opacity:0, backcolor:"#0066CC",overcolor:"#003399",align:"middle", adjust:"fit"});
	var dtype=["feature info","zoom feature","pan feature"]
	var srchcb = new GeoComboBox({action:"setDisplayType(this.container,this.selindex)",x:0.45*searchWin.width+7, y:3, width:0.45*searchWin.width, height:rwh,selindex:searchTableWin.displaytype,listdata:dtype});
	var tbldata=[titleArray,valueArray]
	var tblmodel=createColumnModel(tbldata);
	var srctable = createTable(0,0,1,rwh,srchtagval,tbldata,tblmodel);
	srctable.name="searchtable";	srctable.coladjust="all";	srctable.container=searchTableWin;
	srctable.idarray=idArray;
	srctable.action="searchResultClick(this.container,this.idarray[this.selectedRow])";
	var scrollp = new GeoScrollPane({x:5,y:20,width:0.95*searchWin.width,height:160,scrollsize:rwh});
	searchTableWin.addWidget(srchinf);
	searchTableWin.addWidget(srchcb);
	searchTableWin.addWidget(scrollp);
	searchTableWin.pack();
	scrollp.setContent(srctable);
	srctable.getNode().addEventListener("mouseover",overTableSearch,false);
	srctable.getNode().addEventListener("mouseout",outTableSearch,false);
}
var searchGraphWin;
function	showSearchGraph(idArray,titleArray,valueArray,layername,fieldname){
	if(searchGraphWin){
		searchGraphWin.close();	searchGraphWin=null;
	}
	var chdata = new Array();
	for (var i=0;i<valueArray.length;i++){
		if(isNaN(parseFloat(valueArray[i]))){
			alert("'"+fieldname+"' is not a numeric field.");			return;
		}
		chdata[i]=[parseFloat(valueArray[i]),titleArray[i],idArray[i]];
	}
	searchGraphWin=new GeoWindow({x:(searchWin.x+searchWin.width+1), y:searchWin.y, width:1, height:1,title:"Search Result Graph"});
	searchGraphWin.displaytype=0;
	searchGraphWin.show();
	var rwh=13;
	var srchtagval=searchWin.tag[0]+"."+searchWin.tag[1]+" "+searchWin.tag[2]+" "+searchWin.tag[3];
	var srchinf= new GeoLabel({x:5, y:3, width:150, height:rwh, value:"Column click action : ", forecolor:"#99CCFF",opacity:0, backcolor:"#0066CC",overcolor:"#003399",align:"middle", adjust:"fit"});
	var dtype=["feature info","zoom feature","pan feature"];
	var srchcb = new GeoComboBox({action:"setDisplayType(this.container,this.selindex)",x:152, y:3, width:100, height:rwh,selindex:null,listdata:dtype});
	var brd=true;	if(chdata.length>20) brd = false;
	var colmod = new GeoRect ({x:0,y:0,width:10.0,height:5, backcolor:"wheat", overcolor:"red",bordered:brd,outline:"black"});
	var srchchart = new columnChart({title:srchtagval,x:3,y:20,width:250,height:170,colsize:"auto",columnmodel:colmod,chartdata:chdata,ordered:true,colortype:"ramp",direction:"horizontal"});
	srchchart.action="searchResultClick(this.container,this.container.Chart.chartdata[this.currentIndex][2])";
	searchGraphWin.addWidget(srchinf);
	searchGraphWin.addWidget(srchchart); searchGraphWin.Chart=srchchart;
	searchGraphWin.addWidget(srchcb);
	searchGraphWin.pack();
	srchchart.getNode().addEventListener("mouseover",searchChartOver,false)
	srchchart.getNode().addEventListener("mouseout",searchChartOut,false)
}
function overTableSearch(evt){
	var en=evt.getTarget().getParentNode().getParentNode().getAttribute("id");
	if(en.indexOf("searchtable_")<0) return;
	hiliteTableSearch(findrowfromid(en),true);
}
function outTableSearch(evt){
	var en=evt.getTarget().getParentNode().getParentNode().getAttribute("id");
	if(en.indexOf("searchtable_")<0) return;
	hiliteTableSearch(findrowfromid(en),false);
}
function hiliteTableSearch(rowindex,state){
	var nodid=searchTableWin.tag[rowindex];
	var mapfeature =svgdoc.getElementById(nodid);
	if(mapfeature)	hilightFeature(mapfeature,state);
}
function findrowfromid(en){
	var fd=en.indexOf("_");
	var ld=en.lastIndexOf("_");
	var col = en.substring(fd+1,ld);
	var row = en.substring(ld+1,en.length);
	return row;
}
function hiliteChartSearch(row,state){
	var dt = searchGraphWin.Chart.chartdata
	var nodid=dt[row][2];
	var mapfeature =svgdoc.getElementById(nodid);
	if(mapfeature)	hilightFeature(mapfeature,state)
}
function searchChartOver(evt){
	var row = searchGraphWin.Chart.currentIndex;
	hiliteChartSearch(row,true);
}
function searchChartOut(evt){
	var row = searchGraphWin.Chart.currentIndex;
	hiliteChartSearch(row,false);
}
function setDisplayType(container,type){
	container.displaytype=type;
}
function searchResultClick(container,featureid){
	switch (container.displaytype){
		case 0:
			showIdentityFromId(featureid,container.x+container.width,container.y);
			break;
		case 1:
			zoomto(featureid);
			break;
		case 2:
			panto(featureid);
			break;
		default:
			break;
	}
}


/******************************
*		SHOW : LEGENDSETTING		*
*******************************/
function showLegendTypeChanger(evt){
	var nodid = evt.getTarget().getAttribute("id")
	var firstdash=nodid.indexOf("_")
	var lastdash=nodid.lastIndexOf("_")
	var legname=nodid.substring(firstdash+1,lastdash)
	showLegendSetting(legname);
}
var legendWin;
function showLegendSetting(legname){
	if(legendWin){
		legendWin.close();	legendWin=null;
	}
	legendWin=new GeoWindow({x:100, y:5, width:1, height:1,title:"Legend Setting"});
	legendWin.show();
	var legends  = getLegendNames();
	if(legname==null) legname = legends[0];
	var legtypes=getALegend(legname).Type_Names;
	var legindex=getLegIndex(legname);
	var typeindex=getTypeIndex(legname);

	var lbx=5;	var lby=5;	var cbh=13;	var gap=3;	var lbw=100; var cbw=100;	var cbx =lbx+lbw+gap;
	var lab1 = new GeoLabel({x:lbx, y:lby, width:lbw, height:cbh, value:"Layer Name", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	legendWin.cblegname = new GeoComboBox({name:"lcombo",action:"setTypeIndex()", x:cbx, y:lby, width:cbw, height:cbh, selindex:legindex,listdata:legends});
	lby+=cbh+gap;
	var lab2 = new GeoLabel({x:lbx, y:lby, width:lbw, height:cbh, value:"Legend Type", opacity:0, backcolor:"#99CCFF", forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	legendWin.cblegtype = new GeoComboBox({action:"changeTypeIndex(this.selindex)", x:cbx, y:lby, width:cbw, height:cbh, selindex:typeindex,listdata:legtypes});
	legendWin.addWidget(lab1);
	legendWin.addWidget(legendWin.cblegname);
	legendWin.addWidget(lab2);
	legendWin.addWidget(legendWin.cblegtype);
	changeTypeIndex(typeindex);
	legendWin.pack();
}
function setTypeIndex(){
	var legname = legendWin.cblegname.getValue();
	var newindex = getTypeIndex(legname);
	legendWin.cblegtype.setSelectedIndex(newindex);
}
function changeTypeIndex(newindex){
	resetWidgets();
	switch (newindex){
		case 0:	showLegendSingle();	break;
		case 1:	setTimeout("showLegendUnique()",100);	break;
		case 2:	setTimeout("showLegendGradual()",100);	break;
		case 3:	setTimeout("showLegendChart()",100);	break;
		default:	break;
	}
}
function resetWidgets(){
	if(legendWin.cbfields){
  		if(legendWin.cbfields.txt) legendWin.removeWidget(legendWin.cbfields.txt);
  		if(legendWin.cbfields.scroll) {
			legendWin.removeWidget(legendWin.cbfields.scroll);
			legendWin.cbfields.scroll=null;
		}else{
			legendWin.removeWidget(legendWin.cbfields);
		}
		legendWin.cbfields=null;
	}
	var abc =[legendWin.applybutton,legendWin.cbfield,legendWin.cbctype,legendWin.cbcnum,legendWin.cbcharttype,legendWin.cbchartsize];
	for(var i=0;i<abc.length;i++){	
		if(abc[i]){
	  		if(abc[i].txt)legendWin.removeWidget(abc[i].txt);
		 	legendWin.removeWidget(abc[i]);
			abc[i]=null;
		}
	}
}

function showLegendSingle(){
	addApplyButton(legendWin.cblegtype);
}
function showLegendUnique(){
	var gap= 3;	var lwgt=legendWin.cblegtype;
	var uw = lwgt.width;	var ux = lwgt.x;	var uy = lwgt.y+lwgt.height+gap;	var uh = lwgt.height;
	var legname  = legendWin.cblegname.getValue();
	var fieldname= getALegend(legname).fName;
	var fields   = getFieldNames(legname);
	var fieldindex=getFieldIndex(legname,fieldname,false)
	legendWin.cbfield = new GeoComboBox({x:ux, y:uy, width:uw, height:uh, selindex:fieldindex,listdata:fields});
	legendWin.cbfield.txt=new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Classification Field", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	legendWin.addWidget(legendWin.cbfield.txt);
	legendWin.addWidget(legendWin.cbfield);
	addApplyButton(legendWin.cbfield);
}
function showLegendGradual(){
	var gap= 3;	var lwgt=legendWin.cblegtype;
	var uw = lwgt.width;	var ux = lwgt.x;	var uy = lwgt.y+lwgt.height+gap;	var uh = lwgt.height;
	var legname  = legendWin.cblegname.getValue();
	var fieldname= getALegend(legname).fName;
	var fieldsn = getNumericFieldNames(legname);
//alert("fields "+fieldsn)
	if(fieldsn.length==0){
		showNoNumericFields();	return;
	}
	var fieldindex=getFieldIndex(legname,fieldname,true)
	var classtypes	= ["quantile","equal interval"];
	var classt = getALegend(legname).getClassificationType();
	var ctypeindex = 0;
	if (classt=="equal interval") ctypeindex=1;
	var classn = getALegend(legname).Classes.length;
	legendWin.cbfield = new GeoComboBox({x:ux, y:uy, width:uw, height:uh, selindex:fieldindex,listdata:fieldsn});
	legendWin.cbfield.txt = new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Classify By", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	uy+=gap+uh;
	legendWin.cbctype = new GeoComboBox({x:ux, y:uy, width:uw, height:uh, selindex:ctypeindex,listdata:classtypes});
	legendWin.cbctype.txt = new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Classification Type", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	uy+=gap+uh;
	legendWin.cbcnum = new GeoTextField({x:ux, y:uy, width:uw/2.0, height:uh,align:"right",value:classn, forecolor:"black", backcolor:"white",editable:true});
	legendWin.cbcnum.txt = new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Class Number", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});

	legendWin.addWidget(legendWin.cbfield.txt);
	legendWin.addWidget(legendWin.cbfield);
	legendWin.addWidget(legendWin.cbctype.txt);
	legendWin.addWidget(legendWin.cbctype);
	legendWin.addWidget(legendWin.cbcnum.txt);
	legendWin.addWidget(legendWin.cbcnum);
	addApplyButton(legendWin.cbctype);
}
function showLegendChart(){
	var cl = legendWin.cblegtype;
	var gap= 3;
	var ux = cl.x; var uy = cl.y+cl.height+gap;	var uw = cl.width; var uh = cl.height;
	var legname  = legendWin.cblegname.getValue();
	var fieldsn = getNumericFieldNames(legname);
	if(fieldsn.length==0){
		showNoNumericFields();		return;
	}
	var fieldindices=new Array();
	var fieldnames= (getALegend(legname).fName).split("|");
	for (var i=0;i<fieldnames.length;i++){
		var fldidx=getFieldIndex(legname,fieldnames[i],true);
		fieldindices[fieldindices.length]=fldidx;
	}
	var charttypes	= ["column","pie"];
	var charttype	= getALegend(legname).ChartType;
	var chartsize	= getALegend(legname).ChartSize;
	var ctypeindex = 0;	if (charttype=="pie") ctypeindex=1;
	var listmdl0=new GeoLabel({backcolor:"white", opacity:1.0, overcolor:"#99CCFF", align:"left",adjust:"fit"});
	legendWin.cbfields = new GeoMultiListBox({x:ux, y:uy, width:uw, height:uh*fieldsn.length, selindices:fieldindices, listmodel:listmdl0, listdata:fieldsn})
	legendWin.cbfields.txt = new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Classification Fields", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	legendWin.addWidget(legendWin.cbfields.txt);
	if(fieldsn.length>4){
		legendWin.cbfields.scroll = new GeoScrollPane({x:ux, y:uy, width:uw, height:6*fieldsn.length,scrollsize:uh});
		legendWin.cbfields.scroll.setContent(legendWin.cbfields);
		legendWin.addWidget(legendWin.cbfields.scroll);
		uy+=gap+6*fieldsn.length;
	}else{
		legendWin.addWidget(legendWin.cbfields);
		uy+=gap+uh*fieldsn.length;
	}
	legendWin.cbcharttype = new GeoComboBox({x:ux, y:uy, width:uw, height:uh, selindex:ctypeindex,listdata:charttypes});
	legendWin.cbcharttype.txt = new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Chart Fields", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	uy+=gap+uh;
	legendWin.cbchartsize = new GeoTextField({x:ux, y:uy, width:uw/2.0, height:uh,align:"right",value:chartsize, forecolor:"black", backcolor:"white",editable:true});
	legendWin.cbchartsize.txt = new GeoLabel({x:5, y:uy, width:uw, height:uh, value:"Chart Size", opacity:0, backcolor:"#99CCFF",forecolor:"#99CCFF",overcolor:"#003399", align:"right",adjust:"fit"});
	legendWin.addWidget(legendWin.cbcharttype.txt);
	legendWin.addWidget(legendWin.cbcharttype);
	legendWin.addWidget(legendWin.cbchartsize.txt);
	legendWin.addWidget(legendWin.cbchartsize);
	addApplyButton(legendWin.cbchartsize);
}
function applyLegend(){
	var legname = "a_"+legendWin.cblegname.getValue()+"_0";
	var legtype = legendWin.cblegtype.getValue();
	switch (legendWin.cblegtype.selindex){
		case 0:	
			//single symbol
			changeCF(legname,legtype,null,null,null,null,null,null)
			break;
		case 1:
			//unique value
			var fld = legendWin.cblegname.getValue()+"."+legendWin.cbfield.getValue();
			changeCF(legname,legtype,null,fld,null,null,null,null)
			break;
		case 2:
			//graduated color
			var ctp = legendWin.cbctype.getValue();
			var fld = legendWin.cblegname.getValue()+"."+legendWin.cbfield.getValue();
			if(isNaN(parseInt(legendWin.cbcnum.getValue()))) {
				alert("class number not an integer value."+"\n"+"Abort");	return;
			}
			var cnm = legendWin.cbcnum.getValue();
			changeCF(legname,legtype,ctp,fld,cnm,null,null,null)
			break;
		case 3:
			//chart symbol
			var flds = "";
			flds = legendWin.cbfields.getSelectedValues().join("|"+legendWin.cblegname.getValue()+".");
			flds = legendWin.cblegname.getValue()+"."+flds;
			if(isNaN(parseFloat(legendWin.cbchartsize.getValue()))) {
				alert("chart size not a numeric value."+"\n"+"Abort");	return;
			}
			var chs = parseFloat(legendWin.cbchartsize.getValue());
			var cht = legendWin.cbcharttype.getValue();
			changeCF(legname,legtype,null,flds,null,cht,chs,null)
			break;
		default:
			break;
	}
}
function addApplyButton(lastwidget){
	var gap= 3;
	var uw = legendWin.cblegtype.width;
	var ux = legendWin.cblegtype.x-gap-uw/2.0;
	var uy = lastwidget.y+4.0*lastwidget.height+gap
	var uh = legendWin.cblegtype.height;
	legendWin.applybutton = new GeoButton({name:"app", x:ux, y:uy+gap, width:(uw/2.0), height:1.2*uh, action:"applyLegend()", value:"Apply", align:"middle",adjust:"fit", forecolor:"black",backcolor:"#CCCCCC"});
	legendWin.addWidget(legendWin.applybutton);
	legendWin.pack();
}
function showNoNumericFields(){
	var gap=3;
	var ux = legendWin.cblegtype.x; 
	var uy=legendWin.cblegtype.y+4.0*legendWin.cblegtype.height+gap
	var uw = legendWin.cblegtype.width; var uh = legendWin.cblegtype.height;
	var legname  = legendWin.cblegname.getValue();
	var nostr = "Layer '"+legname+"' has no numeric field data."
	var L1 = new GeoLabel({x:5, y:uy, width:uw*2, height:uh, value:nostr, opacity:0, forecolor:"yellow", backcolor:"#003399",overcolor:"#003399", align:"middle",adjust:"fit"});
	legendWin.addWidget(L1);
	legendWin.pack();
}

/******************************
*		MISC ARRAY & INDEX		*
*******************************/
function getLegIndex(legname){
	var legendnames  = getLegendNames();
	for(var i=0;i<legendnames.length;i++){
		if(legendnames[i]==legname) return i;
	}
	return 0;
}
function getTypeIndex(legname){
	var aLeg     = getALegend(legname);
	for(var i=0;i<aLeg.Type_Names.length;i++){
		if(aLeg.Type==aLeg.Type_Names[i]) return i;
	}
	return 0;
}
function getFieldIndex(legname,fieldname,justnumeric){
	var fieldnames;
	if(justnumeric){
		fieldnames = getNumericFieldNames(legname)
	}else{
		fieldnames = getFieldNames(legname)
	}
	for(var i=0;i<fieldnames.length;i++){
		if((legname+"."+fieldnames[i])==fieldname) return i;
	}
	return 0;
}
function getLegendsObject(){
	var legendarray = new Array();
	for (var m=0;m<LEGS.List.length;m++){
		var aLeg=LEGS.List[m];
		legendarray[m]=aLeg;
	}
	return legendarray;
}
function getALegend(legname){
	var objs = getLegendsObject();
	for (var i=0;i<objs.length;i++){
		if(objs[i].Name==legname) return objs[i];
	}
	return objs[0];
}
function getLegendNames(){
	var legendarray = new Array();
	for (var m=0;m<LEGS.List.length;m++){
		var aLeg=LEGS.List[m];
		legendarray[m]=aLeg.Name;
	}
	return legendarray;
}
function getFieldNames(layername){
	var fieldarray = new Array();
	var aLeg=LEGS.findLeg("a_"+layername+"_0");
	if (aLeg.fieldarray!=null) return aLeg.fieldarray;
	if (aLeg.fieldList==null) aLeg.fieldList=sortArray(getFieldList(aLeg.Name));
	for (var i=0;i<aLeg.fieldList.length;i++){
		var fi = aLeg.fieldList[i];
		fieldarray[i]=fi.substring(layername.length+1,fi.length);
	}
	aLeg.fieldarray=fieldarray
	return aLeg.fieldarray;
}
function getFieldList(aLayerName){
	var allFields=new Array()
	var fcfields=svgdoc.getElementsByTagName("featureCollection").item(0).getElementsByTagName(aLayerName)
	for(f=0;f<fcfields.length;f++){
		var fcf=fcfields.item(f);
		allFields=addToFieldArray(fcf,allFields);
	}
	return allFields;
}
function getNumericFieldNames(layername){
	var fieldarray = new Array();
	var aLeg=LEGS.findLeg("a_"+layername+"_0");
	if (aLeg.fieldarraynumeric!=null) return aLeg.fieldarraynumeric;
	if (aLeg.fieldList==null) aLeg.fieldList=sortArray(getFieldList(aLeg.Name));
	if (aLeg.fieldListNumeric==null) aLeg.fieldListNumeric=getNumericFields(aLeg.fieldList);
	for (var i=0;i<aLeg.fieldListNumeric.length;i++){
		var fi = aLeg.fieldListNumeric[i];
		fieldarray[i]=fi.substring(layername.length+1,fi.length);
	}
	aLeg.fieldarraynumeric=fieldarray;
	return aLeg.fieldarraynumeric;
}
function getNumericFields(fieldList){
	var numericFields=new Array()
	for (var i=0;i<fieldList.length;i++){
		var isNumericField=true;
		var abc = svgdoc.getElementsByTagName(fieldList[i]);
		for (var j=0;j<abc.length;j++){ 
			var thevalue=abc.item(j).firstChild.nodeValue;
			if (isNaN(parseFloat(thevalue))) {
				isNumericField=false;	break;
			}
		}
		if (isNumericField) numericFields[numericFields.length]=fieldList[i];
	}
	return numericFields;
}

function getValuesOf(layername,fieldname){
	return getFieldValues(layername+"."+fieldname);
}
function getUniqueValuesOf(layername,fieldname){
	var aa =getFieldValues(layername+"."+fieldname);
	var uu =returnUnique(aa);
	return uu;
}

@


1.1
log
@*** empty log message ***
@
text
@@


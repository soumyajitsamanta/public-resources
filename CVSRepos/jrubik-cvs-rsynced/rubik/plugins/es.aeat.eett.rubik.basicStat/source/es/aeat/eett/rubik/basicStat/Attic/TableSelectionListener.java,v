head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.43.54;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.28.59;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 27-feb-2005
 *
 * TableSelectionListener.java
 *
 */
package es.aeat.eett.rubik.basicStat;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;

import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

import org.apache.log4j.Logger;
import org.java.plugin.PluginManager;

import com.tonbeller.jpivot.olap.model.Cell;

import es.aeat.eett.rubik.basicStat.operation.Suma;
import es.aeat.eett.rubik.core.cell.RubikCell;
import es.aeat.eett.rubik.core.util.FortmatUtil;
import es.aeat.eett.rubik.tableRubik.TableRubik;
import es.aeat.eett.rubik.tableRubik.TableRubikPlugin;


/**
  * <p>
 * en:
 * </p>
 * 
 * <p>
 * es: 
 * Clase que puede registrarse como oyente de la seleccion en 'tableRubikPlugin'
 * </p>
 * @@author f00992
 */
public class TableSelectionListener implements ListSelectionListener{
    private Logger logger = Logger.getLogger(TableSelectionListener.class);
    private float total=(float) 0.0;
	private Locale locale;
	private NumberFormat nf;
	private TableRubik tableRubik;

    TableSelectionListener() throws Exception {
        PluginManager pm = PluginManager.lookup(TableSelectionListener.class);
        TableRubikPlugin tableRubikPlugin = ((TableRubikPlugin) 
        		pm.getPlugin(TableRubikPlugin.PLUGIN_ID));    	
    	tableRubik=tableRubikPlugin.getTableRubik();
        locale=Locale.getDefault();
    }
    public void valueChanged(ListSelectionEvent e) {
        Number num;
        JTable tableDatos=tableRubik.getDataTable();
        TableModel tm = tableDatos.getModel();
        int[] rows=tableDatos.getSelectedRows();
        int[] cols=tableDatos.getSelectedColumns();
        if(rows.length<=1 && cols.length<=1){
            return;
        }
        ArrayList lista=new ArrayList();
        Float cero= new Float(0);
        for (int i=0; i<rows.length; i++){
            for(int j=0; j<cols.length; j++){
                RubikCell c = (RubikCell) tm.getValueAt(rows[i],cols[j]);
                if(c.getCell() instanceof Cell){
                    if(!c.getCell().isNull()){
                    	if(c.getCell().getValue()!=null && (c.getCell().getValue()instanceof Number))
                    		lista.add(c.getCell().getValue());
                    }else{
                		lista.add( cero);
                    }
                }
            }
        }
        String msg="  "+Suma.getName()+": "+new FortmatUtil().formatFloat(Suma.result(lista), 0, 2, locale);
        logger.warn(msg);
    }

}
@


1.1
log
@*** empty log message ***
@
text
@@


head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.42;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.14.02.37;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/* * Created on 24-ago-2005 * * JobFactoryInfo.java *  */package es.aeat.eett.infoRubik;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.java.plugin.PluginManager;import org.java.plugin.registry.Documentation;import org.java.plugin.registry.Extension;import es.aeat.eett.infoRubik.jobs.job_core.JobFactory;
public final class JobFactoryInfo {
    private static Set allJobFactory;

    public static Set getAll() {
        if (allJobFactory == null) {
        	allJobFactory = new HashSet();
            PluginManager pm = PluginManager.lookup(JobFactoryInfo.class);
            Collection extensions = pm.getRegistry().getExtensionPoint(
            		InfoRugikPlugin.PLUGIN_ID, "JobFactory").getConnectedExtensions();
            for (Iterator it = extensions.iterator(); it.hasNext();) {
            	Extension ext=(Extension) it.next();
            	JobFactoryInfo jobFactoryInfo=new JobFactoryInfo(ext);
            	allJobFactory.add(jobFactoryInfo);
            }
            allJobFactory = Collections.unmodifiableSet(allJobFactory);
        }
        return allJobFactory;
    }
    
    public static JobFactoryInfo getById(String id) throws Exception {
        for (Iterator it = getAll().iterator(); it.hasNext();) {
        	JobFactoryInfo jobFactoryInfo = (JobFactoryInfo) it.next();            if (id.equals(jobFactoryInfo.getId())) {
                return jobFactoryInfo;
            }               
        }
        throw new Exception("unknown JobFactoryInfo ID - " + id);
    }

    private Extension ext;
    private String nameJob=null;    private JobFactory jobFactory=null;
    
    private JobFactoryInfo(final Extension anExt) {
        ext = anExt;
    }
    
    public String getId() {
        return ext.getUniqueId();
    }
    public JobFactory getJobFactory() throws IllegalAccessException, ClassNotFoundException, Exception{
        if (jobFactory == null) {            String className = ext.getParameter("class").valueAsString();            PluginManager mngr = PluginManager.lookup(this);            mngr.activatePlugin(ext.getDeclaringPluginDescriptor().getId());            ClassLoader classLoader = mngr.getPluginClassLoader(                    ext.getDeclaringPluginDescriptor());            jobFactory = (JobFactory) (classLoader.loadClass(className)).newInstance();        }        return jobFactory;    }	/**	 * @@return nameJob	 */    public String getNameJob() {		if(nameJob==null && ext.getParameter("nameJob")!=null){			nameJob= ext.getParameter("nameJob").valueAsString();		}		return nameJob;	}    public Documentation getDocumentation() {
        return ext.getDocumentation();
    }
    
    
    /**
     * @@see java.lang.Object#hashCode()
     */
    public int hashCode() {
        return getId().hashCode();
    }
    
    /**
     * @@see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof JobFactoryInfo)) {
            return false;
        }
        return getId().equals(((JobFactoryInfo) obj).getId());
    }
    
    /**
     * @@see java.lang.Object#toString()
     */
    public String toString() {
        return getId();
    }}
@


1.1
log
@*** empty log message ***
@
text
@@


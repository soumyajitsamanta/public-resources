head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.42;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.13.35;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 16-abr-2005
 *
 * LeafReportImp.java
 *
 */
package es.aeat.eett.infoRubik.layout;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.jdom.Attribute;
import org.jdom.Element;
import org.jdom.filter.ElementFilter;

import es.aeat.eett.infoRubik.jobs.job_core.Job;
import es.aeat.eett.infoRubik.reports.Report;
import es.aeat.eett.infoRubik.reports.ReportMutableTreeNode;

/**
 * @@author f00992
 */
public class LeafReportImp implements LeafReport {
    private Element eLayout=new Element(LeafReport.LAYOUT);
    private String idLeaf=new String();

    public LeafReportImp(Element layout) {
        this.eLayout = layout;
        Attribute a=eLayout.getAttribute(ReportMutableTreeNode.getKEY_ID_LEAF());
        idLeaf=a.getValue();
    }
    public String getIDLeaf(){
    	return idLeaf;
    }
    public boolean isFull(){
        List jobs =new ArrayList();
        Iterator it=eLayout.getDescendants(new ElementFilter(LeafReport.H_DIV));
        while(it.hasNext()) jobs.add(it.next());
        it=eLayout.getDescendants(new ElementFilter(LeafReport.V_DIV));
        while(it.hasNext()) jobs.add(it.next());
        it=jobs.iterator();
        while(it.hasNext()){
            Element eDiv=(Element) it.next();
            Element eJob=eDiv.getChild(LeafReport.NAME_JOB);
            if(eJob==null){
                jobs.clear();
                return false;
            }
        }
        jobs.clear();
        return true;
    }
    /**
     * remove conten;
     */
    public void removeChildren(){
        eLayout.removeContent();
    }
    /**
     * @@return Returns the eLayout.
     */
    public Element getRootElement() {
        return eLayout;
    }
    /**
     * @@param layout The eLayout to set.
     */
    public void setRootElement(Element layout) {
        if(layout!=null)
            eLayout = layout;
        else
            throw new IllegalArgumentException("layout is null");
    }
    /**
     * @@return Returns the jobsNames.
     */
    public List getJobsNames() {
        List jobs =new ArrayList();
        Iterator it=eLayout.getDescendants(new ElementFilter(LeafReport.NAME_JOB));
        while(it.hasNext()){
            Element e=(Element) it.next();
            if(e.getAttribute(Job.KEY_JOB_NAME)!=null)
                jobs.add(e.getAttribute(Job.KEY_JOB_NAME).getValue());
        }
        return jobs;
    }
    /**
     * @@return Returns the jobsElements.
     */
    public List getJobsElements() {
        List jobs =new ArrayList();
        Iterator it=eLayout.getDescendants(new ElementFilter(LeafReport.NAME_JOB));
        while(it.hasNext()){
            Element e=(Element) it.next();
            jobs.add(e);
        }
        return jobs;
    }
    public void removeAll(Report report){
        List list=getJobsElements();
        for(int i=0; i<list.size(); i++){
            Element eJob=(Element) list.get(i);
            Attribute a=eJob.getAttribute(Job.KEY_JOB_NAME);
            String nameJob=a.getValue();
            File fJob=new File(report.getJobsDir(), nameJob);
            fJob.delete();
        }

    }
}
@


1.1
log
@*** empty log message ***
@
text
@@


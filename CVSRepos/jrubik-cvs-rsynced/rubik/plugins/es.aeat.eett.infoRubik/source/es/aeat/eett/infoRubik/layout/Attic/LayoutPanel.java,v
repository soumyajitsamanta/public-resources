head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.41;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.13.35;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 14-abr-2005
 *
 * LayoutPanel.java
 *
 */
package es.aeat.eett.infoRubik.layout;


import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

import org.apache.commons.logging.LogFactory;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;

import es.aeat.eett.infoRubik.JobFactoryInfo;
import es.aeat.eett.infoRubik.jobs.job_core.Job;
import es.aeat.eett.infoRubik.jobs.job_core.JobFactory;
import es.aeat.eett.infoRubik.reports.Report;
import es.aeat.eett.infoRubik.reports.ReportMutableTreeNode;
import es.aeat.eett.rubik.core.util.JDomUtil;


/**
 * @@author f00992
 */
class LayoutPanel extends JPanel {
    static final Border border=new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),1);

    private ActionDivHor actionDivHor= new ActionDivHor();
	private ActionDivVer actionDivVer= new ActionDivVer();

    private PopupTrigger popupTrigger=null;
    private PopupLayout popupLayout=null;
    private Job job=null;
    private ReportMutableTreeNode nLeaf=null;

    private ArrayList listeners = new ArrayList();

	////////////////////////////// Manejo de oyentes ////////////////////////////////////////////
	public ArrayList getListener(){
	    return listeners;
	}
	public void addLeafReportListener(LeafReportListener cont) {
		listeners.add(cont);
	}

	public void removeLeafReportListener(LeafReportListener cont) {
		listeners.remove(cont);
	}
	public void fireLeafReportChanged() {
		Iterator it = listeners.iterator();
		while (it.hasNext()) {
			LeafReportListener lis = (LeafReportListener)it.next();
			lis.LeafReportChanged();
		}
	}
	////////////////////////////// Fin Manejo de oyentes ////////////////////////////////////////////



    LayoutPanel(LayoutPanel layoutPanel){
    	this(layoutPanel.getPopupTrigger(), layoutPanel.getPopupLayout());
    }
    LayoutPanel(PopupTrigger popupTrigger, PopupLayout popupLayout) {
        super();
        this.popupTrigger = popupTrigger;
        this.popupLayout = popupLayout;
        this.addMouseListener(popupTrigger);
        this.add(popupLayout);
	    setBorder(border);
    }
	boolean isFull(){
	    LayoutPanel lPanel=getRootLayoutPanel(this);
	    LeafPanel leafPanel=(LeafPanel) lPanel.getParent();
	    LeafReport leafReport=leafPanel.getActiveNode().getLeafReport();
	    return leafReport.isFull();
	}
    void removeChildren(){
 	    job=null;
        Component[] cs=getComponents();
        for(int i=0; i< cs.length; i++){
            if(cs[i] instanceof LayoutPanel){
            	remove(cs[i]);
            }
            if(cs[i] instanceof JLabel){
            	remove(cs[i]);
            }
        }
        if(!(getLayout() instanceof FlowLayout ))
        	setLayout(new FlowLayout());
        if(getBorder()==null)
        	setBorder(border);
        revalidate();
        repaint();
	}
	Document getDocument(){
		return new Document(getRootElement( ));
	}
	Element getRootElement(){
		Element	eLayout= new Element(LeafReport.LAYOUT);
		addChildren(eLayout);
		return eLayout;
	}
	private void addChildren(Element e){
		if( getLayout() instanceof GridLayout){
			GridLayout gridLayout=(GridLayout) getLayout();
			String nameElement=null;
			if(gridLayout.getRows()==2){// divHor
			    nameElement=LeafReport.H_DIV;
			}else{// divVer
			    nameElement=LeafReport.V_DIV;
			}
			Element eLayout1= new Element(nameElement);
			LayoutPanel layoutPanel1=getLayoutChildren( 0);
			copyChildren(layoutPanel1.getRootElement(), eLayout1);
			e.addContent(eLayout1);
			Element eLayout2= new Element(nameElement);
			LayoutPanel layoutPanel2=getLayoutChildren( 1);
			copyChildren(layoutPanel2.getRootElement(), eLayout2);
			e.addContent(eLayout2);
		}else{
		    if(job!=null){
			    Element eJob=new Element(Job.KEY_JOB);
			    String nameFile=job.getFileJob().getName();
			    Attribute aName=new Attribute(Job.KEY_JOB_NAME, nameFile);
			    eJob.setAttribute(aName);
				e.addContent(eJob);
			}
		}

	}
    private void copyChildren(Element sourceLayout, Element des){
		Iterator itr = (sourceLayout.getChildren()).iterator();
		 while(itr.hasNext())
		     des.addContent((Element) ((Element)itr.next()).clone());
    }
	private LayoutPanel getLayoutChildren( int index){
		int counter=0;
        Component[] cs=getComponents();
        for(int i=0; i< cs.length; i++){
            if(cs[i] instanceof LayoutPanel){
            	if(counter==index ){
            		return (LayoutPanel) cs[i];
            	}
            	counter++;
            }
        }
		return null;
	}
	void load(Document document){
		Element eRoot=document.getRootElement();
		load(eRoot);
	}
	void load(Element eRoot){
		job=null;
	    removeChildren();
	    addChildrens(eRoot);
	}
	private void addChildrens(Element eParent){
		List list=eParent.getChildren();
		if(list.size()== 2){
			Element e1=(Element) list.get(0);
			if(e1.getName().equals(LeafReport.H_DIV)){
			    actionDivHor.addChildren(this);
			    getLayoutChildren(0).addChildrens(e1);

			    Element e2=(Element) list.get(1);
				getLayoutChildren(1).addChildrens(e2);
			}else if(e1.getName().equals(LeafReport.V_DIV)){
				actionDivVer.addChildren(this);
				getLayoutChildren(0).addChildrens(e1);

				Element e2=(Element) list.get(1);
				getLayoutChildren(1).addChildrens(e2);
			}else{
				throw new IllegalArgumentException("Caso no esperado");
			}
		}else if(list.size()==1){
			loadJob(eParent);
		}else{
			//throw new IllegalArgumentException("Caso no esperado2");
		}
	}
	private void loadJob(Element e){
		Element eJob=e.getChild(Job.KEY_JOB);
		Attribute aNameFile=eJob.getAttribute(Job.KEY_JOB_NAME);
		if(aNameFile!=null)
		    loadJob(aNameFile.getValue());
	}
	private void loadJob(String fName){
        Report report=(Report)getNLeaf().getReportRootNode().getUserObject();
        File fJob=new File(report.getJobsDir(), fName);
        String extensionID=null;
        try {
            Document doc=new JDomUtil().JDomChk(fJob,Job.KEY_JOB);
            Element eJob=doc.getRootElement();
    		if(eJob!=null && eJob.getContentSize()>0){
    			Attribute aExtensionID=eJob.getAttribute(Job.KEY_EXTENSION_ID);
    			extensionID=aExtensionID.getValue();
    			Attribute a=eJob.getAttribute(Job.KEY_CAPTION_PLUGIN);
    			add(new JLabel(a.getValue()));
    			JobFactory jobFactory=JobFactoryInfo.getById(extensionID)
					.getJobFactory();
				Job job=jobFactory.createJob(fJob);
				setJob(job);
    		}
        } catch (Exception e) {
			 LogFactory.getLog(LayoutPanel.class).warn(
                    "failed "+extensionID, e);    		
        }
	}
	/*
	private Plugin getPuginParent(){
		Component cParent=this;
		while(cParent!=null){
			if(cParent instanceof LeafPanel){
				LeafPanel lPanel=(LeafPanel)cParent;
				return lPanel.getPluginParent();
			}
			cParent=cParent.getParent();
		}
		return null;
	}
	*/
    /**
     * @@return Returns the popupTrigger.
     */
    PopupTrigger getPopupTrigger() {
        return popupTrigger;
    }
    /**
     * @@param popupTrigger The popupTrigger to set.
     */
    void setPopupTrigger(PopupTrigger popupTrigger) {
        this.popupTrigger = popupTrigger;
    }
    /**
     * @@return Returns the popupLayout.
     */
    PopupLayout getPopupLayout() {
        return popupLayout;
    }
    /**
     * @@param popupLayout The popupLayout to set.
     */
    void setPopupLayout(PopupLayout popupLayout) {
        this.popupLayout = popupLayout;
    }
    private LayoutPanel getRootLayoutPanel(LayoutPanel layoutPanel){
    	LayoutPanel lRoot=layoutPanel;
    	while (lRoot.getParent() instanceof LayoutPanel){
    		lRoot=(LayoutPanel) lRoot.getParent();
    	}
    	return lRoot;
    }
    /**
     * @@return Returns the job.
     */
    Job getJob() {
        return job;
    }
    /**
     * @@param job The job to set.
     */
    void setJob(Job job) {
        this.job = job;
    }
	/**
	 * @@return Returns the nLeaf.
	 */
	public ReportMutableTreeNode getNLeaf() {
	    return getRootLayoutPanel(this).nLeaf;
	}
	/**
	 * @@param leaf The nLeaf to set.
	 */
	void setNLeaf(ReportMutableTreeNode leaf) {
	    getRootLayoutPanel(this).nLeaf=leaf;
	}
}// Fin class LayoutPanel
@


1.1
log
@*** empty log message ***
@
text
@@


head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.42;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.11.02;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 01-jul-2005
 *
 * ChartJob.java
 */
package es.aeat.eett.infoRubik.jobs.olap_jobs.chart_job;

import java.io.File;
import java.util.ResourceBundle;

import org.java.plugin.PluginManager;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;

import com.tonbeller.jpivot.olap.model.OlapException;
import com.tonbeller.jpivot.olap.model.OlapModel;
import com.tonbeller.jpivot.olap.navi.MdxQuery;

import es.aeat.eett.infoRubik.InfoRugikPlugin;
import es.aeat.eett.infoRubik.jobs.job_core.Job;
import es.aeat.eett.rubik.chart.ChartComponent;
import es.aeat.eett.rubik.chart.ChartPlugin;
import es.aeat.eett.rubik.chart.ConfiChart;
import es.aeat.eett.rubik.core.RubikMdx;
import es.aeat.eett.rubik.core.RubikPlugin;
import es.aeat.eett.rubik.core.util.JDomUtil;
import es.aeat.eett.rubik.menu.MenuManager;
import es.aeat.eett.rubik.menu.MenuPlugin;
import es.aeat.eett.workbench.core.PluginEvent;

/**
 * @@author f00992
 *
 */
public class ChartJob  implements  Job {
    private static final ResourceBundle localizationResources =
        ResourceBundle.getBundle("es.aeat.eett.infoRubik.jobs.olap_jobs.chart_job.locale.LocalizationBundle");
    private static final String CAPTION=localizationResources.getString("PluginCaption");
    private static final String KEY_EXTENSION_ID=InfoRugikPlugin.PLUGIN_ID+"@@ChartJobFactory";
    private RubikMdx rm=null;
    private File fileJob=null;
    private static ConfiChart confiChart=null;
    private static MenuManager menuManager=null;
    private static OlapModel olapModel=null;
    private static RubikPlugin rubikPlugin=null;
    private static InfoRugikPlugin infoRugikPlugin=null;

	ChartJob() throws Exception {
    	if(confiChart==null){
	        PluginManager pm = PluginManager.lookup(ChartJob.class);
	        ChartPlugin chartPlugin = ((ChartPlugin) pm
	        		.getPlugin(ChartPlugin.PLUGIN_ID));
	        confiChart=chartPlugin.getConfiChart();
	        MenuPlugin menuPlugin = ((MenuPlugin) pm
	        		.getPlugin(MenuPlugin.PLUGIN_ID));
	        menuManager=menuPlugin.getMenuManager();
	        rubikPlugin = ((RubikPlugin) pm
	        		.getPlugin(RubikPlugin.PLUGIN_ID));
	        olapModel=rubikPlugin.getOlapModel();
	        infoRugikPlugin = ((InfoRugikPlugin) pm
	        		.getPlugin(InfoRugikPlugin.PLUGIN_ID));
    	}
	}
	ChartJob(File file) throws Exception {
		this();
		fileJob=file;
	}

	public Element getRootElement() {
		if(rm!=null){
			Element ejob = new Element(Job.KEY_JOB);
			Attribute a = new Attribute(Job.KEY_EXTENSION_ID, KEY_EXTENSION_ID);
			ejob.setAttribute(a);
			a=new Attribute(Job.KEY_CAPTION_PLUGIN, getCaption());
			ejob.setAttribute(a);
			ejob.addContent(rm.getRootElement());
			ejob.addContent(confiChart.getRootElement());
			if(fileJob!=null){
				Element eDeploy=getDeployElement();
				if(eDeploy!=null)
					ejob.addContent(eDeploy);
			}
			return ejob;
		}else if(fileJob!=null){
			Document document;
			try {
				document = new JDomUtil().JDomChk(fileJob, Job.KEY_JOB);
				return document.getRootElement();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			}

		}else{
			return null;
		}
	}
	private Element getDeployElement(){
    	Element eDeploy=null;
    	if(fileJob!=null){
			Document document;
			try {
				document = new JDomUtil().JDomChk(fileJob, Job.KEY_JOB);
				Element eRoot=document.getRootElement();
	    		if(eRoot!=null)
	    			eDeploy=eRoot.getChild(Job.KEY_DEPLOY);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    	return eDeploy;

	}
	private boolean loadRootElement(Element rootElement) {
		rm=new RubikMdx();
		return rm.loadRootElement(rootElement);
	}

	public String getCaption() {
		return CAPTION;
	}

	public void ini() throws Exception {
		try {
			olapModel.getResult();
		} catch (RuntimeException e1) {
			throw new Exception("El modelo no esta inizializado.");
		} catch (OlapException e) {
			throw new Exception("El modelo no esta inizializado.");
		}
		MdxQuery md=(MdxQuery)olapModel.getExtension(MdxQuery.ID);
	    rm= new RubikMdx(md.getMdxQuery(), rubikPlugin.getRubikConnection());
	    menuManager.executeMdx(rm);
	}
	private void loadFile() throws Exception{
	    Document document = new JDomUtil().JDomChk(fileJob, Job.KEY_JOB);
	    Element eRoot=document.getRootElement();
	    Element eRm=eRoot.getChild(RubikMdx.RUBIK_MDX);
	    rm=new RubikMdx();
	    rm.loadRootElement(eRm);
	    Element eConfi=eRoot.getChild(ConfiChart.KEY_CONFI_CHART);
	    confiChart.loadRootElement(eConfi);
	}
	public void run() throws Exception{
	    if(fileJob!=null){
	        loadFile();
	    }
	    menuManager.executeMdx(rm);
		 if(fileJob!=null){
		     rm=null;
		 }
	}

	public void createFileOut(File fileOut) throws Exception {
		String nameFilePng=fileOut.getAbsolutePath().replaceAll(".xml", ".png");
		new ChartComponent(olapModel, confiChart).render(null,fileOut.getAbsolutePath(), nameFilePng);
	}

	public void show() {
    	//PluginEvent pEvent=new PluginEvent(this, ChartPlugin.PLUGIN_ID);
		PluginEvent pEvent=new PluginEvent(this, ChartPlugin.EXT_UNIQUE_ID);
    	infoRugikPlugin.fireViewMainShow( pEvent);
	}

	public File getFileJob() {
		return fileJob;
	}
	public void setFileJob(File file) {
		fileJob=file;
	}

}
@


1.1
log
@*** empty log message ***
@
text
@@


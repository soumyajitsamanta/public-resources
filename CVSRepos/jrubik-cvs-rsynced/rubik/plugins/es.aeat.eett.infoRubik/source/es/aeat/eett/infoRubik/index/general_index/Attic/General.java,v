head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.42;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.14.39.23;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 18-jul-2005
 *
 * General.java
 */
package es.aeat.eett.infoRubik.index.general_index;

import java.io.File;
import java.util.Enumeration;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;
import org.jdom.Attribute;
import org.jdom.DocType;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.EntityRef;

import es.aeat.eett.infoRubik.index.index_core.Index;
import es.aeat.eett.infoRubik.layout.LeafReport;
import es.aeat.eett.infoRubik.reports.Report;
import es.aeat.eett.infoRubik.reports.ReportMutableTreeNode;
import es.aeat.eett.rubik.core.util.JDomUtil;

/**
 * @@author f00992
 */
public class General implements Index {
	private Logger logger = Logger.getLogger(General.class);
    private static final ResourceBundle localizationResources =
        ResourceBundle.getBundle(
        "es.aeat.eett.infoRubik.index.general_index.locale.LocalizationBundle");
    private static final String CAPTION=localizationResources
		.getString("caption");


    General(){
    }
//	public String getCaption() {
//		return new String(CAPTION);
//	}

	public void createFileOut(Report report) throws Exception {
		//logger.error("Sin implementar General");
		ReportMutableTreeNode reportNode=report.getMutableTreeNode();
		ReportMutableTreeNode root=reportNode.getReportLeaftRootNode();

		StringBuffer sb_dtd=new StringBuffer();
    	Element eRoot = new Element("estadistica");
    	DocType type  = new DocType("AppEstudios");
		build(report, root,sb_dtd,eRoot);

    	String dtd = "<!ENTITY meta SYSTEM \"meta.xml\">\n"
    		+ "<!ENTITY metodologia SYSTEM \"metodologia/index.xml\">\n"
                + "<!ENTITY ayuda SYSTEM \"ayuda/index.xml\">\n";
    	dtd += sb_dtd.toString();
    	type.setInternalSubset(dtd);
    	Document doc =  new Document(eRoot, type);
    	File fOut=new File(report.getOutDir(),"index.xml");
		new JDomUtil().saveDocument(doc, fOut);
	}
    private void build(Report report, ReportMutableTreeNode nodo
    		, StringBuffer dtd, Element eParent) throws Exception{
    	if(nodo.isReportLeaf()){
    		LeafReport leafReport=nodo.getLeafReport();
    		String nameIndex="index_"+leafReport.getIDLeaf();//+".xml";
    		File fIndex=new File (report.getOutDir(),nameIndex+".xml");
    		if(!fIndex.exists()){
    			logger.warn(fIndex.getAbsoluteFile()+" no exists");
    		}
//    		updateIndex(dtd, fIndex, parent);
    		String caption=(String) nodo.getUserObject();
    		Attribute a= new Attribute("caption", caption);
    		Element eLeaf=new Element("subIndex");
    		eLeaf.setAttribute(a);
			EntityRef ref = new EntityRef(nameIndex);
			eLeaf.addContent(ref);
			eParent.addContent(eLeaf);
    		String tag="<!ENTITY"+nameIndex+ "SYSTEM \""+nameIndex+".xml"+"\">\n";
    		if(dtd.indexOf(tag)<0){
    			dtd.append(tag);
    		}
    	}else{
    		if(nodo.equals(report.getMutableTreeNode().getReportLeaftRootNode())){// Nodo Raiz
    			//parent.setAttribute("titulo", it.getCaption());
    			eParent.setAttribute("titulo", report.getReportName());
    			eParent.setAttribute("ejercicio", " ");
    			eParent.setAttribute("directorio", " ");
    			eParent.setAttribute("tema", " ");
    			
    		}else{
    			String caption=(String) nodo.getUserObject();
    			Element e =new Element("carpeta") ;
    			e.setAttribute("id", caption.toLowerCase());
    			e.setAttribute("titulo", caption);
    			eParent.addContent(e);
    			eParent=e;    			
    		}
    	}
    	for (Enumeration enumeration= nodo.children(); enumeration.hasMoreElements() ;) {
    		ReportMutableTreeNode n_h = (ReportMutableTreeNode)enumeration.nextElement();
    		build(report, n_h , dtd,   eParent);
    	}        
    }
//    private void updateIndex(StringBuffer dtd, File fIndex, Element eParent) throws Exception{
//    	Document doc=new JDomUtil().JDomChk(fIndex);
//    	Element eRoot=doc.getRootElement();
//    	eParent.addContent((Element)eRoot.clone());
//    	Iterator it=eRoot.getDescendants();
//    	while (it.hasNext()){
//    		Object o=it.next();
//    		if(o instanceof Element){
//	    		Element e=(Element)o;
//	    		Attribute a=e.getAttribute("fichero");
//	    		if(a!=null ){
//	    			String fichero=a.getValue();
//		    		String tag="<!ENTITY"+fichero+ "SYSTEM \""+fichero+".xml"+"\">\n";
//		    		if(dtd.indexOf(tag)<0){
//		    			dtd.append(tag);
//		    		}
//	    		}
//    		}
//    	}
//    	
//    }
}
@


1.1
log
@*** empty log message ***
@
text
@@


head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.41;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.39.46;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 01-may-2005
 *
 * Report.java
 *
 */
package es.aeat.eett.infoRubik.reports;

import java.io.File;
import java.io.IOException;

import org.jdom.Document;
import org.jdom.Element;

import es.aeat.eett.rubik.core.util.JDomUtil;

/**
 * @@author f00992
 */
public class Report {
    private static final String KEY_REPORT="report";
    private static final String KEY_NAME="name";
    private static final String KEY_FIXED_JOBS="fixedJobs";
    private static final String KEY_OLAP_JOBS="olapJobs";
    private static final String KEY_OUT_DIR="out";
    //private static final String KEY_RAMA="rama";
    //private static final String KEY_VALUE="value";

    private File reportDir=null;
    private File fixedJobs=null;
    private File fileReport=null;
    private File jobsDir=null;
    private File outDir=null;
    private String reportName=null;
    private ReportMutableTreeNode reportNode=null;
    



    /**
     * Crea una instancia vacia de la clase
     *
     */
    private Report() {
        getMutableTreeNode();
    }
    Report(File reportDir) throws Exception {
        this();
        isReportDir( reportDir);
        this.reportDir = reportDir;
        //fixedJobs= new File(reportDir+Rubik.fileSeparator+KEY_FIXED_JOBS);
        fixedJobs= new File(reportDir, KEY_FIXED_JOBS);
        //jobsDir= new File(reportDir+Rubik.fileSeparator+KEY_OLAP_JOBS);
        jobsDir= new File(reportDir, KEY_OLAP_JOBS);
        //outDir=new File(reportDir+Rubik.fileSeparator+KEY_OUT_DIR);
        outDir=new File(reportDir, KEY_OUT_DIR);
        load();
    }
    /**
     * Crea una instancia de la clase con el report guardado en File reportDir
     * @@param reportName
     * @@param reportDir File con el report
     * @@throws Exception
     */
    private Report(String reportName, File reportDir) throws Exception {
        this();
        this.reportDir = reportDir;
        this.reportName=reportName;
        isReportDir( reportDir);
        //load(reportDir);
    }
    /**
     * @@return Returns the reportDir.
     */
    public File getReportDir() {
        return reportDir;
    }

    /**
     * @@return Returns the fileReport.
     */
    File getFileReport() {
        if(fileReport==null){
            fileReport=new File(reportDir, KEY_REPORT+".xml");
        }
        return fileReport;
    }
	/**
	 * @@return Returns the jobsDir.
	 */
	public File getJobsDir() {
		return jobsDir;
	}

	/**
	 * @@return Returns the outDir.
	 */
	public File getOutDir() {
		return outDir;
	}
    /**
     * @@return Returns the reportName.
     */
    public String getReportName() {
        return reportName;
    }
    /**
     * @@return Returns the kEY_NAME.
     */
    public static String getKEY_NAME() {
        return KEY_NAME;
    }
    /**
     * @@return Returns the kEY_REPORT.
     */
    public static String getKEY_REPORT() {
        return KEY_REPORT;
    }

    static Report createReport(String reportName, File fDir) throws Exception{
        Report report= new Report(reportName, fDir);
        report.isOkDir(fDir);
        createFixedJobsDir(fDir);
        createOlapJobsDir(fDir);
        createOutDir(fDir);
        report.getMutableTreeNode().add(new ReportMutableTreeNode(KEY_FIXED_JOBS));
        report.save();
        report.fixedJobs= new File(report.reportDir, KEY_FIXED_JOBS);
        report.jobsDir= new File(report.reportDir, KEY_OLAP_JOBS);
        report.outDir=new File(report.reportDir, KEY_OUT_DIR);
        return report;
    }
    private void isOkDir(File fDir) throws Exception{
        File fileReports=ConfiResports.getInstance().getFileReportsSpace();
        if(!fDir.getParentFile().equals(fileReports))
            throw new Exception(fDir.getName()+ ": no esta en "+ConfiResports.getREPORTS_SPACE());
        if(!fDir.isDirectory())
            throw new Exception(fDir.getName()+ ": no es un directorio");
        File[] hijos=fDir.listFiles();
        if(hijos.length!=0)
            throw new Exception(fDir.getName()+ ": no esta vacio.");
    }
    public void save() throws IOException{
        Document document=new Document(getRootElement());
        new JDomUtil().saveDocument(document, getFileReport());
    }
    private static void createFixedJobsDir(File reportDir) throws Exception{
        File fixecJogs= new File(reportDir, KEY_FIXED_JOBS);
        if( !fixecJogs.mkdir())
            throw new Exception("no se pudo crear: " +KEY_FIXED_JOBS);
    }
    private static void createOlapJobsDir(File reportDir) throws Exception{
        File olapJogs= new File(reportDir, KEY_OLAP_JOBS);
        if( !olapJogs.mkdir())
            throw new Exception("no se pudo crear: " +KEY_OLAP_JOBS);
    }
    private static void createOutDir(File reportDir) throws Exception{
        File outDir=new File(reportDir, KEY_OUT_DIR);
        if( !outDir.mkdir())
            throw new Exception("no se pudo crear: " +KEY_OLAP_JOBS);
    }
    private void isReportDir(File fDir) throws Exception{
        File fileReports=ConfiResports.getInstance().getFileReportsSpace();
        if(!fDir.getParentFile().equals(fileReports))
            throw new Exception(fDir.getName()+ ": no esta en "+ConfiResports.getREPORTS_SPACE());
        if(!fDir.isDirectory())
            throw new Exception(fDir.getName()+ ": no es un directorio");
    }
    private void load() throws Exception{
        Document document=new JDomUtil().JDomChk(getFileReport(), KEY_REPORT);
        Element eRoot=document.getRootElement();
        loadRootElement(eRoot);
    }
    public ReportMutableTreeNode getMutableTreeNode(){
        if(reportNode==null){
            reportNode=new ReportMutableTreeNode(this);
        }
        return reportNode;
    }

    /**
     * @@param reportName The reportName to set.
     */
    void setReportName(String reportName) {
        this.reportName = reportName;
    }
    public String toString(){
        return reportName;
    }
    public Element getRootElement() {
        return getMutableTreeNode().getRootElement();
    }
    public boolean loadRootElement(Element rootElement) {
        return getMutableTreeNode().loadRootElement(rootElement);
    }

}// Fin class Report
@


1.1
log
@*** empty log message ***
@
text
@@


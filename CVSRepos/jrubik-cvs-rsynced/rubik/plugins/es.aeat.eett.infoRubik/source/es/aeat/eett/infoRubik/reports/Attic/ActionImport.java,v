head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.41;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.39.46;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 31-mar-2005
 *
 * ActionImport.java
 *
 */
package es.aeat.eett.infoRubik.reports;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ResourceBundle;
import java.util.StringTokenizer;

import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;

import org.apache.log4j.Logger;
import org.java.plugin.PluginManager;
import org.jdom.Attribute;
import org.jdom.DataConversionException;
import org.jdom.Document;
import org.jdom.Element;

import es.aeat.eett.infoRubik.JobFactoryInfo;
import es.aeat.eett.infoRubik.jobs.job_core.Job;
import es.aeat.eett.infoRubik.jobs.job_core.JobFactory;
import es.aeat.eett.infoRubik.jobs.olap_jobs.table_job.TableJob;
import es.aeat.eett.infoRubik.layout.LeafReport;
import es.aeat.eett.rubik.core.RubikConnection;
import es.aeat.eett.rubik.core.RubikMdx;
import es.aeat.eett.rubik.core.tableSetting.TableSetting;
import es.aeat.eett.rubik.core.util.JDomUtil;
import es.aeat.eett.rubik.menu.MenuManager;
import es.aeat.eett.rubik.menu.MenuPlugin;

/**
 * @@author f00992
 *
 */
public class ActionImport extends AbstractAction {
    private static final ResourceBundle localizationResources =
        ResourceBundle.getBundle("es.aeat.eett.infoRubik.reports.locale.LocalizationBundle");
	private static final String IMPORT=localizationResources.getString("Import");
	private static final String USER="web";
	private static final String PASSWORD="web";


	private static Logger logger = Logger.getLogger(ActionImport.class);
	private String fileName;
	private JobFactory jobFactory=null;
	private final MenuManager menuManager;

	public ActionImport() throws Exception {
		super(IMPORT);
		JobFactoryInfo jobFactoryInfo=JobFactoryInfo.getById(TableJob.getEXTENSION_ID());
		jobFactory=jobFactoryInfo.getJobFactory();
        PluginManager pm = PluginManager.lookup(ActionImport.class);
        MenuPlugin menuPlugin=(MenuPlugin)pm.getPlugin(MenuPlugin.PLUGIN_ID);
        menuManager=menuPlugin.getMenuManager();

	}
	/* (non-Javadoc)
	 * @@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	public void actionPerformed(ActionEvent e) {
        javax.swing.JPopupMenu jp=(JPopupMenu)( (Component)e.getSource()).getParent();
        JTree tree=(JTree) jp.getInvoker();
        Object  lastPath =tree.getLastSelectedPathComponent();
        ReportMutableTreeNode rNode=null;
		if (lastPath != null) {
		    rNode=(ReportMutableTreeNode) lastPath;
		}
		File file=getFile(null);
		DefaultMutableTreeNode nodo=null;
		if(file!=null){
			try {
				Document doc=new JDomUtil().JDomChk(file,"estadistica");
				importReport(doc, rNode);
		        Report report=(Report) rNode.getReportRootNode().getUserObject();
		        report.save();
		        tree.updateUI();
		        //DefaultTreeModel tm=(DefaultTreeModel) tree.getModel();
		        //tm.nodeStructureChanged(rNode);
		        //	Causa Error ReportTreeModelListener (en ScrollReports)
			} catch (Exception e1) {
				logger.error(e1);
				return ;
			}
		}
	}
	private void importReport(Document docOld, ReportMutableTreeNode rNode) throws Exception{
	    Element eRootOld=docOld.getRootElement();
	    addChildrens(eRootOld, rNode);
	}
	private ReportMutableTreeNode createRama(ReportMutableTreeNode nParent, String name){
	    return new ReportMutableTreeNode(name);
	}
	private ReportMutableTreeNode createLeaf(ReportMutableTreeNode nParent, String name, Element eCarpeta){
	    ReportMutableTreeNode nLeaf= nParent.addLeaf(name);
        //Se crea el nuevo job
        File fJob=null;
        Report report=null;
        try {
            LeafReport leafReport=nLeaf.getLeafReport();
            report=(Report) nLeaf.getReportRootNode().getUserObject();
            fJob=File.createTempFile(leafReport.getIDLeaf()+"J",".xml",report.getJobsDir());
            Job job=jobFactory.createJob();
            Element eDeploy=getDeployElement(eCarpeta);
            Element eConfiTable=getConfiTableElement(eCarpeta);
            job.ini();
            Element eJobRoot=job.getRootElement();
            if(eConfiTable!=null){
                eJobRoot.addContent(eConfiTable);
            }
            if(eDeploy!=null){
                eJobRoot.addContent(eDeploy);
            }
            new JDomUtil().saveDocument(new Document(eJobRoot), fJob);
            job.setFileJob(fJob);
            Element eJob= new Element(Job.KEY_JOB);
            Attribute aNameJob= new Attribute(Job.KEY_JOB_NAME,fJob.getName());
            eJob.setAttribute(aNameJob);
            leafReport.getRootElement().addContent(eJob);
		} catch (Exception e) {
		    if(fJob!=null){
		        fJob.delete();
		    }
		    logger.error(e.getMessage(), e);
		    return null;
		}
		return nLeaf;
	}
	private Element getDeployElement(Element eCarpeta) throws DataConversionException{
	    Element eDeploy = null;
	    Iterator itSort=getSortHierarchy(eCarpeta).iterator();
	    while(itSort.hasNext()){
	        String nameHierarchy=(String) itSort.next();
	        Element eLevel=getLevelElement(eCarpeta, nameHierarchy );
	        if( eLevel!=null){
	            if(eDeploy==null){
	                eDeploy = new Element("deployJob");
	            }
	            addLevelToDeploy(eDeploy, eLevel);
	        }
	    }

	    return eDeploy;
	}
	/**
     * @@param eDeploy
     * @@param eLevel
     */
    private void addLevelToDeploy(Element eDeploy, Element eLevel) {
        if(eDeploy.getContentSize()==0){//eDeploy is empty
            eDeploy.addContent(eLevel);
        }else{
            Iterator it=eDeploy.getDescendants();
            List list= new ArrayList();
            while(it.hasNext()){
                list.add(it.next());
            }
            it=list.iterator();
	        while(it.hasNext()){
	            Element eHijo=(Element) it.next();
	            if(eHijo.getContentSize()==0){
	                eHijo.addContent((Element) eLevel.clone());
	            }
	        }
        }
    }
    private Element getLevelElement(Element eCarpeta, String unameHierarchy) throws DataConversionException{
	    Element eLevel = null;
	    Element eArbolCubo=eCarpeta.getChild("arbol");
	    if(eArbolCubo!=null){
		    Iterator itDimen=eArbolCubo.getChildren("arbol").iterator();
		    while(itDimen.hasNext()){//Arbol Dimension
		        Element eArbolDimension=(Element)itDimen.next();
		        if(eArbolDimension.getAttribute("isElegido").getBooleanValue()){
		            Iterator itHierarchy=eArbolDimension.getChildren("arbol").iterator();
		            while(itHierarchy.hasNext()){// Arbol Hierarchy
		                Element eArbolHierarchy=(Element) itHierarchy.next();
		                if(eArbolHierarchy.getAttribute("isElegido").getBooleanValue() &&
		                        unameHierarchy.equals(eArbolHierarchy.getAttribute("name").getValue() ) ){
		                    if(eLevel==null){
		                        eLevel = new Element("level");
		                    }
		                    Iterator itLevel=eArbolHierarchy.getChildren("arbol").iterator();
		                    while(itLevel.hasNext()){// Arbol Level
		                        Element eArbolLevel =(Element) itLevel.next();
		                        if(eArbolLevel.getAttribute("isElegido").getBooleanValue()){
		                            String nameHierarchy=eArbolHierarchy.getAttributeValue("caption");
		                            String nameLevel=eArbolLevel.getAttributeValue("name");
		                            Attribute aUnameLevel= new Attribute("uname",nameLevel);
		                            Attribute aEnabled= new Attribute("enabled","true");
		                            eLevel.setAttribute( aUnameLevel);
		                            eLevel.setAttribute(aEnabled);
		                            Iterator itMember=eArbolLevel.getChildren("arbol").iterator();
		                            while(itMember.hasNext()){ //Arbol Members
		                                Element eArbolMember =(Element) itMember.next();
		                                if(eArbolMember.getAttribute("isElegido").getBooleanValue()){
		                                    // Miembro elegido
		                                    Element eMember=null;
		                                    Attribute aUnameMember;
		                                    if("SumaTotal".equals(eArbolMember.getAttribute("caption").getValue())){//False total
		                                        eMember=new Element("falseTotal");
			                                    aUnameMember= (Attribute) aUnameLevel.clone();
		                                    }else{// Member
		                                        eMember=new Element("member");
		                                        aUnameMember= new Attribute("uname",eArbolMember.getAttribute("name").getValue() );
		                                    }
		                                    eMember.setAttribute(aUnameMember);
		                                    eMember.setAttribute((Attribute) aEnabled.clone());
		                                    eLevel.addContent((eMember));
		                                }
		                            }
		                        }
		                    }
		                }
		            }
		        }
		    }
	    }
	    return eLevel;
	}
    private Element getConfiTableElement(Element eCarpeta){
        Element eCon= null;
        Element eConOld=eCarpeta.getChild("ConfiTable");
        if(eConOld!=null){
            eCon= new Element("ConfiTable");

            //showMeasuresRow
            Attribute aOld=eConOld.getAttribute("mostrarMedidasRow");
            Attribute a=new Attribute("showMeasuresRow",aOld.getValue());
            eCon.setAttribute(a);

            //showMeasuresCol
            aOld=eConOld.getAttribute("mostrarMedidasCol");
            a=new Attribute("showMeasuresCol",aOld.getValue());
            eCon.setAttribute(a);

            //showParentsRow
            aOld=eConOld.getAttribute("showMiembrosAntecesoresRow");
            a=new Attribute("showParentsRow",aOld.getValue());
            eCon.setAttribute(a);

            //showParentsCol
            aOld=eConOld.getAttribute("showMiembrosAntecesoresCol");
            a=new Attribute("showParentsCol",aOld.getValue());
            eCon.setAttribute(a);

            //identRow
            aOld=eConOld.getAttribute("identRow");
            a=new Attribute("identRow",aOld.getValue());
            eCon.setAttribute(a);

            //identCol
            aOld=eConOld.getAttribute("identCol");
            a=new Attribute("identCol",aOld.getValue());
            eCon.setAttribute(a);

            //modeHeaderSpanCol
            aOld=eConOld.getAttribute("modoHeaderSpanCol");
            a=new Attribute("modeHeaderSpanCol",aOld.getValue());
            eCon.setAttribute(a);

            //modeHeaderSpanRow
            aOld=eConOld.getAttribute("modoHeaderSpanRow");
            a=new Attribute("modeHeaderSpanRow",aOld.getValue());
            eCon.setAttribute(a);

            //modeMemberSpanCol
            aOld=eConOld.getAttribute("modoMemberSpanCol");
            a=new Attribute("modeMemberSpanCol",aOld.getValue());
            eCon.setAttribute(a);

            //modeMemberSpanRow
            aOld=eConOld.getAttribute("modoMemberSpanRow");
            a=new Attribute("modeMemberSpanRow",aOld.getValue());
            eCon.setAttribute(a);

            //modeRowHeaderRow
            aOld=eConOld.getAttribute("modoRowHeaderRow");
            a=new Attribute("modeRowHeaderRow",aOld.getValue());
            eCon.setAttribute(a);

            //modeHierarchyHeaderRow
            aOld=eConOld.getAttribute("modoHierarchyHeaderRow");
            a=new Attribute("modeHierarchyHeaderRow",aOld.getValue());
            eCon.setAttribute(a);

            //modeHierarchyHeaderCol
            aOld=eConOld.getAttribute("modoHierarchyHeaderCol");
            a=new Attribute("modeHierarchyHeaderCol",aOld.getValue());
            eCon.setAttribute(a);

            /////                    New attributes /////////////////////////
            //Old: "        />
            // New: modeNavegacion="0"  mondrianDrillThrough="false" "      />

            //showProperties
            //aOld=eConOld.getAttribute("showProperties");// No exisita
            a=new Attribute("showProperties","false"); // No disponible en la Churrera
            eCon.setAttribute(a);

            //mondrianDrillThrough
            //aOld=eConOld.getAttribute("mondrianDrillThrough");// No exisita
            a=new Attribute("mondrianDrillThrough","false");
            eCon.setAttribute(a);

            //modeNavegacion
            //aOld=eConOld.getAttribute("modeNavegacion");// No exisita
            a=new Attribute("modeNavegacion","0"); //No importa en la generacion
            eCon.setAttribute(a);

        }
        return eCon;
    }
	private void ejecutaQuery(Element eCarpeta) throws Exception{
	    Attribute aQuery=eCarpeta.getAttribute("query");
	    String query=aQuery.getValue();
	    RubikConnection rubikConnection =new RubikConnection();
	    String strConexion=eCarpeta.getAttributeValue("conexion");
	    loadConexion(strConexion ,rubikConnection);
	    RubikMdx rubikMdx= new RubikMdx(query, rubikConnection);
	    menuManager.executeMdx(rubikMdx);
	}
	private void loadConexion(String strConexion, RubikConnection conexion){
	    String[] newLinea=null;

	    StringTokenizer stokenizer = new StringTokenizer( strConexion, ";");
	    newLinea = new String[stokenizer.countTokens()];

	    int i=0;
	    while (stokenizer.hasMoreTokens()){
	        String tmp= stokenizer.nextToken().trim();
	        if(tmp.startsWith("JdbcDriver=")){
	            String dirver=tmp.substring("JdbcDriver=".length());
	            conexion.setDriver(dirver);
	        }else if(tmp.startsWith("Jdbc=")){
	            String Jdbc=tmp.substring("Jdbc=".length());
	            int posInterrogante=Jdbc.indexOf('?');
	            String userName=null;
	            int posUserName=Jdbc.indexOf("user=");
	            int posAper=Jdbc.indexOf("&");
	            //TODO SE CAMBIA USUARIO Y CONTRASENIA
	            /**
	            conexion.setUserName("web");
	            conexion.setPassword("web");
	            /**/
	            conexion.setUserName(USER);
	            conexion.setPassword(PASSWORD);
	            /**
	            if(posUserName>-1){
	                userName=Jdbc.substring(posInterrogante+1+"user=".length(),posAper);
	                conexion.setUserName(userName);
	            }
	            int posPassword=Jdbc.indexOf("password=");
	            if(posPassword>-1){
	                String password=Jdbc.substring(posPassword+1+"password=".length()).trim();
	                conexion.setPassword(password);
	            }
	            /**/
	            if(posInterrogante>-1)
	                Jdbc=Jdbc.substring(0,posInterrogante);
	            conexion.setUrl(Jdbc);
	        }else if(tmp.startsWith("Catalog=") ){
	            String catalog=tmp.substring("Catalog=".length());
	            catalog=catalog.replaceAll("catalogos", "catalogs");
	            //catalog=catalog.replaceAll("recursos", "resources");
	            catalog=catalog.replaceAll("recursos", "data/resources");
	            conexion.setCatalog(catalog);
	        }
	    }
	}

	private void addChildrens(Element eOld, ReportMutableTreeNode rNode)  throws Exception{
	    Iterator it=eOld.getChildren("carpeta").iterator(); // old version churrera
	    if(!it.hasNext())
	    	it=eOld.getChildren("estadistica").iterator(); // last version churrera
	    if(!it.hasNext())
	    	it=eOld.getChildren("subestadistica").iterator();// last version churrera
	    while(it.hasNext()){
	        Element eHijo=(Element) it.next();
            ReportMutableTreeNode rHijo=null;
	        if(eHijo.getName().equals("estadistica") ||eHijo.getName().equals("subestadistica") ||
	                eHijo.getName().equals("carpeta")){
	            Attribute aHecho=eHijo.getAttribute("hecho");
	            if(aHecho!=null){
	                Attribute aCaption=eHijo.getAttribute("caption");
	                if(!aHecho.getBooleanValue() ){//Es Rama (hecho=false)
	                    rHijo=createRama(rNode,aCaption.getValue()  );
	                    rNode.add(rHijo);
	                }else{//Es Hoja (hecho=true)
	                    //TODO falta la configuracion de la tabla
	                    ejecutaQuery(eHijo);
	                    rHijo=createLeaf(rNode, aCaption.getValue(),eHijo);
	                    rNode.add(rHijo);
	                }
	            }
	        }
	        if(rHijo!=null){
	            addChildrens(eHijo, rHijo);
	        }
	    }
	}
	private void addConfiTable(Element eCarpetaOld, Element eCarpeta){
		Element e=eCarpetaOld.getChild(TableSetting.CONFI_TABLE);
		if(e!=null)
			eCarpeta.addContent((Element)e.clone());
	}
	private List getSortHierarchy(Element eCarpeta){
		List listHierarchys= new ArrayList();
	    Iterator it=eCarpeta.getChildren("ItemCh").iterator();
	    while(it.hasNext()){
	    	Element eHijo=(Element) it.next();
	    	listHierarchys.add(eHijo.getAttributeValue("Name"));
	    }
	    return listHierarchys;
	}
	private File getFile(String rutaDir){
	    File fileOut=null;
		JFileChooser fileChooser = new JFileChooser();
		try{
			if (rutaDir!=null){
				File dir= new  File(rutaDir);
				fileChooser.setCurrentDirectory(dir);
			}
		}catch(Exception ex){;}
		if(JFileChooser.APPROVE_OPTION ==fileChooser.showOpenDialog(null)){
		    fileOut=fileChooser.getSelectedFile();
		}
		return fileOut;
	}
	private File getFileOut(String rutaDir){
	    File fileOut=null;
		JFileChooser fileChooser = new JFileChooser();
		try{
			if (rutaDir!=null){
				File dir= new  File(rutaDir);
				fileChooser.setCurrentDirectory(dir);
			}
		}catch(Exception ex){;}
		if(JFileChooser.APPROVE_OPTION ==fileChooser.showSaveDialog(null)){
		    fileOut=fileChooser.getSelectedFile();
		}
		return fileOut;
	}
}
@


1.1
log
@*** empty log message ***
@
text
@@


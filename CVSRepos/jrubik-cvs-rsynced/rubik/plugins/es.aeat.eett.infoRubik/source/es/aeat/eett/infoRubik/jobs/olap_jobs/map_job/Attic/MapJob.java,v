head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.05.17.15.40.42;	author fsaz;	state dead;
branches;
next	1.1;

1.1
date	2005.11.28.15.33.22;	author fsaz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@borrando viejos
@
text
@/*
 * Created on 011-jul-2005
 *
 * MapJob.java
 */
package es.aeat.eett.infoRubik.jobs.olap_jobs.map_job;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ResourceBundle;

import org.apache.commons.logging.LogFactory;
import org.java.plugin.PluginManager;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;

import com.tonbeller.jpivot.olap.model.OlapException;
import com.tonbeller.jpivot.olap.model.OlapModel;
import com.tonbeller.jpivot.olap.navi.MdxQuery;

import es.aeat.eett.infoRubik.InfoRugikPlugin;
import es.aeat.eett.infoRubik.jobs.job_core.Job;
import es.aeat.eett.infoRubik.jobs.olap_jobs.table_job.TableJob;
import es.aeat.eett.rubik.core.RubikMdx;
import es.aeat.eett.rubik.core.RubikPlugin;
import es.aeat.eett.rubik.core.util.JDomUtil;
import es.aeat.eett.rubik.map.MapComponent;
import es.aeat.eett.rubik.map.MapPlugin;
import es.aeat.eett.rubik.menu.MenuManager;
import es.aeat.eett.rubik.menu.MenuPlugin;

public class MapJob  implements  Job {
    private static final ResourceBundle localizationResources =
        ResourceBundle.getBundle("es.aeat.eett.infoRubik.jobs.olap_jobs.map_job.locale.LocalizationBundle");
    private static final String CAPTION=localizationResources.getString("PluginCaption");
    private static final String EXTENSION_ID=InfoRugikPlugin.PLUGIN_ID+"@@MapJobFactory";
	private static File rBaseMapa=null;
	private static File rUserBaseMapa= null;
    private MapComponent map=null;

    private RubikMdx rm=null;
    private File fileJob=null;
    private static OlapModel olapModel=null;
    private static MenuManager menuManager=null;
    private static RubikPlugin rubikPlugin =null;
    private static InfoRugikPlugin infoRugikPlugin=null;

    MapJob() throws Exception {
    	if(olapModel==null){
	        PluginManager pm = PluginManager.lookup(MapJob.class);
	        rubikPlugin = ((RubikPlugin) pm.getPlugin(RubikPlugin.PLUGIN_ID));
	        olapModel=rubikPlugin.getOlapModel();
	        MenuPlugin menuPlugin = ((MenuPlugin) pm
	        		.getPlugin(MenuPlugin.PLUGIN_ID));
	        menuManager=menuPlugin.getMenuManager();
	        MapPlugin mapPlugin = ((MapPlugin) pm.getPlugin(MapPlugin.PLUGIN_ID));
	        rBaseMapa=mapPlugin.getRBaseMapa();
	        rUserBaseMapa=mapPlugin.getRUserBaseMapa();
	        infoRugikPlugin = ((InfoRugikPlugin) pm
	        		.getPlugin(InfoRugikPlugin.PLUGIN_ID));
    	}
	}
    MapJob(File file) throws Exception {
    	this();
		fileJob=file;
	}

	public Element getRootElement() {
		if(rm!=null){
			Element ejob = new Element(Job.KEY_JOB);
			Attribute a = new Attribute(Job.KEY_EXTENSION_ID, EXTENSION_ID);
			ejob.setAttribute(a);
			a=new Attribute(Job.KEY_CAPTION_PLUGIN, getCaption());
			ejob.setAttribute(a);
			ejob.addContent(rm.getRootElement());
			if(fileJob!=null){
				Element eDeploy=getDeployElement();
				if(eDeploy!=null)
					ejob.addContent(eDeploy);
			}
			return ejob;
		}else if(fileJob!=null){
			Document document;
			try {
				document = new JDomUtil().JDomChk(fileJob, Job.KEY_JOB);
				return document.getRootElement();
			} catch (Exception e) {
				LogFactory.getLog(MapJob.class).warn(e);   
				return null;
			}

		}else{
			return null;
		}
	}
	private Element getDeployElement(){
    	Element eDeploy=null;
    	if(fileJob!=null){
			Document document;
			try {
				document = new JDomUtil().JDomChk(fileJob, Job.KEY_JOB);
				Element eRoot=document.getRootElement();
	    		if(eRoot!=null)
	    			eDeploy=eRoot.getChild(Job.KEY_DEPLOY);
			} catch (Exception e) {
				LogFactory.getLog(TableJob.class).warn(
	                    "Parser failed "+EXTENSION_ID, e);    		
			}
    	}
    	return eDeploy;

	}
	private boolean loadRootElement(Element rootElement) {
		rm=new RubikMdx();
		return rm.loadRootElement(rootElement);
	}

	public String getCaption() {
		return CAPTION;
	}

	public void ini() throws Exception {
		try {
			olapModel.getResult();
		} catch (RuntimeException e1) {
			throw new Exception("El modelo no esta inizializado.");
		} catch (OlapException e) {
			throw new Exception("El modelo no esta inizializado.");
		}
		MdxQuery md=(MdxQuery)olapModel.getExtension(MdxQuery.ID);
	    rm= new RubikMdx(md.getMdxQuery(), rubikPlugin.getRubikConnection());
	    menuManager.executeMdx(rm);
	}
	private void loadFile() throws Exception{
	    Document document = new JDomUtil().JDomChk(fileJob, Job.KEY_JOB);
	    Element eRoot=document.getRootElement();
	    Element eRm=eRoot.getChild(RubikMdx.RUBIK_MDX);
	    rm=new RubikMdx();
	    rm.loadRootElement(eRm);
	}
	public void run() throws Exception{
	    if(fileJob!=null){
	        loadFile();
	    }
	    menuManager.executeMdx(rm);
		 if(fileJob!=null){
		     rm=null;
		 }
	}

	public void createFileOut(File fileOut) throws Exception {
		PrintWriter out=null;
		if(map==null){
			map=new MapComponent(new File(rUserBaseMapa
					,MapComponent.NAME_DIR_MAPS),rUserBaseMapa);
		}
		run();
		if(!map.canShowMap()){
			throw new Exception("Map no is enabled.");
		}
		//TODO Falta copiar los scrip, css y toolbar.svg en el dir de salida
		try {
			//PrintWriter out=new PrintWriter(System.out);
			out=new PrintWriter(new FileWriter(fileOut));
			map.render(out);
			out.flush();
		}catch (Exception e) {
				LogFactory.getLog(MapJob.class).warn(
	                    "map.render "+EXTENSION_ID, e);    		
		}finally{
			if(out!=null) out.close();
		}

	}

	public void show() {
    	//PluginEvent pEvent=new PluginEvent(this, MapPlugin.PLUGIN_ID);
    	//infoRugikPlugin.fireViewMainShow( pEvent);
		/*
    	Object o=plugin.fireGetPluginObject("map_ComponentPlugin");
    	if(o!=null){
    		Action actionMap=(Action)o;
    		if(actionMap.isEnabled()){
    			actionMap.actionPerformed(null);
    		}
    	}
		*/
		LogFactory.getLog(TableJob.class).warn(
                "Sin implementar "+EXTENSION_ID);   		
	}

	public File getFileJob() {
		return fileJob;
	}
	public void setFileJob(File file) {
		fileJob=file;
	}

}
@


1.1
log
@*** empty log message ***
@
text
@@


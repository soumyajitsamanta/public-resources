head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.06.28.13.38.27;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.11.35.03;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package rex.graphics.filtertree.elements;

import javax.swing.ImageIcon;
import rex.metadata.ServerMetadata;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import rex.utils.*;
import org.tempuri.type.ClsXMLAProxDiscoverPropertyList;

import org.tempuri.type.ClsXMLAProxDiscoverRestrictions;
import org.tempuri.type.ClsXMLAProxDiscoverProperties;
import org.tempuri.type.ClsXMLAProxDiscoverRestrictionList;
import rex.metadata.QueryElement;
import rex.graphics.dimensiontree.elements.DimensionTreeElement;
import rex.metadata.UniqueNameElement;


/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */


/*
 <row>
  <CATALOG_NAME>Test</CATALOG_NAME>
  <CUBE_NAME>Ispit</CUBE_NAME>
  <DIMENSION_UNIQUE_NAME>[RbrIzlaskaNaIspit]</DIMENSION_UNIQUE_NAME>
  <HIERARCHY_UNIQUE_NAME>[RbrIzlaskaNaIspit]</HIERARCHY_UNIQUE_NAME>
  <LEVEL_UNIQUE_NAME>[RbrIzlaskaNaIspit].[NazivRbrIzlaskaNaIspit]</LEVEL_UNIQUE_NAME>
  <LEVEL_NUMBER>1</LEVEL_NUMBER>
  <MEMBER_ORDINAL>61</MEMBER_ORDINAL>
  <MEMBER_NAME>61. izlazak</MEMBER_NAME>
  <MEMBER_UNIQUE_NAME>[RbrIzlaskaNaIspit].[All RbrIzlaskaNaIspit].[61. izlazak]</MEMBER_UNIQUE_NAME>
  <MEMBER_TYPE>1</MEMBER_TYPE>
  <MEMBER_CAPTION>61. izlazak</MEMBER_CAPTION>
  <CHILDREN_CARDINALITY>0</CHILDREN_CARDINALITY>
  <PARENT_LEVEL>0</PARENT_LEVEL>
  <PARENT_UNIQUE_NAME>[RbrIzlaskaNaIspit].[All RbrIzlaskaNaIspit]</PARENT_UNIQUE_NAME>
  <PARENT_COUNT>1</PARENT_COUNT>
  <MEMBER_KEY>61</MEMBER_KEY>
  <IS_PLACEHOLDERMEMBER>false</IS_PLACEHOLDERMEMBER>
  <IS_DATAMEMBER>false</IS_DATAMEMBER>
  </row>

 */



public class FilterTreeMemberElement implements DimensionTreeElement, UniqueNameElement {

   private String catalogName;
   private String cubeName;
   private String dimensionUniqueName;
   private String hierarchyUniqueName;
   private String levelUniqueName;
   private int levelNumber;
   private String memberName;
   private String memberUniqueName;
   private String memberCaption;
   private int memberType;
   private int memberOrdinal;
   private int childrenCardinality;
   private boolean nodeEnabled;


   private ClsXMLAProxDiscoverRestrictions restrictions;
   private ClsXMLAProxDiscoverProperties   properties;

   private ServerMetadata parent;

   static ImageIcon iconEnabled, iconDisabled;

   static {
       iconEnabled = S.getAppIcon("member_selected.gif");
       iconDisabled = S.getAppIcon("member_not_selected.gif");
   }
   public FilterTreeMemberElement(  ServerMetadata svm
                           , Node rowNode
                           , ClsXMLAProxDiscoverRestrictions _restrictions
                           , ClsXMLAProxDiscoverProperties   _properties) {

      parent = svm;
      nodeEnabled = true;
      NodeList nl = rowNode.getChildNodes();

      for(int i=0; i < nl.getLength(); i++){
         // TO BE DONE: OTHER VARS...

         if (nl.item(i).getNodeType() == 1){
            if (nl.item(i).getNodeName().equals("CATALOG_NAME")) {
               catalogName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("CUBE_NAME")) {
               cubeName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("DIMENSION_UNIQUE_NAME")) {
               dimensionUniqueName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("HIERARCHY_UNIQUE_NAME")) {
               hierarchyUniqueName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("LEVEL_UNIQUE_NAME")) {
               levelUniqueName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("LEVEL_NUMBER")) {
               levelNumber = Integer.parseInt(DOM.getTextFromDOMElement(nl.item(i)));
            }else if (nl.item(i).getNodeName().equals("MEMBER_NAME")) {
               memberName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("MEMBER_UNIQUE_NAME")) {
               memberUniqueName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("MEMBER_CAPTION")) {
               memberCaption = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("MEMBER_TYPE")) {
               memberType = Integer.parseInt(DOM.getTextFromDOMElement(nl.item(i)));
            }else if (nl.item(i).getNodeName().equals("MEMBER_ORDINAL")){
               memberOrdinal = Integer.parseInt(DOM.getTextFromDOMElement(nl.item(i)));
            }else if (nl.item(i).getNodeName().equals("CHILDREN_CARDINALITY")){
               childrenCardinality = Integer.parseInt(DOM.getTextFromDOMElement(nl.item(i)));
            }

         }
      }


   }
   public FilterTreeMemberElement(
                             ServerMetadata svm
                           , ClsXMLAProxDiscoverRestrictions _restrictions
                           , ClsXMLAProxDiscoverProperties   _properties
                           , String _catalogName
                           , String _cubeName
                           , String _dimensionUniqueName
                           , String _hierarchyUniqueName
                           , String _levelUniqueName
                           , int    _levelNumber
                           , String _memberName
                           , String _memberUniqueName
                           , String _memberCaption
                           , int    _memberType
                           , int    _memberOrdinal
                           , int    _childrenCardinality) {

      parent = svm;
      restrictions = _restrictions;
      properties = _properties;
      nodeEnabled = true;
      catalogName         = _catalogName;
      cubeName = _cubeName;
      dimensionUniqueName = _dimensionUniqueName;
      hierarchyUniqueName = _hierarchyUniqueName;
      levelUniqueName = _levelUniqueName;
      levelNumber = _levelNumber;
      memberName = _memberName;
      memberUniqueName = _memberUniqueName;
      memberCaption = _memberCaption;
      memberType = _memberType;
      memberOrdinal = _memberOrdinal;
      childrenCardinality = _childrenCardinality;
   }

   public DimensionTreeElement[] getChildren(){
//      S.out("FilterTreeMemberElement returns 0 children");
      if (childrenCardinality > 0){
//         S.out("-------------------------------------------\n"
//               + "Getting children for " + memberCaption + "(" + memberUniqueName+ ") + children count=" + childrenCardinality
//               + "\nwith Restrictions:\n" + restrictions.getRestrictionList());

//       All these objects SHARE the same restrictions/properties, so I must set it exeactly before
//       query execution beacause it gets overwritten !!
         restrictions.getRestrictionList().setMemberUniqueName(memberUniqueName);
         restrictions.getRestrictionList().setTreeOp(ClsXMLAProxDiscoverRestrictionList.MD_TREEOP_CHILDREN);
         // comment next line if you don't want "deep" tree (only 2 members levels)
         restrictions.getRestrictionList().setLevelUniqueName(null);
         return parent.getMembersList(restrictions, properties);
      }else{
         return null;
      }
   }


   public String toString(){
      if (memberCaption == null)
         return "not initialized";
      else
         return memberCaption;

   }

   public ImageIcon getIcon(){
      if (isEnabled()){
         return iconEnabled;
      }else{
         return iconDisabled;
      }
   }

   public String getToolTip(){
      if (memberCaption == null)
         return "not initialized";
      else
         return "<html>"
            + "Member name:"                + memberName
                + "<BR>Member unique name:" + memberUniqueName
                + "<BR>Member caption:"     + memberCaption
                + "<BR>Member ordinal:"     + memberOrdinal
                + "<BR>Children count(estimate):" + childrenCardinality
                + "</html>";
   }




   public String[] getPopUpActionList(){
      if (isEnabled()){
         return new String[] {
              FilterTreePopUpActions.DISABLE_THIS_ELEMENT
            , FilterTreePopUpActions.ENABLE_ONLY_THIS_ELEMENT
            , FilterTreePopUpActions.ENABLE_ALL_BUT_THIS_ELEMENT
         };
      }else{
         return new String[] {
              FilterTreePopUpActions.ENABLE_THIS_ELEMENT
            , FilterTreePopUpActions.ENABLE_ONLY_THIS_ELEMENT
            , FilterTreePopUpActions.ENABLE_ALL_BUT_THIS_ELEMENT
         };

      }
   }
   public String getUniqueName(){
      return memberUniqueName;
   }
   public String getCaption(){
      return memberCaption;
   }
   public String getQueryMembersExpression(){
      return memberUniqueName;
   }

   public boolean isEnabled(){
      return nodeEnabled;
   }
   public void setEnabled(boolean newValue){
      nodeEnabled = newValue;
   }
   public String getHierarchyUniqueName(){
//       <MEMBER_UNIQUE_NAME>[Measures].[Prolaznost]</MEASURE_UNIQUE_NAME>
      return memberUniqueName.substring(0, memberUniqueName.lastIndexOf(".") - 1);
//       return measureUniqueName;
   }
   public boolean isMeasure(){
      return false;
   }
   public int getChildrenCount(){
      return childrenCardinality;
   }

   public ServerMetadata getServerMetadata(){
      return parent;
   }
   public ClsXMLAProxDiscoverRestrictions getRestrictions(){
      return restrictions;
   }
   public ClsXMLAProxDiscoverProperties   getProperties(){
      return properties;
   }
   public String getDimensionUniqueName(){
      return dimensionUniqueName;
   }
}
@


1.1
log
@first time commit
@
text
@@


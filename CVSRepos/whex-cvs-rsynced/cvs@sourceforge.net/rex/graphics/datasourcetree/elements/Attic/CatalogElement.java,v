head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.06.28.13.38.26;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.11.35.03;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package rex.graphics.datasourcetree.elements;


import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import rex.utils.*;
import rex.metadata.ServerMetadata;
import org.tempuri.type.ClsXMLAProxDiscoverRestrictions;
import org.tempuri.type.ClsXMLAProxDiscoverProperties;
import org.tempuri.type.ClsXMLAProxDiscoverPropertyList;
import javax.swing.ImageIcon;

/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

/*
 <row>
  <CATALOG_NAME>FoodMart 2000</CATALOG_NAME>
  <DESCRIPTION />
  <ROLES />
  <DATE_MODIFIED>2003-04-09T00:01:10</DATE_MODIFIED>
  </row>
*/

public class CatalogElement implements DataSourceTreeElement{
   private String dataSourceInfo;
   private String catalogName;
   private String description;
   private String roles;
   private String dateModified;
   private ServerMetadata parent;

   static ImageIcon icon;
   static {
      icon = S.getAppIcon("catalog.gif");
   }
/*
   public CatalogElement(ServerMetadata svm, String myDataSourceInfo) {
      dataSourceInfo = myDataSourceInfo;
      parent = svm;
   }
*/
   public CatalogElement(ServerMetadata svm, Node rowNode, String myDataSourceInfo) {
      parent = svm;
      dataSourceInfo = myDataSourceInfo;

      NodeList nl = rowNode.getChildNodes();

      for(int i=0; i < nl.getLength(); i++){
         if (nl.item(i).getNodeType() == 1){
            if (nl.item(i).getNodeName().equals("CATALOG_NAME")) {
               catalogName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("DESCRIPTION")) {
               description = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("ROLES")) {
               roles = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("DATE_MODIFIED")) {
               dateModified = DOM.getTextFromDOMElement(nl.item(i));
            }
         }
      }
   }
   public DataSourceTreeElement[] getChildren(){
      ClsXMLAProxDiscoverRestrictions restrictions = new ClsXMLAProxDiscoverRestrictions();
      ClsXMLAProxDiscoverProperties   properties   = new ClsXMLAProxDiscoverProperties();
      ClsXMLAProxDiscoverPropertyList pl = new ClsXMLAProxDiscoverPropertyList();

      pl.setDataSourceInfo(dataSourceInfo);

      pl.setCatalog(catalogName);
      pl.setFormat("Tabular");
      pl.setContent("SchemaData");

      properties.setPropertyList(pl);
      //S.out("callint parent.getCubeList with catalogName = " + catalogName);
      return parent.getCubeList(restrictions, properties);
   }

   public String toString(){
      if (catalogName == null)
         return "not initialized";
      else
         return "" + catalogName;
   }
   public ImageIcon getIcon(){
      return icon;
   }
   public String getToolTip(){
      if (catalogName == null)
         return "not initialized";
      else
         return "" + catalogName
            + " DATE MODIFIED:" + dateModified
            + " DESC:" + description;

   }
   public String[] getPopUpActionList(){
      return null; //new String[] {"Refresh"};
   }
   public ServerMetadata getServerMetaData(){
      return parent;
   }

   public String getDataSourceInfo(){
      return dataSourceInfo;
   }

}
@


1.1
log
@first time commit
@
text
@@


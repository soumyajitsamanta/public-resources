head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.06.28.13.38.28;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.11.35.03;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package rex.graphics.mdxeditor;

import javax.swing.JPanel;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import java.awt.GraphicsEnvironment;
import javax.swing.JComboBox;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;
import javax.swing.JToggleButton;
import java.awt.Insets;
import rex.utils.S;
import rex.utils.AppColors;
import javax.swing.JLabel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BoxLayout;
import javax.swing.Box;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JPopupMenu;
import java.util.HashMap;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JButton;


public class MdxEditorToolbar extends JPanel{
   private MdxEditor parent;
   private JLabel   runQuery
          , runSelectedQuery
          , showRowTotals
          , showColumnTotals
          , insertCodeSkeleton;

   JComboBox  cbFonts
            , cbSizes
            , cbTabSize
            , cbResultPosition;

   JToggleButton  boldButton
                , italicButton
                , appendGeneratedMDX;

   public static final String
      VERTICAL_SPLIT_PANE,
      HORIZONTAL_SPLIT_PANE,
      TABBED_PANE_UP,
      TABBED_PANE_LEFT,
      TABBED_PANE_RIGHT,
      TABBED_PANE_BOTTOM;

   public static HashMap resultPositions;
   static {
      VERTICAL_SPLIT_PANE = "0";
      HORIZONTAL_SPLIT_PANE = "1";
      TABBED_PANE_UP = "2";
      TABBED_PANE_LEFT = "3";
      TABBED_PANE_RIGHT = "4";
      TABBED_PANE_BOTTOM = "5";

      resultPositions = new HashMap(6);
      resultPositions.put(VERTICAL_SPLIT_PANE, "Vertical split");
      resultPositions.put(HORIZONTAL_SPLIT_PANE, "Horizontal split");
      resultPositions.put(TABBED_PANE_UP, "Tab up");
      resultPositions.put(TABBED_PANE_LEFT, "Tab left");
      resultPositions.put(TABBED_PANE_RIGHT, "Tab right");
      resultPositions.put(TABBED_PANE_BOTTOM, "Tab bottom");
   }
   private boolean showRowTotalsOn, showColumnTotalsOn;
   private static ImageIcon showRowTotalsIcon;
   private static ImageIcon showColumnTotalsIcon;
   private static ImageIcon hideRowTotalsIcon;
   private static ImageIcon hideColumnTotalsIcon;
   static{
      showRowTotalsIcon      = S.getAppIcon("toolbox_show_row_totals.gif");
      hideRowTotalsIcon      = S.getAppIcon("toolbox_hide_row_totals.gif");
      showColumnTotalsIcon   = S.getAppIcon("toolbox_show_column_totals.gif");
      hideColumnTotalsIcon   = S.getAppIcon("toolbox_hide_column_totals.gif");
   }




   public MdxEditorToolbar(MdxEditor _parent) {


      parent = _parent;

      runQuery = new JLabel(S.getAppIcon("runquery.gif"));
      runQuery.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent e) {
            parent.runAllQuery();
         }
      });
      runQuery.setToolTipText("Run all (Ctrl+Shift+Enter)");

      runSelectedQuery = new JLabel(S.getAppIcon("runselectedquery.gif"));
      runSelectedQuery.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent e) {
            parent.runSelectedQuery();
         }
      });
      runSelectedQuery.setToolTipText("Run selected query (Ctrl+Enter)");
      runSelectedQuery.setOpaque(false);
//      runSelectedQuery.setPreferredSize(
//         new Dimension( S.getAppIcon("runselectedquery.gif").getIconWidth()/2
//                       ,S.getAppIcon("runselectedquery.gif").getIconHeight()) );

      insertCodeSkeleton = new JLabel(S.getAppIcon("insertCodeSkeleton.gif"));
      insertCodeSkeleton.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent e) {
            parent.insertCodeSkeleton();
         }
      });
      insertCodeSkeleton.setToolTipText("Insert code skeleton");
      insertCodeSkeleton.setOpaque(false);




      // Get font names available in system
      GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
      String[] fontNames = ge.getAvailableFontFamilyNames();

       // Combo box for selecting font in tool bar
      cbFonts = new JComboBox( fontNames );
      cbFonts.setMaximumSize( cbFonts.getPreferredSize() );
      cbFonts.setEditable( false );
      cbFonts.setSelectedItem( "Courier New" );
      cbFonts.setRequestFocusEnabled( false );
      cbFonts.setBackground( Color.white );
      cbFonts.addActionListener( new cbFontsListener() );

      // Add font sizes to fontSizes
      String fontSizes[] = new String[13];
      for ( int i = 0; i < fontSizes.length; i++ )
            fontSizes[i] = Integer.toString( i+7 );

      // Initialize combo box 'cbSizes'
      cbSizes = new JComboBox( fontSizes );
      cbSizes.setMaximumSize(cbSizes.getPreferredSize());
      cbSizes.setEditable( false );
      cbSizes.setSelectedItem( Integer.toString( 13 ) );
      cbSizes.setRequestFocusEnabled( false );
      cbSizes.setBackground( Color.white );
      cbSizes.addActionListener( new cbSizesListener());



      String tabSizes[] = new String[3];
      for ( int i = 0; i < tabSizes.length; i++ )
            tabSizes[i] = Integer.toString( i + 2 );

      cbTabSize = new JComboBox( tabSizes );
      cbTabSize.setMaximumSize(cbTabSize.getPreferredSize());
      cbTabSize.setEditable( false );
      cbTabSize.setSelectedItem(Integer.toString(3));
      cbTabSize.setRequestFocusEnabled( false );
      cbTabSize.setBackground(Color.white);
      cbTabSize.addActionListener( new cbTabSizeListener());



      // Bold button in tool bar

      boldButton = new JToggleButton(S.getAppIcon("bold.gif"));
      boldButton.addItemListener( new BoldListener() );
      boldButton.setMargin( new Insets( 0, 0, 0, 0 ) );
      boldButton.setOpaque(false);


      // Italic button in tool bar

      italicButton = new JToggleButton(S.getAppIcon("italic.gif"));
      italicButton.addItemListener( new ItalicListener() );
      italicButton.setMargin( new Insets( 0, 0, 0, 0 ) );
      italicButton.setOpaque(false);


      appendGeneratedMDX = new JToggleButton(S.getAppIcon("appendGeneratedMDX.gif"));
      appendGeneratedMDX.addItemListener( new AppendGeneratedMDXListener() );
      appendGeneratedMDX.setMargin( new Insets( 0, 0, 0, 0 ) );
      appendGeneratedMDX.setOpaque(false);



      cbResultPosition = new JComboBox( resultPositions.values().toArray() );
      cbResultPosition.setMaximumSize(cbResultPosition.getPreferredSize());
      cbResultPosition.setEditable( false );
//      cbResultPosition.setSelectedItem();
      cbResultPosition.setRequestFocusEnabled( false );
      cbResultPosition.setBackground(Color.white);
      cbResultPosition.addActionListener( new cbResultPositionListener());

      showRowTotalsOn = showColumnTotalsOn = false;
      showColumnTotals = new JLabel(showColumnTotalsIcon);
      showColumnTotals.setToolTipText("Shows/hides COLUMN totals for query result");
      showColumnTotals.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent e) {
            showColumnTotalsOn = !showColumnTotalsOn;
            if (showColumnTotalsOn) {
               showColumnTotals.setIcon(hideColumnTotalsIcon);
            }
            else {
               showColumnTotals.setIcon(showColumnTotalsIcon);
            }
            parent.setShowColumnTotalsOn(showColumnTotalsOn);
         }
      });
      showColumnTotals.setBorder(AppColors.TOOLBAR_LABEL_BORDER);



      showRowTotals = new JLabel(showRowTotalsIcon);
      showRowTotals.setToolTipText("Shows/hides ROW totals for query result");
      showRowTotals.addMouseListener(new MouseAdapter(){
         public void mouseClicked(MouseEvent e){
            showRowTotalsOn = !showRowTotalsOn;
            if (showRowTotalsOn){
               showRowTotals.setIcon(hideRowTotalsIcon);
            }else{
               showRowTotals.setIcon(showRowTotalsIcon);
            }
            parent.setShowRowTotalsOn(showRowTotalsOn);
         }
      });
      showRowTotals.setBorder(AppColors.TOOLBAR_LABEL_BORDER);

//      Line 'em up boys...
      this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(insertCodeSkeleton);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(runQuery);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(runSelectedQuery);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add( new JLabel("Font:") );
      this.add(Box.createRigidArea(new Dimension(2, 0)));
      this.add( cbFonts );
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add( new JLabel("Font size:") );
      this.add(Box.createRigidArea(new Dimension(2, 0)));
      this.add( cbSizes );
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add( new JLabel("Tab size:") );
      this.add(Box.createRigidArea(new Dimension(2, 0)));
      this.add( cbTabSize );
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(boldButton);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(italicButton);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(appendGeneratedMDX);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(showColumnTotals);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(showRowTotals);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add(cbResultPosition);
      this.add(Box.createRigidArea(new Dimension(4, 0)));
      this.add( new JLabel("Result position:") );
      this.add(cbResultPosition);
      this.setBorder(AppColors.TOOLBAR_BORDER);
      this.setOpaque(false);

   }

   protected boolean getShowRowTotalsOn(){
      return showRowTotalsOn;
   }
   protected boolean getShowColumnTotalsOn(){
      return showColumnTotalsOn;
   }
   protected boolean getAppendGeneratedMDX(){
      return appendGeneratedMDX.isSelected();
   }

   public void paintComponent(Graphics g) {
      S.paintBackgroundHorizontal(g, this);
      super.paintComponent(g);
   }

   public void setcbFont(String fontName){
      cbFonts.setSelectedItem(fontName);
   }
    public void setcbSize(int size){
       cbSizes.setSelectedItem(Integer.toString(size));
    }
    public void setBold(boolean isBold){
       boldButton.setSelected(isBold);
    }
    public void setItalic(boolean isItalic){
       italicButton.setSelected(isItalic);
    }
    public void setTabSize(int tabSize){
       cbTabSize.setSelectedItem(Integer.toString(tabSize));
    }
    public void setcbResultPosition(String key){
       cbResultPosition.setSelectedItem((String)resultPositions.get(key));
    }


// Listeners:


   class BoldListener implements ItemListener {
      public void itemStateChanged(ItemEvent e) {
         int state = e.getStateChange();
         if ( state == ItemEvent.SELECTED )
            parent.setTextToBold(true);
         else
            parent.setTextToBold(false);
      }
   }  // End BoldListener
   class ItalicListener implements ItemListener {
      public void itemStateChanged(ItemEvent e) {
         int state = e.getStateChange();
         if ( state == ItemEvent.SELECTED )
            parent.setTextToItalic(true);
         else
            parent.setTextToItalic(false);
      }
   }

   class AppendGeneratedMDXListener implements ItemListener {
      public void itemStateChanged(ItemEvent e) {
//         int state = e.getStateChange();
//         if ( state == ItemEvent.SELECTED )
//
//         else
//
      }
   }

   class cbFontsListener implements ActionListener {
      public void actionPerformed(ActionEvent e) {
         String fontName = cbFonts.getSelectedItem().toString();
         parent.setFontName(fontName);
      }  // End actionPerformed
   }; // End cbFontsListener

   class cbSizesListener implements ActionListener {
      public void actionPerformed(ActionEvent e) {
         int fontSize = 0;
         try {
            fontSize = Integer.parseInt(cbSizes.getSelectedItem().toString());
         } catch (NumberFormatException ex) {
            return;
         }
         parent.setFontSize(fontSize);
      }  // End actionPerformed
   }; // End cbFontsListener
   class cbTabSizeListener implements ActionListener {
      public void actionPerformed(ActionEvent e) {
         int tabSize = 0;
         try {
            tabSize = Integer.parseInt(cbTabSize.getSelectedItem().toString());
         } catch (NumberFormatException ex) {
            return;
         }
         parent.setTabSize(tabSize);
      }  // End actionPerformed
   };
   class cbResultPositionListener implements ActionListener {
      public void actionPerformed(ActionEvent e) {
         if (cbResultPosition.getSelectedItem().toString().equals(resultPositions.get(VERTICAL_SPLIT_PANE))){
            parent.setSplitPaneView(JSplitPane.VERTICAL_SPLIT);
         }else if (cbResultPosition.getSelectedItem().toString().equals(resultPositions.get(HORIZONTAL_SPLIT_PANE))){
            parent.setSplitPaneView(JSplitPane.HORIZONTAL_SPLIT);
         }else if (cbResultPosition.getSelectedItem().toString().equals(resultPositions.get(TABBED_PANE_UP))){
            parent.setTabbedPaneView(JTabbedPane.TOP);
         }else if (cbResultPosition.getSelectedItem().toString().equals(resultPositions.get(TABBED_PANE_LEFT))){
            parent.setTabbedPaneView(JTabbedPane.LEFT);
         }else if (cbResultPosition.getSelectedItem().toString().equals(resultPositions.get(TABBED_PANE_RIGHT))){
            parent.setTabbedPaneView(JTabbedPane.RIGHT);
         }else if (cbResultPosition.getSelectedItem().toString().equals(resultPositions.get(TABBED_PANE_BOTTOM))){
            parent.setTabbedPaneView(JTabbedPane.BOTTOM);
         }
      }  // End actionPerformed
   }; // End cbFontsListener






}
@


1.1
log
@first time commit
@
text
@@


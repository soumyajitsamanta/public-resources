head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.06.28.13.38.28;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.11.35.03;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package rex.graphics.mdxeditor;

import javax.swing.JPanel;
import java.awt.event.ActionListener;
import javax.swing.JTree;
import javax.swing.JPopupMenu;
import javax.swing.JComponent;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.ToolTipManager;
import javax.swing.JScrollPane;
import java.awt.Dimension;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.JLabel;
import javax.swing.tree.TreeCellRenderer;
import java.awt.Component;
import javax.swing.ImageIcon;
import javax.swing.tree.DefaultTreeCellRenderer;

public class MdxFunctionTree extends JPanel{
   final JTree tree;
   private JComponent parent;
   private TreePath popUpSource;

   public MdxFunctionTree(JComponent _parent) {
      this();
      parent = _parent;
   }
   public MdxFunctionTree() {
//      MdxFunctionTreeModel treeModel = new MdxFunctionTreeModel();
      DefaultMutableTreeNode top =  new DefaultMutableTreeNode("Mdx Function List");
      buildFunctionList(top);

     //Create a tree that allows one selection at a time.
      tree = new JTree(top);


      tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
      //Enable tool tips.
      ToolTipManager.sharedInstance().registerComponent(tree);


        //Create the scroll pane and add the tree to it.
      JScrollPane treeView = new JScrollPane(tree);



      treeView.setPreferredSize(new Dimension(200, 600));

//      treeView.setMinimumSize(new Dimension(200, 0));
      treeView.setMaximumSize(new Dimension(800,600));

      this.setLayout(new BorderLayout());
      this.add(treeView, BorderLayout.CENTER);

//
//      MdxFunctionTreeRenderer renderer = new MdxFunctionTreeRenderer();
//      renderer.addMouseListener(new PopupListener());
      tree.setCellRenderer(new MdxFunctionTreeRenderer());
      tree.addMouseListener(new PopupListener());

   }
   private void buildFunctionList(DefaultMutableTreeNode top){
      DefaultMutableTreeNode
           arrayFunctions
         , stringFunctions
         , dimensionHierarchyAndLevelFunctions
         , dimensionFunctions
         , hierarchyFunctions
         , levelFunctions
         , logicalFunctions
         , tupleFunctions
         , setFunctions
         , otherFunctions
         , numericFunctions
         , memberFunctions;
      arrayFunctions = new DefaultMutableTreeNode("Array Functions");
      arrayFunctions.add(new DefaultMutableTreeNode(new MdxFunction("SetToArray", "Converts one or more sets to an array for use in a user-defined function.", "SetToArray(«Set»[, «Set»...][, «Numeric Expression»]")));

      stringFunctions = new DefaultMutableTreeNode("String Functions");
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CalculationPassValue"
         , "Returns the value of an MDX expression evaluated over the specified calculation pass of a cube."
         , "CalculationPassValue(«Numeric Expression», «Pass Value»[, «Access Flag»])"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CoalesceEmpty"
         , "Coalesces an empty cell value to a string or number."
         , "CoalesceEmpty(«Numeric Expression»[, «Numeric Expression»]...)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Generate"
         , "Returns a concatenated string created by evaluating a string expression over a set."
         , "Generate(«Set1», «Set2»[, ALL])"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Generate"
         , "Returns a concatenated string created by evaluating a string expression over a set."
         , "Generate(«Set», «String Expression»[, «Delimiter»])"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IIf"
         , "Returns one of two string or numeric values determined by a logical test."
         , "IIf(«Logical Expression», «Numeric or String Expression1», «Numeric or String Expression2»)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LookupCube"
         , "Returns the value of an MDX expression evaluated over another specified cube in the same database."
         , "LookupCube(«Cube String», «Numeric or String Expression»)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("MemberToStr"
         , "Constructs a string from a member."
         , "MemberToStr(«Member»)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Name"
         , "Returns the name of a dimension, hierarchy, level, or member."
         , "«Dimension/Level/Member/Hierarchy».Name"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Properties"
         , "Returns a string containing a member property value."
         , "«Member».Properties(«String Expression»)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("SetToStr"
         , "Constructs a string from a set."
         , "SetToStr(«Set»)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("TupleToStr"
         , "Constructs a string from a tuple."
         , "TupleToStr(«Tuple»)"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("UniqueName"
         , "Returns the unique name of a dimension, level, or member."
         , "«Dimension/Level/Member/Hierarchy».UniqueName"
         )));
      stringFunctions.add(new DefaultMutableTreeNode(new MdxFunction("UserName"
         , "Returns the domain name and user name of the current connection."
         , "UserName"
         )));

      dimensionHierarchyAndLevelFunctions = new DefaultMutableTreeNode("Dimension, Hierarchy, and Level Functions ");
      dimensionFunctions = new DefaultMutableTreeNode("Dimension Functions");
      dimensionFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Dimension"
         , "Returns the dimension that contains a specified hierarchy, level, or member."
         , "«Member/Level/Hierarchy».Dimension")));
      dimensionFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Dimensions"
         , "Returns the dimension whose zero-based position within the cube is specified by a numeric expression or whose name is specified by a string."
         , "Dimensions(«Numeric/String Expression»)")));

      hierarchyFunctions = new DefaultMutableTreeNode("Hierarchy Functions");
      hierarchyFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Hierarchy"
         , "Returns the hierarchy of a level or member."
         , "«Member/Level».Hierarchy")));

      levelFunctions = new DefaultMutableTreeNode("Level Functions");
      levelFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Level"
         , "Returns the level of a member."
         , "«Member».Level")));
      levelFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Levels"
         , "Returns the level whose position in a dimension is specified by a numeric expression"
         , "«Dimension».Levels(«Numeric Expression»)")));
      levelFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Levels"
         , "Returns the level whose position in a dimension is specified by a string expression."
         , "Levels(«String Expression»)")));

      dimensionHierarchyAndLevelFunctions.add(dimensionFunctions);
      dimensionHierarchyAndLevelFunctions.add(hierarchyFunctions);
      dimensionHierarchyAndLevelFunctions.add(levelFunctions);

      logicalFunctions = new DefaultMutableTreeNode("Logical Functions");
      logicalFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Is"
         , "Returns True if two compared objects are equivalent, False otherwise."
         , "«Object 1» IS «Object 2»")));
      logicalFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IsAncestor"
         , "Determines whether a specified member is an ancestor of another specified member."
         , "IsAncestor(«Member1»,«Member2»)")));
      logicalFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IsEmpty"
         , "Determines whether an expression evaluates to the empty cell value."
         , "IsEmpty(«Value Expression»)")));
      logicalFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IsGeneration"
         , "Determines whether a specified member is in a specified generation."
         , "IsGeneration(«Member»,«Numeric Expression»)")));
      logicalFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IsLeaf"
         , "Determines whether a specified member is a leaf member."
         , "IsLeaf(«Member»)")));
      logicalFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IsSibling"
         , "Determines whether a specified member is a sibling of another specified member."
         , "IsSibling(«Member1»,«Member2»)")));

      tupleFunctions = new DefaultMutableTreeNode("Tuple Functions");
      tupleFunctions.add(new DefaultMutableTreeNode(new MdxFunction( "Current"
         , "Returns the current tuple from a set during an iteration."
         , "«Set».Current")));
      tupleFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Item"
         , "Returns a tuple from a set."
         , "«Tuple».Item(«Index»)")));
      tupleFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Item"
         , "Returns a tuple from a set."
         , "«Set».Item(«String Expression»[, «String Expression»...] | «Index»)")));
      tupleFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StrToTuple"
         , "Constructs a tuple from a string."
         , "StrToTuple(«String Expression»)")));


      memberFunctions = new DefaultMutableTreeNode("Member Functions");
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ancestor"
         , "Returns the ancestor of a member at a specified level ."
         , "Ancestor(«Member», «Level»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ancestor"
         , "Returns the ancestor of a member at a specified distance from the member."
         , "Ancestor(«Member», «Numeric Expression»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("ClosingPeriod"
         , "Returns the last sibling among the descendants of a member at a level."
         , "ClosingPeriod([«Level»[, «Member»]])")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Cousin"
         , "Returns the member with the same relative position under a member as the member specified."
         , "Cousin(«Member1», «Member2»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CurrentMember"
         , "Returns the current member along a dimension during an iteration."
         , "«Dimension».CurrentMember")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DataMember"
         , "Returns the system-generated data member associated with a nonleaf member."
         , "«Member».DataMember")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DefaultMember"
         , "Returns the default member of a dimension or hierarchy."
         , "«Dimension».DefaultMember")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("FirstChild"
         , "Returns the first child of a member."
         , "«Member».FirstChild")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("FirstSibling"
         , "Returns the first child of the parent of a member."
         , "«Member».FirstSibling")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ignore"
         , "Reserved."
         , "Reserved.")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Item"
         , "Returns a member from a tuple."
         , "«Tuple».Item(«Index»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Item"
         , "Returns a tuple from the set specified in «Set»."
         , "«Set».Item(«String Expression»[, «String Expression»...] | «Index»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Lag"
         , "Returns a member prior to the specified member along the member's dimension."
         , "«Member».Lag(«Numeric Expression»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LastChild"
         , "Returns the last child of a member."
         , "«Member».LastChild")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LastSibling"
         , "Returns the last child of the parent of a member."
         , "«Member».LastSibling")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Lead"
         , "Returns a member further along the specified member's dimension."
         , "«Member».Lead(«Numeric Expression»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LinkMember"
         , "Returns a hierarchized member."
         , "LinkMember(«Member», «Hierarchy»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Members"
         , "Returns the member whose name is specified by a string expression."
         , "«Dimension/Hierarchy/Level/String Expression».Members")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("NextMember"
         , "Returns the next member in the level that contains a specified member."
         , "«Member».NextMember")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("OpeningPeriod"
         , "Returns the first sibling among the descendants of a member at a level."
         , "OpeningPeriod([«Level»[, «Member»]])")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("ParallelPeriod"
         , "Returns a member from a prior period in the same relative position as a specified member."
         , "ParallelPeriod([«Level»[, «Numeric Expression»[, «Member»]]])")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Parent"
         , "Returns the parent of a member."
         , "«Member».Parent")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("PrevMember"
         , "Returns the previous member in the level that contains a specified member."
         , "«Member».PrevMember")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StrToMember"
         , "Returns a member based on a string expression."
         , "StrToMember(«String Expression»)")));
      memberFunctions.add(new DefaultMutableTreeNode(new MdxFunction("ValidMeasure"
         , "Returns a valid measure in a virtual cube by forcing inapplicable dimensions to their top level."
         , "ValidMeasure(«Tuple»)")));


      numericFunctions = new DefaultMutableTreeNode("Numeric Functions");
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Aggregate"
         , "Returns a calculated value using the appropriate aggregate function, based on the context of the query."
         , "Aggregate(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Avg"
         , "Returns the average value of a numeric expression evaluated over a set."
         , "Avg(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CalculationCurrentPass"
         , "Returns the current calculation pass of a cube for the current query context."
         , "CalculationCurrentPass()")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CalculationPassValue"
         , "Returns the value of an MDX expression evaluated over a specified calculation pass of the current cube."
         , "CalculationPassValue(«Numeric Expression», «Pass Value»[, «Access Flag»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CoalesceEmpty"
         , "Coalesces an empty cell value to a number or a string."
         , "CoalesceEmpty(«Numeric Expression»[, «Numeric Expression»]...)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Correlation"
         , "Returns the correlation of two series evaluated over a set."
         , "Correlation(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Count"
         , "Returns the number of dimensions in a cube."
         , "Dimensions.Count")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Count"
         , "Returns the number of levels in a dimension."
         , "«Dimension»|«Hierarchy».Levels.Count")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Count"
         , "Returns the number of cells in a set."
         , "Count(«Set»[, ExcludeEmpty | IncludeEmpty])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Count"
         , "Returns the number of cells in a set."
         , "«Set».Count")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Covariance"
         , "Returns the population covariance of two series evaluated over a set, using the biased population formula."
         , "Covariance(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("CovarianceN"
         , "Returns the sample covariance of two series evaluated over a set, using the unbiased population formula."
         , "CovarianceN(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DistinctCount"
         , "Returns the count of tuples in a set, excluding duplicate tuples."
         , "DistinctCount(«Set»)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("IIf"
         , "Returns one of two numeric or string values determined by a logical test."
         , "IIf(«Logical Expression», «Numeric|String Expression1», «Numeric|String Expression2»)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LinRegIntercept"
         , "Calculates the linear regression of a set and returns the value of b in the regression line y = ax + b."
         , "LinRegIntercept(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LinRegPoint"
         , "Calculates the linear regression of a set and returns the value of y in the regression line y = ax + b."
         , "LinRegPoint(«Numeric Expression», «Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LinRegR2"
         , "Calculates the linear regression of a set and returns R2 (the coefficient of determination)."
         , "LinRegR2(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LinRegSlope"
         , "Calculates the linear regression of a set and returns the value of a in the regression line y = ax + b."
         , "LinRegSlope(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LinRegVariance"
         , "Calculates the linear regression of a set and returns the variance associated with the regression line y = ax + b."
         , "LinRegVariance(«Set», «Numeric Expression»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LookupCube"
         , "Returns the value of an MDX expression evaluated over another specified cube in the same database."
         , "LookupCube(«Cube String», «Numeric|String Expression»)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Max"
         , "Returns the maximum value of a numeric expression evaluated over a set."
         , "Max(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Median"
         , "Returns the median value of a numeric expression evaluated over a set."
         , "Median(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Min"
         , "Returns the minimum value of a numeric expression evaluated over a set."
         , "Min(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ordinal"
         , "Returns the zero-based ordinal value associated with a level."
         , "«Level».Ordinal")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Predict"
         , "Evaluates the string expression within the data mining model specified within the current coordinates."
         , "Predict(«Mining Model Name», «Numeric Expression»)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Rank"
         , "Returns the one-based rank of a tuple in a set."
         , "Rank(«Tuple», «Set»[, «Calc Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("RollupChildren"
         ,
         "Scans the children of the member parameter and applies the string expression operator to their evaluated value."
         , "RollupChildren(«Member», «String Expression»)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Stddev"
         , "Alias for Stdev."
         , "Stdev(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StddevP"
         , "Alias for StdevP."
         , "StdevP(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Stdev"
         , "Returns the sample standard deviation of a numeric expression evaluated over a set, using the unbiased population formula."
         , "Stdev(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StdevP"
         , "Returns the population standard deviation of a numeric expression evaluated over a set, using the biased population formula."
         , "StdevP(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StrToValue"
         , "Returns a value based on a string expression."
         , "StrToValue(«String Expression»)")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Sum"
         , "Returns the sum of a numeric expression evaluated over a set."
         , "Sum(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Value"
         , "Returns the value of a measure."
         , "«Member».Value")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Var"
         ,
         "Returns the sample variance of a numeric expression evaluated over a set, using the unbiased population formula."
         , "Var(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Variance"
         , "Alias for Var."
         , "Var(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("VarianceP"
         , "Alias for VarP."
         , "VarP(«Set»[, «Numeric Expression»])")));
      numericFunctions.add(new DefaultMutableTreeNode(new MdxFunction("VarP"
         ,
         "Returns the population variance of a numeric expression evaluated over a set, using the biased population formula."
         , "VarP(«Set»[, «Numeric Expression»])")));

      otherFunctions = new DefaultMutableTreeNode("Other Functions");
      otherFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Call"
         , "Executes the string expression containing a user-defined function."
         , "Call «UDF Name»")));

      setFunctions = new DefaultMutableTreeNode("Set Functions");
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("AddCalculatedMembers"
         , "Adds calculated members to a set."
         , "AddCalculatedMembers(«Set»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("AllMembers"
         , "Returns a set containing all members of a specified dimension or level, including calculated members."
         , "«Dimension|Level».AllMembers")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ancestors"
         , "Returns all the ancestors of a member at a specified distance."
         , "Ancestors(«Member», «Numeric Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ancestors"
         , "Returns all the ancestors of a member at a specified level."
         , "Ancestors(«Member», «Level»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ascendants"
         , "Returns the set of the ascendants of the member, including the member itself."
         , "Ascendants(«Member»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Axis"
         , "Returns the set associated with the main axis."
         , "Axis(«Numeric Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("BottomCount"
         , "Returns a specified number of items from the bottom of a set, optionally ordering the set first."
         , "BottomCount(«Set», «Count»[, «Numeric Expression»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("BottomPercent"
         , "Sorts a set and returns the bottom n elements whose cumulative total is at least a specified percentage."
         , "BottomPercent(«Set», «Percentage», «Numeric Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("BottomSum"
         , "Sorts a set and returns the bottom n elements whose cumulative total is at least a specified value."
         , "BottomSum(«Set», «Value», «Numeric Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Children"
         , "Returns the children of a member."
         , "«Member».Children")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Crossjoin"
         , "Returns the cross product of two sets."
         , "Crossjoin(«Set1», «Set2»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Descendants"
         , "Returns the set of descendants of a member at a specified level, optionally including or excluding descendants in other levels."
         , "Descendants(«Member», [«Level»[, «Desc_flags»]])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Descendants"
         , "Returns the set of descendants of a member at a specified distance from a member, optionally including or excluding descendants in other levels."
         , "Descendants(«Member», «Distance»[, «Desc_flags»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Distinct"
         , "Eliminates duplicate tuples from a set."
         , "Distinct(«Set»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrilldownLevel"
         , "Drills down the members of a set, at a specified level, to one level below. Alternatively, drills down on a specified dimension in the set."
         , "DrilldownLevel(«Set»[, {«Level» | , «Index»}])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrilldownLevelBottom"
         , "Drills down the bottom n members of a set, at a specified level, to one level below."
         , "DrilldownLevelBottom(«Set», «Count»[, [«Level»][, «Numeric Expression»]])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrilldownLevelTop"
         , "Drills down the top n members of a set, at a specified level, to one level below."
         , "DrilldownLevelTop(«Set», «Count»[, [«Level»][, «Numeric Expression»]])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrilldownMember"
         , "Drills down the members in a set that are present in a second specified set."
         , "DrilldownMember(«Set1», «Set2»[, RECURSIVE])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrilldownMemberBottom"
         , "Similar to DrilldownMember, except that it includes only the bottom n children."
         , "DrilldownMemberBottom(«Set1», «Set2», «Count»[, [«Numeric Expression»][, RECURSIVE]])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrilldownMemberTop"
         , "Similar to DrilldownMember, except that it includes only the top n children."
         , "DrilldownMemberTop(«Set1», «Set2», «Count»[, [«Numeric Expression»][, RECURSIVE]])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrillupLevel"
         , "Drills up the members of a set that are below a specified level."
         , "DrillupLevel(«Set»[, «Level»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("DrillupMember"
         , "Drills up the members in a set that are present in a second specified set."
         , "DrillupMember(«Set1», «Set2»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Except"
         , "Finds the difference between two sets, optionally retaining duplicates."
         , "Except(«Set1», «Set2»[, ALL])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Extract"
         , "Returns a set of tuples from extracted dimension elements. The opposite of Crossjoin."
         , "Extract(«Set», «Dimension»[, «Dimension»...])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Filter"
         , "Returns the set resulting from filtering a set based on a search condition."
         , "Filter(«Set», «Search Condition»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Generate"
         , "Applies a set to each member of another set and joins the resulting sets by union."
         , "Generate(«Set1», «Set2»[, ALL])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Generate"
         , "Applies a set to each member of another set and joins the resulting sets by union."
         , "Generate(«Set», «String Expression»[, «Delimiter»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Head"
         , "Returns the first specified number of elements in a set."
         , "Head(«Set»[, «Numeric Expression»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Hierarchize"
         , "Orders the members of a set in a hierarchy."
         , "Hierarchize(«Set»[, POST])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Intersect"
         , "Returns the intersection of two input sets, optionally retaining duplicates."
         , "Intersect(«Set1», «Set2»[, ALL])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("LastPeriods"
         , "Returns a set of members prior to and including a specified member."
         , "LastPeriods(«Index»[, «Member»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Members"
         , "Returns the set of all members in a dimension, hierarchy, or level."
         , "«Dimension|Hierarchy|Level».Members")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Members"
         , "Returns the set of all members in a dimension, hierarchy, or level."
         , "Members(«String Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Mtd"
         , "A shortcut function for the PeriodsToDate function that specifies the level to be Month."
         , "Mtd([«Member»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("NameToSet"
         , "Returns a set containing a single member based on a string expression containing a member name."
         , "NameToSet(«Member Name»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("NonEmptyCrossjoin"
         , "Returns the cross product of two or more sets, excluding empty members."
         , "NonEmptyCrossjoin(«Set1», «Set2»[, «Set3»...][, «Crossjoin Set Count»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Order"
         , "Arranges members of a set, optionally preserving or breaking the hierarchy."
         , "Order(«Set», {«String Expression» | «Numeric Expression»} [, ASC | DESC | BASC | BDESC])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("PeriodsToDate"
         , "Returns a set of periods (members) from a specified level starting with the first period and ending with a specified member."
         , "PeriodsToDate([«Level»[, «Member»]])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Qtd"
         , "A shortcut function for the PeriodsToDate function that specifies the level to be Quarter."
         , "Qtd([«Member»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Siblings"
         , "Returns the siblings of a member, including the member itself."
         , "«Member».Siblings")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StripCalculatedMembers"
         , "Removes calculated members from a set."
         , "StripCalculatedMembers(«Set»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("StrToSet"
         , "Constructs a set from a string expression."
         , "StrToSet(«String Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Subset"
         , "Returns a subset of elements from a set."
         , "Subset(«Set», «Start»[, «Count»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Tail"
         , "Returns a subset from the end of a set."
         , "Tail(«Set»[, «Count»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("ToggleDrillState"
         , "Toggles the drill state of members. This function is a combination of DrillupMember and DrilldownMember."
         , "ToggleDrillState(«Set1», «Set2»[, RECURSIVE])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("TopCount"
         , "Returns a specified number of items from the top of a set, optionally ordering the set first."
         , "TopCount(«Set», «Count»[, «Numeric Expression»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("TopPercent"
         , "Sorts a set and returns the top n elements whose cumulative total is at least a specified percentage."
         , "TopPercent(«Set», «Percentage», «Numeric Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("TopSum"
         , "Sorts a set and returns the top n elements whose cumulative total is at least a specified value."
         , "TopSum(«Set», «Value», «Numeric Expression»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Union"
         , "Returns the union of two sets, optionally retaining duplicates."
         , "Union(«Set1», «Set2»[, ALL])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("VisualTotals"
         , "Dynamically totals child members specified in a set using a pattern for the total label in the result set."
         , "VisualTotals(«Set», «Pattern»)")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Wtd"
         , "A shortcut function for the PeriodsToDate function that specifies the level to be Week."
         , "Wtd([«Member»])")));
      setFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Ytd"
         , "A shortcut function for the PeriodsToDate function that specifies the level to be Year."
         , "Ytd([«Member»])")));



      top.add(arrayFunctions);
      top.add(dimensionHierarchyAndLevelFunctions);
      top.add(logicalFunctions);
      top.add(memberFunctions);
      top.add(numericFunctions);
      top.add(otherFunctions);
      top.add(setFunctions);
      top.add(stringFunctions);
      top.add(tupleFunctions);

      // well, this was fun...
   }



   class PopupListener extends MouseAdapter {
      public void mouseClicked(MouseEvent e) {
         if ((e.getClickCount()==2)){
            int selRow = tree.getRowForLocation(e.getX(), e.getY());
            TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
            if ( (selRow != -1)
                && ( ( (DefaultMutableTreeNode) selPath.getLastPathComponent())).getUserObject() instanceof MdxFunction) {

               MdxFunction mdxf = ( (MdxFunction) ( (DefaultMutableTreeNode) (selPath.getLastPathComponent())).getUserObject());

               if (MdxFunctionTree.this.parent != null) {
                  if (parent instanceof MdxEditor) {
                     ((MdxEditor)parent).addTextToCurrentPosition(mdxf.getSyntax());
                  }
               }
            }
         }
      }
   }



   private class MdxFunctionTreeRenderer extends JLabel implements TreeCellRenderer{

      public MdxFunctionTreeRenderer() {
         this.setOpaque(false);
      }
      public Component getTreeCellRendererComponent(
                                                      JTree tree,
                                                      Object value,
                                                      boolean sel,
                                                      boolean expanded,
                                                      boolean leaf,
                                                      int row,
                                                      boolean hasFocus) {
         if (( (DefaultMutableTreeNode) value).getUserObject() instanceof MdxFunction ){
            MdxFunction curr = (MdxFunction) ((DefaultMutableTreeNode) value).getUserObject();
            setText(curr.toString());
            setIcon(curr.getIcon());
            setToolTipText(curr.getToolTip());

         }else{
            String s = ((DefaultMutableTreeNode) value).getUserObject().toString();
            setText(s);
            setIcon(null);
            setToolTipText(s);
         }
         return this;
      }

   }



   public static void main(String[] args) {
       JFrame frame = new JFrame("Testing DataSourceTree...");
       MdxFunctionTree dst = new MdxFunctionTree();
       frame.setContentPane(dst);
       frame.addWindowListener(new WindowAdapter() {
             public void windowClosing(WindowEvent e) {
                System.exit(0);
             }
          });

      frame.pack();
      frame.setVisible(true);
    }

}
@


1.1
log
@first time commit
@
text
@@


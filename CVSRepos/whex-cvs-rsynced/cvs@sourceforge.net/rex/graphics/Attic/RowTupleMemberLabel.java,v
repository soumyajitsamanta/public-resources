head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.06.28.12.26.34;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.11.35.03;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package rex.graphics;

import javax.swing.JLabel;
import rex.metadata.Query;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import rex.metadata.resultelements.Tuple;
import rex.utils.AppColors;
import rex.utils.S;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import rex.metadata.resultelements.Member;

/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

public class RowTupleMemberLabel extends TupleMemberLabel{
   Query query;
   Tuple tuple;
   int memberOrdinal;
   int rowNumber;
   Member thisMember;

   public RowTupleMemberLabel(String caption
                              , Query _query
                              , Tuple _tuple
                              , int _memberOrdinal
                              , int _rowNumber
                              ) {
      super(caption);
      query = _query;
      tuple = _tuple;
      memberOrdinal = _memberOrdinal;
      thisMember = tuple.getMemberAt(memberOrdinal);

      rowNumber = _rowNumber;

      this.setBorder(AppColors.HIERARCHY_LABEL_BORDER);
      this.setForeground(AppColors.HIERARCHY_LABEL_FORECOLOR);
//      this.addMouseListener(this);
   }
   public int setHighlight(Tuple t, int mOrdinal){
//      S.out("setHighlight\nthis.tuple=" + tuple
//            + " \nthis.memberOrdinal=" + memberOrdinal
//            + "\ntuple = " + t
//            + "\nmOrdinal=" + mOrdinal);
      for(int i=0; (i <= memberOrdinal) && (i <= mOrdinal); i++){
         if (!(t.getMemberAt(i).getUniqueName().equals(tuple.getMemberAt(i).getUniqueName()))){
            this.setOpaque(false);
            return 0;
         }
      }
      this.setBackground(AppColors.HIERARCHY_LABEL_SELECTED_BACKGROUND);
      this.setOpaque(true);
      return 1;
   }

   void highlightHierarchy(){
      // highlight the hierarchy
      JPanel parent = (JPanel)this.getParent();
      int levelsHighlighted = 0; // boost performance
      int i;
      for(i=0; i < parent.getComponentCount() && (levelsHighlighted <= memberOrdinal); i++){
         if (parent.getComponent(i) instanceof RowTupleMemberLabel) {
            levelsHighlighted += ((RowTupleMemberLabel)parent.getComponent(i)).setHighlight(tuple, memberOrdinal);
         }
      }
      if (i < parent.getComponentCount()){
         for(; i < parent.getComponentCount(); i++)
            ((JLabel)parent.getComponent(i)).setOpaque(false);
      }
      parent.revalidate();
      parent.repaint();

   }
   void toggleHierarchy(){
      query.toggleRowsDrillState(thisMember);
   }
   void moveDimensionUp(){
      query.moveRowDimensionUp(thisMember);
   }
   void moveDimensionFirst(){
      query.moveRowDimensionFirst(thisMember);
   }
   void moveDimensionLast(){
      query.moveRowDimensionLast(thisMember);
   }
   void removeDimensionFromQuery(){
      query.removeRowDimensionFromQuery(thisMember);
   }
   void removeMemberFromQuery(){
      query.removeRowMemberFromQuery(thisMember);
   }
   void sortByMeasureAscending(){
      query.sortByThisMember(thisMember, "ASC");
//      S.out("assert: fired sort on a row member!");
   }
   void sortByMeasureDescending(){
      query.sortByThisMember(thisMember, "DESC");
//      S.out("assert: fired sort on a row member!");
   }
   void sortByMeasureBAscending(){
      query.sortByThisMember(thisMember, "BASC");
   }
   void sortByMeasureBDescending(){
      query.sortByThisMember(thisMember, "BDESC");
   }
   void keepThisMemberOnly(){
      query.keepThisMemberOnlyOnRows(thisMember);
   }
   void sendMemberToFilter(){
      query.addRowMemberToFilter(thisMember);
   }
//   MOUSE LISTENER STUFF:
//   public void mouseClicked(MouseEvent e){}
//
//   public void mouseEntered(MouseEvent e){}
//
//   public void mouseExited(MouseEvent e){}
//
//   public void mousePressed(MouseEvent e){
//      if(e.getClickCount() == 1){
//         highlightHierarchy();
//      }else if(e.getClickCount() == 2){
//         toggleHierarchy();
//      }
//   }
//
//   public void mouseReleased(MouseEvent e){}

   public String[] getPopUpActionList(){
      return new String[] {
           TupleMemberLabelPopUpActions.MOVE_DIMENSION_UP
         , TupleMemberLabelPopUpActions.MOVE_DIMENSION_FIRST
         , TupleMemberLabelPopUpActions.MOVE_DIMENSION_LAST
         , TupleMemberLabelPopUpActions.REMOVE_DIMENSION_FROM_QUERY
         , TupleMemberLabelPopUpActions.REMOVE_MEMBER_FROM_QUERY
         , TupleMemberLabelPopUpActions.KEEP_THIS_MEMBER_ONLY
         , TupleMemberLabelPopUpActions.SEND_MEMBER_TO_FILTER
         , TupleMemberLabelPopUpActions.SORT_BY_THIS_BASCENDING
         , TupleMemberLabelPopUpActions.SORT_BY_THIS_BDESCENDING
         , TupleMemberLabelPopUpActions.SORT_BY_THIS_ASCENDING
         , TupleMemberLabelPopUpActions.SORT_BY_THIS_DESCENDING
      };
   }


}
@


1.1
log
@first time commit
@
text
@@


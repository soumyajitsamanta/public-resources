head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2005.06.28.13.38.29;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.11.35.04;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@package rex.metadata;


import java.lang.String;
// org.apache.axis.utils.XMLUtils

import org.apache.axis.utils.XMLUtils;

import org.tempuri.type.*;
import org.tempuri.wsdl.*;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import javax.xml.namespace.QName;
import org.apache.axis.message.MessageElement;
import java.util.Vector;

import rex.utils.*;
import org.w3c.dom.NodeList;
import rex.graphics.datasourcetree.elements.*;
import rex.graphics.dimensiontree.elements.DimensionTreeElement;
import rex.graphics.dimensiontree.elements.DimensionElement;
import rex.graphics.dimensiontree.elements.HierarchyElement;
import rex.graphics.dimensiontree.elements.LevelElement;
import org.w3c.dom.Document;
import java.io.Serializable;
import rex.graphics.dimensiontree.elements.MeasureElement;
import rex.graphics.filtertree.elements.FilterTreeMemberElement;
import rex.graphics.filtertree.elements.FilterTreeLevelElement;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import java.io.InputStream;
import javax.swing.JOptionPane;

/**
 * <p>Title: WHEX</p>
 * <p>Description: Holds all the metadata for specific server(url)</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

public class ServerMetadata {
   private java.net.URL endpoint;
   private MsxmlaLocator service;
   ClsXMLAProxSoapPort port ;
//   private Call call;

   public ServerMetadata(String webServiceURL) {
//      S.out("SERVERMETADATA CONSTRUCTOR!");
      try{
         endpoint = new java.net.URL(webServiceURL);
      }catch(Exception e){
         S.out("Cannot instantiate ServerMetaData!");
         S.out("Error:" + e);
      }
   }
   public boolean isHTTPS(){
//      S.out(endpoint.getProtocol());
      if (endpoint.getProtocol().equals("https"))
         return true;
      else
         return false;
   }
   private void init(){
      if (service == null){
         try{
            service = new MsxmlaLocator();
            port  = service.getclsXMLAProxSoapPort(endpoint);
         }catch(Exception e){
            S.out("Error while initializing service & call...");
            S.out("Error:" + e);
         }
      }
//      S.out("port = " + port + "   hash=" + port.hashCode());
   }
   public DataSourceTreeElement[] discoverDataSources(){
      DataSourceTreeElement retVal[] = null;
      init();
      ClsXMLAProxDiscoverRestrictions restrictions = new ClsXMLAProxDiscoverRestrictions();
      ClsXMLAProxDiscoverProperties   properties   = new ClsXMLAProxDiscoverProperties();
      ClsXMLAProxDiscoverPropertyList pl = new ClsXMLAProxDiscoverPropertyList();

      //pl.setDataSourceInfo("Local Analysis Server");
      /*
      pl.setCatalog("null");
      pl.setFormat("Tabular");
      pl.setContent("SchemaData");
      */
      //properties.setPropertyList(pl);

      try{
         ClsXMLAProxDiscoverResult r = port.discover(  "DISCOVER_DATASOURCES"
                                                     , restrictions
                                                     , properties);
//         S.out(r.toString());
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         int i;
         if (nl != null){
            if (nl.getLength() > 0) {
               retVal = new DataSourceElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  retVal[i] = new DataSourceElement(this, nl.item(i));
               }
            }
         }
      }catch(Exception e){
         S.out("Error(discoverDataSources):" + e);
         S.reportError(e);
         e.printStackTrace();
         return null;
      }
      return retVal;
   }

   public  DataSourceTreeElement[] getCatalogList(  ClsXMLAProxDiscoverRestrictions restrictions
                                                 ,  ClsXMLAProxDiscoverProperties   properties){
      DataSourceTreeElement[] retVal = null;
      init();

      try{
         ClsXMLAProxDiscoverResult r = port.discover(  "DBSCHEMA_CATALOGS"
                                                     , restrictions
                                                     , properties);
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         int i;
         if (nl != null){
            if (nl.getLength() > 0) {
               retVal = new  CatalogElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  //S.out("node name= " + nl.item(i).getNodeName() + " node value =" + getTextFromDOMElement(nl.item(i)));
                  retVal[i] = new CatalogElement(this, nl.item(i), properties.getPropertyList().getDataSourceInfo());
               }
            }
         }
      }catch(Exception e){
         S.out("Error(getCatalogList):" + e);
         return null;
      }
      return retVal;
   }
   public DataSourceTreeElement[] getCubeList( ClsXMLAProxDiscoverRestrictions restrictions
                                            ,  ClsXMLAProxDiscoverProperties   properties){
      DataSourceTreeElement[] retVal = null;
      init();

      try{
         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_CUBES"
                                                     , restrictions
                                                     , properties);
         //S.out(r.toString());
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {
               // S.out("cube list length = " + nl.getLength());
               retVal = new DataSourceTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  //S.out("node name= " + nl.item(i).getNodeName() + " node value =" + rex.utils.DOM.getTextFromDOMElement(nl.item(i)));
                  retVal[i] = new CubeElement(this, nl.item(i), properties.getPropertyList().getDataSourceInfo());
               }
            }
         }
      }catch(Exception e){
         S.out("Error(getCubeList):" + e);
         return null;
      }
      return retVal;
   }

   public DimensionTreeElement[] getDimensionList( ClsXMLAProxDiscoverRestrictions restrictions
                                                ,  ClsXMLAProxDiscoverProperties   properties){
      DimensionTreeElement[] retVal = null;
      init();

      try{
         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_DIMENSIONS"
                                                     , restrictions
                                                     , properties);
         //S.out(r.toString());
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {
               // S.out("cube list length = " + nl.getLength());
               retVal = new DimensionTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  //S.out("node name= " + nl.item(i).getNodeName() + " node value =" + rex.utils.DOM.getTextFromDOMElement(nl.item(i)));
                  retVal[i] = new DimensionElement(this, nl.item(i), restrictions, properties);
               }
            }
         }
      }catch(Exception e){
         S.out("Error(getDimensionList):" + e + " (" + e.getMessage() + ")");
         return null;
      }
      return retVal;
   }
   public DimensionTreeElement[] getHierarchyList( ClsXMLAProxDiscoverRestrictions restrictions
                                                ,  ClsXMLAProxDiscoverProperties   properties){
      DimensionTreeElement[] retVal = null;
      init();

      try{
         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_HIERARCHIES"
                                                     , restrictions
                                                     , properties);
         //S.out(r.toString());
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {

               retVal = new DimensionTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  //S.out("node name= " + nl.item(i).getNodeName() + " node value =" + rex.utils.DOM.getTextFromDOMElement(nl.item(i)));
                  retVal[i] = new HierarchyElement(this, nl.item(i), restrictions, properties);
               }
            }
         }
      }catch(Exception e){
         S.out("Error(getHierarchyList):" + e);
         return null;
      }
      return retVal;
   }

   public DimensionTreeElement[] getLevelList( ClsXMLAProxDiscoverRestrictions restrictions
                                                ,  ClsXMLAProxDiscoverProperties   properties){
      DimensionTreeElement[] retVal = null;
      init();

      try{
         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_LEVELS"
                                                     , restrictions
                                                     , properties);

         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {

               retVal = new DimensionTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  retVal[i] = new LevelElement(this, nl.item(i), restrictions, properties);
               }
            }
         }
      }catch(Exception e){
         S.out("Error(getLevelList):" + e);
         return null;
      }
      return retVal;
   }
   public DimensionTreeElement[] getFilterLevelList( ClsXMLAProxDiscoverRestrictions restrictions
                                                ,  ClsXMLAProxDiscoverProperties   properties){
      DimensionTreeElement[] retVal = null;
      init();

      try{

         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_LEVELS"
                                                     , restrictions
                                                     , properties);
//         S.out("getting levels...");
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {
               retVal = new DimensionTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  retVal[i] = new FilterTreeLevelElement(this, nl.item(i), restrictions, properties);
               }
            }
         }
//         S.out("got levels back... level count=" + retVal.length);
      }catch(Exception e){
         S.out("Error(getFilterLevelList):" + e);
         e.printStackTrace();
         return null;
      }
      return retVal;
   }

   public DimensionTreeElement[] getMeasuresList( ClsXMLAProxDiscoverRestrictions restrictions
                                                ,  ClsXMLAProxDiscoverProperties   properties){
      DimensionTreeElement[] retVal = null;
      init();

      try{
         //S.out("executing MDSCHEMA_MEASURES!\n" + restrictions.getRestrictionList().toString());
         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_MEASURES"
                                                     , restrictions
                                                     , properties);

         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {
               retVal = new DimensionTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  retVal[i] = new MeasureElement(this, nl.item(i), restrictions, properties);
               }
            }
         }
      }catch(Exception e){
         S.out("Error(getMeasuresList):" + e);
         return null;
      }
      return retVal;
   }

//   public DimensionTreeElement[] getMembersList2( ClsXMLAProxDiscoverRestrictions restrictions
//                                                ,  ClsXMLAProxDiscoverProperties   properties){
//      DimensionTreeElement[] retVal = null;
//      init();
//
//      try{
//         S.out("executing MDSCHEMA_MEMBERS");
//         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_MEMBERS"
//                                                     , restrictions
//                                                     , properties);
//         S.out("done executing MDSCHEMA_MEMBERS");
//         Document d = r.getResultAsDocument();
//         S.out("done getResultAsDocument");
//         NodeList nl  = d.getElementsByTagName("row");
//         S.out("done getElementsByTagName");
//         if (nl != null){
//            int i;
//            S.out("nl.getLength()=" + nl.getLength());
//            if (nl.getLength() > 0) {
//               retVal = new DimensionTreeElement[nl.getLength()];
//               for (i = 0; i < nl.getLength(); i++) {
//                  // // // this is going pretty slow
//                  retVal[i] = new FilterTreeMemberElement(this, nl.item(i), restrictions, properties);
//               }
//            }
//         }
//      }catch(Exception e){
//         S.out("Error(getMembersList):" + e);
//         return null;
//      }
//      return retVal;
//   }

   public DimensionTreeElement[] getMembersList( ClsXMLAProxDiscoverRestrictions restrictions
                                                ,  ClsXMLAProxDiscoverProperties   properties){
      DimensionTreeElement[] retVal = null;
      init();

      try{
//         S.out("discover...");
         ClsXMLAProxDiscoverResult r = port.discover( "MDSCHEMA_MEMBERS"
                                                     , restrictions
                                                     , properties);
//         S.out("end discover...");

         // Use the default (non-validating) parser
         SAXParserFactory factory = SAXParserFactory.newInstance();
         SAXMemberHandler handler = new SAXMemberHandler(this, restrictions, properties);
         try {
             // Parse the input
             SAXParser saxParser = factory.newSAXParser();
//             S.out("starting parse...");
             saxParser.parse(r.getResultAsStream() , handler);
//             for(int g=0; g<retVal.length;g++){
//                S.out(">>>>>>>>>>>>>>" + retVal[g]);
//             }
//             S.out("end parse...getting members");
             retVal = handler.getMembers();
//             S.out("got members: " + handler.getRowCount());
//             return retVal;
//             return (DimensionTreeElement[]) handler.getMembers();
//             S.out("handler.getRowCount() = " + handler.getRowCount() + " handler.getRowCount2()=" + handler.getRowCount2());
         } catch (Throwable t) {
             t.printStackTrace();
         }

      }catch(Exception e){
         S.out("Error(getMembersList2):" + e);
         return null;
      }
      return retVal;
   }


   public ClsXMLAProxExecuteResult execute( String  mdx
                                          , ClsXMLAProxExecuteProperties   properties)
                                            throws java.rmi.RemoteException{
      DimensionTreeElement[] retVal = null;
      init();

      try{
         ClsXMLAProxExecuteResult r = port.execute( new ClsXMLAProxExecuteCommand(mdx)
                                                   , properties);
         //S.out("Got:\n" + r);
         return r;
/*
         NodeList nl  = r.getResultAsDocument().getElementsByTagName("row");
         if (nl != null){
            int i;
            if (nl.getLength() > 0) {
               retVal = new DimensionTreeElement[nl.getLength()];
               for (i = 0; i < nl.getLength(); i++) {
                  retVal[i] = new LevelElement(this, nl.item(i), restrictions, properties);
               }
            }
         }
 */
      }catch(java.rmi.RemoteException e){
         S.out("Error executing MDX:" + mdx + "\ne.getMessage() = " + e.getMessage() + "\nStackTrace:" );
         e.printStackTrace();
//         JOptionPane.showConfirmDialog(
//                    null
//                  , "Error occured while executing MDX command:\n" + e.getMessage()
//                  , "Error executing MDX command"
//                  , JOptionPane.YES_OPTION);
         throw e;
//         return null;
      }

   }


   public static void main(String[] args) {

      ServerMetadata svm = new ServerMetadata("http://localhost:8080");

      DataSourceTreeElement[] dse = svm.discoverDataSources();
      for(int i=0; i < dse.length ; i++)
            S.out("dse = " + dse[i]);
/*
      DataSourceTreeElement[] v =   svm.getCatalogList();

      for(int i = 0; i < v.length; i++){
         S.out("catalog = " + v);
      }
 */
/*
      v  = svm.getCubeList();
      for(int i = 0; i < v.length; i++){
         S.out("cube = " + v);
      }

*/
      ClsXMLAProxDiscoverRestrictions restrictions = new ClsXMLAProxDiscoverRestrictions();
      ClsXMLAProxDiscoverProperties   properties   = new ClsXMLAProxDiscoverProperties();
      ClsXMLAProxDiscoverPropertyList pl = new ClsXMLAProxDiscoverPropertyList();
      ClsXMLAProxDiscoverRestrictionList rl = new ClsXMLAProxDiscoverRestrictionList();

      pl.setDataSourceInfo("Local Analysis Server");
      rl.setCatalog("Test");

      restrictions.setRestrictionList(rl);

      pl.setCatalog("Test");
      pl.setFormat("Tabular");
      pl.setContent("SchemaData");

      properties.setPropertyList(pl);

      DimensionTreeElement[] v = svm.getDimensionList(restrictions, properties);

      for(int i = 0; i < v.length; i++){
         S.out("dimension = " + v[i]);
      }




  }


}
@


1.1
log
@first time commit
@
text
@@


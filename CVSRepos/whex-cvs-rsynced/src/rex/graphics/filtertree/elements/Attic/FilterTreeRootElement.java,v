head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2006.01.13.12.21.14;	author igorludi;	state dead;
branches;
next	1.3;

1.3
date	2005.10.18.14.04.40;	author igorludi;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.13.40.38;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.14.11.05;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@package rex.graphics.filtertree.elements;


import javax.swing.ImageIcon;
import rex.graphics.dimensiontree.*;
import rex.utils.S;
import rex.metadata.UniqueNameElement;
import rex.metadata.ServerMetadata;
import org.tempuri.type.ClsXMLAProxDiscoverRestrictions;
import org.tempuri.type.ClsXMLAProxDiscoverProperties;
import rex.graphics.dimensiontree.elements.DimensionTreeElement;
import rex.graphics.dimensiontree.elements.DimensionElement;
import rex.graphics.dimensiontree.elements.HierarchyElement;
import rex.graphics.dimensiontree.elements.LevelElement;



/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

public class FilterTreeRootElement implements DimensionTreeElement, UniqueNameElement { //
   private boolean flattenDimensions;
   private DimensionTreeElement filterElement;
   private boolean displayInTab;


   public FilterTreeRootElement(DimensionTreeElement _filterElement) {
//      super();
      filterElement  = _filterElement;
      displayInTab = false; //default value

   }

   static ImageIcon icon;
   static {
      icon = S.getAppIcon("FilterTreeRootElement.gif");
   }
//
//   public DimensionTreeElement[] getChildren() {
//      boolean tempFlattenDim = filterElement.getFlattenDimensions();
//      filterElement.setFlattenDimensions(flattenDimensions);
//      DimensionTreeElement[] retVal = filterElement.getChildren();
//      filterElement.setFlattenDimensions(tempFlattenDim);
//      return retVal;
//   }
   public DimensionTreeElement[] getChildren(boolean noMatterWhat){
      // other restrictons are already set, i.e. cube and catalog name
      filterElement.getRestrictions().getRestrictionList().setDimensionUniqueName(filterElement.getDimensionUniqueName());

      // depending on the way dimensions are layed(flattened, grouped) out in dimTree I can get different objects here
      // In fact I'll get DimensionElement only if I'm testing (main)
      if (filterElement instanceof DimensionElement){
         S.out("instanceof DimensionElement setting NULL");
         filterElement.getRestrictions().getRestrictionList().setHierarchyUniqueName(null);
      }else if (filterElement instanceof HierarchyElement){
         filterElement.getRestrictions().getRestrictionList().setHierarchyUniqueName(((HierarchyElement)filterElement).getUniqueName());
         S.out("instanceof HierarchyElement setting " + ((HierarchyElement)filterElement).getUniqueName());
      }else if (filterElement instanceof LevelElement){
         S.out("instanceof LevelElement setting " + ((LevelElement)filterElement).getHierarchyUniqueName());
         filterElement.getRestrictions().getRestrictionList().setHierarchyUniqueName(((LevelElement)filterElement).getHierarchyUniqueName());
      }
//      S.out("filterElement.class= " + filterElement.getClass());

      return filterElement.getServerMetadata().getFilterLevelList(filterElement.getRestrictions()
                                                                , filterElement.getProperties());

   }


   public String toString() {
      return "<HTML><B>Filter on:" + filterElement.getCaption() + "</B></HTML>";
   }

   public  ImageIcon getIcon() {
      return icon;
   }

   public static ImageIcon getFilterIcon() {
      return icon;
   }

   public String getToolTip() {
      return "Dimension elements available for filtering";
   }

   public void setFlattenDimensions(boolean _flattenDimensions){
      flattenDimensions =_flattenDimensions;
   }


   public String[] getPopUpActionList() {
      if (displayInTab){
         return new String[] {FilterTreePopUpActions.LOSE_FILTER
                         , FilterTreePopUpActions.APPLY_FILTER
                         , FilterTreePopUpActions.MOVE_TO_SPLIT_PANE };
      }else{
         return new String[] {FilterTreePopUpActions.LOSE_FILTER
                         , FilterTreePopUpActions.APPLY_FILTER
                         , FilterTreePopUpActions.MOVE_TO_TAB };
      }
   }

   public String getUniqueName(){
      return "[filter tree root]";
   }
   public String getCaption(){
      return null;
   }
   public String getQueryMembersExpression(){
      return null;
   }
   public boolean isEnabled(){
      return false;
   }
   public void setEnabled(boolean newValue){
      // no way Hose!
   }
   public int getChildrenCount(){
      return 1;
   }
   public ServerMetadata getServerMetadata(){
      return filterElement.getServerMetadata();
   }
   public ClsXMLAProxDiscoverRestrictions getRestrictions(){
      return filterElement.getRestrictions();
   }
   public ClsXMLAProxDiscoverProperties   getProperties(){
      return filterElement.getProperties();
   }
   public String getDimensionUniqueName(){
      return filterElement.getDimensionUniqueName();
   }

   public boolean isDisplayInTab(){
      return displayInTab;
   }
   public void setDisplayInTab(boolean _displayInTab){
      displayInTab = _displayInTab;
   }

}
@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d52 1
a52 1
   public DimensionTreeElement[] getChildren(){
d68 1
a68 1
      S.out("filterElement.class= " + filterElement.getClass());
d71 1
a71 1
                                                            , filterElement.getProperties());
@


1.1
log
@*** empty log message ***
@
text
@@


head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2006.01.13.12.21.14;	author igorludi;	state dead;
branches;
next	1.3;

1.3
date	2005.10.18.14.04.40;	author igorludi;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.13.40.38;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.14.11.03;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@package rex.graphics.filtertree.elements;

import javax.swing.ImageIcon;
import rex.metadata.ServerMetadata;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import rex.utils.*;
import org.tempuri.type.ClsXMLAProxDiscoverPropertyList;

import org.tempuri.type.ClsXMLAProxDiscoverRestrictions;
import org.tempuri.type.ClsXMLAProxDiscoverProperties;
import org.tempuri.type.ClsXMLAProxDiscoverRestrictionList;
import rex.metadata.QueryElement;
import rex.graphics.dimensiontree.elements.*;
import rex.metadata.UniqueNameElement;


/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

public class FilterTreeLevelElement extends    LevelElement
                                    implements DimensionTreeElement, UniqueNameElement{

//   private String catalogName;
//   private String schemaName;
//   private String cubeName;
//   private String dimensionUniqueName;
//   private String hierarchyUniqueName;
//   private String levelName;
//   private String levelUniqueName;
//   private String levelGuid;
//   private String levelCaption;
//   private int levelNumber;
//   private int levelCardinality;
//   private int levelType;
//   private String description;
//   private int customRollupSettings;
//   private int levelUniqueSettings;
//   private boolean levelIsVisible;
//   private String levelOrderingProperty;
//   private int levelDbtype;
//   private String levelMasterUniqueName;
//   private String levelNameSqlColumnName;
//   private String levelKeySqlColumnName;
//   private String levelUniqueNameSqlColumnName;
//   private boolean nodeEnabled;


//   private ClsXMLAProxDiscoverRestrictions restrictions;
//   private ClsXMLAProxDiscoverProperties   properties;

//   private ServerMetadata parent;

//   static ImageIcon[] icon;
//
//   static {
//       icon = new ImageIcon[]{
//            new ImageIcon("C:/javasource/warehouse explorer/images/level_1.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_2.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_3.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_4.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_5.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_6.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_7.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_8.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_9.gif")
//          , new ImageIcon("C:/javasource/warehouse explorer/images/level_10.gif")
//       };
//   }
   public FilterTreeLevelElement(  ServerMetadata svm
                           , Node rowNode
                           , ClsXMLAProxDiscoverRestrictions _restrictions
                           , ClsXMLAProxDiscoverProperties   _properties) {

      super(svm, rowNode, _restrictions, _properties);
      S.out("creatd FilterTreeLevelElement");


   }

   public DimensionTreeElement[] getChildren(boolean noMatterWhat){
      if (getUniqueName().startsWith("[Measures]")){
         S.out("assert:FilterTree shouldn't hold Measure dimension!");
         return getServerMetadata().getMeasuresList(getRestrictions(), getProperties());
      }else{
//         S.out("calling getFilterTreeMembersList");
         return getServerMetadata().getFilterTreeMembersList(getRestrictions(), getProperties());
      }
   }


//   public String toString(){
//      if (levelName == null)
//         return "not initialized";
//      else
//         return levelName;
//
//   }
//
//   public ImageIcon getIcon(){
//      return icon[levelNumber];
//   }
//
//   public String getToolTip(){
//      if (levelName == null)
//         return "not initialized";
//      else
//         return "<html>Level unique name:" + levelUniqueName
//                   +  "<br>Dimension unique name:" + dimensionUniqueName
//                   + "<br>Hierarchy unique name:" + hierarchyUniqueName
//                   + "</html>";
//
//   }




   public String[] getPopUpActionList(){
      // NOT FOR NOW - LATER I COULD ALLOW THIS, BUT ENABLING A LEVEL MEMEBER
      //  WOULD MEAN ENABLING A
      return null;
//      if (isEnabled()){
//         return new String[] {
//              FilterTreePopUpActions.DISABLE_THIS_ELEMENT
//            , FilterTreePopUpActions.ENABLE_ONLY_THIS_ELEMENT
//            , FilterTreePopUpActions.ENABLE_ALL_BUT_THIS_ELEMENT
//         };
//      }else{
//         return new String[] {
//              FilterTreePopUpActions.ENABLE_THIS_ELEMENT
//            , FilterTreePopUpActions.ENABLE_ONLY_THIS_ELEMENT
//            , FilterTreePopUpActions.ENABLE_ALL_BUT_THIS_ELEMENT
//         };
//
//      }
   }

//   public String getUniqueName(){
//      return levelUniqueName;
//   }
//   public String getCaption(){
//      return levelCaption;
//   }
//   public String getQueryMembersExpression(){
//      return levelUniqueName + ".Members";
//   }
//
//   public boolean isEnabled(){
//      return nodeEnabled;
//   }
//   public void setEnabled(boolean newValue){
//      nodeEnabled = newValue;
//   }
//   public String getHierarchyUniqueName(){
//      return hierarchyUniqueName;
//   }
//   public boolean isMeasure(){
//      return false;
//   }
}
@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d28 1
a28 1
public class FilterTreeLevelElement extends LevelElement
d83 1
a83 35
      getRestrictions().getRestrictionList().setLevelUniqueName(getUniqueName());

//      parent = svm;
//      nodeEnabled = true;
//      NodeList nl = rowNode.getChildNodes();
//
//      for(int i=0; i < nl.getLength(); i++){
//         // TO BE DONE: OTHER VARS...
//         if (nl.item(i).getNodeType() == 1){
//            if (nl.item(i).getNodeName().equals("CATALOG_NAME")) {
//               catalogName = DOM.getTextFromDOMElement(nl.item(i));
//            }else if (nl.item(i).getNodeName().equals("CUBE_NAME")) {
//               cubeName = DOM.getTextFromDOMElement(nl.item(i));
//            }else if (nl.item(i).getNodeName().equals("DIMENSION_UNIQUE_NAME")) {
//               dimensionUniqueName = DOM.getTextFromDOMElement(nl.item(i));
//            }else if (nl.item(i).getNodeName().equals("HIERARCHY_UNIQUE_NAME")) {
//               hierarchyUniqueName = DOM.getTextFromDOMElement(nl.item(i));
//            }else if (nl.item(i).getNodeName().equals("LEVEL_NAME")) {
//               levelName = DOM.getTextFromDOMElement(nl.item(i));
//            }else if (nl.item(i).getNodeName().equals("LEVEL_UNIQUE_NAME")) {
//               levelUniqueName = DOM.getTextFromDOMElement(nl.item(i));
//            }else if (nl.item(i).getNodeName().equals("LEVEL_NUMBER")) {
//               levelNumber = Integer.parseInt(DOM.getTextFromDOMElement(nl.item(i)));
//            }else if (nl.item(i).getNodeName().equals("LEVEL_CAPTION")) {
//               levelCaption = DOM.getTextFromDOMElement(nl.item(i));
//            }
//         }
//      }
//      ClsXMLAProxDiscoverRestrictionList rl = new ClsXMLAProxDiscoverRestrictionList();
//      rl.setCatalog(_restrictions.getRestrictionList().getCatalog());
//      rl.setCubeName(_restrictions.getRestrictionList().getCubeName());
//      rl.setLevelUniqueName(levelUniqueName);
//      restrictions = new ClsXMLAProxDiscoverRestrictions();
//      restrictions.setRestrictionList(rl);
//      properties = _properties;
d88 1
a88 1
   public DimensionTreeElement[] getChildren(){
d93 2
a94 2
//         S.out("FilterTreeLevelElement returns X children");
         return getServerMetadata().getMembersList(getRestrictions(), getProperties());
@


1.1
log
@*** empty log message ***
@
text
@@


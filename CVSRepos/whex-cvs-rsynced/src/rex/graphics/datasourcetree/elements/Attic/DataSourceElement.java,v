head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2006.01.13.12.21.13;	author igorludi;	state dead;
branches;
next	1.3;

1.3
date	2005.10.18.14.04.40;	author igorludi;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.13.40.38;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.14.10.51;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@package rex.graphics.datasourcetree.elements;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import rex.utils.*;
import rex.metadata.ServerMetadata;
import org.tempuri.type.*;
import javax.swing.ImageIcon;
/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

/*
 <xsd:element name="DataSourceName" type="xsd:string" sql:field="DataSourceName" minOccurs="0" />
  <xsd:element name="DataSourceDescription" type="xsd:string" sql:field="DataSourceDescription" minOccurs="0" />
  <xsd:element name="URL" type="xsd:string" sql:field="URL" minOccurs="0" />
  <xsd:element name="DataSourceInfo" type="xsd:string" sql:field="DataSourceInfo" minOccurs="0" />
  <xsd:element name="ProviderName" type="xsd:string" sql:field="ProviderName" minOccurs="0" />
- <xsd:element name="ProviderType" sql:field="ProviderType" minOccurs="0">
- <xsd:complexType>
- <xsd:sequence maxOccurs="unbounded" minOccurs="0">
  <xsd:any processContents="lax" maxOccurs="unbounded" />
  </xsd:sequence>
  </xsd:complexType>
  </xsd:element>
  <xsd:element name="AuthenticationMode" type="xsd:string" sql:field="AuthenticationMode" minOccurs="0" />

 */


public class DataSourceElement  implements DataSourceTreeElement{
   private String dataSourceName;
   private String dataSourceDescription;
   private String URL;
   private String providerName;
   private String providerType;
   private String authenticationMode;
   private ServerMetadata parent;

   static ImageIcon icon
                  , secureicon;
   static {
      icon = S.getAppIcon("server.gif");
      secureicon = S.getAppIcon("secureserver.gif");
   }
/*
   public DataSourceElement(ServerMetadata svm) {
      parent = svm;
   }
*/
   public DataSourceElement(ServerMetadata svm, Node rowNode) {
      parent = svm;

      NodeList nl = rowNode.getChildNodes();

      for(int i=0; i < nl.getLength(); i++){
         if (nl.item(i).getNodeType() == 1){
            //S.out(nl.item(i).getNodeName());
            if (nl.item(i).getNodeName().equals("DataSourceName")) {
               dataSourceName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("DataSourceDescription")) {
               dataSourceDescription = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("URL")) {
               URL = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("ProviderName")) {
               providerName = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("ProviderType")) {
               providerType = DOM.getTextFromDOMElement(nl.item(i));
            }else if (nl.item(i).getNodeName().equals("AuthenticationMode")) {
               authenticationMode = DOM.getTextFromDOMElement(nl.item(i));
            }
         }
      }
   }

   public DataSourceTreeElement[] getChildren(){
      ClsXMLAProxDiscoverRestrictions restrictions = new ClsXMLAProxDiscoverRestrictions();
      ClsXMLAProxDiscoverProperties   properties   = new ClsXMLAProxDiscoverProperties();
      ClsXMLAProxDiscoverPropertyList pl = new ClsXMLAProxDiscoverPropertyList();

      pl.setDataSourceInfo(dataSourceName);
/*
      pl.setCatalog("Foodmart 2000");
      pl.setFormat("Tabular");
      pl.setContent("SchemaData");
*/
      properties.setPropertyList(pl);

      return parent.getCatalogList(restrictions, properties);
   }

   public String toString(){
      if (dataSourceName == null)
         return "not initialized";
      else
         return "" + dataSourceName;
   }

   public String getDataSourceName(){
      return dataSourceName;
   }

   public ImageIcon getIcon(){
      if (parent.isHTTPS() )
         return secureicon;
      else
         return icon;

   }

   public String getToolTip(){
      if (dataSourceName == null)
         return "not initialized";
      else
         return "<html>" + dataSourceName
                   + "<br>URL:" + URL
                   + "<br>DESC:" + dataSourceDescription
                   + "<br>PROVIDER NAME:" + providerName
                   + "<br>PROVIDER TYPE:" + providerType
                   + "<br>AUTH.MODE:" + authenticationMode
                   + "</html>";
   }
   public String[] getPopUpActionList(){
      return null; //new String[] {"Refresh"};
   }

   public ServerMetadata getServerMetaData(){
      return parent;
   }

   public String getDataSourceInfo(){
      return dataSourceName;
   }


}
@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@*** empty log message ***
@
text
@@


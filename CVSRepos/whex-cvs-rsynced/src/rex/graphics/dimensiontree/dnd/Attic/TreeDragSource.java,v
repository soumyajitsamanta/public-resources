head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2006.01.13.12.21.14;	author igorludi;	state dead;
branches;
next	1.3;

1.3
date	2005.10.18.14.04.40;	author igorludi;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.13.40.38;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.14.10.52;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@package rex.graphics.dimensiontree.dnd;

import rex.utils.S;
/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

// TreeDragSource.java
// A drag source wrapper for a JTree.  This class can be used to make
// a rearrangeable DnD tree with the TransferableTreeNode class as the
// transfer data type.
//

import java.awt.*;
import java.awt.dnd.*;
import java.awt.datatransfer.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;
import rex.graphics.dimensiontree.elements.DimensionTreeElement;
import rex.graphics.TreeElement;
import rex.metadata.QueryElement;
import rex.graphics.filtertree.*;

public class TreeDragSource implements DragSourceListener, DragGestureListener {

  DragSource source;
  DragGestureRecognizer recognizer;
  TransferableTreeNode transferable;
  TreeElement oldNode;
  JTree sourceTree;

  public TreeDragSource(JTree tree, int actions) {
    sourceTree = tree;
    source = new DragSource();
    recognizer = source.createDefaultDragGestureRecognizer(
                 sourceTree, actions, this);
  }

  /*
   * Drag Gesture Handler
   */
  public void dragGestureRecognized(DragGestureEvent dge) {
    TreePath path = sourceTree.getSelectionPath();
    if ((path == null)
        || (path.getPathCount() <= 1)
        || !(((DimensionTreeElement)(((TreeElement)path.getLastPathComponent()).getUserObject())).isEnabled())
        || !((((TreeElement)path.getLastPathComponent()).getUserObject()) instanceof QueryElement )) {
      // We can't move the root node
      // or an empty selection
      // or disabled nodes - the ones that already been dragged, i.e. they are already included in the query
      // or nodes that aren't QueryElements
      return;
    }
    oldNode = (TreeElement)path.getLastPathComponent();
    transferable = new TransferableTreeNode(sourceTree.getRowForPath(path));

    source.startDrag(dge
                     , DragSource.DefaultCopyDrop
                     , ((DimensionTreeElement)oldNode.getUserObject()).getIcon().getImage()
                     , new Point(10, 10)
                     , transferable
                     , this);
//    S.out("dragGestureRecognized-> path = " + path);

    // If you support dropping the node anywhere, you should probably
    // start with a valid move cursor:
    //source.startDrag(dge, DragSource.DefaultMoveDrop, transferable, this);
  }

  /*
   * Drag Event Handlers
   */
  public void dragEnter(DragSourceDragEvent dsde) { }
  public void dragExit(DragSourceEvent dse) { }
  public void dragOver(DragSourceDragEvent dsde) { }
  public void dropActionChanged(DragSourceDragEvent dsde) {
    System.out.println("Action: " + dsde.getDropAction());
    System.out.println("Target Action: " + dsde.getTargetActions());
    System.out.println("User Action: " + dsde.getUserAction());
  }
  public void dragDropEnd(DragSourceDropEvent dsde) {
    /*
     * to support move or copy, we have to check which occurred:
     */
//    System.out.println("Drop Action: " + dsde.getDropAction()
//                       + "    dsde.getDropSuccess()=" +     dsde.getDropSuccess());
    if (dsde.getDropSuccess() &&
        (dsde.getDropAction() == DnDConstants.ACTION_MOVE)) {
      // ((DefaultTreeModel)sourceTree.getModel()).removeNodeFromParent(oldNode);
      // I SHOULD DISABLE THIS ELEMENT HERE!
    }


    /*
     * to support move only...
    if (dsde.getDropSuccess()) {
      ((DefaultTreeModel)sourceTree.getModel()).removeNodeFromParent(oldNode);
    }
    */
  }
}

@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d32 1
a32 2
public class TreeDragSource
implements DragSourceListener, DragGestureListener {
d66 1
a66 1
                     , DragSource.DefaultMoveNoDrop
d93 2
a94 2
    System.out.println("Drop Action: " + dsde.getDropAction()
                       + "    dsde.getDropSuccess()=" +     dsde.getDropSuccess());
@


1.1
log
@*** empty log message ***
@
text
@@


head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2006.01.13.12.21.13;	author igorludi;	state dead;
branches;
next	1.3;

1.3
date	2005.10.18.14.04.40;	author igorludi;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.13.40.38;	author igorludi;	state dead;
branches;
next	1.1;

1.1
date	2005.06.28.14.10.51;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@package rex.graphics.dimensiontree;


import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreeSelectionModel;

import java.io.IOException;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JFrame;
import java.awt.*;
import java.awt.event.*;
import javax.swing.JPanel;
import rex.metadata.ServerMetadata;

import javax.swing.ToolTipManager;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.ImageIcon;

import rex.utils.S;

import javax.swing.tree.TreePath;
import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import org.tempuri.type.ClsXMLAProxDiscoverRestrictions;
import org.tempuri.type.ClsXMLAProxDiscoverProperties;
import org.tempuri.type.ClsXMLAProxDiscoverPropertyList;
import org.tempuri.type.ClsXMLAProxDiscoverRestrictionList;
import rex.utils.WaitCursorEventQueue;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragGestureEvent;
import rex.utils.AppColors;
import rex.metadata.Query;
import rex.metadata.QueryElement;
import javax.swing.JLabel;
import javax.swing.tree.TreeCellRenderer;
import rex.graphics.mdxeditor.MdxEditor;
import rex.graphics.dimensiontree.elements.DimensionTreeElement;
import rex.graphics.dimensiontree.elements.PopUpActions;
import rex.graphics.dimensiontree.elements.MeasureElement;
import rex.graphics.dimensiontree.elements.LevelElement;
import rex.graphics.dimensiontree.elements.HierarchyElement;
import rex.graphics.*;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.tree.ExpandVetoException;
import javax.swing.event.TreeWillExpandListener;



/**
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
 */

public class DimensionTree extends JPanel implements ActionListener, TreeWillExpandListener{
   final JTree tree;
   JPopupMenu popup;
   Query query;
   private DimensionTreeElement popUpSource;
   private MdxEditor mdxEditor;

   public DimensionTree( ClsXMLAProxDiscoverRestrictions _restrictions
                      ,  ClsXMLAProxDiscoverProperties   _properties
                      ,  ServerMetadata _smd
                      ,  Query _q){
      this(_restrictions, _properties, _smd, false);
      query = _q;
   }
// this is a constructor for invoking via MdxEditor, it has a reference to MdxEditor
// so that it can transfer unique names to editor on double click:
   public DimensionTree( ClsXMLAProxDiscoverRestrictions _restrictions
                      ,  ClsXMLAProxDiscoverProperties   _properties
                      ,  ServerMetadata _smd
                      ,  MdxEditor _mdxEditor){
      this(_restrictions, _properties, _smd, true);
      mdxEditor = _mdxEditor;
      // adding the listener ONLY for the purposes of MdxEditor:
      tree.addTreeWillExpandListener(DimensionTree.this);
   }


   public DimensionTree( ClsXMLAProxDiscoverRestrictions _restrictions
                      ,  ClsXMLAProxDiscoverProperties   _properties
                      ,  ServerMetadata _smd
                      ,  boolean        withMembersLevel){

      DimensionTreeModel treeModel = new DimensionTreeModel(_restrictions, _properties, _smd, withMembersLevel);

     //Create a tree that allows one selection at a time.

      tree = new JTree(treeModel){
         {setOpaque(false);}
         public void paintComponent(Graphics g) {
            S.paintBackground(g, this);
            super.paintComponent(g);
         }

      };


      tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
      //Enable tool tips.
      ToolTipManager.sharedInstance().registerComponent(tree);
      tree.setCellRenderer(new MyRenderer2());
      tree.setOpaque(false);

      JScrollPane treeView = new JScrollPane(tree);
      treeView.setOpaque(false);

      treeView.setPreferredSize(new Dimension(400, 600));

//      beacuse of MDX editor I'll change height to 0
      treeView.setMinimumSize(new Dimension(200, 0));
      treeView.setMaximumSize(new Dimension(800,600));

      this.setLayout(new BorderLayout());
      this.setOpaque(false);
      this.add(treeView, BorderLayout.CENTER);


      popup = new JPopupMenu();

      tree.addMouseListener(new PopupListener());
//  AAAAARRRRGHHHH! THIS MUST BE OFF - OTHERWISE DRAG WILL THROW AN EXCEPTION WHEN DRAGGING THE SAME ITEM 2 TIMES IN SUCCESSION
//      tree.setDragEnabled(true);


   }

   public JTree getTree(){
      return tree;
   }
   public void setQuery(Query q){
      query = q;
   }

   public void treeWillExpand(TreeExpansionEvent e) throws ExpandVetoException {
      TreeElement te = ((TreeElement)e.getPath().getLastPathComponent());
      if ( ((DimensionTreeElement)te.getUserObject()).getChildrenCount() > 0
         && te.getChildCount() == 0){
         if (((DimensionTreeElement)te.getUserObject()).getChildrenCount() < ((DimensionTreeModel)tree.getModel()).MAX_CHILDREN_COUNT_ASK){
            ((DimensionTreeModel)tree.getModel()).addChildrenOneLevel(te);
         }else{
            int retVal = JOptionPane.showConfirmDialog(
                 null
               , "You are about to expand a node with " + ( (DimensionTreeElement) te.getUserObject()).getChildrenCount()
               + " members.\nAre you sure you want to do this?"
               , "Expanding a node with more than " + ((DimensionTreeModel)tree.getModel()).MAX_CHILDREN_COUNT_ASK + " members."
               , JOptionPane.YES_NO_OPTION);
            if (retVal == JOptionPane.NO_OPTION) {
               throw new ExpandVetoException(e);
            }else{
               ((DimensionTreeModel)tree.getModel()).addChildrenOneLevel(te);
            }
         }
      }
   }
   public void treeWillCollapse(TreeExpansionEvent e) {}
   public void actionPerformed(ActionEvent e){
      int i = 0;
      // To do:

//      S.out("e.paramString() = " + e.paramString() + "e.getSource()=" + e.getSource());

      if (e.getActionCommand().equals((String)PopUpActions.popUpCaptions.get(PopUpActions.FLATTEN_DIMENSIONS))){
         ((DimensionTreeModel) tree.getModel()).setFlattenDimensions(true);
      }else if (e.getActionCommand().equals((String)PopUpActions.popUpCaptions.get(PopUpActions.GROUP_HIERARCHIES_BY_DIMENSION))){
         ((DimensionTreeModel) tree.getModel()).setFlattenDimensions(false);
      }else if (e.getActionCommand().equals((String)PopUpActions.popUpCaptions.get(PopUpActions.SEND_TO_COLUMNS))){
         query.addToColumns((QueryElement)popUpSource);
         // disable this one, so it can't be dragged into the query once again:
         ((DimensionTreeModel)tree.getModel()).disableTreeElements(((QueryElement)popUpSource));
         tree.repaint();
      }else if (e.getActionCommand().equals((String)PopUpActions.popUpCaptions.get(PopUpActions.SEND_TO_ROWS))){
         query.addToRows((QueryElement)popUpSource);
         ((DimensionTreeModel)tree.getModel()).disableTreeElements(((QueryElement)popUpSource));
         tree.repaint();
      }else if (e.getActionCommand().equals((String)PopUpActions.popUpCaptions.get(PopUpActions.SEND_TO_MEASURES ))){
         query.addToMeasures((QueryElement)popUpSource);
         ((DimensionTreeModel)tree.getModel()).disableTreeElements(((QueryElement)popUpSource));
         tree.repaint();
      }else if (e.getActionCommand().equals((String)PopUpActions.popUpCaptions.get(PopUpActions.SEND_TO_PAGES))){
         query.addToPages((QueryElement)popUpSource);
         ((DimensionTreeModel)tree.getModel()).disableTreeElements(((QueryElement)popUpSource));
         tree.repaint();
      }

   }



// INNER CLASSES AND MAIN:

//   private class MyRenderer extends DefaultTreeCellRenderer {
//        ImageIcon tutorialIcon;
//
//        public MyRenderer() {
//        }
//
//        public Component getTreeCellRendererComponent(
//                            JTree tree,
//                            Object value,
//                            boolean sel,
//                            boolean expanded,
//                            boolean leaf,
//                            int row,
//                            boolean hasFocus) {
//
//            super.getTreeCellRendererComponent(
//                            tree, value, sel,
//                            expanded, leaf, row,
//                            hasFocus);
//            DimensionTreeElement curr = (DimensionTreeElement)((TreeElement)value).getUserObject();
//            setIcon(curr.getIcon());
//            setToolTipText(curr.getToolTip());
//            if (curr.isEnabled()){
//               setForeground(AppColors.ENABLED_DIM_TREE_NODE_COLOR);
//            }else{
//               setForeground(AppColors.DISABLED_DIM_TREE_NODE_COLOR);
//            }
//            return this;
//        }
//
//    }
    private class MyRenderer2 extends JLabel implements TreeCellRenderer{
         ImageIcon tutorialIcon;

         public MyRenderer2() {
           this.setOpaque(false);
//           setBackground(Color.RED);
         }

         public Component getTreeCellRendererComponent(
                             JTree tree,
                             Object value,
                             boolean sel,
                             boolean expanded,
                             boolean leaf,
                             int row,
                             boolean hasFocus) {

             DimensionTreeElement curr = (DimensionTreeElement)((TreeElement)value).getUserObject();
             setText(curr.toString());
             setIcon(curr.getIcon());
             setToolTipText(curr.getToolTip());
             if (curr.isEnabled()){
                setForeground(AppColors.ENABLED_DIM_TREE_NODE_COLOR);
             }else{
                setForeground(AppColors.DISABLED_DIM_TREE_NODE_COLOR);
             }
             return this;
         }

     }

    class PopupListener extends MouseAdapter {
       public void mousePressed(MouseEvent e) {
          maybeShowPopup(e);
       }

       public void mouseReleased(MouseEvent e) {
          maybeShowPopup(e);
       }
       public void mouseClicked(MouseEvent e) {
          if ((e.getClickCount()==2)){

             int selRow = tree.getRowForLocation(e.getX(), e.getY());
             TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
             if (    (selRow != -1)
                 && (((TreeElement)selPath.getLastPathComponent())).getUserObject() instanceof QueryElement ) {

                QueryElement qe = ((QueryElement)((TreeElement)(selPath.getLastPathComponent())).getUserObject());

                if (DimensionTree.this.mdxEditor != null) {
                   if (qe instanceof MeasureElement){
                      mdxEditor.addTextToCurrentPosition(((MeasureElement) qe).getUniqueName());
                   }else if (qe instanceof LevelElement){
                      mdxEditor.addTextToCurrentPosition(((LevelElement)qe).getUniqueName() + ".Members");
                   }else if (qe instanceof HierarchyElement){
                      mdxEditor.addTextToCurrentPosition(((HierarchyElement)qe).getUniqueName() + ".Members");
                   }
                   return; // don't disable it
                }

                // double click will send item to rows (only if it IS a QueryElement)
                // -> that can be a measure, or a dimension level, (maybe a hierarchy?)
                if (qe instanceof MeasureElement){
                   DimensionTree.this.query.addToMeasures(qe);
                }else{
                   DimensionTree.this.query.addToRows(qe);
                }
                ((DimensionTreeModel)tree.getModel()).disableTreeElements(qe);
                tree.repaint();
             }
          }
       }


       private void maybeShowPopup(MouseEvent e) {
          int      selRow  = tree.getRowForLocation(e.getX(), e.getY());
          TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
          if(selRow != -1) {
             if (e.isPopupTrigger()) {
                String[] al;
                JMenuItem menuItem;

                popup.removeAll();
                // get the selected TreeElement's action list:
                DimensionTree.this.popUpSource = ((DimensionTreeElement)((TreeElement)(selPath.getLastPathComponent())).getUserObject());
                //S.out("DimensionTree.this.popUpSource=" + DimensionTree.this.popUpSource);
                al = DimensionTree.this.popUpSource.getPopUpActionList();
                for (int i=0; al != null && i < al.length; i++){
                   menuItem = new JMenuItem((String)PopUpActions.popUpCaptions.get(al[i]));
                   menuItem.addActionListener(DimensionTree.this);
                   popup.add(menuItem);
                }
                popup.show(e.getComponent()
                           , e.getX()
                           , e.getY());
             }
          }
       }
    }


    public static void main(String[] args) {
       ServerMetadata svm = new ServerMetadata("http://localhost/xmla/msxisapi.dll");

       ClsXMLAProxDiscoverRestrictions restrictions = new ClsXMLAProxDiscoverRestrictions();
       ClsXMLAProxDiscoverProperties   properties   = new ClsXMLAProxDiscoverProperties();
       ClsXMLAProxDiscoverPropertyList pl = new ClsXMLAProxDiscoverPropertyList();
       ClsXMLAProxDiscoverRestrictionList rl = new ClsXMLAProxDiscoverRestrictionList();

       pl.setDataSourceInfo("Local Analysis Server");
       rl.setCatalog("Foodmart 2000");
       rl.setCubeName("Sales");

       restrictions.setRestrictionList(rl);

             pl.setCatalog("Sales");
             pl.setFormat("Tabular");
             pl.setContent("SchemaData");

       properties.setPropertyList(pl);


       JFrame frame = new JFrame("Testing DimensionTree...");
       DimensionTree dst = new DimensionTree(restrictions, properties, svm, false);
       frame.getContentPane().add(dst);
//       frame.setContentPane(dst);

       frame.addWindowListener(new WindowAdapter() {
             public void windowClosing(WindowEvent e) {
                System.exit(0);
             }
          });

      frame.pack();
      frame.setVisible(true);
      EventQueue waitQueue = new WaitCursorEventQueue(500);
      Toolkit.getDefaultToolkit().getSystemEventQueue().push(waitQueue);

    }



}
@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d49 3
d64 1
a64 1
public class DimensionTree extends JPanel implements ActionListener{
d75 1
a75 1
      this(_restrictions, _properties, _smd);
d84 1
a84 1
      this(_restrictions, _properties, _smd);
d86 2
d93 2
a94 1
                      ,  ServerMetadata _smd){
d96 1
a96 1
      DimensionTreeModel treeModel = new DimensionTreeModel(_restrictions, _properties, _smd);
d133 2
a134 2

      tree.setDragEnabled(true);
d146 22
d357 1
a357 1
       DimensionTree dst = new DimensionTree(restrictions, properties, svm);
@


1.1
log
@*** empty log message ***
@
text
@@


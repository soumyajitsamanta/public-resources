head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2006.01.13.12.21.15;	author igorludi;	state dead;
branches;
next	1.4;

1.4
date	2005.10.18.14.04.40;	author igorludi;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.13.40.38;	author igorludi;	state dead;
branches;
next	1.2;

1.2
date	2005.10.18.13.31.11;	author igorludi;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.28.14.11.07;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@package rex.graphics.mdxeditor;


import java.awt.*;
import javax.swing.*;

import rex.graphics.*;
import rex.utils.*;


/**
 * Class that displays a SINGLE PAGE (more acurrately, that is a single slice, but in this app cubes are always sliced
*  along pages axis and displayed in tabs) of the result of the MDX query.
 *
 * <br>Example: if MDX query has something like <code>...Years.Members on PAGES..</code> it might evaluate to 3 years: 1997, 1998, 1999.
 * <br> Result from that query would be sliced along PAGES axis, at values 1997, 1998, 1999.
 * <br> MdxResultViewer would create 3 CubeExplorer objects sliced at those points
 * <b>and 3 MdxResultPage objects to represent every single slice</b>.
 * <br>Those objects would be displayed in 3 tabs, labeled 1997,1998,1999.
 * @@see rex.graphics.mdxeditor.MdxResultViewer
 * @@see rex.graphics.CubeExplorer
 * @@author Igor Mekterovic
 * @@version 0.3
 */
public class MdxResultPage extends JPanel{

   private CubeExplorer2 ce;
   private EmptyMdxResultTable ert;
   private boolean current;
   private boolean cubeExplorerIsDisplayed;


   /**
    *
    */
   public MdxResultPage() {
      ert = new EmptyMdxResultTable();
      this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
      this.add(ert);
      cubeExplorerIsDisplayed = false;
      setOpaque(false);
      current = false;
      this.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
   }
   public MdxResultPage(CubeExplorer2 ceToDisplay) {
      ce = ceToDisplay;
      this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
      this.add(ce);
      this.add(Box.createVerticalGlue());
      cubeExplorerIsDisplayed = true;
      setOpaque(false);
      current = false;
      this.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
   }

   /**
    * Refreshes the display. If there is no CubeExplorer to display, EmptyResultTable is displayed.
    * @@see rex.graphics.CubeExplorer
    */
   public void refreshDisplay(){
//      S.out("current=");
      if (current){
         // this happens when users removes last dimension (on some axis) from query:
         // than we have to go back to EmptyResultTable
         if (cubeExplorerIsDisplayed) {
            cubeExplorerIsDisplayed = false;
            this.removeAll();
            if (ert == null) {
               ert = new EmptyMdxResultTable();
            }
            this.add(ert);
         }
//            ert.refreshDisplay();
         this.repaint();
         this.revalidate();
      }
   }
   /**
    * Overrides to paint gradient blue background.
    * @@param g Graphics
    */
   public void paintComponent(Graphics g) {
      S.paintBackground(g, this);
      super.paintComponent(g);
   }

   /**
    * Sets the current property (weather this is a currently displayed page) to the specified value.
    * @@param isCurrent boolean
    */
   public void setCurrent(boolean isCurrent){
      current = isCurrent;
   }

   /**
    * Returns true if this is a currently displayed page, otherwise false.
    * @@return boolean
    */
   public boolean isCurrent(){
      return current;
   }

   /**
    * Sets a CubeExplorer to be displayed.
    * @@see rex.graphics.CubeExplorer
    * @@param ceToDisplay CubeExplorer
    */
   public void setCubeExplorer(CubeExplorer2 ceToDisplay){
      ce = ceToDisplay;
      cubeExplorerIsDisplayed = true;
      this.removeAll();
      this.add(ce);
      this.add(Box.createVerticalGlue());
   }

   /**
    * Returns CubeExplorer that is used for displaying the results.
    * @@return CubeExplorer
    */
   public CubeExplorer2 getCubeExplorer(){
      return ce;
   }

   public static short getAdditionalHeight(){
//  this is height that page adds by displaying borders
      return 13;
   }


}
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d4 4
a8 11
import javax.swing.JPanel;
import javax.swing.JLabel;

import java.awt.Color;
//import rex.metadata.Query;
import java.awt.Graphics;
import rex.graphics.CubeExplorer;
import javax.swing.Box;
import javax.swing.BorderFactory;
import java.awt.BorderLayout;
import javax.swing.BoxLayout;
d12 12
a23 6
 * <p>Title: WHEX</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @@author igor
 * @@version 1.0
d27 1
a27 2
//   private Query q;
   private CubeExplorer ce;
d32 4
d45 1
a45 1
   public MdxResultPage(CubeExplorer ceToDisplay) {
d56 4
d78 4
d86 5
d94 5
d102 7
a108 1
   public void setCubeExplorer(CubeExplorer ceToDisplay){
d115 6
a120 1
   public CubeExplorer getCubeExplorer(){
d124 4
@


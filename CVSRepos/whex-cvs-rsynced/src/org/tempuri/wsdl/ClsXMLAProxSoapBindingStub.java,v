head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.06.28.14.10.45;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@/**
 * ClsXMLAProxSoapBindingStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis WSDL2Java emitter.
 * But, Igor has changed it a bit
 *  - call is now a member variable, unlike _call that was method's local varaible
 *  - added support for authentication
 *  - added some custom serializers
 */

package org.tempuri.wsdl;

import org.tempuri.type.customserializers.ClsXMLAProxDiscoverPropertyListSer;
import org.tempuri.type.customserializers.ClsXMLAProxDiscoverPropertyListSerFactory;
import org.apache.axis.enum.Style;
import org.tempuri.type.customserializers.CustomBeanSerFactory;
import java.security.Security;
import rex.utils.S;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.HttpsURLConnection;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import org.apache.axis.utils.DefaultAuthenticator;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import rex.graphics.AuthenticationDialog;
import javax.swing.JRootPane;


public class ClsXMLAProxSoapBindingStub extends org.apache.axis.client.Stub implements org.tempuri.wsdl.ClsXMLAProxSoapPort {
    private java.util.Vector cachedSerClasses = new java.util.Vector();
    private java.util.Vector cachedSerQNames = new java.util.Vector();
    private java.util.Vector cachedSerFactories = new java.util.Vector();
    private java.util.Vector cachedDeserFactories = new java.util.Vector();
//    <igor>
    private org.apache.axis.client.Call call;
//    </igor>
    static org.apache.axis.description.OperationDesc [] _operations;

    static {
        _operations = new org.apache.axis.description.OperationDesc[2];
        org.apache.axis.description.OperationDesc oper;
        oper = new org.apache.axis.description.OperationDesc();
        oper.setName("Discover");
        oper.addParameter(new javax.xml.namespace.QName("", "RequestType"), new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema", "string"), java.lang.String.class, org.apache.axis.description.ParameterDesc.IN, false, false);
        oper.addParameter(new javax.xml.namespace.QName("", "Restrictions"), new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.Restrictions"), org.tempuri.type.ClsXMLAProxDiscoverRestrictions.class, org.apache.axis.description.ParameterDesc.IN, false, false);
        oper.addParameter(new javax.xml.namespace.QName("", "Properties"), new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.Properties"), org.tempuri.type.ClsXMLAProxDiscoverProperties.class, org.apache.axis.description.ParameterDesc.IN, false, false);
        oper.setReturnType(new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.Result"));
        oper.setReturnClass(org.tempuri.type.ClsXMLAProxDiscoverResult.class);
        oper.setReturnQName(new javax.xml.namespace.QName("", "Result"));
        oper.setStyle(org.apache.axis.enum.Style.RPC);
        oper.setUse(org.apache.axis.enum.Use.ENCODED);
        _operations[0] = oper;

        oper = new org.apache.axis.description.OperationDesc();
        oper.setName("Execute");
        oper.addParameter(new javax.xml.namespace.QName("", "Command"), new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.Command"), org.tempuri.type.ClsXMLAProxExecuteCommand.class, org.apache.axis.description.ParameterDesc.IN, false, false);
        oper.addParameter(new javax.xml.namespace.QName("", "Properties"), new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.Properties"), org.tempuri.type.ClsXMLAProxExecuteProperties.class, org.apache.axis.description.ParameterDesc.IN, false, false);
        oper.setReturnType(new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.Result"));
        oper.setReturnClass(org.tempuri.type.ClsXMLAProxExecuteResult.class);
        oper.setReturnQName(new javax.xml.namespace.QName("", "Result"));
        oper.setStyle(org.apache.axis.enum.Style.RPC);
        oper.setUse(org.apache.axis.enum.Use.ENCODED);
        _operations[1] = oper;

    }

    public ClsXMLAProxSoapBindingStub() throws org.apache.axis.AxisFault {
         this(null);
    }
    private void setUsernameAndPassword(String username, String password){
//         S.out("setUsernameAndPassword");
       super.setUsername(username);
       super.setPassword(password);
    }
    public ClsXMLAProxSoapBindingStub(java.net.URL endpointURL, javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {
         this(service);
         super.cachedEndpoint = endpointURL;
//        <igor>
         this.setTimeout(60*5*1000);  // 5 minutes
         Authenticator.setDefault (new Authenticator (){
            protected PasswordAuthentication getPasswordAuthentication() {
               AuthenticationDialog ad = new AuthenticationDialog(null);
               ClsXMLAProxSoapBindingStub.this.setUsernameAndPassword( ad.getUsername()
                                                                     , ad.getPassword());
               return new PasswordAuthentication (ad.getUsername()
                                                , ad.getPasswordCA());
            }
         });
//    I'm obusing http/s java classes to find out weather endpointURL REQUIRES authentication
//    because I don't know how to do it with Axis!!!
//    Axis doesn't care for the  Authenticator or it's DefaultAuthenticator  class!
//   -> hence, I only open stream using java classes so that Authenticator will get called
//       if authentication is requiered. My authentictor class then sets username and password for Axis
//        see above
         try {
            if (endpointURL.getProtocol().equals("htpps"))
               ((HttpsURLConnection)endpointURL.openConnection()).getInputStream();
            else
               (endpointURL.openConnection()).getInputStream();
         }catch(Exception e){
//            Don't care, important thing is that axis now has username/password set
//            e.printStackTrace();
         }



//        </igor>

    }

    public ClsXMLAProxSoapBindingStub(javax.xml.rpc.Service service) throws org.apache.axis.AxisFault {
        if (service == null) {
            super.service = new org.apache.axis.client.Service();
        } else {
            super.service = service;
        }
//      <igor>
        this.setTimeout(60*5*1000);  // 5 minutes
//      </igor>
            java.lang.Class cls;
            javax.xml.namespace.QName qName;
            java.lang.Class beansf = org.apache.axis.encoding.ser.BeanSerializerFactory.class;
            java.lang.Class customBeansf = org.tempuri.type.customserializers.CustomBeanSerFactory.class; // igor
            java.lang.Class beandf = org.apache.axis.encoding.ser.BeanDeserializerFactory.class;
            java.lang.Class enumsf = org.apache.axis.encoding.ser.EnumSerializerFactory.class;
            java.lang.Class enumdf = org.apache.axis.encoding.ser.EnumDeserializerFactory.class;
            java.lang.Class arraysf = org.apache.axis.encoding.ser.ArraySerializerFactory.class;
            java.lang.Class arraydf = org.apache.axis.encoding.ser.ArrayDeserializerFactory.class;
            java.lang.Class simplesf = org.apache.axis.encoding.ser.SimpleSerializerFactory.class;
            java.lang.Class simpledf = org.apache.axis.encoding.ser.SimpleDeserializerFactory.class;
            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.Properties");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxExecuteProperties.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(beansf);
            cachedDeserFactories.add(beandf);


            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.Command");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxExecuteCommand.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(beansf);
            cachedDeserFactories.add(beandf);

            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.Result");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxExecuteResult.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(beansf);
            cachedDeserFactories.add(beandf);

            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.Properties");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxDiscoverProperties.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(beansf);
            cachedDeserFactories.add(beandf);

            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.Restrictions");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxDiscoverRestrictions.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(beansf);
            cachedDeserFactories.add(beandf);

            // <dodao igor>
//            System.out.println("serializer added..");
            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.PropertyList");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxDiscoverPropertyList.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(customBeansf);
            cachedDeserFactories.add(beandf);

            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.RestrictionList");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxDiscoverRestrictionList.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(customBeansf);
            cachedDeserFactories.add(beandf);

            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Execute.PropertyList");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxExecutePropertyList.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(customBeansf);
            cachedDeserFactories.add(beandf);


           // </dodao igor>


            qName = new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "clsXMLAProx.Discover.Result");
            cachedSerQNames.add(qName);
            cls = org.tempuri.type.ClsXMLAProxDiscoverResult.class;
            cachedSerClasses.add(cls);
            cachedSerFactories.add(beansf);
            cachedDeserFactories.add(beandf);




    }

    private org.apache.axis.client.Call createCall() throws java.rmi.RemoteException {
        try {

            org.apache.axis.client.Call _call =
                    (org.apache.axis.client.Call) super.service.createCall();

            if (super.maintainSessionSet) {
                _call.setMaintainSession(super.maintainSession);
            }
            if (super.cachedUsername != null) {
                _call.setUsername(super.cachedUsername);
            }
            if (super.cachedPassword != null) {
                _call.setPassword(super.cachedPassword);
            }
            if (super.cachedEndpoint != null) {
                _call.setTargetEndpointAddress(super.cachedEndpoint);
            }
            if (super.cachedTimeout != null) {
                _call.setTimeout(super.cachedTimeout);
            }
            if (super.cachedPortName != null) {
                _call.setPortName(super.cachedPortName);
            }
            java.util.Enumeration keys = super.cachedProperties.keys();
            while (keys.hasMoreElements()) {
                java.lang.String key = (java.lang.String) keys.nextElement();
                _call.setProperty(key, super.cachedProperties.get(key));
            }
            // All the type mapping information is registered
            // when the first call is made.
            // The type mapping information is actually registered in
            // the TypeMappingRegistry of the service, which
            // is the reason why registration is only needed for the first call.
            synchronized (this) {
                if (firstCall()) {
                    // must set encoding style before registering serializers
                    _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
                    _call.setEncodingStyle(org.apache.axis.Constants.URI_SOAP11_ENC);
                    // <dodao Igor>
                    //_call.setOperationStyle("document");
                    //_call.setOperationUse("literal");
                    _call.setProperty(org.apache.axis.AxisEngine.PROP_DOMULTIREFS, Boolean.FALSE);
                    // _call.setProperty(org.apache.axis.AxisEngine.PROP_SEND_XSI, Boolean.FALSE);
                    // </dodao Igor>

                    //System.out.println("creating call... style=" + _call.getOperationStyle() + " use = " + _call.getOperationUse());
                    for (int i = 0; i < cachedSerFactories.size(); ++i) {
                        java.lang.Class cls = (java.lang.Class) cachedSerClasses.get(i);
                        javax.xml.namespace.QName qName =
                                (javax.xml.namespace.QName) cachedSerQNames.get(i);
                        java.lang.Class sf = (java.lang.Class)
                                 cachedSerFactories.get(i);
                        java.lang.Class df = (java.lang.Class)
                                 cachedDeserFactories.get(i);
                        //System.out.println("cls:" + cls.getName());
                        _call.registerTypeMapping(cls, qName, sf, df, false);
                    }

                }
            }
            return _call;
        }
        catch (java.lang.Throwable t) {
            throw new org.apache.axis.AxisFault("Failure trying to get the Call object", t);
        }
    }

    public org.tempuri.type.ClsXMLAProxDiscoverResult discover(java.lang.String requestType, org.tempuri.type.ClsXMLAProxDiscoverRestrictions restrictions, org.tempuri.type.ClsXMLAProxDiscoverProperties properties) throws java.rmi.RemoteException {
        if (super.cachedEndpoint == null) {
            throw new org.apache.axis.NoEndPointException();
        }
        if (call == null) call = createCall();
//        org.apache.axis.client.Call _call = createCall();
        call.setOperation(_operations[0]);
        call.setUseSOAPAction(true);
        call.setSOAPActionURI("urn:schemas-microsoft-com:xml-analysis:Discover");
        call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
        call.setOperationName(new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "Discover"));

        setRequestHeaders(call);
//        setAttachments(_call);
//        _call.setOperation(_operations[0]);
//        _call.setUseSOAPAction(true);
//        _call.setSOAPActionURI("urn:schemas-microsoft-com:xml-analysis:Discover");
//        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
//        _call.setOperationName(new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "Discover"));
//
//        setRequestHeaders(_call);
//        setAttachments(_call);

       //igor:
        //_call.setOperationStyle("document");
       // igor:
        call.setOperationUse("literal");
        //_call.setOperationStyle(Style.RPC);
       // _call.setOperationUse("encoded");
        //System.out.println("invoking... style=" + _call.getOperationStyle() + " use = " + _call.getOperationUse());
        java.lang.Object _resp = null;

        _resp = call.invoke(new java.lang.Object[] {
                                                   requestType
                                                 , restrictions
                                                 , properties});


        if (_resp instanceof java.rmi.RemoteException) {
            throw (java.rmi.RemoteException)_resp;
        }
        else {
            extractAttachments(call);
            try {
                return (org.tempuri.type.ClsXMLAProxDiscoverResult) _resp;
            } catch (java.lang.Exception _exception) {
                return (org.tempuri.type.ClsXMLAProxDiscoverResult) org.apache.axis.utils.JavaUtils.convert(_resp, org.tempuri.type.ClsXMLAProxDiscoverResult.class);
            }
        }
    }

    public org.tempuri.type.ClsXMLAProxExecuteResult execute(org.tempuri.type.ClsXMLAProxExecuteCommand command, org.tempuri.type.ClsXMLAProxExecuteProperties properties) throws java.rmi.RemoteException {
        if (super.cachedEndpoint == null) {
            throw new org.apache.axis.NoEndPointException();
        }
//        org.apache.axis.client.Call _call = createCall();
        if (call == null) call = createCall();
        call.setOperation(_operations[1]);
        call.setUseSOAPAction(true);
        call.setSOAPActionURI("urn:schemas-microsoft-com:xml-analysis:Execute");
        call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
        call.setOperationName(new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "Execute"));
//        _call.setOperation(_operations[1]);
//        _call.setUseSOAPAction(true);
//        _call.setSOAPActionURI("urn:schemas-microsoft-com:xml-analysis:Execute");
//        _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
//        _call.setOperationName(new javax.xml.namespace.QName("urn:schemas-microsoft-com:xml-analysis", "Execute"));

        setRequestHeaders(call);
        setAttachments(call);

        java.lang.Object _resp = call.invoke(new java.lang.Object[] {command, properties});

        if (_resp instanceof java.rmi.RemoteException) {
            throw (java.rmi.RemoteException)_resp;
        }
        else {
            extractAttachments(call);
            try {
                return (org.tempuri.type.ClsXMLAProxExecuteResult) _resp;
            } catch (java.lang.Exception _exception) {
                return (org.tempuri.type.ClsXMLAProxExecuteResult) org.apache.axis.utils.JavaUtils.convert(_resp, org.tempuri.type.ClsXMLAProxExecuteResult.class);
            }
        }
    }

}
@

head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2007.07.11.09.09.52;	author pyadav;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.13.01.56;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Modified file's for Rex 0.7.
@
text
@package rex.graphics.mdxeditor.mdxbuilder.nodes;

import javax.swing.*;
import javax.swing.tree.*;

import rex.graphics.dimensiontree.elements.*;
import rex.graphics.mdxeditor.mdxbuilder.dnd.*;
import rex.graphics.mdxeditor.mdxfunctions.*;
import rex.utils.*;

/**
 * Node representing MdxFunction's numeric argument.
 * @@author Igor Mekterovic
 * @@version 0.3
 */
public class MBTArgNumericNode extends MBTArgStringNode{
//   private String value;
   static ImageIcon icon;
   static {
        icon = S.getAppIcon("MBTArgNumericNode.gif");
   }
   public MBTArgNumericNode(){
      super();
   }

   public MBTArgNumericNode(    String _argName
                            ) {
      super(false, _argName, false, false);
   }
   public MBTArgNumericNode(    String _argName
                          , boolean _respawnArg
                            ) {
      super(false, _argName,  _respawnArg, false);
   }
   public MBTArgNumericNode(    boolean _isHeadArg
                          , String _argName
                            ) {
      super(_isHeadArg, _argName,  false, false);
   }

   public MBTArgNumericNode(    boolean _isHeadArg
                          , String _argName
                          , boolean _respawnArg
                          , boolean _optionalArg
                            ) {
      super(_isHeadArg, _argName, _respawnArg, _optionalArg);

   }
   /**
    * Returns an icon for the numeric node.
    * @@return ImageIcon
    */
   public ImageIcon getIcon(){ return icon; }


   /**
    *
    */
   void setAcceptableFlavorsArray(){
      acceptableFlavorsMimeTypes = new String[] {
                                     TransferableMdxBuilderTreeNode.DIMENSION_TREE_NODE_LEVEL_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.DIMENSION_TREE_NODE_DIMENSION_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.DIMENSION_TREE_NODE_HIERARCHY_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.DIMENSION_TREE_NODE_MEASURE_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.DIMENSION_TREE_NODE_MEMBER_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.MDX_BUILDER_TREE_NUMERIC_FUNCTION_NODE_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.MDX_BUILDER_TREE_CALCULATED_MEMBER_NODE_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.MDX_BUILDER_TREE_OPERATOR_FUNCTION_NODE_FLAVOR_STRING
                                   , TransferableMdxBuilderTreeNode.MDX_BUILDER_TREE_MAKE_TUPLE_FUNCTION_NODE_FLAVOR_STRING

      };

   }

   /**
    *
    * @@param droppedData Object
    * @@param containerNode DefaultMutableTreeNode
    * @@param treeModel DefaultTreeModel
    */
   public  void handleDrop(  Object droppedData
                           , DefaultMutableTreeNode containerNode
                           , DefaultTreeModel treeModel){

      super.handleDrop(droppedData, containerNode, treeModel);

   }



   /**
    * Displays a dialog to enter a numeric expression.
    */
   void setValue(){
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
    /* implementing localization */
       value = JOptionPane.showInputDialog(I18n.getString("msgText.numericExpr"), "");
    /* end of modification for I18n */

   }

   /**
    * Displays a dialog to edit current numeric expression.
    */
   void editValue(){
      String newValue;
/**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
/* implementing localization */
      newValue = JOptionPane.showInputDialog(I18n.getString("msgText.numericExpr"), value);
        /* end of modification for I18n */

      if (newValue != null && newValue.trim().length()>0)
         value = newValue;
   }

}
@


1.1
log
@*** empty log message ***
@
text
@a54 18
//   public  String getMdx(String indent){
//      if (value != null)
//         return indent + value;
//      else if (this.getChildren() == null)
//         return "";
//      else
//         return this.getChild(0).getMdx(indent);
//   }
//
//   public String toString(){
//      if(value == null)
//         return super.toString();
//      if (isOptionalArg()){
//         return "<html><i>" + value + "</i></html>";
//      }
//      return value;
//   }

d95 10
a104 1
      value = JOptionPane.showInputDialog("Please enter a numeric expression", "");
d112 10
a121 1
      newValue = JOptionPane.showInputDialog("Please enter a numeric expression", value);
a125 40
//   void setValue(){
//      value = JOptionPane.showInputDialog("Please enter a numeric expression", "");
//      try {
//         int i = Integer.parseInt(value);
//         return;
//      } catch (NumberFormatException ex){
//      }
//      try {
//         double d = Double.parseDouble(value);
//         return;
//      } catch (NumberFormatException ex){
//         JOptionPane.showMessageDialog(null, "Sorry, the expression:\n" + value + "\ncannot be parsed as integer or double." );
//         value = null;
//      }
//   }

//   public String[] getPopUpActionList(){
//      if (this.getChildren() == null)
//         return new String[]{ MBTPopUpActions.CLEAR_VALUE
//                         , MBTPopUpActions.INSERT_VALUE
//                      };
//      else
//         return new String[]{ MBTPopUpActions.DELETE_CHILDREN };
//
//   }

//   public void handlePopUpAction(  String action
//                                 , DefaultMutableTreeNode actionNode
//                                 , DefaultTreeModel treeModel){
//
//      if (action.equals(MBTPopUpActions.CLEAR_VALUE)){
//         value = null;
//      }else if (action.equals(MBTPopUpActions.INSERT_VALUE)){
//         setValue();
//         maybeRespawnOnDrop(actionNode, treeModel);
//      }else if (action.equals(MBTPopUpActions.DELETE_CHILDREN)){
//         this.removeAllChildrenFromTheTree(actionNode, treeModel);
//      }
//
//   }
@


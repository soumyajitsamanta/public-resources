head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2007.07.11.09.09.52;	author pyadav;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.13.01.51;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Modified file's for Rex 0.7.
@
text
@package rex.graphics.mdxeditor;

/**
 *   Copyright (C) 2006 CINCOM SYSTEMS, INC.
 *   All Rights Reserved
 *   Copyright (C) 2006 Igor Mekterovic
 *   All Rights Reserved
 */

import java.awt.*;
import java.awt.event.*;
import java.io.Serializable;
import javax.swing.*;
import javax.swing.border.*;
/*
 * This class helps to set background and foreground color of TextArea in MdxEditor.
 * @@author pyadav
 *
 */
class ColorMenu extends JMenu
{
  protected ColorPane colorPane;
  Color current=Color.WHITE;
  public ColorMenu(String name) {
   super(name); 
   colorPane = new ColorPane();
   colorPane.setBorder(new CompoundBorder(new LineBorder(Color.black),new LineBorder(Color.white)));
   SelectListener selectListener = new SelectListener();
   colorPane.addMouseListener(selectListener);
   add(colorPane);
  }
/*
 * 
 */
  public void setColor(Color c) {
    if (c == null)
    {
      return;
    }
  }
/*
 * Returns selected color.
 */
  public Color getColor() {
      return current;
  }
/*
 * Notify MdxEditor about the changes.
 */
  public void doSelection() {
    fireActionPerformed(new ActionEvent(this,
      ActionEvent.ACTION_PERFORMED, getActionCommand()));
  }
/*
 * Listener class generates event when ColorPane panel gets clicked. 
 * @@author pyadav
 *
 */
  class SelectListener extends MouseAdapter implements Serializable {
      public void mousePressed(MouseEvent e) {
	    current = colorPane.getColorForLocation(e.getX(), e.getY());
	    MenuSelectionManager.defaultManager().clearSelectedPath();
	    doSelection();
	}
  }
/*
 * Creates 216 Color Combinations.
 * @@author pyadav
 *
 */
  class ColorPane extends JPanel 
  {

      protected Color[] colors;
      protected Dimension paneSize;
      protected Dimension numPane;
      protected Dimension gap;

      public ColorPane() 
      {
          initValues();
          initColors();
          setToolTipText(""); 
          setOpaque(true);
          setBackground(Color.white);
      }
/*
 * Initialize variables. 
 */
      protected void initValues() 
      {
          paneSize = new Dimension(10,10);  	// Color Cell Size in ColorPane
          numPane = new Dimension( 24, 9 );		// 24 Columns and 9 Rows in ColorPane
          gap = new Dimension(1, 1);			// Border size of paneSize.
      }
/*
 *  (non-Javadoc)
 * @@see javax.swing.JComponent#paintComponent(java.awt.Graphics)
 */
      public void paintComponent(Graphics g) 
      {
           g.setColor(getBackground());
           g.fillRect(0,0,getWidth(), getHeight());
           for (int row = 0; row < numPane.height; row++) 
           {
               for (int column = 0; column < numPane.width; column++) 
               {
                   g.setColor( getColorForCell(column, row) ); 
                   int x;
                   if (!this.getComponentOrientation().isLeftToRight()) 
                   {
                       x = (numPane.width - column - 1) * (paneSize.width + gap.width);
                   } 
                   else 
                   {
                       x = column * (paneSize.width + gap.width);
                   }
                   int y = row * (paneSize.height + gap.height);
                   g.fillRect( x, y, paneSize.width, paneSize.height);
                   g.setColor(Color.black);
                   g.drawLine( x+paneSize.width-1, y, x+paneSize.width-1, y+paneSize.height-1);
                   g.drawLine( x, y+paneSize.height-1, x+paneSize.width-1, y+paneSize.height-1);
               }
           }
      }
/*
 *  (non-Javadoc)
 * @@see java.awt.Component#getPreferredSize()
 */
      public Dimension getPreferredSize() 
      {
          int w = numPane.width * (paneSize.width + gap.width) -1;
          int h = numPane.height * (paneSize.height + gap.height) -1;
          return new Dimension( w, h );
      }
/*
 * Generates 216 Color combination
 */
      protected void initColors() 
      {          
          colors = new Color[216];
          int counter = 0;
          int[] values = new int[] { 0, 32, 64, 128, 192, 255 };
          for (int r=0; r<values.length; r++) 
          {
              for (int g=0; g<values.length; g++) 
              {
                  for (int b=0; b<values.length; b++) 
                  {
                      /**
                       * Breaking PMD violation rule named AvoidInstantiatingObjectsInLoops but can't do it outside.
                       * by Prakash. 09-05-2007. 
                       */
                      colors[counter] = new Color(values[r], values[g], values[b]);
                      counter++;
                  }
              }
          }
      }

      public String getToolTipText(MouseEvent e) 
      {
          Color color = getColorForLocation(e.getX(), e.getY());
          return color.getRed()+", "+ color.getGreen() + ", " + color.getBlue();
      }

      public Color getColorForLocation( int x, int y ) 
      {
          int column;
          if (!this.getComponentOrientation().isLeftToRight()) 
          {
              column = numPane.width - x / (paneSize.width + gap.width) - 1;
          } 
          else 
          {
              column = x / (paneSize.width + gap.width);
          }
          int row = y / (paneSize.height + gap.height);
          return getColorForCell(column, row);
      }
      
      private Color getColorForCell( int column, int row) 
      {
          return colors[ (row * numPane.width) + column ]; 
      }
  }
}
@


1.1
log
@*** empty log message ***
@
text
@d4 4
a7 13
 *  Copyright 1999-2002 Matthew Robinson and Pavel Vorobiev.
 *  All Rights Reserved.
 *
 *  ===================================================
 *  This program contains code from the book "Swing"
 *  1st Edition by Matthew Robinson and Pavel Vorobiev
 *  http://www.spindoczine.com/sbe
 *  ===================================================
 *
 *  The above paragraph must be included in full, unmodified
 *  and completely intact in the beginning of any source code
 *  file that references, copies or uses (in any way, shape
 *  or form) code contained in this file.
a9 2
// Authors: Matthew Robinson and Pavel Vorobiev

d12 1
a12 2
import java.util.*;

d15 3
a17 2

/**
a18 4
 * Menu for selecting colors. Used for setting the foreground and background colors in MdxEditor.
 * @@author Matthew Robinson
 * @@author Pavel Vorobiev
 * @@version 0.3
d22 2
a23 7
  protected Border m_unselectedBorder;
  protected Border m_selectedBorder;
  protected Border m_activeBorder;

  protected Hashtable m_panes;
  protected ColorPane m_selected;

d25 6
a30 29
    super(name);
    m_unselectedBorder = new CompoundBorder(
      new MatteBorder(1, 1, 1, 1, getBackground()),
    new BevelBorder(BevelBorder.LOWERED,
      Color.white, Color.gray));
    m_selectedBorder = new CompoundBorder(
      new MatteBorder(2, 2, 2, 2, Color.red),
      new MatteBorder(1, 1, 1, 1, getBackground()));
    m_activeBorder = new CompoundBorder(
      new MatteBorder(2, 2, 2, 2, Color.blue),
      new MatteBorder(1, 1, 1, 1, getBackground()));

    JPanel p = new JPanel();
    p.setBorder(new EmptyBorder(5, 5, 5, 5));
    p.setLayout(new GridLayout(8, 8));
    m_panes = new Hashtable();

    int[] values = new int[] { 0, 128, 192, 255 };
    for (int r=0; r<values.length; r++) {
      for (int g=0; g<values.length; g++) {
        for (int b=0; b<values.length; b++) {
          Color c = new Color(values[r], values[g], values[b]);
          ColorPane pn = new ColorPane(c);
          p.add(pn);
          m_panes.put(c, pn);
        }
      }
    }
    add(p);
d32 3
a34 1

d36 2
a37 2
    Object obj = m_panes.get(c);
    if (obj == null)
d39 1
a39 4
    if (m_selected != null)
      m_selected.setSelected(false);
    m_selected = (ColorPane)obj;
    m_selected.setSelected(true);
d41 3
a43 1

d45 1
a45 3
    if (m_selected == null)
      return null;
    return m_selected.getColor();
d47 3
a49 1

d54 18
a71 2

  class ColorPane extends JPanel implements MouseListener
a72 2
    protected Color m_c;
    protected boolean m_selected;
d74 86
a159 9
    public ColorPane(Color c) {
      m_c = c;
      setBackground(c);
      setBorder(m_unselectedBorder);
      String msg = "R "+c.getRed()+", G "+c.getGreen()+
        ", B "+c.getBlue();
      setToolTipText(msg);
      addMouseListener(this);
    }
d161 5
a165 1
    public Color getColor() { return m_c; }
d167 19
a185 34
    public Dimension getPreferredSize() {
      return new Dimension(15, 15);
    }
    public Dimension getMaximumSize() { return getPreferredSize(); }
    public Dimension getMinimumSize() { return getPreferredSize(); }

    public void setSelected(boolean selected) {
      m_selected = selected;
      if (m_selected)
        setBorder(m_selectedBorder);
      else
        setBorder(m_unselectedBorder);
    }

    public boolean isSelected() { return m_selected; }

    public void mousePressed(MouseEvent e) {}

    public void mouseClicked(MouseEvent e) {}

    public void mouseReleased(MouseEvent e) {
      setColor(m_c);
      MenuSelectionManager.defaultManager().clearSelectedPath();
      doSelection();
    }

    public void mouseEntered(MouseEvent e) {
      setBorder(m_activeBorder);
    }

    public void mouseExited(MouseEvent e) {
      setBorder(m_selected ? m_selectedBorder :
        m_unselectedBorder);
    }
a186 1

@


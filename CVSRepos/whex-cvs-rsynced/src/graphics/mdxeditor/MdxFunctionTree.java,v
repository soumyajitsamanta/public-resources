head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2007.07.11.09.09.52;	author pyadav;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.13.01.51;	author igorludi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Modified file's for Rex 0.7.
@
text
@package rex.graphics.mdxeditor;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
import rex.graphics.mdxeditor.mdxbuilder.nodes.*;
import rex.graphics.mdxeditor.mdxfunctions.*;
import rex.utils.*;

/**
 * Class that displays Mdx Function Tree in a JPanel.
 * @@author Igor Mekterovic
 * @@version 0.3
 */
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
 /*  Added LanguageChangedListener to implement I18n  */

public class MdxFunctionTree extends JPanel
        implements LanguageChangedListener{
   final JTree tree;
   private JComponent parent;
   private TreePath popUpSource;
   private boolean categorized;
   DefaultMutableTreeNode
           nonMdxFunctions
         , arrayFunctions
         , stringFunctions
         , dimensionHierarchyAndLevelFunctions
         , dimensionFunctions
         , hierarchyFunctions
         , levelFunctions
         , logicalFunctions
         , tupleFunctions
         , setFunctions
         , otherFunctions
         , numericFunctions
         , memberFunctions
         , allFunctions;

 DefaultMutableTreeNode top; 
   public MdxFunctionTree(JComponent _parent) {
      this();
      parent = _parent;
   }
   public MdxFunctionTree() {
         top =  new DefaultMutableTreeNode("");

     //Create a tree that allows one selection at a time.
//      tree = new JTree(top);
      tree = new JTree(top){
               {setOpaque(false);}
               public void paintComponent(Graphics g) {
                  //S.paintBackgroundGreen(g, this);
				  S.paintWhiteBackground(g, this);// By Prakash
                  super.paintComponent(g);
               }

      };
      buildFunctionList(top);
      tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
      //Enable tool tips.
      ToolTipManager.sharedInstance().registerComponent(tree);


        //Create the scroll pane and add the tree to it.
      JScrollPane treeView = new JScrollPane(tree);



      treeView.setPreferredSize(new Dimension(200, 600));

//      treeView.setMinimumSize(new Dimension(200, 0));
      treeView.setMaximumSize(new Dimension(800,600));

      this.setLayout(new BorderLayout());
      this.add(treeView, BorderLayout.CENTER);


      tree.setCellRenderer(new MdxFunctionTreeRenderer());
    
      tree.addMouseListener(new PopupListener());
     /**
      * Copyright (C) 2006 CINCOM SYSTEMS, INC.
      * All Rights Reserved
      * Copyright (C) 2006 Igor Mekterovic
      * All Rights Reserved
      */  
      I18n.addOnLanguageChangedListener(this);
   }
 /**
  * Helper method that is executed when the language is changed
  */

    public void languageChanged(LanguageChangedEvent evt) {
        this.applyI18n();
    }
  /**
  *  Helper method to implement locatization when language is changed
  */

    public void applyI18n(){
       buildFunctionList(top); //re-executing the method to apply I18n...
       tree.updateUI();
       tree.repaint();
    }
   
  /* end of modification for I18n */

   
   /**
    * Returns a mdx function tree.
    * @@return JTree
    */
   public JTree getTree(){
      return tree;
   }

   /**
    * Builds the function tree by adding Mdx Functions one by one.
    * @@param top DefaultMutableTreeNode
    */
   private void buildFunctionList(DefaultMutableTreeNode top){

      MdxFunction f;
// ********************************************* Non MDX Functions ***********************************************
      nonMdxFunctions = new DefaultMutableTreeNode("Non MDX Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMakeTupleFunction( "make tuple"
                              , I18n.getString("nonMDXFunction.makeTuple")
                              , "(«Member»[, «Member»...])") {
                        /* end of modification for I18n */
          public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgAcceptAllStringNode(false, "«Member»", true, false)
            };
         }

      };
      nonMdxFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxOperatorFunction( "*"
                          , I18n.getString("nonMDXFunction.multiplyOpr")
                          , "(«Numeric Expression1» * «Numeric Expression2»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode(true, "«NumExp1»")
               , new MBTArgNumericNode(false, "«NumExp2»", true, false)
            };
         }

      };
      nonMdxFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxOperatorFunction( "/"
                              ,  I18n.getString("nonMDXFunction.divideOpr")
                              , "(«Numeric Expression1» / «Numeric Expression2»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode(true, "«NumExp1»")
               , new MBTArgNumericNode(false, "«NumExp2»", true, false)
            };

         }

      };
      nonMdxFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
       f = new MdxOperatorFunction( "+"
                              ,  I18n.getString("nonMDXFunction.addOpr")
                              , "(«Numeric Expression1» + «Numeric Expression2»)") {
                       /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode(true, "«NumExp1»")
               , new MBTArgNumericNode(false, "«NumExp2»", true, false)
            };

         }

      };
      nonMdxFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxOperatorFunction( "-"
                              ,  I18n.getString("nonMDXFunction.subtractOpr")
                              , "(«Numeric Expression1» + «Numeric Expression2»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode(true, "«NumExp1»")
               , new MBTArgNumericNode(false, "«NumExp2»", true, false)
            };
         }

      };
      nonMdxFunctions.add(new DefaultMutableTreeNode(f));

// ********************************************* ARRAY ***************************************************

      arrayFunctions = new DefaultMutableTreeNode("Array Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxArrayFunction( "SetToArray"
                              ,  I18n.getString("arrayFunction.setToArray")
                              , "SetToArray(«Set»[, «Set»...][, «Numeric Expression»]") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode(false, "«Set1»", true, false)
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      arrayFunctions.add(new DefaultMutableTreeNode(f));


// ******************************************* STRING ********************************************************

      stringFunctions = new DefaultMutableTreeNode("String Functions");
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
       f = new MdxStringFunction("CalculationPassValue"
                              ,  I18n.getString("stringFunction.calcPassValue")
                              , "CalculationPassValue(«String Expression», «Pass Value»[, «Access Flag»])") {
                       /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«String Expression»")
               , new MBTArgNumericNode("«Pass Value»")
               , new MBTArgEnumNode(false, "«Access Flag»", new String[]{"ABSOLUTE", "RELATIVE"}, false, true)
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
       f = new MdxStringFunction("CoalesceEmpty"
                              ,  I18n.getString("stringFunction.coalescesEmpty")
                              , "CoalesceEmpty(«Numeric Expression»[, «Numeric Expression»]...)") {
                       /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", true, true)
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxStringFunction("Generate"
                              ,  I18n.getString("stringFunction.generate")
                              , "Generate(«Set1», «Set2»[, ALL])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "ALL", new String[]{"ALL"}, false, true)
            };
         }

      };
      //stringFunctions.add(new DefaultMutableTreeNode(f));



      stringFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxStringFunction("Generate"
                              ,  I18n.getString("stringFunction.generate")
                              , "Generate(«Set», «String Expression»[, «Delimiter»])") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgStringNode("«String Expression»")
               , new MBTArgStringNode(false, "«Delimiter»", false, true)
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

       f = new MdxStringFunction("IIf"
                              , I18n.getString("stringFunction.iif")
                              , "IIf(«Logical Expression», «Numeric or String Expression1», «Numeric or String Expression2»)") {
                       /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLogicalNode("«Logical Expression»")
               , new MBTArgStringNode("«Numeric or String Expression1»")
               , new MBTArgStringNode("«Numeric or String Expression1»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxStringFunction("LookupCube"
                              ,  I18n.getString("stringFunction.lookUpCube")
                              , "LookupCube(«Cube String», «Numeric or String Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Cube String»")
               , new MBTArgStringNode("«Numeric or String Expression1»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxStringFunction("MemberToStr"
                              ,  I18n.getString("stringFunction.memberToStr")
                              , "MemberToStr(«Member»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxStringFunction("Name"
                          ,  I18n.getString("stringFunction.name")
                          , "«Dimension|Level|Member|Hierarchy».Name") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgAcceptAllStringNode(true, "«Dimension|Level|Member|Hierarchy»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxStringFunction("Properties"
                          ,  I18n.getString("stringFunction.properties")
                          , "«Member».Properties(«String Expression»)") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgMemberNode(true, "«Member»")
                 , new MBTArgStringNode("«String Expression»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
       f = new MdxStringFunction("SetToStr"
                              ,  I18n.getString("stringFunction.setToStr")
                              , "SetToStr(«Set»)") {
                       /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxStringFunction("TupleToStr"
                              ,  I18n.getString("stringFunction.tupleToStr")
                              , "TupleToStr(«Tuple»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgTupleNode("«Set»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxStringFunction("UniqueName"
                             ,  I18n.getString("stringFunction.uniqueName")
                             , "«Dimension/Level/Member/Hierarchy».UniqueName") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode(true, "«Dimension/Level/Member/Hierarchy»")
            };
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxStringFunction("UserName"
                             ,  I18n.getString("stringFunction.userName")
                             , "UserName") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return null;
         }

      };
      stringFunctions.add(new DefaultMutableTreeNode(f));




      dimensionHierarchyAndLevelFunctions = new DefaultMutableTreeNode("Dimension, Hierarchy, and Level Functions ");

// ********************************************* DIMENSION *******************************************************

      dimensionFunctions = new DefaultMutableTreeNode("Dimension Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxDimensionFunction("Dimension"
                         ,  I18n.getString("dimensionFunction.dimension")
                         , "«Member|Level|Hierarchy».Dimension") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode(true, "«Member|Level|Hierarchy»")
            };
         }

      };
      dimensionFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxDimensionFunction("Dimensions"
                         ,  I18n.getString("dimensionFunction.dimensions")
                         , "Dimensions(«Numeric/String Expression»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Numeric or String Expression1»")
            };
         }

      };
      dimensionFunctions.add(new DefaultMutableTreeNode(f));


// ********************************************* HIERARCHY *******************************************************

      hierarchyFunctions = new DefaultMutableTreeNode("Hierarchy Functions");
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxHierarchyFunction("Hierarchy"
                             ,  I18n.getString("hierarchyFunction.hierarchy")
                             , "«Member|Level».Hierarchy") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode(true, "«Member|Level»")
            };
         }

      };
      hierarchyFunctions.add(new DefaultMutableTreeNode(f));


// ************************************************* LEVEL *****************************************************

      levelFunctions = new DefaultMutableTreeNode("Level Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLevelFunction("Level"
                             ,  I18n.getString("levelFunction.level")
                             , "«Member».Level") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode(true, "«Level»")
            };
         }

      };
      levelFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
       f = new MdxLevelFunction("Levels"
                         , I18n.getString("levelFunction.numeric")
                         , "«Dimension».Levels(«Numeric Expression»)") {
                       /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgDimensionNode(true, "«Dimension»")
               , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      levelFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLevelFunction("Levels"
                         , I18n.getString("levelFunction.string")
                         , "Levels(«String Expression»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«String Expression»")
            };
         }

      };
      levelFunctions.add(new DefaultMutableTreeNode(f));



      dimensionHierarchyAndLevelFunctions.add(dimensionFunctions);
      dimensionHierarchyAndLevelFunctions.add(hierarchyFunctions);
      dimensionHierarchyAndLevelFunctions.add(levelFunctions);

// ************************************************* LOGICAL *****************************************************

      logicalFunctions = new DefaultMutableTreeNode("Logical Functions");
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLogicalFunction("Is (TO BE DONE!!!!)"
                         , I18n.getString("logicalFunction.compare")
                         , "«Object 1» IS «Object 2»") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgAcceptAllStringNode(true, "«Object 1»")
                 , new MBTArgAcceptAllStringNode("«Object 2»")
            };
         }

      };
      logicalFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLogicalFunction("IsAncestor"
                         , I18n.getString("logicalFunction.isAncestor")
                         , "IsAncestor(«Member1»,«Member2»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgMemberNode(true, "Member1»")
                 , new MBTArgMemberNode("«Member2»")
            };
         }

      };
      logicalFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLogicalFunction("IsEmpty"
                         , I18n.getString("logicalFunction.isEmpty")
                         , "IsEmpty(«Value Expression»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgAcceptAllStringNode("«Value Expression»")
            };
         }

      };
      logicalFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLogicalFunction("IsGeneration"
                         , I18n.getString("logicalFunction.isGeneration")
                         , "IsGeneration(«Member»,«Numeric Expression»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgMemberNode("«Member»")
                 , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      logicalFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLogicalFunction("IsLeaf"
                         , I18n.getString("logicalFunction.isLeaf")
                         , "IsLeaf(«Member»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgMemberNode("«Member»")
            };
         }

      };
      logicalFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxLogicalFunction("IsSibling"
                         , I18n.getString("logicalFunction.isSibling")
                         , "IsSibling(«Member1»,«Member2»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgMemberNode("«Member1»")
                 , new MBTArgMemberNode("«Member2»")
            };
         }

      };
      logicalFunctions.add(new DefaultMutableTreeNode(f));


// ************************************************* TUPLE *****************************************************

      tupleFunctions = new DefaultMutableTreeNode("Tuple Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxTupleFunction("Current"
                             , I18n.getString("tupleFunction.current")
                             , "«Set».Current") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgSetNode(true, "«Set»")
            };
         }

      };
      tupleFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxTupleFunction("Item"
                             , I18n.getString("tupleFunction.item")
                             , "«Set».Item(«String Expression»[, «String Expression»...] | «Index»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode(true, "«Set»")
               , new MBTArgStringNode(false, "«String Expression»", true, false)
            };
         }

      };
      tupleFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxTupleFunction("StrToTuple"
                             , I18n.getString("tupleFunction.strToTuple")
                             , "StrToTuple(«String Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode("«String Expression»")
            };
         }

      };
      tupleFunctions.add(new DefaultMutableTreeNode(f));


// ************************************************* MEMBER *****************************************************


      memberFunctions = new DefaultMutableTreeNode("Member Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("Ancestor"
                             , I18n.getString("memberFunction.ancestor")
                             , "Ancestor(«Member», «Level»)") {    
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgLevelNode("«Level»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("Ancestor"
                             ,I18n.getString("memberFunction.ancestor2")
                             , "Ancestor(«Member», «Numeric Expression»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("ClosingPeriod"
                             , I18n.getString("memberFunction.closingPeriod")
                             , "ClosingPeriod([«Level»[, «Member»]])") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLevelNode("«Level»")
               , new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("Cousin"
                             ,I18n.getString("memberFunction.cousin")
                             , "Cousin(«Member1», «Member2»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member1»")
               , new MBTArgMemberNode("«Member2»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("CurrentMember"
                             , I18n.getString("memberFunction.currentMember")
                             , "«Dimension».CurrentMember") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgDimensionNode(true, "«Dimension»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("DataMember"
                             , I18n.getString("memberFunction.dataMember")
                             , "«Member».DataMember") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */       
      f = new MdxMemberFunction("DefaultMember"
                             ,I18n.getString("memberFunction.defaultMember")
                             , "«Dimension».DefaultMember") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgDimensionNode(true, "«Dimension»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
      f = new MdxMemberFunction("FirstChild"
                             , I18n.getString("memberFunction.firstChild")
                             , "«Member».FirstChild") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("FirstSibling"
                             ,I18n.getString("memberFunction.firstSibling")
                             , "«Member».FirstSibling") {            
          /* end of modification for I18n */          
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */       
      f = new MdxMemberFunction("Item"
                             ,I18n.getString("memberFunction.item")
                             , "«Tuple».Item(«Index»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgTupleNode(true, "«Tuple»")
                 , new MBTArgNumericNode("«Index»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */       
      f = new MdxMemberFunction("Lag"
                             , I18n.getString("memberFunction.lag")
                             , "«Member».Lag(«Numeric Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                   new MBTArgMemberNode(true, "«Member»")
                 , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("LastChild"
                             , I18n.getString("memberFunction.lastChild")
                             , "«Member».LastChild") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxMemberFunction("LastSibling"
                             , I18n.getString("memberFunction.lastSibling")
                             , "«Member».LastSibling") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
       /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("Lead"
                         , I18n.getString("memberFunction.lead")
                         , "«Member».Lead(«Numeric Expression»)") {
                        /* end of modification for I18n */
          
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode(true, "«Member»")
               , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("LinkMember"
                             , I18n.getString("memberFunction.linkMember")
                             , "LinkMember(«Member», «Hierarchy»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgHierarchyNode("«Hierarchy»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("Members"
                             , I18n.getString("memberFunction.members")
                             , "«Dimension|Hierarchy|Level|String Expression».Members") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode(true, "«Dimension|Hierarchy|Level|String Expression»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("NextMember"
                             , I18n.getString("memberFunction.nextMember")
                             , "«Member».NextMember") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

        f = new MdxMemberFunction("OpeningPeriod"
                             , I18n.getString("memberFunction.openingPeriod")
                             , "OpeningPeriod([«Level»[, «Member»]])") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLevelNode(false, "«Level»", false, true)
               , new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("ParallelPeriod"
                             , I18n.getString("memberFunction.parallelPeriod")
                             , "ParallelPeriod([«Level»[, «Numeric Expression»[, «Member»]]])") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLevelNode(false, "«Level»", false, true)
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
               , new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */       
        f = new MdxMemberFunction("Parent"
                             , I18n.getString("memberFunction.parent")
                             , "«Member».Parent") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("PrevMember"
                             , I18n.getString("memberFunction.prevMember")
                             , "«Member».PrevMember") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("StrToMember"
                             , I18n.getString("memberFunction.strToMember")
                             , "StrToMember(«String Expression»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode("«String Expression»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
        f = new MdxMemberFunction("ValidMeasure"
                             ,I18n.getString("memberFunction.validMeasure")
                             , "ValidMeasure(«Tuple»)") {
                        /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgTupleNode("«Tuple»")
            };
         }

      };
      memberFunctions.add(new DefaultMutableTreeNode(f));


// ************************************************* NUMERIC *****************************************************


      numericFunctions = new DefaultMutableTreeNode("Numeric Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */       
      f = new MdxNumericFunction("Aggregate"
                             , I18n.getString("numericFunction.aggregate")
                             , "Aggregate(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Avg"
                             , I18n.getString("numericFunction.avg")
                             , "Avg(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("CalculationCurrentPass()"
                             ,I18n.getString("numericFunction.calcPass")
                             , "CalculationCurrentPass()") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return null;
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("CalculationPassValue"
                             , I18n.getString("numericFunction.clacPassValue")
                             , "CalculationPassValue(«Numeric Expression», «Pass Value»[, «Access Flag»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode("«Pass Value»")
               , new MBTArgEnumNode(false, "«Access Flag»", new String[]{"ABSOLUTE", "RELATIVE"}, false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("CoalesceEmpty"
                             , I18n.getString("numericFunction.coalesceEmpty")
                             , "CoalesceEmpty(«Numeric Expression»[, «Numeric Expression»]...)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", true, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Correlation"
                             , I18n.getString("numericFunction.correlation")
                             , "Correlation(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Dimensions.Count"
                             ,I18n.getString("numericFunction.dimensionCount")
                             , "Dimensions.Count") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return null;
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Levels.Count"
                             ,I18n.getString("numericFunction.levelCount")
                             , "«Dimension»|«Hierarchy».Levels.Count") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode(true, "«Dimension|Hierarchy»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Count"
                             , I18n.getString("numericFunction.count")
                             , "Count(«Set»[, ExcludeEmpty | IncludeEmpty])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgEnumNode(false, "ExcludeEmpty | IncludeEmpty", new String[]{"ExcludeEmpty", "IncludeEmpty"}, false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Covariance"
                             , I18n.getString("numericFunction.covariance")
                             , "Covariance(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("CovarianceN"
                             , I18n.getString("numericFunction.covarianceN")
                             , "CovarianceN(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("DistinctCount"
                             , I18n.getString("numericFunction.distinctCount")
                             , "DistinctCount(«Set»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("IIf"
                              , I18n.getString("numericFunction.iif")
                              , "IIf(«Logical Expression», «Numeric or String Expression1», «Numeric or String Expression2»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLogicalNode("«Logical Expression»")
               , new MBTArgStringNode("«Numeric or String Expression1»")
               , new MBTArgStringNode("«Numeric or String Expression1»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("LinRegIntercept"
                              , I18n.getString("numericFunction.lineRegIncercept")
                              , "LinRegIntercept(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("LinRegPoint"
                              , I18n.getString("numericFunction.lineRegPoint")
                              , "LinRegPoint(«Numeric Expression», «Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgStringNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("LinRegR2"
                              , I18n.getString("numericFunction.lineRegR2")
                              , "LinRegR2(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("LinRegSlope"
                              ,I18n.getString("numericFunction.lineRegSlope")
                              , "LinRegSlope(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("LinRegVariance"
                              ,I18n.getString("numericFunction.lineRegVariance")
                              , "LinRegVariance(«Set», «Numeric Expression»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Set»")
               , new MBTArgNumericNode("«Numeric Expression»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("LookupCube"
                              , I18n.getString("numericFunction.lookUpCube")
                              , "LookupCube(«Cube String», «Numeric|String Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Cube String»")
               , new MBTArgStringNode("«Numeric|String Expression»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Max"
                              , I18n.getString("numericFunction.max")
                              , "Max(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Median"
                              , I18n.getString("numericFunction.median")
                              , "Median(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Min"
                              , I18n.getString("numericFunction.min")
                              , "Min(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Ordinal"
                              , I18n.getString("numericFunction.ordinal")
                              , "«Level».Ordinal") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLevelNode(true, "«Level»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Predict"
                              , I18n.getString("numericFunction.predict")
                              , "Predict(«Mining Model Name», «Numeric Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgStringNode("«Mining Model Name»")
               , new MBTArgNumericNode( "«Numeric Expression»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Rank"
                              ,I18n.getString("numericFunction.rank")
                              , "Rank(«Tuple», «Set»[, «Calc Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgTupleNode("«Tuple»")
               , new MBTArgSetNode( "«Set»")
               , new MBTArgAcceptAllStringNode( false, "«Calc Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("RollupChildren"
                              , I18n.getString("numericFunction.rollUpChildren")
                              , "RollupChildren(«Member», «String Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgStringNode( "«String Expression»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Stddev"
                              , I18n.getString("numericFunction.stdDev")
                              , "Stdev(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("StddevP"
                              , I18n.getString("numericFunction.stdDevP")
                              , "StdevP(«Set»[, «Numeric Expression»])") {     
          /* end of modification for I18n */
          
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Stdev"
                              , I18n.getString("numericFunction.stdev")
                              , "Stdev(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("StdevP"
                              , I18n.getString("numericFunction.stdevP")
                              , "StdevP(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("StrToValue"
                              ,I18n.getString("numericFunction.strToValue")
                              , "StrToValue(«String Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode("«String Expression»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Sum"
                              ,I18n.getString("numericFunction.sum")
                              , "Sum(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "««Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Value"
                              ,I18n.getString("numericFunction.value")
                              , "«Member».Value") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Var"
                              ,I18n.getString("numericFunction.var")
                              , "Var(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("Variance"
                              ,I18n.getString("numericFunction.variance")
                              , "Variance(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("VarianceP"
                              ,I18n.getString("numericFunction.varianceP")
                              , "VarP(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxNumericFunction("VarP"
                              , I18n.getString("numericFunction.varP")
                              , "VarP(«Set»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      numericFunctions.add(new DefaultMutableTreeNode(f));



// ************************************************* OTHER *****************************************************

      otherFunctions = new DefaultMutableTreeNode("Other Functions");
//      otherFunctions.add(new DefaultMutableTreeNode(new MdxFunction("Call"
//         , "Executes the string expression containing a user-defined function."
//         , "Call «UDF Name»")));




// ************************************************* SET *****************************************************

      setFunctions = new DefaultMutableTreeNode("Set Functions");
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("AddCalculatedMembers"
                              , I18n.getString("setFunction.addCalcMembers")
                              , "AddCalculatedMembers(«Set»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "AllMembers"
                              , I18n.getString("setFunction.allMembers")
                              , "«Dimension|Level».AllMembers") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode(true, "«Dimension|Level»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction(   "Ancestors"
                              , I18n.getString("setFunction.ancestors")
                              , "Ancestors(«Member», «Numeric Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "Ancestors"
                              , I18n.getString("setFunction.ancestors2")
                              , "Ancestors(«Member», «Level»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgLevelNode("«Level»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "Ascendants"
                              , I18n.getString("setFunction.ascendants")
                              , "Ascendants(«Member»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode("«Member»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "Axis"
                              ,I18n.getString("setFunction.axis")
                              , "Axis(«Numeric Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "BottomCount"
                              , I18n.getString("setFunction.bottomCount")
                              , "BottomCount(«Set», «Count»[, «Numeric Expression»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Count»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "BottomPercent"
                              , I18n.getString("setFunction.bottomPercent")
                              , "BottomPercent(«Set», «Percentage», «Numeric Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Percentage»")
               , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "BottomSum"
                              , I18n.getString("setFunction.bottomSum")
                              , "BottomSum(«Set», «Value», «Numeric Expression»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Value»")
               , new MBTArgNumericNode("«Numeric Expression»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(   "Children"
                              , I18n.getString("setFunction.children")
                              , "«Member».Children") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction("Crossjoin"
                             , I18n.getString("setFunction.crossJoin")
                             , "Crossjoin(«Set1», «Set2»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("Descendants"
                             , I18n.getString("setFunction.decendants")
                             , "Descendants(«Member», [«Level»[, «Desc_flags»]])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgLevelNode(false, "«Level»", false, true)
               , new MBTArgEnumNode(false, "«Desc_flags»", new String[]{"SELF", "AFTER", "BEFORE", "BEFORE_AND_AFTER", "SELF_AND_AFTER", "SELF_AND_BEFORE", "SELF_BEFORE_AFTER", "LEAVES"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction("Descendants"
                             , I18n.getString("setFunction.decendants")
                             , "Descendants(«Member», «Distance»[, «Desc_flags»])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode("«Member»")
               , new MBTArgNumericNode(false, "«Distance»", false, true)
               , new MBTArgEnumNode(false, "«Desc_flags»", new String[]{"SELF", "AFTER", "BEFORE", "BEFORE_AND_AFTER", "SELF_AND_AFTER", "SELF_AND_BEFORE", "SELF_BEFORE_AFTER", "LEAVES"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("Distinct"
                             , I18n.getString("setFunction.distinct")
                             , "Distinct(«Set»)") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrilldownLevel"
                             , I18n.getString("setFunction.drillDownLevel")
                             , "DrilldownLevel(«Set»[, {«Level» |  «Index»}])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgStringNode(false, "«Level» |  «Index»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrilldownLevelBottom"
                             , I18n.getString("setFunction.drillDownLevelBottom")
                             , "DrilldownLevelBottom(«Set», «Count»[, [«Level»][, «Numeric Expression»]])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Count»")
               , new MBTArgLevelNode(false, "«Level»", false, true)
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrilldownLevelTop"
                             , I18n.getString("setFunction.drillDownLevelTop")
                             , "DrilldownLevelTop(«Set», «Count»[, [«Level»][, «Numeric Expression»]])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Count»")
               , new MBTArgLevelNode(false, "«Level»", false, true)
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrilldownMember"
                             , I18n.getString("setFunction.drillDownMember")
                             , "DrilldownMember(«Set1», «Set2»[, RECURSIVE])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "RECURSIVE", new String[]{"RECURSIVE"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrilldownMemberBottom"
                             , I18n.getString("setFunction.drillDownMemberBottom")
                             , "DrilldownMemberBottom(«Set1», «Set2», «Count»[, [«Numeric Expression»][, RECURSIVE]])") {
                      /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgNumericNode("«Count»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
               , new MBTArgEnumNode(false, "RECURSIVE", new String[]{"RECURSIVE"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrilldownMemberTop"
                             , I18n.getString("setFunction.drillDownMemberTop")
                             , "DrilldownMemberTop(«Set1», «Set2», «Count»[, [«Numeric Expression»][, RECURSIVE]])") {
            /* end of modification for I18n */
         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgNumericNode("«Count»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
               , new MBTArgEnumNode(false, "RECURSIVE", new String[]{"RECURSIVE"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction("DrillupLevel"
                             , I18n.getString("setFunction.drillUpLevel")
                             , "DrillupLevel(«Set»[, «Level»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgLevelNode(false, "«Level»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction("DrillupMember"
                             , I18n.getString("setFunction.drillupMembers")
                             , "DrillupMember(«Set1», «Set2»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction(  "Except"
                             , I18n.getString("setFunction.except")
                             , "Except(«Set1», «Set2»[, ALL])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "ALL", new String[]{"ALL"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Extract"
                             , I18n.getString("setFunction.extract")
                             , "Extract(«Set», «Dimension»[, «Dimension»...])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgDimensionNode(false, "«Dimension»", true, false)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));


 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Filter"
                             , I18n.getString("setFunction.filter")
                             , "Filter(«Set», «Search Condition»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgStringNode("«Search Condition»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Generate"
                             , I18n.getString("setFunction.generate")
                             , "Generate(«Set1», «Set2»[, ALL])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "ALL", new String[]{"ALL"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Generate"
                             , I18n.getString("setFunction.generate")
                             , "Generate(«Set», «String Expression»[, «Delimiter»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgStringNode("«String Expression»")
               , new MBTArgStringNode(false, "«Delimiter»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Head"
                             , I18n.getString("setFunction.head")
                             , "Head(«Set»[, «Numeric Expression»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));

 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Hierarchize"
                             ,I18n.getString("setFunction.hierarchize")
                             , "Hierarchize(«Set»[, POST])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgEnumNode(false, "POST", new String[]{"POST"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Intersect"
                             ,I18n.getString("setFunction.intersect")
                             , "Intersect(«Set1», «Set2»[, ALL])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "ALL", new String[]{"ALL"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "LastPeriods"
                             ,I18n.getString("setFunction.lastPeriods")
                             , "LastPeriods(«Index»[, «Member»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgNumericNode("«Index»")
               , new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Members"
                             ,I18n.getString("setFunction.members")
                             , "«Dimension|Hierarchy|Level».Members") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgAcceptAllStringNode(true, "«Dimension|Hierarchy|Level»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Members"
                             ,I18n.getString("setFunction.members")
                             , "Members(«String Expression»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgAcceptAllStringNode("«String Expression»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Mtd"
                             , I18n.getString("setFunction.mtd")
                             , "Mtd([«Member»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "NameToSet"
                             ,I18n.getString("setFunction.nameToSet")
                             , "NameToSet(«Member Name»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode("«Member Name»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "NonEmptyCrossjoin"
                             , I18n.getString("setFunction.nonEmptyJoins")
                             , "NonEmptyCrossjoin(«Set1», «Set2»[, «Set3»...][, «Crossjoin Set Count»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgSetNode(false, "«Set2»", true, true)
               , new MBTArgNumericNode(false, "«Crossjoin Set Count»", false, true)

            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction("Order"
                             , I18n.getString("setFunction.order")
                             , "Order(«Set», {«String Expression» | «Numeric Expression»} [, ASC | DESC | BASC | BDESC])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgStringNode("«String Expression» | «Numeric Expression»")
               , new MBTArgEnumNode(false, "ASC | DESC | BASC | BDESC", new String[]{"ASC", "DESC", "BASC", "BDESC"}, false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction("PeriodsToDate"
                             ,I18n.getString("setFunction.periodsToDate")
                             , "PeriodsToDate([«Level»[, «Member»]])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgLevelNode(false, "«Level»", false, true)
               , new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Qtd"
                             ,I18n.getString("setFunction.qtd")
                             , "Qtd([«Member»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Siblings"
                             ,I18n.getString("setFunction.siblings")
                             , "«Member».Siblings") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode(true, "«Member»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "StripCalculatedMembers"
                             ,I18n.getString("setFunction.stripCalcMembers")
                             , "StripCalculatedMembers(«Set»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgSetNode("«Set»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "StrToSet"
                             ,I18n.getString("setFunction.strToSet")
                             , "StrToSet(«String Expression»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
               new MBTArgStringNode("«String Expression»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Subset"
                             ,I18n.getString("setFunction.subset")
                             , "Subset(«Set», «Start»[, «Count»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Start»")
               , new MBTArgNumericNode(false, "«Count»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Tail"
                             ,I18n.getString("setFunction.tail")
                             , "Tail(«Set»[, «Count»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode(false, "«Count»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "ToggleDrillState"
                             ,I18n.getString("setFunction.toggleDrillState")
                             , "ToggleDrillState(«Set1», «Set2»[, RECURSIVE])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "RECURSIVE", new String[]{"RECURSIVE"}, false, true)

            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "TopCount"
                             ,I18n.getString("setFunction.topCount")
                             , "TopCount(«Set», «Count»[, «Numeric Expression»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Count»")
               , new MBTArgNumericNode(false, "«Numeric Expression»", false, true)

            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 

      f = new MdxSetFunction(  "TopPercent"
                             ,I18n.getString("setFunction.topPercent")
                             , "TopPercent(«Set», «Percentage», «Numeric Expression»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Percentage»")
               , new MBTArgNumericNode("«Numeric Expression»")

            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "TopSum"
                             ,I18n.getString("setFunction.topSum")
                             , "TopSum(«Set», «Value», «Numeric Expression»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgNumericNode("«Value»")
               , new MBTArgNumericNode("«Numeric Expression»")

            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Union"
                             ,I18n.getString("setFunction.union")
                             , "Union(«Set1», «Set2»[, ALL])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set1»")
               , new MBTArgSetNode("«Set2»")
               , new MBTArgEnumNode(false, "ALL", new String[]{"ALL"}, false, true)

            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "VisualTotals"
                             ,I18n.getString("setFunction.visualTotals")
                             , "VisualTotals(«Set», «Pattern»)") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgSetNode("«Set»")
               , new MBTArgStringNode("«Pattern»")
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Wtd"
                             ,I18n.getString("setFunction.wtd")
                             , "Wtd([«Member»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));
 /**
  * Copyright (C) 2006 CINCOM SYSTEMS, INC.
  * All Rights Reserved
  * Copyright (C) 2006 Igor Mekterovic
  * All Rights Reserved
  */ 
      f = new MdxSetFunction(  "Ytd"
                             , I18n.getString("setFunction.ytd")
                             , "Ytd([«Member»])") {
            /* end of modification for I18n */

         public MBTNode[] getFunctionArguments() {
            return new MBTNode[] {
                 new MBTArgMemberNode(false, "«Member»", false, true)
            };
         }

      };
      setFunctions.add(new DefaultMutableTreeNode(f));




// Now, I'm performing a merge sort to put all functions in one node.
      allFunctions = new DefaultMutableTreeNode("All Functions");

      DefaultMutableTreeNode[] heads = new DefaultMutableTreeNode[]{
         arrayFunctions
         , dimensionFunctions
         , hierarchyFunctions
         , levelFunctions
         , memberFunctions
         , numericFunctions
//         , otherFunctions
         , setFunctions
         , stringFunctions
         , tupleFunctions};
      int[] headIndexes = new int[heads.length];
      DefaultMutableTreeNode curr;
      int selected;

      boolean sortDone = false;
      while (!sortDone){
         f = null;
         sortDone = true;
         selected = 0;
         for (int i = 0; i < heads.length; i++) {
            if (headIndexes[i] < heads[i].getChildCount()){
               curr = (DefaultMutableTreeNode) heads[i].getChildAt(headIndexes[i]);
               if (f==null){
                  f = (MdxFunction)curr.getUserObject();
                  selected = i;
               } else if ( ((MdxFunction)curr.getUserObject()).getName().compareTo(f.getName()) < 0 ){
                  f = (MdxFunction)curr.getUserObject();
                  selected = i;
               }
            }

         }
         if (f != null){
            sortDone = false;
            allFunctions.add(new DefaultMutableTreeNode(f));
            headIndexes[selected]++;
         }
      }
      // By default, categorized view is displayed:
      categorized = false;
      toggleTree();

      // well, this was fun...
   }


   /**
    * Toggles a display of the function tree between categorized and alphabetical view.
    */
   private void toggleTree(){
      categorized = !categorized;
      DefaultMutableTreeNode root = ((DefaultMutableTreeNode)tree.getModel().getRoot());
      root.removeAllChildren();
      if (categorized){
         root.add(nonMdxFunctions);
         root.add(arrayFunctions);
         root.add(dimensionFunctions);
         root.add(hierarchyFunctions);
         root.add(levelFunctions);
         root.add(memberFunctions);
         root.add(numericFunctions);
         root.add(setFunctions);
         root.add(stringFunctions);
         root.add(tupleFunctions);
         root.setUserObject("Mdx Functions (categorized)");
      }else{
         root.add(nonMdxFunctions);
         root.add(allFunctions);
         tree.expandPath(new TreePath(allFunctions.getPath()));
         root.setUserObject("Mdx Functions (alphabetical)");
      }
      tree.updateUI();
      tree.repaint();

   }
   /**
    * Inner class that adds the double-clicked function syntax to the mdx editor text field.
    * @@author Igor Mekterovic
    * @@version 0.3
    */
   class PopupListener extends MouseAdapter {
      public void mouseClicked(MouseEvent e) {
         if ((e.getClickCount()==2)){
            int selRow = tree.getRowForLocation(e.getX(), e.getY());
            TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
            if ( (selRow != -1)
                && ( ( (DefaultMutableTreeNode) selPath.getLastPathComponent())).getUserObject() instanceof MdxFunction) {

               MdxFunction mdxf = ( (MdxFunction) ( (DefaultMutableTreeNode) (selPath.getLastPathComponent())).getUserObject());

               if (MdxFunctionTree.this.parent != null) {
                  if (parent instanceof MdxEditor) {
                     ((MdxEditor)parent).addTextToCurrentPosition(mdxf.getSyntax());
                  }
               }
            }else if ( (selRow != -1)
                && (   selPath.getLastPathComponent() == tree.getModel().getRoot() )) {
               toggleTree();

            }
         }
      }
   }


   /**
    * Inner class for rendering mdx function tree nodes.
    * @@author Igor Mekterovic
    * @@version 0.3
    */
	//Commented by Prakash
 //  private class MdxFunctionTreeRenderer extends JLabel implements TreeCellRenderer{
   private class MdxFunctionTreeRenderer extends DefaultTreeCellRenderer { //By Prakash

      public MdxFunctionTreeRenderer() {
         this.setOpaque(false);
      }
      public Component getTreeCellRendererComponent(
                                                      JTree tree,
                                                      Object value,
                                                      boolean sel,
                                                      boolean expanded,
                                                      boolean leaf,
                                                      int row,
                                                      boolean hasFocus) {
		  super.getTreeCellRendererComponent(tree, value, sel,expanded, leaf, row,hasFocus);
         if (( (DefaultMutableTreeNode) value).getUserObject() instanceof MdxFunction ){
            MdxFunction curr = (MdxFunction) ((DefaultMutableTreeNode) value).getUserObject();
            setText(curr.toString());
            setIcon(curr.getIcon());
            setToolTipText(curr.getToolTip());

         }else{
            String s = ((DefaultMutableTreeNode) value).getUserObject().toString();
            setText(s);
            setIcon(null);
            setToolTipText(s);
         }
         return this;
      }

   }


   /**
    * Main class for testing the display of the tree.
    * @@param args String[]
    */
   public static void main(String[] args) {
       JFrame frame = new JFrame("Testing FunctionTree...");
       MdxFunctionTree dst = new MdxFunctionTree();
       frame.setContentPane(dst);
       frame.addWindowListener(new WindowAdapter() {
             public void windowClosing(WindowEvent e) {
                System.exit(0);
             }
          });

      frame.pack();
      frame.setVisible(true);
    }

}
@


1.1
log
@*** empty log message ***
@
text
@d16 10
a25 1
public class MdxFunctionTree extends JPanel{
d46 1
a46 1

d52 1
a52 3

      DefaultMutableTreeNode top =  new DefaultMutableTreeNode("");

d59 2
a60 1
                  S.paintBackgroundGreen(g, this);
d84 1
a84 3
//
//      MdxFunctionTreeRenderer renderer = new MdxFunctionTreeRenderer();
//      renderer.addMouseListener(new PopupListener());
d86 1
d88 11
d100 16
a115 1
   }
d133 8
a140 3

      f = new MdxMakeTupleFunction( "make tuple"
                              , "Creates a tuple from set of items."
d142 2
a143 1
         public MBTNode[] getFunctionArguments() {
d151 10
a160 4

      f = new MdxOperatorFunction( "*"
                              , "Multiplies numeric expressions with another."
                              , "(«Numeric Expression1» * «Numeric Expression2»)") {
d170 6
a175 1

d177 1
a177 1
                              , "Divides numeric expressions with another."
d179 1
d190 8
a197 3

      f = new MdxOperatorFunction( "+"
                              , "Adds numeric expressions to another."
d199 1
d210 8
a217 3

      f = new MdxOperatorFunction( "-"
                              , "Substracts numeric expressions from another."
d219 1
d233 6
a238 1

d240 1
a240 1
                              , "Converts one or more sets to an array for use in a user-defined function."
d242 1
d257 8
a264 2
      f = new MdxStringFunction("CalculationPassValue"
                              , "Returns the value of an MDX expression evaluated over the specified calculation pass of a cube."
d266 1
d277 8
a284 3

      f = new MdxStringFunction("CoalesceEmpty"
                              , "Coalesces an empty cell value to a string or number."
d286 1
d296 6
a301 1

d303 1
a303 1
                              , "Returns a concatenated string created by evaluating a string expression over a set."
d305 1
d315 1
a315 1
      stringFunctions.add(new DefaultMutableTreeNode(f));
d320 8
a327 3

      f = new MdxStringFunction("Generate"
                              , "Returns a concatenated string created by evaluating a string expression over a set."
d329 1
d340 6
d347 2
a348 3

      f = new MdxStringFunction("IIf"
                              , "Returns one of two string or numeric values determined by a logical test."
d350 1
d361 6
a366 1

d368 1
a368 1
                              , "Returns the value of an MDX expression evaluated over another specified cube in the same database."
d370 1
d380 8
a387 4


      f = new MdxStringFunction("MemberToStr"
                              , "Constructs a string from a member."
d389 1
d398 10
a407 5


      f = new MdxStringFunction("Name"
                              , "Returns the name of a dimension, hierarchy, level, or member."
                              , "«Dimension|Level|Member|Hierarchy».Name") {
d416 10
a425 4

      f = new MdxStringFunction("Properties"
                              , "Returns a string containing a member property value."
                              , "«Member».Properties(«String Expression»)") {
d436 8
a443 4


      f = new MdxStringFunction("SetToStr"
                              , "Constructs a string from a set."
d445 1
d454 6
a459 2


d461 1
a461 1
                              , "Constructs a string from a tuple."
d463 1
d472 8
a479 4


      f = new MdxStringFunction("UniqueName"
                             , "Returns the unique name of a dimension, level, or member."
d481 1
d490 6
a495 1

d497 1
a497 1
                             , "Returns the domain name and user name of the current connection."
d499 1
d515 10
a524 4

      f = new MdxDimensionFunction("Dimension"
                             , "Returns the dimension that contains a specified hierarchy, level, or member."
                             , "«Member|Level|Hierarchy».Dimension") {
d533 10
a542 5


      f = new MdxDimensionFunction("Dimensions"
                             , "Returns the dimension whose zero-based position within the cube is specified by a numeric expression or whose name is specified by a string."
                             , "Dimensions(«Numeric/String Expression»)") {
d556 8
a563 2
      f = new MdxHierarchyFunction("Hierarchy"
                             , "Returns the hierarchy of a level or member."
d565 1
d579 8
a586 3

      f = new MdxLevelFunction("Level"
                             , "Returns the level of a member."
d588 1
d597 10
a606 4

      f = new MdxLevelFunction("Levels"
                             , "Returns the level whose position in a dimension is specified by a numeric expression"
                             , "«Dimension».Levels(«Numeric Expression»)") {
d616 10
a625 4

      f = new MdxLevelFunction("Levels"
                             ,"Returns the level whose position in a dimension is specified by a string expression."
                             , "Levels(«String Expression»)") {
d644 10
a653 3
      f = new MdxLogicalFunction("Is (TO BE DONE!!!!)"
                             ,"Returns True if two compared objects are equivalent, False otherwise."
                             , "«Object 1» IS «Object 2»") {
d663 10
a672 5


      f = new MdxLogicalFunction("IsAncestor"
                             ,"Determines whether a specified member is an ancestor of another specified member."
                             , "IsAncestor(«Member1»,«Member2»)") {
d682 10
a691 5


      f = new MdxLogicalFunction("IsEmpty"
                             ,"Determines whether an expression evaluates to the empty cell value."
                             , "IsEmpty(«Value Expression»)") {
d700 10
a709 4

      f = new MdxLogicalFunction("IsGeneration"
                             , "Determines whether a specified member is in a specified generation."
                             , "IsGeneration(«Member»,«Numeric Expression»)") {
d719 10
a728 4

      f = new MdxLogicalFunction("IsLeaf"
                             , "Determines whether a specified member is a leaf member."
                             , "IsLeaf(«Member»)") {
d737 10
a746 4

      f = new MdxLogicalFunction("IsSibling"
                             , "Determines whether a specified member is a sibling of another specified member."
                             , "IsSibling(«Member1»,«Member2»)") {
d761 6
a766 1

d768 1
a768 1
                             , "Returns the current tuple from a set during an iteration."
d770 1
d779 6
a784 1

d786 1
a786 1
                             , "Returns a tuple from a set."
d788 1
d798 6
a803 1

d805 1
a805 1
                             , "Constructs a tuple from a string."
d807 1
d822 6
a827 1

d829 3
a831 2
                             , "Returns the ancestor of a member at a specified level ."
                             , "Ancestor(«Member», «Level»)") {
d841 8
a848 3

      f = new MdxMemberFunction("Ancestor"
                             , "Returns the ancestor of a member at a specified distance from the member."
d850 1
d860 8
a867 3

      f = new MdxMemberFunction("ClosingPeriod"
                             , "Returns the last sibling among the descendants of a member at a level."
d869 1
d879 6
a884 2


d886 1
a886 1
                             , "Returns the member with the same relative position under a member as the member specified."
d888 1
d898 6
a903 2


d905 1
a905 1
                             , "Returns the current member along a dimension during an iteration."
d907 1
d916 6
a921 1

d923 1
a923 1
                             , "Returns the system-generated data member associated with a nonleaf member."
d925 1
d934 6
a939 1

d941 1
a941 1
                             , "Returns the default member of a dimension or hierarchy."
d943 1
a951 1

d953 1
a953 1
                             , "Returns the first child of a member."
d955 1
d964 6
a969 1

d971 3
a973 2
                             , "Returns the first child of the parent of a member."
                             , "«Member».FirstSibling") {
d982 6
a987 2


d989 1
a989 1
                             , "Returns a member from a tuple."
d991 1
d1001 6
a1006 1

d1008 1
a1008 1
                             , "Returns a member prior to the specified member along the member's dimension."
d1010 1
d1020 6
a1025 1

d1027 1
a1027 1
                             , "Returns the last child of a member."
d1029 1
d1038 6
a1043 1

d1045 1
a1045 1
                             , "Returns the last child of the parent of a member."
d1047 1
d1056 11
a1066 4

      f = new MdxMemberFunction("Lead"
                             , "Returns a member further along the specified member's dimension."
                             , "«Member».Lead(«Numeric Expression»)") {
d1076 8
a1083 3

      f = new MdxMemberFunction("LinkMember"
                             , "Returns a hierarchized member."
d1085 1
d1095 8
a1102 3

      f = new MdxMemberFunction("Members"
                             , "Returns the member whose name is specified by a string expression."
d1104 1
d1113 8
a1120 3

      f = new MdxMemberFunction("NextMember"
                             , "Returns the next member in the level that contains a specified member."
d1122 1
d1131 6
d1138 2
a1139 3

      f = new MdxMemberFunction("OpeningPeriod"
                             , "Returns the first sibling among the descendants of a member at a level."
d1141 1
d1151 8
a1158 3

      f = new MdxMemberFunction("ParallelPeriod"
                             , "Returns a member from a prior period in the same relative position as a specified member."
d1160 1
d1171 8
a1178 3

      f = new MdxMemberFunction("Parent"
                             , "Returns the parent of a member."
d1180 1
d1189 8
a1196 3

      f = new MdxMemberFunction("PrevMember"
                             , "Returns the previous member in the level that contains a specified member."
d1198 1
d1207 8
a1214 3

      f = new MdxMemberFunction("StrToMember"
                             , "Returns a member based on a string expression."
d1216 1
d1225 8
a1232 3

      f = new MdxMemberFunction("ValidMeasure"
                             , "Returns a valid measure in a virtual cube by forcing inapplicable dimensions to their top level."
d1234 1
d1249 6
a1254 1

d1256 1
a1256 1
                             , "Returns a calculated value using the appropriate aggregate function, based on the context of the query."
d1258 1
d1268 6
a1273 1

d1275 1
a1275 1
                             , "Returns the average value of a numeric expression evaluated over a set."
d1277 1
d1287 6
a1292 1

d1294 1
a1294 1
                             , "Returns the current calculation pass of a cube for the current query context."
d1296 1
d1304 6
a1309 1

d1311 1
a1311 1
                             , "Returns the value of an MDX expression evaluated over a specified calculation pass of the current cube."
d1313 1
d1325 6
a1330 1

d1332 1
a1332 1
                             , "Coalesces an empty cell value to a number or a string."
d1334 1
d1344 6
a1349 1

d1351 1
a1351 1
                             , "Returns the correlation of two series evaluated over a set."
d1353 1
d1364 6
a1369 1

d1371 1
a1371 1
                             , "Returns the number of dimensions in a cube."
d1373 1
d1380 6
a1385 1

d1387 1
a1387 1
                             , "Returns the number of levels in a dimension."
d1389 1
d1398 6
a1403 1

d1405 1
a1405 1
                             , "Returns the number of cells in a set."
d1407 1
d1417 6
a1422 1

d1424 1
a1424 1
                             , "Returns the population covariance of two series evaluated over a set, using the biased population formula."
d1426 1
d1437 6
a1442 1

d1444 1
a1444 1
                             , "Returns the sample covariance of two series evaluated over a set, using the unbiased population formula."
d1446 1
d1457 6
a1462 1

d1464 1
a1464 1
                             , "Returns the count of tuples in a set, excluding duplicate tuples."
d1466 1
d1475 6
a1480 1

d1482 1
a1482 1
                              , "Returns one of two numeric or string values determined by a logical test."
d1484 1
d1495 6
a1500 1

d1502 1
a1502 1
                              , "Calculates the linear regression of a set and returns the value of b in the regression line y = ax + b."
d1504 1
d1515 6
a1520 1

d1522 1
a1522 1
                              , "Calculates the linear regression of a set and returns the value of y in the regression line y = ax + b."
d1524 1
d1536 6
a1541 1

d1543 1
a1543 1
                              , "Calculates the linear regression of a set and returns R2 (the coefficient of determination)."
d1545 1
d1556 6
a1561 1

d1563 1
a1563 1
                              , "Calculates the linear regression of a set and returns the value of a in the regression line y = ax + b."
d1565 1
d1576 6
a1581 1

d1583 1
a1583 1
                              , "Calculates the linear regression of a set and returns the variance associated with the regression line y = ax + b."
d1585 1
d1596 6
a1601 1

d1603 1
a1603 1
                              , "Returns the value of an MDX expression evaluated over another specified cube in the same database."
d1605 1
d1615 6
a1620 1

d1622 1
a1622 1
                              , "Returns the maximum value of a numeric expression evaluated over a set."
d1624 1
d1634 6
a1639 1

d1641 1
a1641 1
                              , "Returns the median value of a numeric expression evaluated over a set."
d1643 1
d1653 6
a1658 1

d1660 1
a1660 1
                              , "Returns the minimum value of a numeric expression evaluated over a set."
d1662 1
d1672 6
a1677 1

d1679 1
a1679 1
                              , "Returns the zero-based ordinal value associated with a level."
d1681 1
d1690 6
a1695 1

d1697 1
a1697 1
                              , "Evaluates the string expression within the data mining model specified within the current coordinates."
d1699 1
d1709 6
a1714 1

d1716 1
a1716 1
                              , "Returns the one-based rank of a tuple in a set."
d1718 1
d1729 6
a1734 1

d1736 1
a1736 1
                              , "Scans the children of the member parameter and applies the string expression operator to their evaluated value."
d1738 1
d1748 6
a1753 1

d1755 1
a1755 1
                              , "Alias for Stdev."
d1757 1
d1767 6
a1772 1

d1774 4
a1777 2
                              , "Alias for StdevP."
                              , "StdevP(«Set»[, «Numeric Expression»])") {
d1787 6
a1792 1

d1794 1
a1794 1
                              , "Returns the sample standard deviation of a numeric expression evaluated over a set, using the unbiased population formula."
d1796 1
d1806 6
a1811 1

d1813 1
a1813 1
                              , "Returns the population standard deviation of a numeric expression evaluated over a set, using the biased population formula."
d1815 1
d1825 6
a1830 1

d1832 1
a1832 1
                              , "Returns a value based on a string expression."
d1834 1
d1843 6
a1848 1

d1850 1
a1850 1
                              , "Returns the sum of a numeric expression evaluated over a set."
d1852 1
d1863 6
a1868 1

d1870 1
a1870 1
                              , "Returns the value of a measure."
d1872 1
d1881 6
a1886 1

d1888 1
a1888 1
                              , "Returns the sample variance of a numeric expression evaluated over a set, using the unbiased population formula."
d1890 1
d1900 6
a1905 1

d1907 1
a1907 1
                              , "Alias for Var."
d1909 1
d1919 6
a1924 1

d1926 1
a1926 1
                              , "Alias for VarP."
d1928 1
d1938 6
a1943 1

d1945 1
a1945 1
                              , "Returns the population variance of a numeric expression evaluated over a set, using the biased population formula."
d1947 1
d1973 6
a1978 1

d1980 1
a1980 1
                              , "Adds calculated members to a set."
d1982 1
d1991 6
a1996 1

d1998 1
a1998 1
                              , "Returns a set containing all members of a specified dimension or level, including calculated members."
d2000 1
d2009 6
a2014 1

d2017 1
a2017 1
                              , "Returns all the ancestors of a member at a specified distance."
d2019 1
d2029 6
a2034 1

d2036 1
a2036 1
                              , "Returns all the ancestors of a member at a specified level."
d2038 1
d2048 6
a2053 1

d2055 1
a2055 1
                              , "Returns the set of the ascendants of the member, including the member itself."
d2057 1
d2067 6
a2072 1

d2074 1
a2074 1
                              , "Returns the set associated with the main axis."
d2076 1
d2085 6
a2090 1

d2092 1
a2092 1
                              , "Returns a specified number of items from the bottom of a set, optionally ordering the set first."
d2094 1
d2105 6
a2110 1

d2112 1
a2112 1
                              , "Sorts a set and returns the bottom n elements whose cumulative total is at least a specified percentage."
d2114 1
d2125 6
a2130 1

d2132 1
a2132 1
                              , "Sorts a set and returns the bottom n elements whose cumulative total is at least a specified value."
d2134 1
d2145 6
a2150 1

d2152 1
a2152 1
                              , "Returns the children of a member."
d2154 1
d2163 6
a2168 1

d2171 1
a2171 1
                             , "Returns the cross product of two sets."
d2173 1
d2183 6
a2188 1

d2190 1
a2190 1
                             , "Returns the set of descendants of a member at a specified level, optionally including or excluding descendants in other levels."
d2192 1
d2203 6
a2208 1

d2211 1
a2211 1
                             , "Returns the set of descendants of a member at a specified distance from a member, optionally including or excluding descendants in other levels."
d2213 1
d2224 6
a2229 1

d2231 1
a2231 1
                             , "Eliminates duplicate tuples from a set."
d2233 1
d2242 6
a2247 1

d2249 1
a2249 1
                             , "Drills down the members of a set, at a specified level, to one level below. Alternatively, drills down on a specified dimension in the set."
d2251 1
d2261 6
a2266 1

d2268 1
a2268 1
                             , "Drills down the bottom n members of a set, at a specified level, to one level below."
d2270 1
d2282 6
a2287 1

d2289 1
a2289 1
                             , "Drills down the top n members of a set, at a specified level, to one level below."
d2291 1
d2304 6
a2309 1

d2311 1
a2311 1
                             , "Drills down the members in a set that are present in a second specified set."
d2313 1
d2324 6
a2329 1

d2331 1
a2331 1
                             , "Similar to DrilldownMember, except that it includes only the bottom n children."
d2333 1
d2346 6
a2351 1

d2353 1
a2353 1
                             , "Similar to DrilldownMember, except that it includes only the top n children."
d2355 1
d2368 6
a2373 1

d2376 1
a2376 1
                             , "Drills up the members of a set that are below a specified level."
d2378 2
d2389 6
a2394 1

d2396 1
a2396 1
                             , "Drills up the members in a set that are present in a second specified set."
d2398 2
d2410 6
a2415 1

d2418 1
a2418 1
                             , "Finds the difference between two sets, optionally retaining duplicates."
d2420 2
d2433 6
a2438 1

d2440 1
a2440 1
                             , "Returns a set of tuples from extracted dimension elements. The opposite of Crossjoin."
d2442 2
d2455 6
a2460 1

d2462 1
a2462 1
                             , "Returns the set resulting from filtering a set based on a search condition."
d2464 2
d2476 6
a2481 1

d2483 1
a2483 1
                             , "Applies a set to each member of another set and joins the resulting sets by union."
d2485 2
d2497 6
a2502 1

d2504 1
a2504 1
                             , "Applies a set to each member of another set and joins the resulting sets by union."
d2506 2
d2518 6
a2523 1

d2525 1
a2525 1
                             , "Returns the first specified number of elements in a set."
d2527 2
d2539 6
a2544 1

d2546 1
a2546 1
                             , "Orders the members of a set in a hierarchy."
d2548 2
d2559 6
a2564 1

d2566 1
a2566 1
                             , "Returns the intersection of two input sets, optionally retaining duplicates."
d2568 2
d2580 6
a2585 1

d2587 1
a2587 1
                             , "Returns a set of members prior to and including a specified member."
d2589 2
d2600 6
a2605 1

d2607 1
a2607 1
                             , "Returns the set of all members in a dimension, hierarchy, or level."
d2609 2
d2619 6
a2624 1

d2626 1
a2626 1
                             , "Returns the set of all members in a dimension, hierarchy, or level."
d2628 2
d2638 6
a2643 1

d2645 1
a2645 1
                             , "A shortcut function for the PeriodsToDate function that specifies the level to be Month."
d2647 2
d2657 6
a2662 1

d2664 1
a2664 1
                             , "Returns a set containing a single member based on a string expression containing a member name."
d2666 2
d2676 6
a2681 1

d2683 1
a2683 1
                             , "Returns the cross product of two or more sets, excluding empty members."
d2685 2
d2699 6
a2704 1

d2707 1
a2707 1
                             , "Arranges members of a set, optionally preserving or breaking the hierarchy."
d2709 2
d2721 6
a2726 1

d2729 1
a2729 1
                             , "Returns a set of periods (members) from a specified level starting with the first period and ending with a specified member."
d2731 2
d2742 6
a2747 1

d2749 1
a2749 1
                             , "A shortcut function for the PeriodsToDate function that specifies the level to be Quarter."
d2751 2
d2761 6
a2766 1

d2768 1
a2768 1
                             , "Returns the siblings of a member, including the member itself."
d2770 2
d2780 6
a2785 1

d2787 1
a2787 1
                             , "Removes calculated members from a set."
d2789 2
d2799 6
a2804 1

d2806 1
a2806 1
                             , "Constructs a set from a string expression."
d2808 2
d2818 6
a2823 1

d2825 1
a2825 1
                             , "Returns a subset of elements from a set."
d2827 2
d2839 6
a2844 1

d2846 1
a2846 1
                             , "Returns a subset from the end of a set."
d2848 2
d2859 6
a2864 1

d2866 1
a2866 1
                             , "Toggles the drill state of members. This function is a combination of DrillupMember and DrilldownMember."
d2868 2
d2881 6
a2886 1

d2888 1
a2888 1
                             , "Returns a specified number of items from the top of a set, optionally ordering the set first."
d2890 2
d2903 6
a2908 1

d2911 1
a2911 1
                             , "Sorts a set and returns the top n elements whose cumulative total is at least a specified percentage."
d2913 2
d2926 6
a2931 1

d2933 1
a2933 1
                             , "Sorts a set and returns the top n elements whose cumulative total is at least a specified value."
d2935 2
d2948 6
a2953 1

d2955 1
a2955 1
                             , "Returns the union of two sets, optionally retaining duplicates."
d2957 2
d2970 6
a2975 1

d2977 1
a2977 1
                             , "Dynamically totals child members specified in a set using a pattern for the total label in the result set."
d2979 2
d2990 6
a2995 1

d2997 1
a2997 1
                             , "A shortcut function for the PeriodsToDate function that specifies the level to be Week."
d2999 2
d3009 6
a3014 1

d3016 1
a3016 1
                             , "A shortcut function for the PeriodsToDate function that specifies the level to be Year."
d3018 2
d3146 3
a3148 1
   private class MdxFunctionTreeRenderer extends JLabel implements TreeCellRenderer{
d3161 1
@


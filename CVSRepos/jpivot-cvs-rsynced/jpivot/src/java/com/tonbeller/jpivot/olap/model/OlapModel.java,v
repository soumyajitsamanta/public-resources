head	1.2;
access;
symbols
	jpivot_1_8_0:1.2
	focus_1_6_0:1.1.0.6
	jpivot_1_7_0:1.1
	jpivot_1_6_0:1.1
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.07.09.16.17.06;	author remberson;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.47;	author avix;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Created two JPivot base exception classess, JPivotException and
JPivotRuntimeException, and all JPivot exceptions now have one of
these as parent class. The mondrian JPivot code now gets its
SchemaReader from the MDX query rather than the connection so that
the query's cube's calculated members and the query's defined
"with" members can be displayed.
Also, added new JPivot exception, NoValidMemberException, which is
throw when a query returns no data on one or more axis.
Lastly, cleaned up html generated by 2 transforms.
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 * 
 */
package com.tonbeller.jpivot.olap.model;

import javax.servlet.ServletContext;

import com.tonbeller.jpivot.core.Model;
import com.tonbeller.jpivot.util.JPivotRuntimeException;

/**
 * Provides access to extensions, result and metadata. It does not specify
 * what data are displayed (the query). Supports navigations thru Extensions.
 * 
 * @@see com.tonbeller.jpivot.core.Extension
 * @@see com.tonbeller.jpivot.olap.model.Result
 */
public interface OlapModel extends Model {

  /** 
   * thrown if too many result positions would be returned
   * @@see OlapModel#getResult()
   */
  public class ResultTooLargeException extends JPivotRuntimeException {
    public ResultTooLargeException() {
      super();
    }
    public ResultTooLargeException(Throwable cause) {
      super(cause);
    }
    public ResultTooLargeException(String message, Throwable cause) {
      super(message, cause);
    }
  }

  /** 
   * thrown if the result can not be computed because the cube is
   * empty.
   * @@see OlapModel#getResult()
   */
  public class EmptyCubeException extends JPivotRuntimeException {
    public EmptyCubeException() {
      super();
    }
    public EmptyCubeException(Throwable cause) {
      super(cause);
    }
    public EmptyCubeException(String message, Throwable cause) {
      super(message, cause);
    }
  }
    
  /**
   * runs the query and returns the result
   */
  public Result getResult() throws OlapException;
  
  /**
   * @@return all dimensions of the cube for navigation
   */
  Dimension[] getDimensions();

  /**
   * @@return all measures of the cube for navigation
   */
  Member[] getMeasures();
  
  /**
   * called once after creation. E.g. open DB connection
   */
  void initialize() throws OlapException;

  /**
   * called once when the not used any longer. E.g. close DB connection
   *
   */
  void destroy();
  
  /**
   * @@return an ID string for this model
   */
  String getID();
  
  /**
   * sets an ID string for this model
   */
  void setID(String ID);
  
  /**
   * store a servlet context to the model
   */
  void setServletContext(ServletContext servletContext);
  
}
@


1.1
log
@initial version
@
text
@d18 1
d33 1
a33 1
  public class ResultTooLargeException extends RuntimeException {
d50 1
a50 1
  public class EmptyCubeException extends RuntimeException {
@


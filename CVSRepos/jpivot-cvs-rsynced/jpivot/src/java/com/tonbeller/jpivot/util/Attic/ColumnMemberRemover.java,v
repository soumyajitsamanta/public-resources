head	1.1;
access;
symbols
	focus_1_6_0:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.05.19.06.10.20;	author kunarief;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2008.05.19.06.10.20;	author kunarief;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file ColumnMemberRemover.java was initially added on branch focus_1_6_0.
@
text
@@


1.1.2.1
log
@* adding feature for hidden member selection
@
text
@a0 260
package com.tonbeller.jpivot.util;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.w3c.dom.Element;

public class ColumnMemberRemover {

	private static final String CELL = "cell";
	private final String CAPTION = "caption";
	private final String EMPTY_STRING = "";

	private final String COLSPAN = "colspan";

	private Element head;
	private Element body;
	private List headingList;
	private String columnHeadingCaption;
	private Element cornerElement;

	public void remove(Element elem, String label) {
		head = (Element) elem.getFirstChild();
		body = (Element) head.getNextSibling();
		this.columnHeadingCaption = label;

		if (!headContainsCaption(label))
			return;

		cornerElement = (Element) head.getFirstChild().getFirstChild();

		extractAllLabelHeading();

		for (Iterator headingToRemove = headingList.iterator(); headingToRemove.hasNext();) {
			Element heading = (Element) headingToRemove.next();
			reduceParentColspan(heading);
			removeHeadings(heading);
			removeCells(heading);
			removeElement(heading);
		}

	}

	private void removeCells(Element heading) {

		// colIndex is sum of all colspan attribute of elements before the current element

		int headingColIndex = calculateColIndex(heading);
		int headingColspan = getColspan(heading);

		List cellList = new ArrayList();
		Element firstRow = (Element) body.getFirstChild();
		if (firstRow == null)
			return;

		// calculate first cell colIndex using first row of the body
		int cellColIndex = 0;
		Element head = (Element) firstRow.getFirstChild();
		while (head != null) {
			if (!CELL.equals(head.getTagName()))
				cellColIndex += getColspan(head);
			head = (Element) head.getNextSibling();
		}

		// find cells below selected heading which has to be removed
		// and add results to cellList
		Element row = (Element) body.getFirstChild();
		while (row != null) {
			Element cell = (Element) row.getFirstChild();
			int currentCellColIndex = cellColIndex;

			// looping for cells in the current row
			while (cell != null) {
				if (CELL.equals(cell.getTagName())) {
					// look for the start of the heading
					// if found gather all cells below it
					// into cellList
					if (currentCellColIndex == headingColIndex)
					for (int i = 0; i < headingColspan; i++) {
						if(cell != null) {
							cellList.add(cell);
							cell = (Element) cell.getNextSibling();
							// a cell must be has colspan 1
							currentCellColIndex++;
						}
					}
					currentCellColIndex++;
				}
				if(cell != null)
					cell = (Element) cell.getNextSibling();
			}
			row = (Element) row.getNextSibling();
		}

		// remove all elements in cellList
		for (Iterator cellsToRemove = cellList.iterator(); cellsToRemove.hasNext();) {
			Element elementToRemove = (Element) cellsToRemove.next();
			removeElement(elementToRemove);
		}
	}

	private void removeHeadings(Element heading) {

		int headingColIndex = calculateColIndex(heading);
		int headingColspan = getColspan(heading);

		Element row = (Element) heading.getParentNode();

		// rowSibling is the row under the selected row
		Element rowSibling = (Element) row.getNextSibling();
		List headingList = new ArrayList();

		// find headings below selected heading which has to be removed
		// and add results to headingList
		while (rowSibling != null) {
			Element rowSiblingHeading = (Element) rowSibling.getFirstChild();
			int siblingColIndex = 0;
			// iterate over row heading
			// find all headings on rowSibling that match the column number of the selected heading
			while (rowSiblingHeading != null) {

				siblingColIndex += getColspan(rowSiblingHeading);
				// if heading length and position of rowSiblingHeading are equals to those of heading
				// then we found it : add it to headingList
				if (headingColspan == getColspan(rowSiblingHeading)) {
					if (calculateColIndex(rowSiblingHeading) == calculateColIndex(heading)) {
						headingList.add(rowSiblingHeading);
					}
				} else if (siblingColIndex >= headingColIndex && (siblingColIndex < (headingColIndex + headingColspan))) {
					headingList.add(rowSiblingHeading);
				}
				rowSiblingHeading = (Element) rowSiblingHeading.getNextSibling();
			}
			rowSibling = (Element) rowSibling.getNextSibling();
		}

		// remove all elements in headingList
		for (Iterator headingToRemove = headingList.iterator(); headingToRemove.hasNext();) {
			Element elementToRemove = (Element) headingToRemove.next();
			removeElement(elementToRemove);
		}


	}

	private int calculateColIndex(Element heading) {
		int colIndex = 0;
		if (heading.getParentNode().getNextSibling() != null)
			colIndex = getColspan(cornerElement);
		Element sibling = (Element) heading.getPreviousSibling();
		while (sibling != null) {
			colIndex += getColspan(sibling);
			sibling = (Element) sibling.getPreviousSibling();
		}
		return colIndex;
	}

	private int getColspan(Element heading) {
		String colspan = heading.getAttribute(COLSPAN);
		if (EMPTY_STRING.equals(colspan))
			return 1;
		return new Integer(colspan).intValue();
	}

	/**
	 * get the parent heading of <code>heading</code>
	 */
	private void reduceParentColspan(Element heading) {

		int colIndexHeading = calculateColIndex(heading);

		Element row = (Element) heading.getParentNode();
		Element parent = (Element) row.getPreviousSibling();
		while (parent != null && parent.getPreviousSibling() != null) {
			Element currentHeading = (Element) parent.getFirstChild();
			while (currentHeading != null) {
				// the colIndex of heading is between a and b
				// a is the colIndex of currentHeading
				// b is (a + colspan currentHeading)
				int colIndexCurrentHeading = calculateColIndex(currentHeading);
				if (colIndexHeading >= colIndexCurrentHeading &&
						colIndexHeading <= (colIndexCurrentHeading + getColspan(currentHeading))){
					// reduce colspan currentHeading with colspan heading
					reduceColspan(currentHeading, heading);
					break;
				}
				currentHeading = (Element) currentHeading.getNextSibling();
			}
			parent = (Element) parent.getPreviousSibling();
		}

	}

	/**
	 * reduces the colspan of <code>currentHeading</code> by the colspan of
	 * <code>headingToRemove</code>
	 * @@param currentHeading - The parent heading of headingToRemove
	 * @@param headingToRemove - The heading which is going to be removed
	 */
	private void reduceColspan(Element currentHeading, Element headingToRemove) {
		Integer colspanCurrentHeading = new Integer(currentHeading.getAttribute(COLSPAN));
		Integer colspanHeading = new Integer(headingToRemove.getAttribute(COLSPAN));
		String newColspan = EMPTY_STRING + (colspanCurrentHeading.intValue() - colspanHeading.intValue());
		currentHeading.setAttribute(COLSPAN, newColspan);

	}

	private void removeElement(Element element) {
		Element parent = (Element) element.getParentNode();
		if (parent != null)
			parent.removeChild(element);
	}

	/**
	 * find all headings that have a caption which is equal
	 * to the caption of the current heading
	 * and add the results to headingList
	 */
	private void extractAllLabelHeading() {
		headingList = new ArrayList();
		Element row = (Element) head.getFirstChild();
		while (row != null) {
			Element headingheading = (Element) row.getFirstChild();
			while (headingheading != null) {
				if (columnHeadingCaption.equals(getCaption(headingheading))) {
					headingList.add(headingheading);
				}
				headingheading = (Element) headingheading.getNextSibling();
			}
			row = (Element) row.getNextSibling();
		}
	}

	private boolean headContainsCaption(String caption) {
		Element row = (Element) head.getFirstChild();
		while (row != null) {
			Element heading = (Element) row.getFirstChild();
			while (heading != null) {
				if(caption.equals(getCaption(heading)))
					return true;
				heading = (Element) heading.getNextSibling();
			}
			row = (Element) row.getNextSibling();
		}
		return false;
	}

	private String getCaption(Element heading) {
		Element node = (Element) heading.getFirstChild();
		while (node != null) {
			Element currentNode = node;
			node = (Element) node.getNextSibling();
			if (CAPTION.equals(currentNode.getTagName()))
				return currentNode.getAttribute(CAPTION);
		}
		return null;
	}

}
@


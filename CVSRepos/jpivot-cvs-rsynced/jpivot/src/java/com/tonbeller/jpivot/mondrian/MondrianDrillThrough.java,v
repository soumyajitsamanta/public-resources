head	1.4;
access;
symbols
	jpivot_1_8_0:1.3
	focus_1_6_0:1.2.0.2
	jpivot_1_7_0:1.3
	jpivot_1_6_0:1.2
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.09.27.05.26.16;	author willgorman;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.15.03.59.10;	author jhyde;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.20.02.21.06;	author sgwood;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.51;	author avix;	state Exp;
branches;
next	;


desc
@@


1.4
log
@added external datasource drillthrough support
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 * 
 */
package com.tonbeller.jpivot.mondrian;

import mondrian.olap.Util.PropertyList;
import mondrian.rolap.RolapConnectionProperties;

import com.tonbeller.jpivot.core.ExtensionSupport;
import com.tonbeller.jpivot.olap.model.Cell;
import com.tonbeller.jpivot.olap.navi.DrillThrough;
import com.tonbeller.wcf.table.TableModel;
/**
 * @@author Robin Bagot
 *
 * Implementation of the DrillExpand Extension for Mondrian Data Source.
*/
public class MondrianDrillThrough extends ExtensionSupport implements DrillThrough {

  private boolean extendedContext = true;

  /**
   * Constructor sets ID
   */
  public MondrianDrillThrough() {
    super.setId(DrillThrough.ID);
  }

  /**
   * drill through is possible if <code>member</code> is not calculated
   */
  public boolean canDrillThrough(Cell cell) {
    return ((MondrianCell) cell).getMonCell().canDrillThrough();
    //String sql = ((MondrianCell) cell).getMonCell().getDrillThroughSQL(extendedContext);
    //return sql != null;
  }

  /**
   * does a drill through, retrieves data that makes up the selected Cell
   */
  public TableModel drillThrough(Cell cell) {
    String sql = ((MondrianCell) cell).getMonCell().getDrillThroughSQL(extendedContext);
    if (sql == null) {
      throw new NullPointerException("DrillThroughSQL returned null");
    }
    MondrianDrillThroughTableModel dtm = new MondrianDrillThroughTableModel();
    dtm.setSql(sql);
    PropertyList connectInfo = ((MondrianModel) getModel()).getConnectProperties();
    String jdbcUrl = connectInfo.get(RolapConnectionProperties.Jdbc.name());
    String jdbcUser = connectInfo.get(RolapConnectionProperties.JdbcUser.name());
    String jdbcPassword = connectInfo.get(RolapConnectionProperties.JdbcPassword.name());
    String dataSourceName = connectInfo.get(RolapConnectionProperties.DataSource.name());
    dtm.setJdbcUrl(jdbcUrl);
    dtm.setJdbcUser(jdbcUser);
    dtm.setJdbcPassword(jdbcPassword);
    dtm.setDataSourceName(dataSourceName);
    dtm.setExternalDataSource(((MondrianModel)getModel()).getExternalDataSource());
    return dtm;
  }

  public boolean isExtendedContext() {
    return extendedContext;
  }

  public void setExtendedContext(boolean extendedContext) {
    this.extendedContext = extendedContext;
  }

}
@


1.3
log
@Checkin mondrian.jar as of perforce change 8356, and update jpivot source code for recent API changes. Note that mondrian.jar is built using JDK 1.5 (previously JDK 1.4).
@
text
@d66 1
@


1.2
log
@Allow the MondrianModel to be configured by Util.Properties
@
text
@d58 4
a61 4
    String jdbcUrl = connectInfo.get(RolapConnectionProperties.Jdbc);
    String jdbcUser = connectInfo.get(RolapConnectionProperties.JdbcUser);
    String jdbcPassword = connectInfo.get(RolapConnectionProperties.JdbcPassword);
    String dataSourceName = connectInfo.get(RolapConnectionProperties.DataSource);
@


1.1
log
@initial version
@
text
@d57 1
a57 2
    String connectString = getConnection().getConnectString();
    PropertyList connectInfo = mondrian.olap.Util.parseConnectString(connectString);
a68 9
  /**
   * gets the mondrian connection
   * @@return
   */
  public mondrian.olap.Connection getConnection() {
    MondrianModel model = (MondrianModel) getModel();
    return model.getConnection();
  }

@


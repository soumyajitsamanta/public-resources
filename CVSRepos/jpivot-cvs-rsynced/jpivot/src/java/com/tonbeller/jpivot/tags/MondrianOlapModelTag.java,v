head	1.8;
access;
symbols
	jpivot_1_8_0:1.6
	focus_1_6_0:1.4.0.2
	jpivot_1_7_0:1.6
	jpivot_1_6_0:1.4
	jpivot_1_5_0:1.3.0.2
	Root_jpivot_1_5_0:1.3
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.4;
locks; strict;
comment	@# @;


1.8
date	2010.07.23.07.37.28;	author uramisten;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.22.15.51.55;	author willgorman;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.19.15.00.33;	author remberson;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.15.08.50.50;	author avix;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.09.13.25.44;	author avix;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.13.11.56.41;	author avix;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.16.13.47.58;	author uramisten;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.09.21.47.54;	author avix;	state Exp;
branches;
next	;


desc
@@


1.8
log
@mostly formatting, but a couple changed in MondrianMemberTree
--> maintain ordering of elements in navigation.  If you move items around, currently they just get reset to their original positions if you reopen the navigator.  Also, support added for calculated members not in the root of a dimension -> linked to a development for mondrian/schema allowing specification of "parentMember" in xml definition of calculated member.  This has been possible in MDX, but the schema and jpivot did not support it.   The saved sort order feature could be changed to be turned on/off by a parameter file (e.g.) if users would like to be able to keep the old results.
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 * 
 */
package com.tonbeller.jpivot.tags;

import java.io.IOException;
import java.net.URL;

import javax.servlet.jsp.JspException;

import org.xml.sax.SAXException;

import com.tonbeller.jpivot.mondrian.MondrianModel;
import com.tonbeller.jpivot.olap.model.OlapException;
import com.tonbeller.jpivot.olap.model.OlapModel;
import com.tonbeller.jpivot.tags.MondrianModelFactory.Config;
import com.tonbeller.tbutils.res.Resources;
import com.tonbeller.wcf.controller.RequestContext;

/**
 * jsp tag that defines a mondrian query
 */
public class MondrianOlapModelTag extends OlapModelTag {

  String dataSource;
  String jdbcDriver;
  String jdbcUser;
  String jdbcPassword;
  String jdbcUrl;
  String catalogUri;
  String config;
  String role;
  String dynResolver;
  String useChecksum;
  String dynLocale;
  String connectionPooling;
  String dataSourceChangeListener;
  
  Resources res = Resources.instance();

  protected OlapModel getOlapModel(RequestContext context) throws JspException, OlapException, SAXException, IOException {
    MondrianModelFactory.Config cfg = new MondrianModelFactory.Config();
    // previously we were validating this url with a new URL() call,
    // now that mondrian supports VFS, new URL() is not a valid verification
    // technique.
    String schemaUrl;
    if (catalogUri.startsWith("/")) { 
      schemaUrl = pageContext.getServletContext().getResource(catalogUri).toExternalForm();
    } else {
      schemaUrl = catalogUri;
    }
    
    cfg.setMdxQuery(getBodyContent().getString());
    // Add the schema URL.  Enclose the value in quotes to permit
    // schema URLs that include things like ;jsessionid values.
    cfg.setSchemaUrl("\"" + schemaUrl + "\"");
    cfg.setJdbcUrl(jdbcUrl);
    cfg.setJdbcDriver(jdbcDriver);
    cfg.setJdbcUser(jdbcUser);
    cfg.setJdbcPassword(jdbcPassword);
    cfg.setDataSource(dataSource);
    cfg.setRole(role);
    cfg.setDynResolver(dynResolver);
    cfg.setDynLocale(dynLocale);
    cfg.setConnectionPooling(connectionPooling);
    cfg.setDataSourceChangeListener(dataSourceChangeListener);
    cfg.setUseChecksum(getUseChecksum());
    allowOverride(context, cfg);

    URL url;
    if (config == null)
      url = getDefaultConfig();
    else
      url = pageContext.getServletContext().getResource(config);

    MondrianModel mm = MondrianModelFactory.instance(url, cfg);
    OlapModel om = (OlapModel) mm.getTopDecorator();
    om.setLocale(context.getLocale());
    om.setServletContext(context.getSession().getServletContext());
    return om;
  }

  /**
   * default implementation delegates to {@@link Config#allowOverride(RequestContext)}
   */
  protected void allowOverride(RequestContext context, Config cfg) {
    cfg.allowOverride(context);
  }

  protected URL getDefaultConfig() {
    return MondrianOlapModelTag.class.getResource("/com/tonbeller/jpivot/mondrian/config.xml");
  }


  /**
   * Returns the catalogUri.
   *
   * @@return String
   */
  public String getCatalogUri() {
    return catalogUri;
  }

  /**
   * Returns the jdbcDriver.
   *
   * @@return String
   */
  public String getJdbcDriver() {
    return jdbcDriver;
  }

  /**
   * Returns the jdbcUrl.
   *
   * @@return String
   */
  public String getJdbcUrl() {
    return jdbcUrl;
  }

  /**
   * Sets the catalogUri.
   *
   * @@param catalogUri
   *          The catalogUri to set
   */
  public void setCatalogUri(String catalogUri) {
    this.catalogUri = catalogUri;
  }

  /**
   * Sets the jdbcDriver.
   *
   * @@param jdbcDriver
   *          The jdbcDriver to set
   */
  public void setJdbcDriver(String jdbcDriver) {
    this.jdbcDriver = jdbcDriver;
  }

  /**
   * Sets the jdbcUrl.
   *
   * @@param jdbcUrl
   *          The jdbcUrl to set
   */
  public void setJdbcUrl(String jdbcUrl) {
    this.jdbcUrl = jdbcUrl;
  }

  /**
   * Returns the jdbcPassword.
   *
   * @@return String
   */
  public String getJdbcPassword() {
    return jdbcPassword;
  }

  /**
   * Returns the jdbcUser.
   *
   * @@return String
   */
  public String getJdbcUser() {
    return jdbcUser;
  }

  /**
   * Sets the jdbcPassword.
   *
   * @@param jdbcPassword
   *          The jdbcPassword to set
   */
  public void setJdbcPassword(String jdbcPassword) {
    this.jdbcPassword = jdbcPassword;
  }

  /**
   * Sets the jdbcUser.
   *
   * @@param jdbcUser
   *          The jdbcUser to set
   */
  public void setJdbcUser(String jdbcUser) {
    this.jdbcUser = jdbcUser;
  }

  /**
   * Returns the config.
   *
   * @@return String
   */
  public String getConfig() {
    return config;
  }

  /**
   * Sets the config.
   *
   * @@param config
   *          The config to set
   */
  public void setConfig(String config) {
    this.config = config;
  }

  /**
   * @@param string
   */
  public void setDataSource(String string) {
    dataSource = string;
  }

  /**
   * @@param role
   *          The role to set.
   */
  public void setRole(String role) {
    this.role = role;
  }

  /**
   * @@return the dynamic variable resolver class name
   */
  public String getDynResolver() {
    return dynResolver;
  }

  /**
   * @@param dynresolver - the dynamic variable resolver class name
   */
  public void setDynResolver(String dynResolver) {
    this.dynResolver = dynResolver;
  }

  /**
   * @@param connectionPooling - "false" : Mondrian must not pool JDBC connections
   */
  public void setConnectionPooling(String connectionPooling) {
    this.connectionPooling = connectionPooling;
  }

  /**
   * @@return "false" if Mondrion must not pool JDBC connections
   */
  public String getConnectionPooling() {
    return connectionPooling;
  }
  public String getDataSource() {
    return dataSource;
  }
  public String getRole() {
    return role;
  }
/**
 * Getter for property locale.
 * @@return Value of property locale.
 */
  public String getDynLocale() {
      return this.dynLocale;
  }
  /**
   * Setter for property locale.
   * @@param locale New value of property locale.
   */
  public void setDynLocale(String dynLocale) {
      this.dynLocale = dynLocale;
  }

/**
 * @@return Returns the dataSourceChangeListener.
 */
public String getDataSourceChangeListener() {
    return dataSourceChangeListener;
}

/**
 * @@param dataSourceChangeListener The dataSourceChangeListener to set.
 */
public void setDataSourceChangeListener(String dataSourceChangeListener) {
    this.dataSourceChangeListener = dataSourceChangeListener;
}

    public String getUseChecksum() {
        return useChecksum;
    }

    public void setUseChecksum(String useChecksum) {
        this.useChecksum = useChecksum;
    }

    
}
@


1.7
log
@Updated to latest version of mondrian HEAD, soon to be mondrian 3.1.   API changes were required.  Also fixed a few bugs, including URL vs. VFS assumptions, XMLA incompatibilities, and PDF chart embedding.  Also added a request parameter to the PrintServlet to allow customizing of the output filename.
@
text
@d43 1
d76 1
a76 1

d295 8
@


1.6
log
@As of 01/10/07 two Mondrian classes that form part of its public API
where changed, specifically, mondrian.olap.Position and
mondrian.olap.Axis.
The build.xml file is changed because there are new jar files
required from the jpivot_repository/mondrian-HEAD directory.
Lastly, in MondrianOlapModelTag schema urls are now surrounded by
quotes so that things like ;jsessionid values can be included.
@
text
@d51 10
a60 9
    URL schemaUrl;
    if (catalogUri.startsWith("/"))
      schemaUrl = pageContext.getServletContext().getResource(catalogUri);
    else
      schemaUrl = new URL(catalogUri);
    if (schemaUrl == null)
      throw new JspException("could not find Catalog \"" + catalogUri + "\"");


d64 1
a64 1
    cfg.setSchemaUrl("\"" + schemaUrl.toExternalForm() + "\"");
@


1.5
log
@Added support for DataSourceChangeListener (contributed by Pappyn Bart)
@
text
@d61 3
a63 1
    cfg.setSchemaUrl(schemaUrl.toExternalForm());
@


1.4
log
@synchronized with tonbeller cvs
@
text
@d45 1
d71 1
d277 14
d292 1
a292 1
}@


1.3
log
@Synchronized with Tonbeller CVS:
  * Supports Mondrian 2.x API
  * Added BEA / Websphere Support
  * More tags in wcf tag library
  * Bugfixes
@
text
@a22 2
import com.tonbeller.jpivot.mondrian.MondrianModelFactory;
import com.tonbeller.jpivot.mondrian.MondrianModelFactory.Config;
d25 1
d71 1
a71 1
    allowOverride(cfg);
a79 1
    //mm.setUserName(((HttpServletRequest) pageContext.getRequest()).getRemoteUser());
a85 12
  protected void allowOverride(Config cfg) {
    cfg.setJdbcDriver(allowOverwrite("jdbc.driver", cfg.getJdbcDriver()));
    cfg.setJdbcUrl(allowOverwrite("jdbc.url", cfg.getJdbcUrl()));
    cfg.setJdbcUser(allowOverwrite("jdbc.user", cfg.getJdbcUser()));
    cfg.setJdbcPassword(allowOverwrite("jdbc.password", cfg.getJdbcPassword()));
    cfg.setDataSource(allowOverwrite("jdbc.datasource", cfg.getDataSource()));
    cfg.setRole(allowOverwrite("role", cfg.getRole()));
    cfg.setDynResolver(allowOverwrite("dynResolver", cfg.getDynResolver()));
    cfg.setDynLocale(allowOverwrite("dynLocale", cfg.getDynLocale()));
    cfg.setConnectionPooling(allowOverwrite("ConnectionPooling", cfg.getConnectionPooling()));
  }

d87 1
a87 2
   * Nimmt den Wert aus einem Request Parameter oder System Property - falls vorhanden, sonst
   * Defaultwert
d89 2
a90 2
  protected String allowOverwrite(String paramName, String defVal) {
    return res.getOptionalString(paramName, defVal);
@


1.2
log
@Added 'dynLocale' property to mondrian connect string.  When used wyth dynesolver enables use of new mondrian 'LocalizingDynamicSchemaProcessor' for localization of the XML schema file.

mondrian will replace ${property} with the property from the file specified in mondrian.properties by 'mondrian.mondrian.rolap.localePropFile'.

(see mondrian Ii8n documentation at http://mondrian.sourceforge.net/head/schema.html#I18n )
@
text
@d27 1
d46 2
d105 1
a105 7
    String paramVal = pageContext.getRequest().getParameter(paramName);
    if (paramVal != null)
      return paramVal;
    paramVal = System.getProperty(paramName);
    if (paramVal != null)
      return paramVal;
    return defVal;
@


1.1
log
@.
@
text
@d43 1
d66 1
d93 1
d278 16
@


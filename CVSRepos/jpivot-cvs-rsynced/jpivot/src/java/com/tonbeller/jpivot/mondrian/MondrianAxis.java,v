head	1.7;
access;
symbols
	jpivot_1_8_0:1.6
	focus_1_6_0:1.2.0.4
	jpivot_1_7_0:1.4
	jpivot_1_6_0:1.2
	jpivot_1_5_0:1.2.0.2
	Root_jpivot_1_5_0:1.2
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2009.03.02.19.44.12;	author willgorman;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.11.16.57.40;	author avix;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.11.14.18.18;	author avix;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.19.15.00.32;	author remberson;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.15.03.59.10;	author jhyde;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.13.11.56.40;	author avix;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.51;	author avix;	state Exp;
branches;
next	;


desc
@@


1.7
log
@updated trunk to reflect recent api changes in mondrian, in the AxisOrdinal interface.
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 */
package com.tonbeller.jpivot.mondrian;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import mondrian.olap.Position;
import mondrian.olap.AxisOrdinal.StandardAxisOrdinal;

import com.tonbeller.jpivot.olap.model.Axis;
import com.tonbeller.jpivot.olap.model.Hierarchy;
import com.tonbeller.jpivot.olap.model.Visitor;

/**
 * MondrianAxis is an adapter class for the Result Mondrian Axis.
 */
public class MondrianAxis implements Axis {

  private mondrian.olap.Axis monAxis = null;
  private MondrianModel model = null;
  private ArrayList aPositions = null;
  private MondrianHierarchy[] hierarchies = null;
  private int ordinal; // -1 for slicer

  /**
   * Constructor
   * @@param monAxis Axis as defined in Mondrian
   */
  public MondrianAxis(int iOrdinal, mondrian.olap.Axis monAxis, MondrianModel model) {
    this.ordinal = iOrdinal;
    this.monAxis = monAxis;
    this.model = model;

    aPositions = new ArrayList();
    boolean foundQueryHierarchies = true;
    if (iOrdinal >= 0) {
      // it is not the slicer
      // get hierarchies from mondrian query, rather than from result, which can be empty

      MondrianQueryAdapter adapter = (MondrianQueryAdapter) model.getQueryAdapter();
      mondrian.olap.Hierarchy[] monHiers = adapter.getMonQuery().getMdxHierarchiesOnAxis(
   		  StandardAxisOrdinal.forLogicalOrdinal(iOrdinal));
      hierarchies = new MondrianHierarchy[monHiers.length];
      for (int j = 0; j < hierarchies.length; j++) {
        // if the axis expr is a function like 
        // {StrToMember('[Time].[1997]')} then Mondrian
        // returns null because the hierarchy is not known
        if (monHiers[j] == null) {
          foundQueryHierarchies = false;
        } else {
          hierarchies[j] = model.lookupHierarchy(monHiers[j].getUniqueName());
        }
      }
    }

    List monPositions = monAxis.getPositions();
    Iterator pit = monPositions.iterator();
    int i = 0;
    while (pit.hasNext()) {
      Position monPosition = (Position) pit.next();
      MondrianPosition position = new MondrianPosition(monPosition, iOrdinal, model);
      aPositions.add(position);
      if (iOrdinal == -1 || !foundQueryHierarchies) {
        // for the slicer,  extract the hierarchies from the members
        
        if (i == 0) { 
          // first position only, as all positions have same hierarchies
          // create the hierarchies array
          List l = new ArrayList();
          Iterator mit = monPosition.iterator();
          while (mit.hasNext()) {
            mondrian.olap.Member monMember = (mondrian.olap.Member) mit.next();
            l.add(model.lookupHierarchy(monMember.getHierarchy().getUniqueName()));
          }
          hierarchies = (MondrianHierarchy[]) 
                l.toArray(new MondrianHierarchy[l.size()]);
        }
      }
      i++;
    }

  }

  /**
   * @@see com.tonbeller.jpivot.olap.model.Axis#getPositions()
   */
  public List getPositions() {
    return aPositions;
  }

  /**
   * @@see com.tonbeller.jpivot.olap.model.Axis#getHierarchies()
   */
  public Hierarchy[] getHierarchies() {
    return hierarchies;
  }

  /**
   * @@see com.tonbeller.jpivot.olap.model.Visitable#accept(Visitor)
   */
  public void accept(Visitor visitor) {
    visitor.visitAxis(this);
  }

  public Object getRootDecoree() {
    return this;
  }

  /**
   * Returns the ordinal.
   * @@return int
   */
  public int getOrdinal() {
    return ordinal;
  }

} // MondrianAxis
@


1.6
log
@fix bug [ 1889653 ] NullPointerException when using functions
@
text
@d17 3
a22 2
import mondrian.olap.AxisOrdinal;
import mondrian.olap.Position;
d52 1
a52 1
        AxisOrdinal.forLogicalOrdinal(iOrdinal));
@


1.5
log
@fix bug [ 1889653 ] NullPointerException when using functions
@
text
@d44 1
a44 1

d54 6
a59 1
        if (monHiers[j] != null) {
d72 1
a72 1
      if (iOrdinal == -1) {
@


1.4
log
@As of 01/10/07 two Mondrian classes that form part of its public API
where changed, specifically, mondrian.olap.Position and
mondrian.olap.Axis.
The build.xml file is changed because there are new jar files
required from the jpivot_repository/mondrian-HEAD directory.
Lastly, in MondrianOlapModelTag schema urls are now surrounded by
quotes so that things like ;jsessionid values can be included.
@
text
@d54 3
a56 1
        hierarchies[j] = model.lookupHierarchy(monHiers[j].getUniqueName());
@


1.3
log
@Checkin mondrian.jar as of perforce change 8356, and update jpivot source code for recent API changes. Note that mondrian.jar is built using JDK 1.5 (previously JDK 1.4).
@
text
@d14 1
d21 1
d58 6
a63 3
    mondrian.olap.Position[] monPositions = monAxis.positions;
    for (int i = 0; i < monPositions.length; i++) {
      MondrianPosition position = new MondrianPosition(monPositions[i], iOrdinal, model);
d67 3
a69 2
        mondrian.olap.Member[] monMembers = monPositions[i].getMembers();
        if (i == 0) { // first position only, as all positions have same hierarchies
d71 5
a75 3
          hierarchies = new MondrianHierarchy[monMembers.length];
          for (int j = 0; j < monMembers.length; j++) {
            hierarchies[j] = model.lookupHierarchy(monMembers[j].getHierarchy().getUniqueName());
d77 2
d81 1
@


1.2
log
@Synchronized with Tonbeller CVS:
  * Supports Mondrian 2.x API
  * Added BEA / Websphere Support
  * More tags in wcf tag library
  * Bugfixes
@
text
@d19 1
d48 2
a49 1
      mondrian.olap.Hierarchy[] monHiers = adapter.getMonQuery().getMdxHierarchiesOnAxis(iOrdinal);
@


1.1
log
@initial version
@
text
@a9 2
 *
 * 
d45 1
a45 1
 
@


head	1.2;
access;
symbols
	jpivot_1_8_0:1.2
	focus_1_6_0:1.2.0.2
	jpivot_1_7_0:1.2
	jpivot_1_6_0:1.2
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.11.09.13.25.43;	author avix;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.52;	author avix;	state Exp;
branches;
next	;


desc
@@


1.2
log
@synchronized with tonbeller cvs
@
text
@package com.tonbeller.jpivot.table.navi;

import javax.servlet.http.HttpSession;

import org.w3c.dom.Element;

import com.tonbeller.jpivot.table.ClickableMember;
import com.tonbeller.jpivot.table.SpanBuilder;
import com.tonbeller.jpivot.table.SpanBuilderDecorator;
import com.tonbeller.jpivot.table.TableComponent;
import com.tonbeller.jpivot.table.span.Span;
import com.tonbeller.wcf.controller.RequestContext;

/**
 * wraps a ClickableMemberSupport into a SpanBuilderDecorator, so the clickable member
 * may be attached statically to the table component. Once attached, the clickable
 * will be available independent of the current query.
 * 
 * @@author av
 * @@since 15.12.2004
 */
public class StaticClickableMember extends SpanBuilderDecorator {

  ClickableMember clickable;

  public StaticClickableMember(SpanBuilder delegate, ClickableMember clickable) {
    super(delegate);
    this.clickable = clickable;
  }

  public void initialize(RequestContext context, TableComponent table) throws Exception {
    super.initialize(context, table);
    table.getDispatcher().addRequestListener(null, null, clickable);
    table.getOlapModel().addModelChangeListener(clickable);
  }

  public void destroy(HttpSession session) throws Exception {
    table.getDispatcher().removeRequestListener(clickable);
    table.getOlapModel().removeModelChangeListener(clickable);
    super.destroy(session);
  }

  public void startBuild(RequestContext context) {
    super.startBuild(context);
    clickable.startRendering(context, table);
  }

  public void stopBuild() {
    clickable.stopRendering();
    super.stopBuild();
  }

  public Element build(SBContext sbctx, Span span, boolean even) {
    Element elem = super.build(sbctx, span, even);
    clickable.decorate(sbctx, span.getObject());
    return elem;
  }
  
}@


1.1
log
@initial version
@
text
@d7 1
a7 2
import com.tonbeller.jpivot.olap.model.OlapModel;
import com.tonbeller.jpivot.param.ParameterProvider;
a22 10
  class MyClickableMember extends ClickableMemberSupport {
    public MyClickableMember(String uniqueName, String urlPattern, String page,
        ParameterProvider parameterProvider) {
      super(uniqueName, urlPattern, page, parameterProvider);
    }

    protected OlapModel getOlapModel() {
      return table.getOlapModel();
    }
  };
d24 1
a24 1
  MyClickableMember clickable;
d26 1
a26 2
  public StaticClickableMember(SpanBuilder delegate, String uniqueName, String urlPattern,
      String page, ParameterProvider parameterProvider) {
d28 1
a28 1
    clickable = new MyClickableMember(uniqueName, urlPattern, page, parameterProvider);
d53 3
a55 3
  public Element build(Span span, boolean even) {
    Element elem = super.build(span, even);
    clickable.decorate(elem, span.getObject());
@


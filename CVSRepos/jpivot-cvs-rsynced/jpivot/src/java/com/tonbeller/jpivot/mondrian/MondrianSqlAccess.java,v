head	1.3;
access;
symbols
	jpivot_1_8_0:1.2
	focus_1_6_0:1.2.0.2
	jpivot_1_7_0:1.2
	jpivot_1_6_0:1.2
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2008.12.22.15.51.55;	author willgorman;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.09.13.25.42;	author avix;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.51;	author avix;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Updated to latest version of mondrian HEAD, soon to be mondrian 3.1.   API changes were required.  Also fixed a few bugs, including URL vs. VFS assumptions, XMLA incompatibilities, and PDF chart embedding.  Also added a request parameter to the PrintServlet to allow customizing of the output filename.
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 * 
 */
package com.tonbeller.jpivot.mondrian;

import javax.sql.DataSource;

import mondrian.rolap.RolapMember;

import org.apache.log4j.Logger;

import com.tonbeller.jpivot.core.ExtensionSupport;
import com.tonbeller.jpivot.olap.model.Member;
import com.tonbeller.jpivot.olap.navi.ExpressionParser;
import com.tonbeller.jpivot.param.SqlAccess;
import com.tonbeller.wcf.param.SessionParam;

/**
 * @@author av
 */
public class MondrianSqlAccess extends ExtensionSupport implements SqlAccess {
  private static Logger logger = Logger.getLogger(MondrianSqlAccess.class);
  
  public DataSource getDataSource() {
    MondrianModel mm = (MondrianModel) getModel();
    return mm.getSqlDataSource();
  }

  public SessionParam createParameter(Member member, String paramName) {
    MondrianMember mm = (MondrianMember) member;
    RolapMember rm = (RolapMember) mm.getMonMember();
    paramName = checkParamName(paramName, rm);
    // All or calculated?
    if (rm.getKey() == null) {
      return null;
    }
    SessionParam p = new SessionParam();
    p.setSqlValue(rm.getKey());
    p.setDisplayName(member.getLevel().getLabel());
    p.setDisplayValue(member.getLabel());

    ExpressionParser parser = (ExpressionParser) getModel().getExtension(ExpressionParser.ID);
    if (parser != null)
      p.setMdxValue(parser.unparse(member));

    p.setName(paramName);
    return p;
  }

  private String checkParamName(String paramName, RolapMember rm) {
    if (paramName != null)
      return paramName;
    return MondrianUtil.defaultParamName(rm);
  }

  public SessionParam createParameter(Member member, String paramName, String propertyName) {
    MondrianMember mm = (MondrianMember) member;
    RolapMember rm = (RolapMember) mm.getMonMember();
    paramName = checkParamName(paramName, rm);
    // propertyValue may be null
    Object propertyValue = rm.getPropertyValue(propertyName);
    SessionParam p = new SessionParam();
    p.setSqlValue(propertyValue);
    p.setDisplayName(member.getLevel().getLabel());
    p.setDisplayValue(member.getLabel());

    ExpressionParser parser = (ExpressionParser) getModel().getExtension(ExpressionParser.ID);
    if (parser != null)
      p.setMdxValue(parser.unparse(member));
    p.setName(paramName);
    return p;
  }

}@


1.2
log
@synchronized with tonbeller cvs
@
text
@d43 1
a43 1
    if (rm.getSqlKey() == null)
d45 1
d47 1
a47 1
    p.setSqlValue(rm.getSqlKey());
@


1.1
log
@initial version
@
text
@d41 1
d53 1
d58 6
d67 2
a69 4
    if (propertyValue == null) {
      logger.error("property value for property" + propertyName + " not found in " + member.getLabel());
      return null;
    }
@


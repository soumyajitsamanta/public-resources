head	1.3;
access;
symbols
	jpivot_1_8_0:1.3
	focus_1_6_0:1.3.0.2
	jpivot_1_7_0:1.3
	jpivot_1_6_0:1.3
	jpivot_1_5_0:1.2.0.2
	Root_jpivot_1_5_0:1.2
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.11.09.13.25.43;	author avix;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.12.13.11.56.41;	author avix;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.46;	author avix;	state Exp;
branches;
next	;

1.3.2.1
date	2008.04.17.10.44.46;	author hbaier;	state Exp;
branches;
next	;


desc
@@


1.3
log
@synchronized with tonbeller cvs
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 *
 */
package com.tonbeller.jpivot.table;

import java.util.Iterator;

import org.apache.log4j.Logger;
import org.w3c.dom.Element;

import com.tonbeller.jpivot.olap.model.Dimension;
import com.tonbeller.jpivot.olap.model.Displayable;
import com.tonbeller.jpivot.olap.model.EmptyMember;
import com.tonbeller.jpivot.olap.model.Hierarchy;
import com.tonbeller.jpivot.olap.model.Level;
import com.tonbeller.jpivot.olap.model.Member;
import com.tonbeller.jpivot.olap.model.Property;
import com.tonbeller.jpivot.olap.model.PropertyHolder;
import com.tonbeller.jpivot.olap.model.Visitable;
import com.tonbeller.jpivot.olap.model.VisitorSupportStrict;
import com.tonbeller.jpivot.table.span.PropertyHeading;
import com.tonbeller.jpivot.table.span.PropertyUtils;
import com.tonbeller.jpivot.table.span.Span;
import com.tonbeller.jpivot.table.span.SpanVisitor;

/**
 * renders a row or column heading. Creates a DOM Element from a Member, Hierarchy,
 * Dimension or Level.
 *
 * @@author av
 */
public class SpanBuilderImpl extends PartBuilderSupport implements SpanBuilder {
  String memberName;
  String headingName;
  private static final Logger logger = Logger.getLogger(SpanBuilderImpl.class);

  /**
   * creates an instance
   * @@param memberName either "row-heading" or "column-heading"
   * @@param headingName element name for the heading of a row- or column-heading  (i.e. "heading-heading").
   */
  public SpanBuilderImpl(String memberName, String headingName) {
    this.memberName = memberName;
    this.headingName = headingName;
  }

  class RenderSwitch extends VisitorSupportStrict implements SpanVisitor {

    private static final String CAPTION = "caption";
    Element elem;
    private SBContext sbctx;

    public RenderSwitch(SBContext sbctx) {
      this.sbctx = sbctx;
    }

    void renderHeading(Displayable d) {
      elem = table.elem(headingName);
      Element caption = table.append(CAPTION, elem);
      String label = d.getLabel();
      caption.setAttribute(CAPTION, label);
      sbctx.setCaption(caption, label);
    }

    private void renderMember(Displayable d, String label) {
      elem = table.elem(memberName);
      Element caption = table.append(CAPTION, elem);
      //String label = d.getLabel();
      caption.setAttribute(CAPTION, label);
      sbctx.setCaption(caption, label);

      if (d instanceof PropertyHolder) {
        Property[] props = ((PropertyHolder) d).getProperties();
        PropertyUtils.addInlineProperties(caption, props);
        Property style = PropertyUtils.getInlineProperty(props, PropertyUtils.STYLE_PROPERTY);
        if (style != null) {
          String value = style.getValue().trim();
          if (value.length() > 0)
            elem.setAttribute(PropertyUtils.STYLE_PROPERTY, value.toLowerCase());
        }
      }

    }

    public void visitPropertyHeading(PropertyHeading v) {
      renderHeading(v);
    }

    public void visitDimension(Dimension v) {
      renderHeading(v);
    }

    public void visitHierarchy(Hierarchy v) {
      renderHeading(v);
    }

    public void visitLevel(Level v) {
      renderHeading(v);
    }

    public void visitMember(Member v) {
      renderMember(v, v.getLabel());
    }

    public void visitProperty(Property v) {
      renderMember(v, v.getValue());
    }

    public void visitEmptyMember(EmptyMember v) {
      renderMember(v, v.getLabel());
    }

    public Element getElem() {
      return elem;
    }

    public void setElem(Element elem) {
      this.elem = elem;
    }
  }

  /**
   * renders a row- or column heading
   */
  public Element build(SBContext sbctx, Span span, boolean even) {
    if (logger.isDebugEnabled())
      logger.debug("build " + span);
    
    RenderSwitch renderSwitch = new RenderSwitch(sbctx);
    
    Visitable v = span.getObject();
    
    v.accept(renderSwitch);
    Element elem = renderSwitch.getElem();
    for (Iterator it = table.clickableIterator(); it.hasNext();)
      ((ClickableMember) it.next()).decorate(sbctx, span.getObject());
    return elem;
  }

}
@


1.3.2.1
log
@* merged focus changes of jpivot into focus_1_6_0
@
text
@a16 2
import mondrian.rolap.RolapMember;

a19 1
import com.tonbeller.jpivot.mondrian.MondrianMember;
d77 3
a79 5

      String captionText = retrieveCaptionForMondrianMember(d, label);

      caption.setAttribute(CAPTION, captionText);
      sbctx.setCaption(caption, captionText);
a93 12
    private String retrieveCaptionForMondrianMember(Displayable d, String label) {
		if (d instanceof MondrianMember) {
			mondrian.olap.Member monMember = ((MondrianMember) d).getMonMember();
			if(monMember instanceof RolapMember && monMember.isCalculatedInQuery()) {
				final String caption = (String) ((RolapMember) monMember).getPropertyValue("CUSTOM_CAPTION");
				if(caption != null && caption.length() > 0)
					return caption;
			}
		}
		return label;
	}

@


1.2
log
@Synchronized with Tonbeller CVS:
  * Supports Mondrian 2.x API
  * Added BEA / Websphere Support
  * More tags in wcf tag library
  * Bugfixes
@
text
@a33 1
import com.tonbeller.wcf.controller.RequestContext;
a43 1
  RenderSwitch renderSwitch = new RenderSwitch();
d60 5
d69 3
a71 1
      caption.setAttribute(CAPTION, d.getLabel());
d74 1
a74 1
    void renderMember(Displayable d) {
d77 3
a79 1
      caption.setAttribute(CAPTION, d.getLabel());
d111 1
a111 1
      renderMember(v);
d115 1
a115 1
      renderMember(v);
d119 1
a119 1
      renderMember(v);
a130 12
  public void startBuild(RequestContext context) {
    super.startBuild(context);
    logger.info("start build");
  }

  public void stopBuild() {
    // avoid memory leak
    renderSwitch.setElem(null);
    logger.info("stop build");
    super.stopBuild();
  }

d134 1
a134 1
  public Element build(Span span, boolean even) {
d137 3
d141 1
d145 1
a145 1
      ((ClickableMember) it.next()).decorate(elem, span.getObject());
@


1.1
log
@initial version
@
text
@d11 1
a11 1
 * 
d17 1
d22 1
d34 1
d37 1
a37 1
 * renders a row or column heading. Creates a DOM Element from a Member, Hierarchy, 
d39 1
a39 1
 * 
d46 1
d111 4
d118 1
d123 6
a128 1
  
a129 1
    super.stopBuild();
d132 2
d140 2
@


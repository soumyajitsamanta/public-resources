head	1.2;
access;
symbols
	jpivot_1_8_0:1.2
	focus_1_6_0:1.1.0.6
	jpivot_1_7_0:1.2
	jpivot_1_6_0:1.1
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.01.19.15.00.32;	author remberson;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.51;	author avix;	state Exp;
branches;
next	;


desc
@@


1.2
log
@As of 01/10/07 two Mondrian classes that form part of its public API
where changed, specifically, mondrian.olap.Position and
mondrian.olap.Axis.
The build.xml file is changed because there are new jar files
required from the jpivot_repository/mondrian-HEAD directory.
Lastly, in MondrianOlapModelTag schema urls are now surrounded by
quotes so that things like ;jsessionid values can be included.
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 * 
 */
package com.tonbeller.jpivot.mondrian;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import com.tonbeller.jpivot.olap.query.PositionBase;

/**
 * MondrianPosition is an adapter class for the Mondrian Position.  
 */
public class MondrianPosition extends PositionBase {

  mondrian.olap.Position monPosition;
  MondrianModel model;
  private int iAxis; // Axis ordinal for result axis

  /**
   * Constructor
   * create the array of members
   * @@param monPosition corresponding Mondrian Position
   * @@param model MondrianModel
   */
  MondrianPosition(mondrian.olap.Position monPosition, int iAxis, MondrianModel model) {
    super();
    this.monPosition = monPosition;
    this.model = model;
    this.iAxis = iAxis;
    // extract the members
    List l = new ArrayList();
    Iterator mit = monPosition.iterator();
    while (mit.hasNext()) {
      mondrian.olap.Member monMember = (mondrian.olap.Member) mit.next();
      l.add(model.lookupMemberByUName(monMember.getUniqueName()));
    }
    members = (MondrianMember[]) l.toArray(new MondrianMember[l.size()]);
  }

  /**
   * get the Mondrian Members for this Axis Position
   * @@return Array of Mondrian members
  mondrian.olap.Member[] getMonMembers() {
  this is not used anywhere
    return monPosition.getMembers();
  }
   */

  /**
   * Returns the iAxis.
   * @@return int
   */
  int getAxis() {
    return iAxis;
  }

} // MondrianPosition
@


1.1
log
@initial version
@
text
@d15 3
d41 5
a45 4
    mondrian.olap.Member[] monMembers = monPosition.getMembers();
    members = new MondrianMember[monMembers.length];
    for (int j = 0; j < monMembers.length; j++) {
      members[j] = model.lookupMemberByUName(monMembers[j].getUniqueName());
d47 1
a52 1
   */
d54 1
d57 1
@


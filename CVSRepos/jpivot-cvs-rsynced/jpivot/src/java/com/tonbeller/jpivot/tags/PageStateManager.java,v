head	1.2;
access;
symbols
	jpivot_1_8_0:1.2
	focus_1_6_0:1.2.0.2
	jpivot_1_7_0:1.2
	jpivot_1_6_0:1.2
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.11.09.13.25.44;	author avix;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.09.21.47.54;	author avix;	state Exp;
branches;
next	;


desc
@@


1.2
log
@synchronized with tonbeller cvs
@
text
@package com.tonbeller.jpivot.tags;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * @@author av
 * @@since 15.02.2005
 */
public class PageStateManager implements StateManager {
  Map map = new HashMap();
  State current;
  StateLogger logger = new Log4jStateLogger();

  void showCurrent() throws Exception {
    if (current != null) {
      logger.show(current);
      current.show();
    }
  }
  
  void hideCurrent() throws Exception {
    if (current != null) {
      logger.hide(current);
      current.hide();
    }
  }
  
  public void initializeAndShow(State next) throws Exception {
    hideCurrent();
    
    // remove state with same name from map
    State prev = (State) map.get(next.getName());
    if (prev != null) {
      logger.destroy(prev);
      prev.destroy();
    }

    map.put(next.getName(), next);
    logger.initialize(next);
    next.initialize();
    current = next;
    showCurrent();
  }

  /**
   * makes the named state the visible one
   */
  public void showByName(String name) throws Exception {
    State s = (State) map.get(name);
    if (s == null) {
      logger.error("could not find state for " + name);
      return;
    }
    if (current != s) {
      hideCurrent();
      current = s;
      showCurrent();
    }
  }

  /**
   * removes and destroys all states
   */
  public void destroyAll() throws Exception {
    hideCurrent();
    current = null;
    for (Iterator it = map.values().iterator(); it.hasNext();) {
      State s = (State) it.next();
      logger.destroy(s);
      s.destroy();
    }
    map.clear();
  }

  /**
   * removes and destroys the named state
   */
  public void destroyByName(String name) throws Exception {
    State s = (State) map.get(name);
    if (s == null) {
      logger.error("query " + name + " not found");
      return;
    }
    if (s == current) {
      hideCurrent();
      current = null;
    }
    logger.destroy(s);
    s.destroy();
    map.remove(name);
  }

  public StateLogger getLogger() {
    return logger;
  }

  public void setLogger(StateLogger logger) {
    this.logger = logger;
  }

}
@


1.1
log
@.
@
text
@a6 2
import org.apache.log4j.Logger;

d14 1
a14 1
  private static final Logger logger = Logger.getLogger(PageStateManager.class);
d17 2
a18 1
    if (current != null)
d20 1
d24 2
a25 1
    if (current != null)
d27 1
d35 2
a36 1
    if (prev != null)
d38 1
d41 1
d71 1
d90 1
d95 8
@


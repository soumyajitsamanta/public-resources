head	1.1;
access;
symbols
	focus_1_6_0:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.05.19.06.10.20;	author kunarief;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2008.05.19.06.10.20;	author kunarief;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file RowMemberRemover.java was initially added on branch focus_1_6_0.
@
text
@@


1.1.2.1
log
@* adding feature for hidden member selection
@
text
@a0 150
package com.tonbeller.jpivot.util;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.w3c.dom.Element;

public class RowMemberRemover {

	private final String CAPTION = "caption";
	private final String EMPTY_STRING = "";

	private final String ROWSPAN = "rowspan";
	private final String ROW_HEADING = "row-heading";

	private Element body;

	public void remove(Element elem, String rowHeadingCaption) {
		Element head = (Element) elem.getFirstChild();
		body = (Element) head.getNextSibling();

		// get all rows with the selected caption
		List rowList = getRowsWithCaption(rowHeadingCaption);
		if (rowList.size() == 0)
			return;

		int captionRowspan = getRowspan((Element) rowList.get(0));

		// get all children
		List childrenList = new ArrayList();
		for (Iterator iterator = rowList.iterator(); iterator.hasNext();) {
			Element row = (Element) iterator.next();
			Element sibling = (Element) row.getNextSibling();
			while (sibling != null && (captionRowspan > getRowspan(sibling))) {
				childrenList.add(sibling);
				sibling = (Element) sibling.getNextSibling();
			}
		}

		// remove all children
		removeChildRows(childrenList);
		// remove rowList
		removeChildRows(rowList);
		// recalculate all rowspan
		recalculateRowspan();
	}

	/**
	 * recalculate all rowspan of rows in the body
	 */
	private void recalculateRowspan() {
		Element row = (Element) body.getFirstChild();
		while (row != null) {
			Element rowheading = (Element) row.getFirstChild();
			while (rowheading != null) {
				if (ROW_HEADING.equals(rowheading.getTagName())) {
					int childCount = calculateChildCount(rowheading);
					if (childCount > 1)
						rowheading.setAttribute(ROWSPAN, EMPTY_STRING + childCount);
				}
				rowheading = (Element) rowheading.getNextSibling();
			}
			row = (Element) row.getNextSibling();
		}
	}

	/**
	 * @@return the count of all child rows of <code>rowheading</code>
	 */
	private int calculateChildCount(Element rowheading) {
		// the level of rowheading counted from the
		// bottom of the tree (ie. level 1 is lowest)
		int level = rowheadingLevel(rowheading);
		int childCount = 1; // current row is counted
		Element row = (Element) rowheading.getParentNode();
		Element sibling = (Element) row.getNextSibling();
		// calculate all next sibling rows that has level under current row
		while ((sibling != null)
				&& (level > rowheadingLevel((Element) sibling.getFirstChild()))) {
			childCount++;
			sibling = (Element) sibling.getNextSibling();
		}
		return childCount;
	}

	private void removeChildRows(List list) {
		// remove row in the list
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			Element row = (Element) iterator.next();
			if (row != null)
				body.removeChild(row);
		}
	}

	private int getRowspan(Element row) {
		Element rowheading = (Element) row.getFirstChild();
		while (rowheading != null) {
			if (ROW_HEADING.equals(rowheading.getTagName())) {
				return getRowspanOfRowheading(rowheading);
			}
			rowheading = (Element) rowheading.getNextSibling();
		}
		return 0;
	}

	private int getRowspanOfRowheading(Element rowheading) {
		if (ROW_HEADING.equals(rowheading.getTagName())) {
			Integer rowspan = new Integer(rowheading.getAttribute(ROWSPAN));
			return rowspan.intValue();
		}
		return 0;
	}

	private List getRowsWithCaption(String caption) {
		List captionList = new ArrayList();
		Element row = (Element) body.getFirstChild();
		while (row != null) {
			if (rowHasCaption(row, caption))
				captionList.add(row);
			row = (Element) row.getNextSibling();
		}
		return captionList;
	}

	private boolean rowHasCaption(Element row, String caption) {
		Element rowheading = (Element) row.getFirstChild();
		while (rowheading != null) {
			if (ROW_HEADING.equals(rowheading.getTagName())) {
				Element captionTag = (Element) rowheading.getFirstChild()
						.getNextSibling();
				if (caption.equals(captionTag.getAttribute(CAPTION)))
					return true;
			}
			rowheading = (Element) rowheading.getNextSibling();
		}
		return false;
	}

	private int rowheadingLevel(Element rowheading) {
		int level = 0;
		while (rowheading != null) {
			if (ROW_HEADING.equals(rowheading.getTagName()))
				level++;
			rowheading = (Element) rowheading.getNextSibling();
		}
		return level;
	}

}
@


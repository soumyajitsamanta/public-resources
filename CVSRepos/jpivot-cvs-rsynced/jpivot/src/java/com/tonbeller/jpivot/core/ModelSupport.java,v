head	1.3;
access;
symbols
	jpivot_1_8_0:1.2
	focus_1_6_0:1.2.0.2
	jpivot_1_7_0:1.2
	jpivot_1_6_0:1.2
	jpivot_1_5_0:1.1.0.4
	Root_jpivot_1_5_0:1.1
	mondrian_xmla_2005_08_25:1.1.0.2
	sourceforge_sync:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2009.12.18.19.44.29;	author willgorman;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.09.13.25.42;	author avix;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.05.14.19.54;	author avix;	state Exp;
branches;
next	;


desc
@@


1.3
log
@renamed getBookmarkState to retrieveBookmarkState so that JPivot works with beanutils-1.8
@
text
@/*
 * ====================================================================
 * This software is subject to the terms of the Common Public License
 * Agreement, available at the following URL:
 *   http://www.opensource.org/licenses/cpl.html .
 * Copyright (C) 2003-2004 TONBELLER AG.
 * All Rights Reserved.
 * You must accept the terms of that agreement to use this software.
 * ====================================================================
 *
 * 
 */
package com.tonbeller.jpivot.core;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;

/**
 * Default implementation of a model
 * @@author av
 */

public class ModelSupport implements Model {

  private Collection listeners = new ArrayList();
  private Map extensionMap = new HashMap();
  private Locale locale;
  private Model decoratedModel;

  public ModelSupport() {
    decoratedModel = this;
  }
  
  /**
   * clears all references to extensioins (to avoid memory leaks) 
   */
  public void destroy() {
    listeners.clear();
    extensionMap.clear();
    locale = null;
    decoratedModel = null;
  }

  /**
   * @@see com.tonbeller.jpivot.model.Model#getFeature(String)
   */
  public Extension getExtension(String id) {
    return (Extension) extensionMap.get(id);
  }

  /**
   * returns the extensions
   * @@see Extension
   */
  public Map getExtensions() {
    return extensionMap;
  }

  /**
   * adds a Feature to this model. Used by ModelFactory.
   */
  public void addExtension(Extension extension) {
    extensionMap.put(extension.getId(), extension);
    extension.setModel(this);
    decoratedModel = extension.decorate(decoratedModel);
  }

  /**
   * returns null
   */
  public Object retrieveBookmarkState(int levelOfDetail) {
    return null;
  }

  /**
   * does nothing
   */
  public void setBookmarkState(Object state) {
  }

  /**
   * @@see com.tonbeller.jpivot.core.Model#addModelChangeListener(ModelChangeListener)
   */
  public void addModelChangeListener(ModelChangeListener l) {
    listeners.add(l);
  }

  /**
   * @@see com.tonbeller.jpivot.core.Model#removeModelChangeListener(ModelChangeListener)
   */
  public void removeModelChangeListener(ModelChangeListener l) {
    listeners.remove(l);
  }

  public void fireModelChanged() {
    fireModelChanged(new ModelChangeEvent(this));
  }

  public void fireModelChanged(ModelChangeEvent e) {
    Iterator it = listeners.iterator();
    while (it.hasNext())
       ((ModelChangeListener) it.next()).modelChanged(e);
  }

  public void fireStructureChanged() {
    fireStructureChanged(new ModelChangeEvent(this));
  }

  public void fireStructureChanged(ModelChangeEvent e) {
    Iterator it = listeners.iterator();
    while (it.hasNext())
       ((ModelChangeListener) it.next()).structureChanged(e);
  }

  /**
   * Returns the current locale.
   * @@return Locale
   */
  public Locale getLocale() {
    if (locale == null)
      return Locale.getDefault();
    return locale;
  }

  /**
   * Sets the current locale.
   * @@param locale The locale to set
   */
  public void setLocale(Locale locale) {
    this.locale = locale;
  }

  /**
   * Returns a decorated model if any of the extensions decorate this. Returns this otherwise.
   */
  public Model getTopDecorator() {
    return decoratedModel;
  }

  public Model getRootModel() {
    return this;
  }
}
@


1.2
log
@synchronized with tonbeller cvs
@
text
@d75 1
a75 1
  public Object getBookmarkState(int levelOfDetail) {
@


1.1
log
@initial version
@
text
@d144 3
@


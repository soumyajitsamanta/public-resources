head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2003.12.02.12.29.49;	author tuco80;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.10.15.15.55;	author tuco80;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.07.12.29.03;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.07.10.12.52;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Updated and revised
@
text
@
Demo transformation
-------------------

Try $BEEDIR/client/demo transformation:

You will need working MySQL database to try this Demo example.

1) Execute $BEEDIR/client/demo/init.sql under your MySQL root's account
   This will setup database called 'bee' identified by 'honey'
   and creates database tables. 

   If you do not have root permissions, you can delete database
   and user creation commands in $BEEDIR/demo/init.sql file and overwrite 
   login information in $BEEDIR/demo/task.scheme file.

3) In one terminal, launch dad:

        $bash cd $BEEDIR/dad
        $bash perl dad.pl 2333

4) In second execute demo: 

        $bash cd $BEEDIR/client
        $bash perl task.pl demo task.scheme

See $BEEDIR/client/demo/task.scheme definition file:

This will create two bees: 'pass' and 'find'. 
  o 'pass' opens your /etc/passwd file (don't worry, the only table 
    defined on all systems ;-), greps accounts with $shell specified 
    in task.scheme and sends [login,gcos,uid,shell] to 'find' bee. 
  
  o 'find' bee has two inputs:
       1) [login,gcos,uid,shell] stream from 'pass' and..
       2) names of few shells defined in bee.shell table in your database. 

Bee 'find' will save known shells with user logins to database and 
unknown will dump to the screen.

Visualisation of bees and their inputs and outputs:

               +----------+                        +----------+
               |          | [login,gcos,uid,shell] |          |
       $shell -|   pass   |========================|   find   |=[uid,shell]
               |          |                        |          |
 [/etc/passwd]=|          |- $count         $from -|          |=[gcos,shell]
               |          |                        |          |
               +----------+       [dbi:shell:name]>|          |
                                                   +----------+


Yes, we know, not a very useful ETL process, but it's just demo :-)


@


1.3
log
@Updated docs
@
text
@d53 1
a53 1
Yes, we know, no much usable ETL process, but it's just demo :-)
@


1.2
log
@documentation -- final. no spell checks, no typos check, no grammar check
@
text
@d29 1
a29 1
This will create to bees: 'pass' and 'find'. 
@


1.1
log
@documentation 474 lines
@
text
@d1 55
@


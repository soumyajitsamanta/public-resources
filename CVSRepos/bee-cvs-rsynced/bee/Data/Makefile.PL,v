head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.08.11.06.59.38;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.07.11.06.24;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.2
log
@const-? II
@
text
@use 5.008;
use ExtUtils::MakeMaker;
# See lib/ExtUtils/MakeMaker.pm for details of how to influence
# the contents of the Makefile that is written.

my $ms = ($^O eq 'MSWin32');
                                                                                
my $define   = $ms ? '-DMSDOS' : '';
my $myextlib = $ms ? 'libdata\\libdata$(LIB_EXT)' : 'libdata/libdata$(LIB_EXT)';

WriteMakefile(
    'NAME'			=> 'Data',
    'VERSION_FROM'	=> 'Data.pm', # finds $VERSION
    'PREREQ_PM'		=> {}, # e.g., Module::Name => 1.1
    ($] >= 5.005 ?    ## Add these new keywords supported since 5.005
      (ABSTRACT_FROM => 'Data.pm', # retrieve abstract from module
       AUTHOR		 => 'Martin Sarfy <sarfy@@instrat.cz>') : ()),
    'LIBS'			=> [''], # e.g., '-lm'
    'DEFINE'		=> $define, # e.g., '-DHAVE_SOMETHING'
    'INC'			=> '-I.', # e.g., '-I. -I/usr/include/other'
	'MYEXTLIB' 		=> $myextlib,
	# Un-comment this if you add C files to link with later:
    # 'OBJECT'		=> '$(O_FILES)', # link all the C files too
);
if  (eval {require ExtUtils::Constant; 1}) {
  # If you edit these definitions to change the constants used by this module,
  # you will need to use the generated const-c.inc and const-xs.inc
  # files to replace their "fallback" counterparts before distributing your
  # changes.
  my @@names = (qw(null));
  ExtUtils::Constant::WriteConstants(
                                     NAME         => 'Data',
                                     NAMES        => \@@names,
                                     DEFAULT_TYPE => 'IV',
                                     C_FILE       => 'const-c.inc',
                                     XS_FILE      => 'const-xs.inc',
                                  );

}
else {
  use File::Copy;
  use File::Spec;
  foreach my $file ('const-c.inc', 'const-xs.inc') {
    my $fallback = File::Spec->catfile('fallback', $file);
    copy ($fallback, $file) or die "Can't copy $fallback to $file: $!";
  }
}

sub MY::postamble {
'
$(MYEXTLIB): libdata/Makefile
		cd libdata && $(MAKE) $(PASSTHRU)
';
}  

@


1.1
log
@Data module added (empty)
@
text
@d55 1
@


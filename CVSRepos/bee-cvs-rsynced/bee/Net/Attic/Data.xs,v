head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.10.27.15.12.23;	author numberone;	state dead;
branches;
next	1.1;

1.1
date	2003.10.27.14.58.50;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.2
log
@ok
@
text
@#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include<stdio.h>
#include "libdata/data.h"


MODULE = Data	PACKAGE = Data

Data
listen(pkg,port)
	char*	pkg
	int		port
CODE:
	RETVAL = data_listen(port);
OUTPUT:
	RETVAL

int
accept(server)
	Data	server
CODE:
	RETVAL = data_accept(server);
OUTPUT:
	RETVAL

Data
connect(pkg,host,port)
	char*	pkg
	char*	host
	int		port
CODE:
	RETVAL = data_connect(host,port);
OUTPUT:
	RETVAL

void
send(data,...)
	Data	data
PREINIT:
	int  i;
	STRLEN len;
	void *ptr;
CODE:
	data_send_init(data,items - 1);
	for(i=1;i<items;i++) {
		if(SvOK(ST(i))) {
			ptr = SvPV(ST(i),len);
			data_send_append(data,ptr,len);
		} else {
			data_send_append(data,NULL,0);
		}
	}
	data_send_flush(data);

SV*
recv(data)
	Data	data
PREINIT:
	int	i,columns,len,code,ret;
	void *buff;
PPCODE:
	// are here any data in buffer
	columns = data_is_row(data);

	if(columns == -1) {

		if(data->offset) {
			data->len -= data->offset;
			memmove((char*)data->buffer,
					(char*)data->buffer + data->offset,data->len);
			data->offset = 0;
		}

		// cycle until some row is entirely readed
		do {
			ret = data_recv(data);
			// try again
			columns = data_is_row(data);
			if(columns == -1 && !ret) {
				if(data->len) { 
					printf("EOF: o=%d, l=%d\n",data->offset,data->len);
					exit(23);
				}
				XSRETURN_EMPTY;
			}
		} while(columns == -1);
	}

	// extract row to STACK @@array
	EXTEND(SP,columns);
	for(i=0;i<columns;i++) {
		data->offset += data_extract(data,&buff,&len);
		if(!buff) {
			if(len == -1) PUSHs(&PL_sv_undef);
					 else PUSHs(sv_2mortal(newSViv(len)));
		} else {
			PUSHs(sv_2mortal(newSVpvn(buff,len)));
		}
	}
	if(((unsigned char*)data->buffer)[data->offset++] 
			!= LEN_ENDOFROW) exit(22);

	// ok, row are extracted to STACK now


void
DESTROY(data)
	Data	data
CODE:
	printf("DESTROY\n");
	data_close(data);

@


1.1
log
@Data: files added
@
text
@@


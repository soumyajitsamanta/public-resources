head	1.17;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2003.10.30.10.02.40;	author numberone;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.29.12.26.14;	author numberone;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.23.07.57.39;	author numberone;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.22.12.54.25;	author numberone;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.11.06.53.58;	author numberone;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.10.07.45.13;	author numberone;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.08.17.55.33;	author numberone;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.13.16.16;	author numberone;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.12.23.31.29;	author numberone;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.17.23.38.15;	author numberone;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.05.17.20.41;	author numberone;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.05.15.39.46;	author numberone;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.16.02.18.33;	author numberone;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.15.48.47;	author numberone;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.27.13.54.51;	author numberone;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.26.07.52.42;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.40.58;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.40.58;	author michald;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Msg->call uses select()
@
text
@# $Id: Msg.pm,v 1.16 2003/10/29 12:26:14 numberone Exp $
# Msg.pm
#
# Copyright (c) 2002 Martin Sarfy <xsarfy@@fi.muni.cz>

=head1 NAME

Msg - XML RPC based library for message delivering

=head1 SYNOPSIS

    use Msg;   # server part
    $server = Msg->server("INET",2330);
    $msg = $server->accept(1);
    print $msg->recv(),"\n";
	or
	$msg->serve(@@fx-list);

    use Msg;   # client part
    $msg = Msg->connect("INET",'localhost',2330);
    until($msg->peek()) { sleep 1; print "nothing...\n" }
    $msg->send("huh");
	or
	print $msg->call('fx',$arg1,$arg2);

	my($a,$b) = Msg->socketpair;

=head1 DESCRIPTION

=cut

package Msg;

use Net;
use Frontier::RPC2;

my $xmlrpc = Frontier::RPC2->new(); # 'encoding' => 'ISO-8859-2' );


# FIX: from config
Net->init("./root.pem","./key.pem","bee");

sub select { shift; Net->select(@@_) }
#	print "SLEEP in select\n";
#	sleep(1);
#	return; 
#	shift unless (ref $_[0]);
#	my @@nets = map $_->{net},@@_;
#	foreach(@@nets) {
#		return 12345 if($_->peek);
#	}
#	return Net->select((map $_->{net},@@_));
#}

# server, connect, accept

sub server {
	my $pkg = shift;
	my $net = Net->server(@@_) or die $!;
	
	bless { net => $net }, $pkg;
}

sub accept {
	my $msg = shift;
	my $net = $msg->{net}->accept(@@_);
	return unless (defined $net);

	bless { net => $net }, ref $msg;
}

sub connect {
	my $pkg = shift;
	bless { net => Net->connect(@@_) }, $pkg;
}

sub tie_fd {
	my($pkg,$fd) = @@_;
	print "Msg->tie_fd($fd)\n";
	bless { net => Net->tie_fd($fd) }, $pkg;
}

sub peer { return shift->{net}->peer }
sub port { return shift->{net}->port } 
sub auth { return shift->{net}->auth }
sub sock { return shift->{net}->sock }

sub socketpair {
	my $pkg = shift;
	my($neta,$netb) = Net->socketpair();
	my $a = bless { net => $neta }, $pkg;
	my $b = bless { net => $netb }, $pkg;
	return ($a,$b);
}

# send, peek, recv, call, serve

sub send { return shift->{net}->write(@@_); }
sub peek { return shift->{net}->peek(@@_);  }

# wait for message
sub recv {
	my($msg) = @@_;

# Net.pm:
#	until(my $peek = $msg->peek()) {
#		return undef unless defined $peek;
#	}

	# Net.xs:
	until(my $peek = $msg->peek()) {
# Net.xs:	return undef if($peek < 0);
		return undef if(($peek < 0) or (not defined $peek));
	}

	return $msg->{net}->read();
}

sub call {
	my($msg) = shift;
	my $method = $_[0];
#	print "call() calling '$method'\n";
	$msg->send($xmlrpc->encode_call(@@_)); # eval?
#	print "call() waiting for '$method' result\n";
	until($msg->peek) { Msg->select(); }
	my $request = $msg->recv();
#	print "call() '$method' result received\n";
	return undef unless(defined $request);
	my $result = $xmlrpc->decode($request); # eval
	die "remote error: ".$result->{value}[0]{faultString}
			if($result->{type} eq 'fault');
	return $result->{value}[0];
}

sub serve {
	my($msg,$methods) = @@_;
	my $request = $msg->recv();
	return undef unless(defined $request);
	my $result = $xmlrpc->serve($request,$methods);
	$msg->send($result);
}

#sub close { shift->{net}->close() }


1;

@


1.16
log
@Data -- automatic port allocation
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.15 2003/10/23 07:57:39 numberone Exp $
d125 1
a125 1
	until($msg->peek) { }
@


1.15
log
@FreezeThaw dependency removed
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.14 2003/08/22 12:54:25 numberone Exp $
d84 1
d121 2
d124 1
d127 1
@


1.14
log
@net - select
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.13 2003/08/11 06:53:58 numberone Exp $
a34 1
use FreezeThaw qw(freeze thaw);
@


1.13
log
@merging old version to cvs
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.12 2003/07/10 07:45:13 numberone Exp $
d44 1
a44 2
sub select {
	# DISABLED NOW
d47 2
a48 2
	return; 
	shift unless (ref $_[0]);
d53 2
a54 2
	return Net::select((map $_->{net},@@_));
}
@


1.12
log
@demo example -- apache
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.11 2003/07/08 17:55:33 numberone Exp $
d15 1
a15 1
    $msg->send("huh");
d17 1
a17 1
	print $msg->call('fx',$arg1,$arg2);
d22 1
a22 1
    print $msg->recv(),"\n";
d24 1
a24 1
	$msg->serve(@@fx-list);
@


1.11
log
@send/recv, in C, optimized, LEN_ code, small integers
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.10 2003/06/03 13:16:16 numberone Exp $
d46 2
a47 2
	print "SLEEP in select\n";
	sleep(1);
@


1.10
log
@0.9.1 -- version merge
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.9 2003/03/12 23:31:29 numberone Exp $
d46 2
@


1.9
log
@perl Net library removed
replaced by libNet-1.2
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.8 2003/02/17 23:38:15 numberone Exp $
d44 11
d59 3
a61 1
	bless { net => Net->server(@@_) }, $pkg;
@


1.8
log
@demo certificate + some keys
certs/newkey.sh - script for automated key generation
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.7 2003/02/05 17:20:41 numberone Exp $
d64 6
d72 1
@


1.7
log
@otec deleted
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.6 2003/02/05 15:39:46 numberone Exp $
d41 2
@


1.6
log
@SSL to INET - for testing...
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.5 2002/12/16 02:18:33 numberone Exp $
d63 1
a63 2
sub host { return shift->{net}->peer }
sub user { return shift->{net}->auth }
@


1.5
log
@allow spaces in metadata. README, init.sql initial revision
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.4 2002/11/26 15:48:47 numberone Exp $
d62 3
a64 3
sub peer { return shift->{net}->{peer} }
sub host { return shift->{net}->{host} }
sub user { return shift->{net}->{user} }
d68 1
a68 1
	my($neta,$netb) = Net->socketpair("UNIX");
d82 7
d90 2
a91 1
		return undef unless defined $peek;
d93 1
d100 1
@


1.4
log
@ISO-8859-2 encoding on XML channel
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.3 2002/09/27 13:54:51 numberone Exp $
d38 1
a38 1
my $xmlrpc = Frontier::RPC2->new( 'encoding' => 'ISO-8859-2' );
@


1.3
log
@tablequery, bee->dad msg
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.2 2002/09/26 07:52:42 numberone Exp $
d38 2
a39 1
my $xmlrpc = new Frontier::RPC2;
@


1.2
log
@version merging with my cvs
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.1.1.1 2002/09/24 01:40:58 michald Exp $
d106 1
a106 1
sub close { shift->{net}->close() }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $Id: Msg.pm,v 1.2 2002/08/23 22:43:09 martin Exp $
d110 1
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

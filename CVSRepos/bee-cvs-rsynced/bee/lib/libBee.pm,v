head	1.11;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2004.05.11.18.08.48;	author numberone;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.22.12.55.25;	author numberone;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.11.06.53.58;	author numberone;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.13.16.16;	author numberone;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.12.23.31.30;	author numberone;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.17.23.38.17;	author numberone;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.05.15.39.46;	author numberone;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.13.09.48.31;	author numberone;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.27.13.54.52;	author numberone;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.26.07.52.42;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.40.58;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.40.58;	author michald;	state Exp;
branches;
next	;


desc
@@


1.11
log
@
Support for UNIX sockets in Data library. Runs 2 times faster now :-)

inet: 1M @@ 95s

unix: 1M @@ 47s

Creates pipe in "/tmp/.bee-$$-".(i++), removes them after connection
success (pipe still work)
@
text
@# $Id: libBee.pm,v 1.10 2003/08/22 12:55:25 numberone Exp $
# libBee.pm
#
# Copyright (c) 2002 Martin Sarfy <xsarfy@@fi.muni.cz>

=head1 SYNOPSIS

    use libBee;
    my $job = new libBee;
	
	my $otec = $job->otec($otec,$key,$cert);
	my $bee  = $otec->bee($script);

	$job->letfly; # or $job->cancel

	while($msg = $job->peek) {
		print Dumper $msg;
	}

=cut

package libBee;

use Data::Dumper;

use lib "../lib";
use Net;
use Msg;


# =========================================================
sub new {
	my $pkg = shift;
	bless { @@_ }, $pkg;
}


# =========================================================
# connect to otec
sub otec {
	my $job  = shift;
	my $hash = (ref $_[0] eq 'HASH') ? $_[0] : { @@_ };
	my $otec;

	my $host = $hash->{host} or die "host";
	my $port = $hash->{port};
	($host,$port) = ($`,$1) if(not $port and $hash->{host}=~/\:(\d+)$/);
	die "port" unless($port);

	my $key = "$host\:$port"; # connection caching
	return $job->{otec}->{$key} if(exists $job->{otec}->{$key});

	$otec->{host}  = $host;
	$otec->{port}  = $port;
	$otec->{msg}   = Msg->connect('SSL',$host,$port) or die;
	$otec->{bee}   = ();
	$otec->{queue} = ();

#	die "certificate: this is \`".$otec->{msg}->user."\', \`otec\' excepted" 
#		if($otec->{msg}->user ne 'otec');

	bless $otec,"libBee::otec";
	return $job->{otec}->{$key} = $otec;
}

sub link {
	my($job,$bee1,$output,$bee2,$input) = @@_;

	# host -- defines host to whom will first bee connect
	# unix -- if true, bees are under one dad and should connect
	#         thru UNIX-sockets

	my $listen = $bee2->input($input,
				  url   => 'bee://',
				  host  => $bee2->{otec}->{host},
				  unix  => ($bee1->{otec} == $bee2->{otec}),
				  zip   =>'', # do not zip
				  bf    =>'F4A38E740C2...'); # blowfish key
	die unless $listen;
	$bee1->output($output,url=>'bee://',listen=>$listen);
}

# =========================================================
package libBee::otec;

use Data::Dumper;

#sub newbee { shift; return new libBee::bee(@@_) }

sub bee {
	my($otec,$name,$script) = @@_;

#	print "call('bee','$name'...)\n";
	my $id = $otec->{msg}->call('bee',$name,$script);
	die "could not create bee $name\n" unless $id;

	bless { 
		id   => $id, 
		name => $name,
		otec => $otec, 
	}, "libBee::bee";
}

sub tables		{ shift->{msg}->call('tables',@@_); }
sub tablequery	{ shift->{msg}->call('tablequery',@@_); }
sub fields		{ shift->{msg}->call('fields',@@_); }
sub summary		{ shift->{msg}->call('summary',@@_); }


sub message {
	my($otec,$bee,$message) = @@_;
	my $queue = $otec->{msg}->call('queue');
	push @@{$otec->{queue}},@@$queue;
	@@{$otec->{queue}} = grep { defined $_ } @@{$otec->{queue}};

	foreach(@@{$otec->{queue}}) {
#		print "message: ".$_->{message}."\n";
		if($_->{bee} eq $bee->{id} and $_->{message} eq $message) {
			my $found = $_;
			$_ = undef;
			return $found;
		}
	}

	return undef;
}

sub wait {
	my $otec = shift;
	my @@bee = @@_;
	my $live;

	do {
		$live = 0;
		foreach(@@bee) {
			next unless $_;
			$_ = undef if($otec->message($_,'landed'));
			$live++;
		}

		if($live) {
			print "waiting.. ($live alive)\n";
			sleep 1;
		}
	} while($live);
}


sub close { shift->{msg}->close() }

# =========================================================
package libBee::bee;

sub input {  shift->call('input',@@_); }

sub output { shift->call('output',@@_); }

sub letfly { shift->call('letfly',@@_); }

sub result { shift->call('result',@@_); }

sub call {
	my $bee = shift;
	my $fx  = shift;
	return $bee->{otec}->{msg}->call($fx,$bee->{id},@@_); 
}


1;
@


1.10
log
@fix
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.9 2003/08/11 06:53:58 numberone Exp $
d68 5
d75 2
a76 4
				  ihost => $bee2->{otec}->{host},
				  iport => $bee2->{otec}->{port},
				  ohost => $bee1->{otec}->{host},
				  oport => $bee1->{otec}->{port},
@


1.9
log
@merging old version to cvs
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.8 2003/06/03 13:16:16 numberone Exp $
a166 1

@


1.8
log
@0.9.1 -- version merge
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.7 2003/03/12 23:31:30 numberone Exp $
d90 1
a90 1
	print "call('bee','$name'...)\n";
@


1.7
log
@perl Net library removed
replaced by libNet-1.2
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.6 2003/02/17 23:38:17 numberone Exp $
d42 1
a43 1
	my $hash = (ref $_[0] eq 'HASH') ? $_[0] : { @@_ };
@


1.6
log
@demo certificate + some keys
certs/newkey.sh - script for automated key generation
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.5 2003/02/05 15:39:46 numberone Exp $
d88 1
a88 4
	my($otec,$name,$input,$output,$script_p) = @@_;

	$input  = [] unless defined $input;
	$output = [] unless defined $output;
d91 2
a92 3
	my $id = $otec->{msg}->call('bee',$name,
						$input,$output,$$script_p);
	die unless defined $id;
@


1.5
log
@SSL to INET - for testing...
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.4 2002/11/13 09:48:31 numberone Exp $
d55 1
a55 2
#	$otec->{msg}   = Msg->connect('SSL',$host,$port,$certfile,$keyfile) or die;
	$otec->{msg}   = Msg->connect('INET',$host,$port) or die;
@


1.4
log
@modified format of task xml definition - 'id' tags removed
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.3 2002/09/27 13:54:52 numberone Exp $
d55 2
a56 1
	$otec->{msg}   = Msg->connect('SSL',$host,$port,$certfile,$keyfile) or die;
d60 2
a61 2
	die "certificate: this is \`".$otec->{msg}->user."\', \`otec\' excepted" 
		if($otec->{msg}->user ne 'otec');
d94 1
@


1.3
log
@tablequery, bee->dad msg
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.2 2002/09/26 07:52:42 numberone Exp $
d42 2
a43 1
	my $otec = (ref $_[0] eq 'HASH') ? $_[0] : { @@_ };
d45 3
a47 3
	my $host = $otec->{host} or die "host";
	my $port = $otec->{port};
	($host,$port) = ($`,$1) if(not $port and $otec->{host}=~/\:(\d+)$/);
d54 1
@


1.2
log
@version merging with my cvs
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.1.1.1 2002/09/24 01:40:58 michald Exp $
d49 3
d61 1
d102 4
a105 3
sub tables  { shift->{msg}->call('tables',@@_); }
sub fields  { shift->{msg}->call('fields',@@_); }
sub summary { shift->{msg}->call('summary',@@_); }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $Id: libBee.pm,v 1.5 2002/08/28 21:31:14 martin Exp $
d163 1
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

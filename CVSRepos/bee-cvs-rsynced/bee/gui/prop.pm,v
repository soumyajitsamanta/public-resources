head	1.18;
access;
symbols;
locks; strict;
comment	@# @;


1.18
date	2004.06.09.13.26.43;	author tuco80;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.22.16.29.58;	author tuco80;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.10.14.57.00;	author tuco80;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.06.14.14.44;	author tuco80;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.22.10.02.44;	author tuco80;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.25.10.26.16;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.21.16.17.18;	author tuco80;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.06.12.28.24;	author tuco80;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.20.10.07.00;	author spanhel;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.10.13.10.26;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.08.14.07.20;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.29.11.45.22;	author tuco80;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.22.15.12.40;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.22.09.34.49;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.19.08.27.14;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.18.07.11.30;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.14.11.55.59;	author tuco80;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.14.57.37;	author tuco80;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Fixed fatal bug in creation of Logical Model
@
text
@#-----------------------------------------------------
# Properties Tab
#-----------------------------------------------------
# $Id: prop.pm,v 1.17 2004/03/22 16:29:58 tuco80 Exp $


package prop;
use strict;
use warnings;
use ShopCard;
use DSI;
#require "const.def";
use vars qw($Project $TreeList $Layer $tSchemaC 
			$TabsFont $top $lang @@Changes $VisibleLayer);
my $size = 300;
use Data::Dumper;

my ($DBTypeSel);
my $AdmTab;
my $defLayer = 0;

#-----------------------------------------------------

sub CreatePropPage {

	$AdmTab = $_[0];
    
}
    
#-----------------------------------------------------

sub ClearPropPage {
	foreach ($AdmTab->children) { $_->destroy }	# Clear Admin Tab contents   
}
    
#-----------------------------------------------------

my %PropData;	# hash of temporary properties data

sub UpdateProp {
	my $sel=$TreeList->info('anchor');
	my $pe=$PropData{_P}->{$PropData{_ID}};
	# save old properties
	push (@@Changes, {p=>$PropData{_P}, id=>$PropData{_ID}, cont=>$pe} );
	# set properties in Project Hash
	$pe->{name}=$PropData{name};
	($pe->{description}=$PropData{description}->get('0.0','end'))=~s/[\n\s]+$//;
	# set name in Tree List
	$TreeList->entryconfigure($sel, -text => ($PropData{name}) ? $PropData{name} : "\[$PropData{_ID}\]");
	# set properties in Visible Layer
	if ($Layer->{$VisibleLayer}->{$sel}) {
		$Layer->{$VisibleLayer}->{$sel}->name($pe->{name});
		$Layer->{$VisibleLayer}->{$sel}->desc($pe->{description});
	}
	# updata Canvas Balloons
	&UpdateCanvasBalloons(\$Layer,$tSchemaC);
	Debug::UpToDate(0);

#	&$updProc if ($updProc);
}

#-----------------------------------------------------

  
sub UndoProp {
	my ($p) = pop(@@Changes);
}

my $LastSLSel='';	# last Tree Selection

sub ShowProperties {	#create Admin Form
    my $edit = shift;
	our ($SLSel)=$TreeList->info('anchor');		
	return if ((!$SLSel)||($LastSLSel eq $SLSel));	
	$LastSLSel=$SLSel;
	&ClearPropPage;
	undef $AdmTab;
	my $ObjType=$TreeList->info('data', $SLSel);
	$$edit = Edit->new($ObjType, $AdmTab, $SLSel, \$TreeList ,\$Project);
	$$edit->draw;
	
 }

#-----------------------------------------------------
sub UpDateTree{
    #main::UpdTree();
	my ($path,$name) = @@_;
	$TreeList->entryconfigure($path,-text => $name);
}

#-----------------------------------------------------
sub RefObj {
	
    my $SC = shift; # reference to Shopping Card
    my $L=$$SC->{avL};
    my $R=$$SC->{SelL};
	my $A=\@@{$$SC->{avArr}};
    my $l = '^'.join('$|^',$$L->get(0,'end')).'$|^'.join('$|^',$$R->get(0,'end')).'$';	
    my $GetListProc = $$SC->{GetListProc};
    # $$SC->{avObj}  ... identification of active object: localho/delta/ ..
    my ($obj,$ids) = &$GetListProc($$SC->{avObj},$$SC->{prj},);
    foreach(0 .. $#{@@$obj}) {
	    if ($$obj[$_]!~/$l/){
			$$L->insert('end', $$obj[$_]);	#don't insert if object is already presented in one of lists
			push(@@$A,$$ids[$_]) if $ids;
		}
    }
    $$L->selectionSet(0,'end');	
}

sub UseObj {
    my $SC = shift; # reference to Shopping Card
    my @@Obj;
    my $updProc = $$SC->{'AddListProc'};	
    my $layer = $$SC->{layer};
    my $prj = $$SC->{prj};
    my $tree = $$SC->{tree};
    my $schema = $$SC->{schema};
    my $SL = \@@{$$SC->{selArr}};
    foreach (@@$SL) {
      push(@@Obj,$_);
    };
    main::GetHistory();
    &$updProc($$SC->{avObj},$prj,\@@Obj,$$SC->{layerID});
    main::UpdTree();
} 

# get attributes from tables
sub GetAttr {
  my $av = shift;
  my $prj = shift;
  my @@aux;
  my $exp = qr/$::ltSearch/;
  
 # print "\nEstas son las varas: exp: $exp";
	foreach (keys %{$$prj->{'host'}}) {
		my $host = $_;
		foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
			my $source = $_;
			foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
				my $table = $_;	
				#print "\n tabla:$_";
				my $matches = $::ltKeyName=~/(.*)\$attr(.*)/;
				#print "\n$::ltKeyName";
				my $pre = $1 ? $1 : "";
				my $post = $2 ? $2 : "";
				(my $cut=$_)=~s/$exp//;	    
				#print "\nLT= $::ltName , pre= $pre, post= $post";
				if ($_=~/$exp/) { # only lookup table; con
					#print "\ngoes with attr $cut";
					if ($matches){
						print "\n@@aux,$cut";
						if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$pre.$cut.$post})) {
							push (@@aux,$cut);
							#print "\nstill";
						}
					}
					else{
						if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$::ltKeyName})) {
							push (@@aux,$cut);
							#print "\n else";
						}
					}
				}  
			}
		}
	}
	#print "\n@@aux";
	return (\@@aux,\@@aux);
} 

# 
sub UpdAttr {
	my $h = shift;
	my $prj = shift; # project hash
	my $rSelObj=shift; # reference to array of Selected Attributes   
	my $actL = shift; # active layer
	my $exp;
	my  (@@arrPk, @@arrFk);
	#my $now = eval($::ltName);
	my ($pre,$post) = $::ltName=~/(.*)\$attr(.*)/;
	#print "\nestos??$pre y dos: $post y attr $attr";
	#print "\n exp termino siendo: $::ltKeyName";
	#print "\n A ver si funco el toque maluco: $exp";
	my $matches = $::ltKeyName=~/(.*)\$attr(.*)/;
	my $pre2 = $1 ? $1 : "";
	my $post2 = $2 ? $2 : "";
    print Dumper(@@$rSelObj);
	foreach (@@$rSelObj) {
		my $attr = $_;
		#print "\n\n\natrr $_\n\n\n";
		#print "\n$$prj->{'attr'}";
		undef $$prj->{'attr'}->{$attr}->{'pk'}; # reset pk;     
		$exp = qr/$pre$attr$post/;
		foreach (keys %{$$prj->{'host'}}) {
			my $host = $_;
			foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
				my $source = $_;
				foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
					my $table = $_;	  
					foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
						if ($matches){		
							if (($table=~/$exp/) && ($_ eq $pre2.$attr.$post2)) {
								#if ($_ eq 'id') {	             	       		     
								#print "\nentro con match!!";
								push(@@arrPk,"$host/$source/$table/$_");# if ($table eq "lu_$attr");		     		     		     		     
								$$prj->{'attr'}->{$attr}->{'name'}->{'cz'}=$attr;
								$$prj->{'attr'}->{$attr}->{'name'}->{'en'}=$attr;
								if ($actL && !(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})))  { 
									$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size);     
									$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size);
								}  
							}
							my $r = $pre2.$attr.$post2;	       
							if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$pre.$attr.$post}))) {	
								if (exists($$prj->{'attr'}->{$attr})) { 
									# without the condition above, if  $$prj->{'attr'}->{$att} doesn't exist then

									#if (exists($$prj->{'attr'}->{$att}->{'gui-presentation'}->{$actL})) {

									push(@@arrFk,"$host/$source/$table/$_");		     
									#}
								}  		 
							}
						}
						else{
							if (($table=~/$exp/) && ($_ eq $::ltKeyName)) {
								#if ($_ eq 'id') {	             	       		     
								#print "\nentro sin match!!";
								#print "\nAttr es $attr";
								push(@@arrPk,"$host/$source/$table/$_");# if ($table eq "lu_$attr");		     		     		     		     
								$$prj->{'attr'}->{$attr}->{'name'}->{'cz'}=$attr;
								$$prj->{'attr'}->{$attr}->{'name'}->{'en'}=$attr;
								if ($actL && !(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})))  { 
									$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size);     
									$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size);
								}  
							}
							my $r = $attr.'_'.$::ltKeyName;	       
							if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$pre.$attr.$post}))) {	
								if (exists($$prj->{'attr'}->{$attr})) { 
									# without the condition above, if  $$prj->{'attr'}->{$att} doesn't exist then

									#if (exists($$prj->{'attr'}->{$att}->{'gui-presentation'}->{$actL})) {

									push(@@arrFk,"$host/$source/$table/$_");		     
									#}
								}  		 
							}
						
						}
							       	       	  
					}	    	    
				}  
			}
		}
		my $i=0;
		foreach (@@arrPk) {$$prj->{'attr'}->{$attr}->{'pk'}[$i++]=$_};  	    
		undef @@arrPk;
		$i=0;
		foreach (@@arrFk) {
			$$prj->{'attr'}->{$attr}->{'fk'}[$i++]=$_;        	
		};
		undef @@arrFk;          
	}
	UpdHRelation($rSelObj,$prj, $actL);
} 

sub UpdHRelation {
  	my $rSelObj = shift;
  	my $prj = shift;
  	my $actL = shift;
  	#print Dumper(@@$rSelObj,$actL);
  	foreach (@@$rSelObj) {
     	my $attr = $_;
     	my $fk = $$prj->{'attr'}->{$attr}->{'fk'};
     	foreach (@@$fk) {	 
	 		# relation
	 		my $m = ($_=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);	
	 		my $t=$3;
	 		if ($t) {
	     		if ($t=~/^lu_/) {  # connection between two attributes
		 			$t=~s/^lu_//;
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'name'} = "$attr#$t";
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'description'} = "$attr#$t";
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'cardinality'}='N'; 	
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'optional'}='true';
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'content'}= $t;	
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'cardinality'}='1'; 	
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'optional'}='false';
		 			$$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'content'}= $attr;
		 			if ($actL) {
  		   				$$prj->{'hrelation'}->{"$attr#$t"}->{'gui-presentation'}->{$actL}->{'description'}='' if (exists($$prj->{'attr'}->{$t}->{'gui-presentation'}->{$actL}));
		 			}  
	    		}
	    		else { # connection between attribute and fact
	       			foreach (keys %{$$prj->{'fact'}}) {
		 				if (exists ($$prj->{'host'}->{$1}->{'source'}->{$2}->{'table'}->{$3}->{'column'}->{$_})) {
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'name'} = "$attr#$_";
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'description'} = "$attr#$_";
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'cardinality'}='N'; 	
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'optional'}='true';
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'content'}= $_;	
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'cardinality'}='1'; 	
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'optional'}='false';
		     				$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'content'}= $attr;
		     				if ($actL) {
								$$prj->{'hrelation'}->{"$attr#$_"}->{'gui-presentation'}->{$actL}->{'description'}='' if (exists($$prj->{'fact'}->{$_}->{'gui-presentation'}->{$actL}));
		     				}	  
		 				}	
	    			}	
	   			}
			}  
		}
  	}	  	  
}

# get facts from tables
sub GetFact {
  	my $av = shift;
  	my $prj = shift;
  	my @@aux;
	my $matches = $::ltKeyName=~/(.*)\$attr(.*)/;
	my $pre2 = $1 ? $1 : "";
	my $post2 = $2 ? $2 : "";
  	foreach (keys %{$$prj->{'host'}}) {
    	my $host = $_;
    	foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
      		my $source = $_;
        	foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          		my $table = $_;	  
				my $exp = qr/$::ltSearch/;
	  			if (!($_=~/$exp/)) { # not lookup table
  	    			foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
						if (!($_=~/_id/) && !($_ eq $::ltKeyName)) {		   
	          				push (@@aux,$_);             
	       				}	
	    			}	        
	  			}  
        	}
    	}
  	}
  	return (\@@aux,\@@aux);
} 

# 
sub UpdFact {
	my $h = shift;
	my $prj = shift; # project hash
	my $rSelObj=shift; # reference to array of Selected Facts   
	my $actL = shift; # active layer
	my  @@arrF;
	foreach(@@$rSelObj) {
		my $fact = $_;
		$$prj->{'fact'}->{$fact}->{'name'}->{'cz'}=$fact;
		$$prj->{'fact'}->{$fact}->{'name'}->{'en'}=$fact;
		$$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if ($actL);
		$$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if ($actL);
		foreach (keys %{$$prj->{'host'}}) {
			my $host = $_;
			foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
				my $source = $_;
				foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
					my $table = $_;	  
					foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
						#if (($table=~/^lu_/) && ($_ eq 'id')) {	             
						#if ($_ eq 'fact') {	             		                
						#push(@@arrF,"$host/$source/$table/$_") if ($fact eq $_);				          		      
						#}

						if (!($table=~/^lu_/) && ($_ eq $fact)) {
							push(@@arrF,"$host/$source/$table/$_");	       
							# found fact and added connection between fact and attribute
							foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {
								if ($_=~/_id/) { 
									# probably attribute
									# now it works only for following form "date_id"; not for "date_sale_id"
									(my $tt = $_)=~s/_id_\S*$|_id$//;	# date_id or date_id_sale					 
									if (exists ($$prj->{'attr'}->{$tt})) {
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'name'} = "$tt#$fact";
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'description'} = "$tt#$fact";
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'cardinality'}='N'; 	
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'optional'}='true';
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'content'}= $fact;	
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'cardinality'}='1'; 	
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'optional'}='false';
										$$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'content'}= $tt;
										if ($actL) {
											if (exists($$prj->{'attr'}->{$tt})) {
												if (exists($$prj->{'attr'}->{$tt}->{'gui-presentation'}->{$actL})) {	
													$$prj->{'hrelation'}->{"$tt#$fact"}->{'gui-presentation'}->{$actL}->{'description'}='';   
												}
											}   
										}  
									}
								}
							}
						}
					}	        
				}  
			}
		}
		my $i=0;
		foreach (@@arrF) {$$prj->{'fact'}->{$fact}->{'expr'}[$i++]=$_};        	    
		undef @@arrF;            
	}
} 

sub GetTrig {
	my $av = shift;
	my $prj = shift;
	my @@aux;
	my @@aux2;
	foreach (keys %{$$prj->{trigger}}) {
		push (@@aux,$$prj->{trigger}->{name});
		push (@@aux2,$_);             
	}	     
	return (\@@aux.\@@aux2);
}

sub UpdTrig {
	my $h = shift;
	my $prj = shift; # project hash
	my $rSelObj=shift; # reference to array of Selected Facts   
	my $actL = shift; # active layer
	foreach(@@$rSelObj) {
		$$prj->{trigger}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if ($actL);
		$$prj->{trigger}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if ($actL);
	}  
}

sub GetTrans{
	my $av = shift;
	my $prj = shift;
	my @@aux;
	my @@aux2;
	foreach (keys %{$$prj->{'host'}}) {
		my $host = $_;
		foreach (keys %{$$prj->{'host'}->{$host}->{transformation}}) {
			push (@@aux,$_); 
			push (@@aux2,$$prj->{'host'}->{$host}->{transformation}->{$_}->{name});            
		}
	}	        
	return (\@@aux2,\@@aux);
}

sub UpdTrans {
	my $h = shift;
	my $prj = shift; # project hash
	my $rSelObj=shift; # reference to array of Selected Facts   
	my $actL = shift; # active layer
	my  @@arrF;
	foreach(@@$rSelObj) {
		my $trans = $_;
		foreach (keys %{$$prj->{'host'}}) {
			if(exists($$prj->{host}->{$_}->{transformation}->{$trans})){
				$$prj->{host}->{$_}->{transformation}->{$trans}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if ($actL);
				$$prj->{host}->{$_}->{transformation}->{$trans}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if ($actL);
				#In THEORY there should not exist any other one that
				#will be true, so it makes no sense to keep searching
				last;
			}	        
		}  
	}
}

sub GetConst {
	my $av = shift;
	my $prj = shift;
	my @@aux;
	my @@aux2;
	foreach (keys %{$$prj->{const}}){
		push (@@aux,$$prj->{const}->{name});
		push (@@aux2,$_);             
	}	     
	return (\@@aux,\@@aux2);
}

sub UpdConst {
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Facts   
   my $actL = shift; # active layer
   print "\nEsta es active Layer: $actL";
   foreach(@@$rSelObj) {
		 $$prj->{const}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if ($actL);
		 $$prj->{const}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if ($actL);
   } 
}



my $IDGen=int(rand 199888);
my $IDSt;
my $IDa='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';	# lenght 52
my $IDb=$IDa.'0123456789';	# lenght 62

sub IDGen {	# singular ID generator
# returns singular string (starting with letter) contains:
#   3 chars are representing sequence of ID (with period 199888)
#   4 chars are representing time (with period 171 days)
#   3 chars are representing PID (max PID should be 62**3)
	unless($IDSt) {
		$IDSt = '';
		my $t=time%62**4;	# we are using only part of time information to save string space; resulting 171 days period seems enough to ensure ID singularity
		foreach (62**3, 62**2, 62) {	# we are setting 4 chars string depending on time
			$IDSt .= substr($IDb, int($t/$_), 1);
			$t = $t%$_;
		}
		$IDSt .= substr($IDb, $t, 1);
		$t=$$%62**3;
		foreach (62**2, 62) {	# we are setting 3 chars string depending on PID
			$IDSt .= substr($IDb, int($t/$_), 1);
			$t = $t%$_;
		}
		$IDSt .= substr($IDb, $t, 1);
	}
	if ($IDGen==199888) {$IDGen=0} else {$IDGen++};	# 199888=52*62*62; we are returning about 100000 IDs/s on P4/1.6 GHz into empty loop, so such 3 chars string seems enough to keep sequence

	my $i1 = int($IDGen/3844);	# 3844=62*62
	my $i2 = $IDGen%3844;
	return substr($IDa, $i1, 1).substr($IDb, int($i2/62), 1).substr($IDb, $i2%62, 1).$IDSt;	# we are converting $IDGen to 3 char string in space 'aaa','aab',...,'zzz'; returning string is starting with this string to ensure ID is not starting with number

}

sub rnd {
  my ($n) = @@_;
  my $aux;
  my $a;
  $aux =rand($n)+1;
  $a = substr($aux,0,rindex($aux,"."));
  return ($a);
}    

1;

__END__


@


1.17
log
@Partial fix in "All Layers" ShopCard
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.16 2004/03/10 14:57:00 tuco80 Exp $
d144 1
d148 1
d150 1
d152 1
d155 1
d161 1
d168 2
a169 1
	return (\@@aux);
d174 16
a189 8
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Attributes   
   my $actL = shift; # active layer
   my $exp;
   my  (@@arrPk, @@arrFk);
   
	foreach(@@$rSelObj) {
d191 2
d194 1
a201 9
						#my $now = eval($::ltName);
						my ($pre,$post) = $::ltName=~/(.*)\$attr(.*)/;
						#print "\nestos??$pre y dos: $post";
						#print "\n exp termino siendo: $::ltKeyName";
						$exp = qr/$pre$attr$post/;
						#print "\n A ver si funco el toque maluco: $exp";
						my $matches = $::ltKeyName=~/(.*)\$attr(.*)/;
						my $pre2 = $1 ? $1 : "";
						my $post2 = $2 ? $2 : "";
d205 1
a205 1
								print "\nentro con match!!";
d229 2
a230 1
								print "\nentro sin match!!";
d323 3
d332 2
a333 1
	  			if (!($_=~/^lu_/)) { # not lookup table
d335 1
a335 1
	       				if (!($_=~/_id/) && !($_=~/^id$/)) {		   
d343 1
a343 1
  	return (\@@aux);
d413 1
d415 2
a416 1
		push (@@aux,$_);             
d418 1
a418 1
	return (\@@aux);
d436 1
d440 2
a441 1
			push (@@aux,$_);             
d444 1
a444 1
	return (\@@aux);
d471 4
a474 2
	foreach (keys %{$$prj->{const}}) {
		push (@@aux,$_);             
d476 1
a476 1
	return (\@@aux);
@


1.16
log
@Use id's instead of names internally, it caused problems
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.15 2004/01/06 14:14:44 tuco80 Exp $
d97 1
d101 6
a106 3
    my $obj = &$GetListProc($$SC->{avObj},$$SC->{prj});
    foreach(@@$obj) {
	    $$L->insert('end', $_) if (!/$l/);	#don't insert if object is already presented in one of lists
@


1.15
log
@Small bug with FK search
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.14 2003/12/22 10:02:44 tuco80 Exp $
d81 1
a83 1

a91 3


#-----------------------------------------------------
d115 2
a116 2
    my $SL = $$SC->{SelL};
    foreach ($$SL->get(0,'end')) {
d139 4
d144 10
a153 4
					if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$::ltKeyName})) {
						(my $cut=$_)=~s/$exp//;	    
						push (@@aux,$cut);
					}	        
d186 51
a236 10
						if (($table=~/$exp/) && ($_ eq $::ltKeyName)) {
							#if ($_ eq 'id') {	             	       		     
							#print "\nentro!!";
							push(@@arrPk,"$host/$source/$table/$_");# if ($table eq "lu_$attr");		     		     		     		     
							$$prj->{'attr'}->{$attr}->{'name'}->{'cz'}=$attr;
							$$prj->{'attr'}->{$attr}->{'name'}->{'en'}=$attr;
							if ($actL && !(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})))  { 
								$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size);     
								$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size);
							}  
d238 1
a238 11
						my $r = $attr.'_'.$::ltKeyName;	       
						if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$pre.$attr.$post}))) {	
							if (exists($$prj->{'attr'}->{$attr})) { 
								# without the condition above, if  $$prj->{'attr'}->{$att} doesn't exist then

								#if (exists($$prj->{'attr'}->{$att}->{'gui-presentation'}->{$actL})) {

								push(@@arrFk,"$host/$source/$table/$_");		     
								#}
							}  		 
						}       	       	  
d245 2
a246 2
			undef @@arrPk;
			$i=0;
@


1.14
log
@Added rules for the logical model
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.13 2003/11/25 10:26:16 tuco80 Exp $
d134 1
a134 1
  print "\nEstas son las varas: exp: $exp";
d141 1
a141 1
				print "\n tabla:$_";
d175 2
a176 2
						print "\nestos??$pre y dos: $post";
						print "\n exp termino siendo: $::ltKeyName";
d181 1
a181 1
							print "\nentro!!";
d190 3
a192 4
						my $r = $attr.$::ltKeyName;	       
						if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$pre.$attr.$post}))) {
							(my $att=$table)=~s/$exp//;		
							if (exists($$prj->{'attr'}->{$att})) { 
@


1.13
log
@Fixed bug in language changing, still small detail missing
@
text
@d4 2
a5 1
# $Id: prop.pm,v 1.12 2003/11/21 16:17:18 tuco80 Exp $
d12 3
a14 1
use vars qw($Project $TreeList $Layer $tSchemaC $TabsFont $top $lang @@Changes $VisibleLayer);
d132 3
d140 5
a144 4
				my $table = $_;	  
				if ($_=~/^lu_/) { # only lookup table; con
					if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{'id'})) {
						(my $cut=$_)=~s/^lu_//;	    
d160 1
d162 1
d173 7
a179 1
						if (($table=~/^lu_$attr$/) && ($_ eq 'id')) {	             
d181 1
d185 3
a187 3
							if ($actL)  {   		     
								$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if (!(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})));     
								$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if (!(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})));
d190 3
a192 3
						my $r = $attr.'_id';	       
						if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{"lu_$attr"}))) {
							(my $att=$table)=~s/^lu_//;		
@


1.12
log
@Indentation was awful
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.11 2003/11/06 12:28:24 tuco80 Exp $
d170 2
a171 1
								$$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if (!(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})));     
d286 2
a287 1
		$$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
d354 2
a355 1
		$$prj->{trigger}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
d382 2
a383 1
				$$prj->{host}->{$_}->{transformation}->{$trans}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
d409 2
a410 1
		 $$prj->{const}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
@


1.11
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.10 2003/10/20 10:07:00 spanhel Exp $
d129 16
a144 16
  foreach (keys %{$$prj->{'host'}}) {
    my $host = $_;
    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
      my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          my $table = $_;	  
	  if ($_=~/^lu_/) { # only lookup table; con
  	    if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{'id'})) {
	       (my $cut=$_)=~s/^lu_//;	    
	       push (@@aux,$cut);
	    }	        
	  }  
        }
    }
  }
  return (\@@aux);
d154 45
a198 47
   foreach(@@$rSelObj) {
     my $attr = $_;
     undef $$prj->{'attr'}->{$attr}->{'pk'}; # reset pk;     
     foreach (keys %{$$prj->{'host'}}) {
      my $host = $_;
      foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
        my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
            my $table = $_;	  
	    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
	       if (($table=~/^lu_$attr$/) && ($_ eq 'id')) {	             
               #if ($_ eq 'id') {	             	       		     
		   push(@@arrPk,"$host/$source/$table/$_");# if ($table eq "lu_$attr");		     		     		     		     
		   $$prj->{'attr'}->{$attr}->{'name'}->{'cz'}=$attr;
		   $$prj->{'attr'}->{$attr}->{'name'}->{'en'}=$attr;
		   if ($actL)  {   		     
                      $$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if (!(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})));     
		   }  
	       }
	       	       
	       my $r = $attr.'_id';	       
	       if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{"lu_$attr"}))) {
	         (my $att=$table)=~s/^lu_//;		
		 if (exists($$prj->{'attr'}->{$att})) { 
		   # without the condition above, if  $$prj->{'attr'}->{$att} doesn't exist then
		   
		   #if (exists($$prj->{'attr'}->{$att}->{'gui-presentation'}->{$actL})) {

		     push(@@arrFk,"$host/$source/$table/$_");		     
	           #}
		 }  		 
	       }       	       	  
	    }	    	    
	  }  
        }
      }
     
      my $i=0;
      foreach (@@arrPk) {$$prj->{'attr'}->{$attr}->{'pk'}[$i++]=$_};  	    
      undef @@arrPk;
      $i=0;
      foreach (@@arrFk) {
	$$prj->{'attr'}->{$attr}->{'fk'}[$i++]=$_;        	
      };
      undef @@arrFk;          
   }
   UpdHRelation($rSelObj,$prj, $actL);
a210 1

a211 1

d276 52
a327 46
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Facts   
   my $actL = shift; # active layer
   my  @@arrF;
   foreach(@@$rSelObj) {
     my $fact = $_;
     $$prj->{'fact'}->{$fact}->{'name'}->{'cz'}=$fact;
     $$prj->{'fact'}->{$fact}->{'name'}->{'en'}=$fact;
     $$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
     foreach (keys %{$$prj->{'host'}}) {
      my $host = $_;
      foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
        my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          my $table = $_;	  
	    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
	       #if (($table=~/^lu_/) && ($_ eq 'id')) {	             
	       #if ($_ eq 'fact') {	             		                
		     #push(@@arrF,"$host/$source/$table/$_") if ($fact eq $_);				          		      
	       #}

	       if (!($table=~/^lu_/) && ($_ eq $fact)) {
                  push(@@arrF,"$host/$source/$table/$_");	       
	          # found fact and added connection between fact and attribute
		  foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {
                     if ($_=~/_id/) { 
		        # probably attribute
			# now it works only for following form "date_id"; not for "date_sale_id"
                        (my $tt = $_)=~s/_id_\S*$|_id$//;	# date_id or date_id_sale					 
			if (exists ($$prj->{'attr'}->{$tt})) {
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'name'} = "$tt#$fact";
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'description'} = "$tt#$fact";
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'cardinality'}='N'; 	
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'optional'}='true';
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'content'}= $fact;	
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'cardinality'}='1'; 	
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'optional'}='false';
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'content'}= $tt;
			  if ($actL) {
			    if (exists($$prj->{'attr'}->{$tt})) {
			       if (exists($$prj->{'attr'}->{$tt}->{'gui-presentation'}->{$actL})) {	
				  $$prj->{'hrelation'}->{"$tt#$fact"}->{'gui-presentation'}->{$actL}->{'description'}='';   
			       }
			    }   
			  }  
d329 5
a333 12
			 
		     }
		  }
	       }
	    }	        
	  }  
        }
      }
      my $i=0;
      foreach (@@arrF) {$$prj->{'fact'}->{$fact}->{'expr'}[$i++]=$_};        	    
      undef @@arrF;            
   }
d337 4
a340 4
  my $av = shift;
  my $prj = shift;
  my @@aux;
  	foreach (keys %{$$prj->{trigger}}) {
d343 1
a343 1
  return (\@@aux);
d347 7
a353 7
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Facts   
   my $actL = shift; # active layer
   foreach(@@$rSelObj) {
		 $$prj->{trigger}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
   }  
d357 10
a366 10
  my $av = shift;
  my $prj = shift;
  my @@aux;
  foreach (keys %{$$prj->{'host'}}) {
    my $host = $_;
    foreach (keys %{$$prj->{'host'}->{$host}->{transformation}}) {
      push (@@aux,$_);             
	}
  }	        
  return (\@@aux);
d370 16
a385 16
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Facts   
   my $actL = shift; # active layer
   my  @@arrF;
   foreach(@@$rSelObj) {
     my $trans = $_;
     foreach (keys %{$$prj->{'host'}}) {
      if(exists($$prj->{host}->{$_}->{transformation}->{$trans})){
	  	$$prj->{host}->{$_}->{transformation}->{$trans}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
		#In THEORY there should not exist any other one that
		#will be true, so it makes no sense to keep searching
		last;
	  }	        
	}  
  }
d389 4
a392 4
  my $av = shift;
  my $prj = shift;
  my @@aux;
  	foreach (keys %{$$prj->{const}}) {
d395 1
a395 1
  return (\@@aux);
a404 1
		 print "\nEsto es lo que hay en el arreglo en UpdConst: $_";
@


1.10
log
@expr attribute in fact
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.9 2003/09/10 13:10:26 tuco80 Exp $
d8 1
d69 1
a69 1
        my $edit = shift;
d83 3
a85 1
    main::UpdTree();
d204 48
a251 48
  my $rSelObj = shift;
  my $prj = shift;
  my $actL = shift;
  #print Dumper(@@$rSelObj,$actL);
  foreach (@@$rSelObj) {
     my $attr = $_;
     my $fk = $$prj->{'attr'}->{$attr}->{'fk'};
     foreach (@@$fk) {	 
	 # relation

	 my $m = ($_=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);	

	 my $t=$3;
	 if ($t) {
	     if ($t=~/^lu_/) {  # connection between two attributes
		 $t=~s/^lu_//;
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'name'} = "$attr#$t";
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'description'} = "$attr#$t";
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'cardinality'}='N'; 	
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'optional'}='true';
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'content'}= $t;	
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'cardinality'}='1'; 	
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'optional'}='false';
		 $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'content'}= $attr;
		 if ($actL) {
  		   $$prj->{'hrelation'}->{"$attr#$t"}->{'gui-presentation'}->{$actL}->{'description'}='' if (exists($$prj->{'attr'}->{$t}->{'gui-presentation'}->{$actL}));
		 }  
	     }
	     else { # connection between attribute and fact
	       foreach (keys %{$$prj->{'fact'}}) {
		 if (exists ($$prj->{'host'}->{$1}->{'source'}->{$2}->{'table'}->{$3}->{'column'}->{$_})) {
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'name'} = "$attr#$_";
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'description'} = "$attr#$_";
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'cardinality'}='N'; 	
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'optional'}='true';
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'content'}= $_;	
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'cardinality'}='1'; 	
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'optional'}='false';
		     $$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'content'}= $attr;
		     if ($actL) {
			$$prj->{'hrelation'}->{"$attr#$_"}->{'gui-presentation'}->{$actL}->{'description'}='' if (exists($$prj->{'fact'}->{$_}->{'gui-presentation'}->{$actL}));
		     }	  
		 }	
	       }
	    }
	}  
     }
  }	  	  
d256 20
a275 20
  my $av = shift;
  my $prj = shift;
  my @@aux;
  foreach (keys %{$$prj->{'host'}}) {
    my $host = $_;
    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
      my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          my $table = $_;	  
	  if (!($_=~/^lu_/)) { # not lookup table
  	    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
	       if (!($_=~/_id/) && !($_=~/^id$/)) {		   
	           push (@@aux,$_);             
	       }
	    }	        
	  }  
        }
    }
  }
  return (\@@aux);
d383 5
a387 3
      my $host = $_;
      foreach (keys %{$$prj->{'host'}->{$host}->{transformation}}) {
        $$prj->{host}->{$host}->{tranformation}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     		      
d414 2
@


1.9
log
@Moved IDGen from schema.pl to prop.pm
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.8 2003/09/08 14:07:20 tuco80 Exp $
d283 1
a283 1
     my $fact = $_;    
d297 2
a298 1
	       #}	       
d300 1
d306 1
a306 1
                        (my $tt = $_)=~s/_id_\S*$|_id$//;	# date_id or date_id_sale		
d333 1
a333 1
      foreach (@@arrF) {$$prj->{'fact'}->{$fact}->{'expr'}[$i++]=$_};  	    
@


1.8
log
@Added creation of relations between objects (Hrel,Sign,Rel & Conn)
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.7 2003/08/29 11:45:22 tuco80 Exp $
d401 1
d403 1
d408 32
@


1.7
log
@Deletion of objects almost complete
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.6 2003/08/22 15:12:40 spanhel Exp $
a9 2
#require "test/dbi_mysql.pl";
#require "const.def";
a339 2
  #($self->{ID}=$self->{SEL})=~s|^_TRIG/||;
#	$self->{DATA}=\${$self->{PROJ}}->{trigger};
a350 1
   #my  @@arrF;
d352 1
a352 7
     #my $trig = $_;
     #foreach (keys %{$$prj->{trig}}) {
      	# push(@@arrF,"$_") if ($trig eq $_);
#		 $$prj->{'fact'}->{$fact}->{'name'}->{'cz'}=$fact;
	#	 $$prj->{'fact'}->{$fact}->{'name'}->{'en'}=$fact;
		 $$prj->{trigger}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     		      
   	 #}
a353 3
  # my $i=0;
  # foreach (@@arrF) {$$prj->{'fact'}->{$fact}->{'expr'}[$i++]=$_};  	    
   #undef @@arrF;
a379 1
        #my $trans = $_;
a389 2
  #($self->{ID}=$self->{SEL})=~s|^_TRIG/||;
#	$self->{DATA}=\${$self->{PROJ}}->{trigger};
a400 1
   #my  @@arrF;
d402 2
a403 11
     #my $trig = $_;
     #foreach (keys %{$$prj->{trig}}) {
      	# push(@@arrF,"$_") if ($trig eq $_);
#		 $$prj->{'fact'}->{$fact}->{'name'}->{'cz'}=$fact;
	#	 $$prj->{'fact'}->{$fact}->{'name'}->{'en'}=$fact;
		 $$prj->{const}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     		      
   	 #}
   }  
  # my $i=0;
  # foreach (@@arrF) {$$prj->{'fact'}->{$fact}->{'expr'}[$i++]=$_};  	    
   #undef @@arrF;
@


1.6
log
@FM and LM
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.5 2003/08/22 09:34:49 spanhel Exp $
a432 8
=pod
procedimientos que hacen falta:
getTrig = obtener la lista de los triggers, deberia ser facil!!
updTrig = creo que es para refrescar en la estructura de datos lo que el usuario hizo en el ShopCard

getTransformations, updTransf, getConst, updConst, todas idem a las de arriba	

=cut
@


1.5
log
@fix bug - drag and drop
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.4 2003/08/19 08:27:14 spanhel Exp $
d266 1
a266 1
	       if (!($_=~/_id$/) && !($_=~/^id$/)) {		   
d285 4
a288 1
     my $fact = $_;
d297 3
a299 9
	       if (($table=~/^lu_/) && ($_ eq 'id')) {	             
		     #if (!($table=~/^lu_/)) {
                     # !!!!
		     push(@@arrF,"$host/$source/$table/$_") if ($fact eq $_);
		     #}
		     $$prj->{'fact'}->{$fact}->{'name'}->{'cz'}=$fact;
		     $$prj->{'fact'}->{$fact}->{'name'}->{'en'}=$fact;
		     $$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     		      
	       }
d303 4
a306 2
                     if ($_=~/_id/) { # probably attributes
                        (my $tt = $_)=~s/_id$//;			
d318 1
a318 1
			       if (exists($$prj->{'attr'}->{$tt}->{'gui-presentation'}->{$actL})) {  
@


1.4
log
@changes in loading fyz. and log. model
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.3 2003/08/18 07:11:30 spanhel Exp $
a177 1
  		   #print Dumper($$prj->{'attr'}->{$att});
d180 1
a180 1
		     #print Dumper('push');
a209 2
     #print Dumper($$prj->{'attr'}->{$attr}->{'fk'});
     print Dumper($attr,@@$fk);
@


1.3
log
@fixed the selection of hrelation
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.2 2003/08/14 11:55:59 tuco80 Exp $
d152 1
a152 2
   my  @@arrPk;
   my  @@arrFk;
d155 1
a155 2
     undef $$prj->{'attr'}->{$attr}->{'pk'}; # reset pk;
      
d168 2
a169 2
		   if (!(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})))  {
   		      $$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     
d172 1
a172 1
	       
d175 1
a175 1
	         (my $att=$table)=~s/^lu_//;
d178 6
a183 3
  		   if (exists($$prj->{'attr'}->{$att}->{'gui-presentation'}->{$actL})) {
		     push(@@arrFk,"$host/$source/$table/$_");
	           }
d185 1
a185 3
	       }
	       
	       	  
d196 2
a197 33
	$$prj->{'attr'}->{$attr}->{'fk'}[$i++]=$_;
        # relation
	my $m = ($_=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);	
	my $t=$3;	
	if ($t=~/^lu_/) {
	    $t=~s/^lu_//;
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'name'} = "$attr#$t";
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'description'} = "$attr#$t";
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'cardinality'}='N'; 	
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'optional'}='true';
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'content'}= $t;	
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'cardinality'}='1'; 	
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'optional'}='false';
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'content'}= $attr;
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'gui-presentation'}->{$actL}->{'description'}='' if ($actL);
	}
	else { # connection attribut and facts
	  foreach (keys %{$$prj->{'fact'}}) {
	    if (exists ($$prj->{'host'}->{$1}->{'source'}->{$2}->{'table'}->{$3}->{'column'}->{$_})) {
		$$prj->{'hrelation'}->{"$attr#$_"}->{'name'} = "$attr#$_";
		$$prj->{'hrelation'}->{"$attr#$_"}->{'description'} = "$attr#$_";
		$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'cardinality'}='N'; 	
		$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'optional'}='true';
		$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'content'}= $_;	
		$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'cardinality'}='1'; 	
		$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'optional'}='false';
		$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'content'}= $attr;
		$$prj->{'hrelation'}->{"$attr#$_"}->{'gui-presentation'}->{$actL}->{'description'}='' if ($actL);
	    }	
	  }
	}      	
	
      };  	          
d200 1
d203 52
@


1.2
log
@Added ShopCard for View, trig, transf & const. (only hrelation not selectable)
@
text
@d4 1
a4 1
# $Id: prop.pm,v 1.1 2003/08/08 14:57:37 tuco80 Exp $
a16 1
#my $admTabs;
d31 1
a31 3

	foreach ($AdmTab->children) { $_->destroy }	# Clear Admin Tab contents
    
d70 3
a72 11

	our (@@pl)  = (-pady => 5,-padx => 10);	#pack param
	our (@@plt) = (-expand => "yes",
		      -fill => "both",
		      -padx => 5, -pady => 5,
		      -side => "top");	#pack param for tabs
	our ($frameN, $frameD, $frameID);
		
	our ($SLSel)=$TreeList->info('anchor');
	
	return if ((!$SLSel)||($LastSLSel eq $SLSel));
d75 5
a79 1
	print "se metio en showproperties!! quepor?? \n";
a80 30
	sub AdmTabHeader {	#shows name/description
        	print "esto lo hace prop.pl\n";
		my($AdmTab) = @@_;	# project hash, id, proc for additional updates after button press
		my $p=$PropData{_P};
		my $pe=$p->{$PropData{_ID}};
		if ($SLSel=~/^_LOBJ\/_ATTR/ || $SLSel=~/^_LOBJ\/_FACT/)  {
		   # only attr has following hash:
		   #  ->' 'attr'  'name' => {'$toolbaren' => 'Year','cz' => 'Rok' },                                
		   $PropData{name}=$pe->{name}->{$lang};
		}
		else {
		   $PropData{name}=$pe->{name};
		}  
		
		$frameN = $AdmTab->LabFrame(-label => "Name", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		$frameN->Entry(qw/-relief sunken -width 20/, -textvariable=>\$PropData{name}, -background=>'white')->pack;
		$frameD = $AdmTab->LabFrame(-label => "Description", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		$PropData{description} = $frameD->Scrolled(qw/Text -setgrid true -height 5 -width 40 -wrap word -scrollbars e/, -background=>'white')->pack;
		if ($SLSel=~/^_LOBJ\/_ATTR/ || $SLSel=~/^_LOBJ\/_FACT/)  {
  		    $PropData{description}->insert('0.0', $pe->{description}->{$lang});
		}
		else {
  		    $PropData{description}->insert('0.0', $pe->{description});
		}    

		my $frameID = $AdmTab->Label( -text => $SLSel, -relief => 'groove', -background=>'LightGoldenrod')->pack(@@pl);

		$frameID->form(-top => 5, -left => 5);
		$frameN->form(-top => $frameID, -left => 5);
		$frameD->form(-top => $frameN, -left => 5);
d82 4
a85 379
	}

	my $ObjType=$TreeList->info('data', $SLSel);
	
	
=pod  
	 all this part, they should all be the same
	  therefore the if dissappears completely
	if ($ObjType eq 'CONST') {  #MODIFIED BY DANIEL  08.01.2003!!
		($PropData{_ID}=$SLSel)=~s|^_CONST/||;
		$PropData{_P}=$Project->{const};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{const});
		#my $ax = Edit->new($ObjType, $AdmTab, $SLSel, \$TreeList ,\$Project);
		$ax->draw;
		#&AdmTabHeader($AdmTab,\&upd);
		#print "all good1\n";
		#our ($d)=$Project->{const}->{$PropData{_ID}}->{data};
		#my $frameV = $AdmTab->LabFrame(-label => "Value", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		#$frameV->Entry(qw/-relief sunken -width 40/, -textvariable => \$d, -background=>'white')->pack;
		#print "all good2\n";
		#$frameV->form(-top => $frameD, -left => 5);
		#print "all good 3\n";
		#sub upd {
		#	$Project->{const}->{$PropData{_ID}}->{data}=$d;
		#	$Layer->{$VisibleLayer}->{$SLSel}->value($d);
		#}

	} elsif ($ObjType eq 'CONN') {  #MODIFIED BY DANIEL 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_CONN/||;
		$PropData{_P}=$Project->{connection};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{connection});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'SIGNAL') { #MODIFIED BY DANIEL 08.01.2003!!
		#print 'A';
		($PropData{_ID}=$SLSel)=~s|^_SIGNAL/||;
		$PropData{_P}=$Project->{signal};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{signal});
		$ax->draw;
		#&AdmTabHeader($AdmTab);
		#print 'B';		

	} elsif ($ObjType eq 'REL') {
		($PropData{_ID}=$SLSel)=~s|^_REL/||;
		$PropData{_P}=$Project->{relation};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{relation});
		$ax->draw; 
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'TRIG') { #MODIFIED BY DANIEL 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_TRIG/||;
		$PropData{_P}=$Project->{trigger};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{trigger});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'ATTR') { #MODIFIED BY DANIEL 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_LOBJ/_ATTR/.*/||;
		$PropData{_P}=$Project->{attr};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{attr});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'FACT') { #MODIFIED BY DANIEL	 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_LOBJ/_FACT/||;
		$PropData{_P}=$Project->{fact};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{fact});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'TRAN') { #MODIFIED BY DANIEL 08.01.2003
		my ($host);
		($host,$PropData{_ID})=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{transformation};

		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Input", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Output", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "Triger", -underline => 0);
		my $Tab5=$admTabs->add("tbl5", -label => "Status", -underline => 0);
		
		#-*-*-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.01.2003

		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{transformation});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*-*/
		
		#&AdmTabHeader($Tab1);

	} elsif ($ObjType eq 'TRAN_I') { #MODIFIED BY DANIEL 08.01.2003
		my ($host,$tr,$col)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{transformation}->{$tr}->{input};
		$PropData{_ID}=$col;
		my $r = $PropData{_ID};
		#???? is this ok?
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{transformation}->{$tr}->{input});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'TRAN_O') { #MODIFIED BY DANIEL 08.01.2003
		my ($host,$tr,$col)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{transformation}->{$tr}->{output};
		$PropData{_ID}=$col;
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{transformation}->{$tr}->{output});
		print "before draw\n";
		$ax->draw;
		print "after draw\n";
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'HOST') { #MODIFIED BY DANIEL 08.01.2003
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Data Sources", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Transformations", -underline => 0);

		$PropData{_P}=$Project->{host};
		$PropData{_ID}=$SLSel;
		
		#-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.01.2003
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*/
		#&AdmTabHeader($Tab1);
		#&SelSources($Tab2,'Data Sources',\&DSI::GetSourceList,\&DSI::AddSelectedSources, $SLSel, $PropData{_P}->{$PropData{_ID}}->{source});
		
	} elsif ($ObjType eq 'SRC') { #MODIFIED BY DANIEL 08.01.2003
		my ($host,$src)=($SLSel=~m|^([\w.]+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Tables", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "DBMS Views", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "ETL Views", -underline => 0);

		$PropData{_P}=$Project->{host}->{$host}->{source};
		$PropData{_ID}=$src;
		
		#-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.01.2003 
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{source});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*/
		#&AdmTabHeader($Tab1);

		my $vTabs = $Tab2->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0, -raisecmd => sub{
												     });
		my $all = ShopCard->new($vT1,$top,'Tables',\&DSI::GetTableList,\&DSI::UpdSelectedTables,$SLSel, $PropData{_P}->{$PropData{_ID}}->{table},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Tables',\&RefObj);
		$all->AddButton('R','SELECT','Use selection of Tables',\&UseObj);
                my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			# tr - id of layer
			$i++;
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;			  
			$vT = $vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($PropData{_P}->{$PropData{_ID}}->{table}, $tr);
										$all->ShowAvObj($PropData{_P}->{$PropData{_ID}}->{table});										   						
										});				                     
			$all = ShopCard->new($vT,$top,'Tables',undef,\&DSI::UpdSelectedTables,$SLSel, $PropData{_P}->{$PropData{_ID}}->{table},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
			$all->show();
	        	$all->AddButton('R','SELECT','Use selection of Tables',\&UseObj);		
			
		}

		#my $DBTl = $AdmTab->Label(-text => "Source Type:", -anchor => 'e', -justify => 'right');
		#my @@dbn= (keys %{$DBTypes->{database}});
		#my $DBT = $AdmTab->Optionmenu(-options => \@@dbn, -variable => \$DBTypeSel, -command=>sub{
		
#													});
                my $conn='!Connected';
		my $DBConB; 
 		my $stat;
		$DBConB = $AdmTab->Button(-text => "$conn", 
					  -padx => 10, 
					  -image    => $AdmTab->Pixmap(-file => 'img/stop.xpm'),
					  -command => sub {		 						                                																										
							      if ($stat) {
 								$stat = &DSI::DisConnect2DB($src);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/stop.xpm'));								
							      } 
							      else {
								$stat = &DSI::Connect2DB($host,$src,\$Project);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/run.xpm'));  
							      }
								  
							   })->pack();		
		
	} elsif ($ObjType eq 'TAB') {#Modified by Daniel 08.04.2003
		my ($host,$src,$tbl)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Columns", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Indexes", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "Data", -underline => 0);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{table};
		$PropData{_ID}=$tbl;
		#-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.04.2003 
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{source}->{$src}->{table});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*/
		#&AdmTabHeader($Tab1);

		my $vTabs = $Tab2->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);
		my $all = ShopCard->new($vT1,$top,'Columns',\&DSI::GetColumnList,\&DSI::UpdSelectedColumns,$SLSel, $PropData{_P}->{$PropData{_ID}}->{column},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Columns',\&RefObj);
        	$all->AddButton('R','SELECT','Use selection of Columns',\&UseObj);		
         
		my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			$i++;			
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;
			$vT=$vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($PropData{_P}->{$PropData{_ID}}->{column}, $tr);
										$all->ShowAvObj($PropData{_P}->{$PropData{_ID}}->{column});										   						
										});
			$all = ShopCard->new($vT,$top,'Columns',undef,\&DSI::UpdSelectedColumns,$SLSel, $PropData{_P}->{$PropData{_ID}}->{column},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
			$all->show();
			$all->AddButton('R','SELECT','Use selection of Columns',\&UseObj);
		}
		my $conn='!Connected';
		my $DBConB; 
 		my $stat;
		$DBConB = $AdmTab->Button(-text => "$conn", 
					  -padx => 10, 
					  -image    => $AdmTab->Pixmap(-file => 'img/stop.xpm'),
					  -command => sub {		 						                                																										
							      if ($stat) {
 								$stat = &DSI::DisConnect2DB($src);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/stop.xpm'));								
							      } 
							      else {
								$stat = &DSI::Connect2DB($host,$src,\$Project);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/run.xpm'));  
							      }
								  
							   })->pack();		
		

	} elsif ($ObjType eq 'VIEW') {
		my ($host,$src,$v)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Columns", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Input", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "Data", -underline => 0);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{view};
		$PropData{_ID}=$v;
		&AdmTabHeader($Tab1);

	} elsif ($ObjType eq 'COL') {
		my ($host,$src,$tbl,$col)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Data", -underline => 0);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{table}->{$tbl}->{column};
		$PropData{_ID}=$col;
		&AdmTabHeader($Tab1);
		
	} elsif ($ObjType eq 'VCOL') {
		my ($host,$src,$v,$col)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{view}->{$v}->{column};
		$PropData{_ID}=$col;
		&AdmTabHeader($AdmTab);
		
	} elsif ($ObjType eq 'LAYER') {
                my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		#my $Tab2=$admTabs->add("tbl2", -label => "New Layer", -underline => 0);		
		$PropData{_P}=$Project->{'gui-layer'};
		($PropData{_ID}=$SLSel)=~s|^_LAYER/||;		
		&AdmTabHeader($Tab1);
#		$Tab1->Button(
#	      	        	    -text => 'Save',
#	        		    -font => $ButtonFont,
	#		            -command => sub {
	 #                                           }
		#	     )->pack(-side=>'left', -padx => 5);
#		$Tab1->Button(
	#      	        	    -text => 'Delete',
	 #       		    -font => $ButtonFont,
		#	            -command => sub {
			#	                    }
			 #    )->pack(-side=>'left');

#		&NewLayer($Tab2);		
	} elsif ($ObjType eq 'DIR/_LOBJ') {
	     my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);	
             my $tl = $admTabs->LabFrame(-label => "Entity of Logical Model", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5, -pady => 5);
	     my $sB=$tl->Button(
        	     -text => "Load attributes",
        	     -command => sub{print 'aaa'},
             )->grid(qw/-row 0 -column 0 -sticky nw/);
	     #$sB->{baloon}->attach($sB, -balloonmsg => "Select");
	     $sB=$tl->Button(
        	     -text => "Load ",
        	     -command => sub{print 'aaa'},
             )->grid(qw/-row 0 -column 1 -sticky nw/);
	     $sB=$tl->Button(
        	     -text => "Load Facts",
        	     -command => sub{print 'aaa'},
             )->grid(qw/-row 1 -column 0 -sticky nw/);
	} elsif ($ObjType eq 'DIR/_ATTR') {
		my $vTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);
         	my $all = ShopCard->new($vT1,$top,'Attributes',\&GetAttr,\&UpdAttr,$SLSel, $Project->{'attr'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Attributes',\&RefObj);
		$all->AddButton('R','SELECT','Use selection of Attributes',\&UseObj);
		my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			# tr - id of layer
			$i++;
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;			  
			$vT = $vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($Project->{'attr'}, $tr);
										$all->ShowAvObj($Project->{'attr'});										   						
										});				                     
		        $all = ShopCard->new($vT,$top,'Attributes',\&GetAttr,\&UpdAttr,$SLSel, $Project->{'attr'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
		        $all->show();	
		        $all->AddButton('R','SELECT','Use selection of Attributes',\&UseObj);		
			
		}
	} elsif ($ObjType eq 'DIR/_FACT') {
  	        my $vTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);
         	my $all = ShopCard->new($vT1,$top,'Facts',\&GetFact,\&UpdFact,$SLSel, $Project->{'fact'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Facts',\&RefObj);
		$all->AddButton('R','SELECT','Use selection of Facts',\&UseObj);
		my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			# tr - id of layer
			$i++;
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;			  
			$vT = $vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($Project->{'fact'}, $tr);
										$all->ShowAvObj($Project->{'fact'});										   						
										});				                     
		        $all = ShopCard->new($vT,$top,'Attributes',\&GetFact,\&UpdFact,$SLSel, $Project->{'fact'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
         		$all->show();	
		        $all->AddButton('R','SELECT','Use selection of Facts',\&UseObj);
		}
	}
	
	This the whole if part, now everything should be the same
	=end  text
	
=cut
	
	my $ax = Edit->new($ObjType, $AdmTab, $SLSel, \$TreeList ,\$Project);
	$ax->draw;
	

	
 }
d118 3
a120 6
    &GetHistory;
    &$updProc($$SC->{avObj},$prj,\@@Obj,$$SC->{layerID});				
    &ClearLayer($layer,$$schema);
    $$tree->delete('all');			
    undef $$layer;				    
    &AddProjObjects2List($$prj,$layer);
a164 1
	       #print Dumper($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_});	       
@


1.1
log
@Added prop.pm and selection property of objects
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.17 2003/08/01 09:18:59 spanhel Exp $
d123 1
d736 104
@


head	1.13;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2003.11.20.16.48.03;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.22.09.48.35;	author tuco80;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.08.14.07.20;	author tuco80;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.02.08.17.54;	author tuco80;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.01.14.22.24;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.29.11.45.22;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.21.13.20.48;	author tuco80;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.18.07.11.30;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.13.10.52.28;	author tuco80;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.12.09.07.23;	author tuco80;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.08.14.57.37;	author tuco80;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.20.39.59;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.16;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.16;	author michald;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Position is language dependant
@
text
@#-----------------------------------------------------
# Triger Object
#-----------------------------------------------------
# $Id: DBTrig.pm,v 1.12 2003/09/22 09:48:35 tuco80 Exp $

package DBTrig;
use base Tk::Canvas;
use strict;

my $EntityFont='-*-verdana-bold-r-normal-*-9-*-iso8859-2';
my $uBannerClr = 'OrangeRed2';
my $attrXpad = 4;
my $attrYpad = 12;
my $selBoxWidth = 3;  #width that selection box will have around the object
my $selBoxCol = 'blue'; #fill color of the selection box

##################################################
## the object constructor                       ##
##################################################

sub new {

    my $proto = shift;
    my $id = shift;
    my $name = shift;
    my $desc = shift;
    my $x = shift;
    my $y = shift;

    my $class = ref($proto) || $proto;
    my $self  = {};

    $self->{ID}    = $id;
    $self->{NAME}    = $name;
    $self->{DESC}    = $desc;
    $self->{REL}     = [];	# array of relations
    $self->{LAYERS}  = [1];	# list of layers in which this object is visible
    $self->{CANV_ID} = [];	# list of canvas identifiers [head_text,head_rect,body_rect,...]
    $self->{CANVAS} = '';	# canvas
    $self->{COORDS}  = [$x,$y,$x,$y];	# coords of object outline box

    $self->{TEXT_W}  = 0;	# largest text width
    $self->{SELECTED} = 0;      # To know if the object is selected or not

    bless ($self, $class);
    return $self;

}

##############################################
## methods to access per-object data        ##
##                                          ##
## With args, they set the value.  Without  ##
## any, they only retrieve it/them.         ##
##############################################

sub name {
	my $self = shift;
	if (@@_) { 
    		$self->{NAME} = shift;
		if ($self->{CANV_ID}[1]) {
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -text=>$self->{NAME});
		}
	}
	return $self->{NAME};
}

sub desc {
	my $self = shift;
	if (@@_) { $self->{DESC} = shift }
	return $self->{DESC};
}

sub id{
	my $self = shift;
	if(@@_){
		$self->{ID} = shift;
	}
	return $self->{ID};
}

#Only for compliance of the objects, needed for creations of new relations beteween objects
sub type{
	return 'TRIG';
}

sub selected {
	my $self = shift;
	if (@@_) { $self->{SELECTED} = shift }
	return $self->{SELECTED};
}

sub set_selected{
	my $self = shift;
	$self->{SELECTED} = 1;
	my($x1,$y1,$x2,$y2)=$self->coords();
	my $temp = $selBoxWidth;
	$temp--;
	my $sx1 = $x1-$temp;
	my $sy1 = $y1-$temp;
	my $sx2 = $x2+$temp;
	my $sy2 = $y2+$temp;
	$self->{CANVAS}->coords($self->{CANV_ID}[2], $sx1, $sy1, $sx2, $sy2);
}

sub set_deselected{
	my $self = shift;
	$self->{SELECTED} = 0;
	$self->{CANVAS}->coords($self->{CANV_ID}[2], -10, -10, -10, -10);
	
}

sub value {
	my $self = shift;
	if (@@_) {
		$self->{VALUE} = shift;
		if ($self->{CANV_ID}[1]) {
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -text=>$self->{VALUE});
			my @@w=$self->{CANVAS}->bbox($self->{CANV_ID}[1]);	# check text outline coords
			$self->{TEXT_W}=$w[2]-$w[0];
			my ($x1, $y1, $x2, $y2) = $self->{CANVAS}->coords($self->{CANV_ID}[0]);
			$x1=$x2-$self->{TEXT_W}-$attrXpad*2;
			$self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
			$self->coords($x1, $y1, $x2, $y2);
		}
	}
	return $self->{VALUE};
}

sub coords {
	my $self = shift;
	my ($x1,$y1,$x2,$y2) = @@_;
	if (@@_) {
		$self->{COORDS} = [$x1,$y1,$x2,$y2];
		#$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
	}
	return ($self->{CANV_ID}[0]) ? $self->{CANVAS}->coords($self->{CANV_ID}[0]) : [0,0,0,0];
}

sub getAttrY {
    my $self = shift;
    my $name = shift;
    return ($self->{COORDS}[3]-$self->{COORDS}[1])/2;
}

sub relation {
    my $self = shift;
    my ($id,$edge) = @@_;	# relation id, edge position [0,1] ... first or last
    if (@@_) {
        push (@@{$self->{REL}}, $id);
    }
    return $self->{REL}
}

sub delRelation{
	my $self = shift;
	my ($relID) = @@_;
	my @@newRels;
	foreach (@@{$self->relation}) {	#move all connected relations
		unless ($_->id eq $relID){
			push(@@newRels,$_);
		}
	}
	@@{$self->{REL}}=@@newRels;
}

sub move {
    my $self = shift;
    my $c = shift;	# canvas
    my ($x,$y) = @@_;
    my $tag_name = '_TRIG/'.$self->{ID};
    $c->move('_'.$tag_name, $x, $y);
	if ($self->{SELECTED}){$c->move($self->{CANV_ID}[2], $x, $y);}
    foreach (@@{$self->relation}) {	#move all connected relations
		$_->adjustCoords;
    };
	$self->{COORDS} = $self->{CANVAS}->coords($self->{CANV_ID}[0]);
}

sub draw {
    my $self = shift;
    my $c = shift;	# canvas
    $self->{CANVAS}=$c;
    my ($x1,$y1) = @@{$self->{COORDS}};
    my $tag_name = '__TRIG/'.$self->{ID};
	#This is the selection box which will remain hidden until object is selected
    $self->{CANV_ID}[2]=$c->createOval(-10,-10,-10,-10,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
    $self->{CANV_ID}[0]=$c->createOval(qw/0 0 0 0/, -fill => $uBannerClr, -tags=>[$tag_name,'item']);
    $self->{CANV_ID}[1]=$c->createText(0,0, qw/-anchor c -fill white/,-text=>$self->{NAME},-font=>$EntityFont, -tags=>[$tag_name,'item']);
	   
    my @@w=$c->bbox($self->{CANV_ID}[1]);	# check text outline coords
    $self->{TEXT_W}=$w[2]-$w[0];
    my $x2=$x1+$self->{TEXT_W}+$attrXpad*2;
    my $y2=$y1+$attrYpad*2;
    $c->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
    $c->coords($self->{CANV_ID}[1], ($x1+$x2)/2, ($y1+$y2)/2);
    $self->coords($x1, $y1, $x2, $y2);
	if ($self->{SELECTED}){$self->set_selected();}

}

sub delFromGUI{
	my $self = shift;
	my ($layerID) = @@_;
	$self->clear;
	foreach (@@{$self->relation}) {	#delete all connected relations
		$_->delFromGUI($layerID, $self->{ID});
	};
	return @@{$self->relation};
}

#-----------------------------

sub clear {
	my $self = shift;
	foreach (@@{$self->{CANV_ID}}) {
		$self->{CANVAS}->delete($_);
	}
	$self->{CANV_ID}=();
}

#-----------------------------

1;
@


1.12
log
@fixed select in draw().  DBtransf & DBConn + arity butnot finished
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.11 2003/09/08 14:07:20 tuco80 Exp $
d135 1
a135 1
		$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
d177 1
@


1.11
log
@Added creation of relations between objects (Hrel,Sign,Rel & Conn)
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.10 2003/09/02 08:17:54 tuco80 Exp $
d197 1
@


1.10
log
@Fixed bug in deletion of HRelations, got rid of some unnecesary prints and comments
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.9 2003/09/01 14:22:24 tuco80 Exp $
d80 5
@


1.9
log
@Deletion of Objects Complete
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.8 2003/08/29 11:45:22 tuco80 Exp $
a90 2
	#$self->clear;
	#$self->draw($self->{CANVAS});
d104 1
a104 4
	#$self->clear;
	#$self->draw($self->{CANVAS});
	 #$self->{CANVAS}->delete('tag1');
	$self->{CANVAS}->coords($self->{CANV_ID}[2], 0, 0, 0, 0);
a153 1
	#print ("\n esta es la id de la relacion a borrar: ",$relID);
a156 1
			#print ("\nse hace push de: ",$_->id);
a157 1
		#print ("este es un ID en el arreglo: ", $_->id);
d180 2
a181 8
    #my $sel = $self->{SELECTED};
    #my $positive = 1;
    #if ($sel eq $positive){
	#print "Si se metio tuanis\n";
	#print ($self->{SELECTED},"\n");
	$self->{CANV_ID}[2]=$c->createOval(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
    #}

a188 11
=pod    if ($sel == $positive){
	my $sx1 = $x1-$selBoxWidth;
	my $sy1 = $y1-$selBoxWidth;
	my $sx2 = $x2+$selBoxWidth;
	my $sy2 = $y2+$selBoxWidth;
	#my $sy2 = $y1+(($self->{I_N}+1)*$attrYstep+$attrYpad*2)+$selBoxWidth;
	#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
	#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
	$self->{CANVAS}->coords($self->{CANV_ID}[2], $sx1, $sy1, $sx2, $sy2);
    }
=cut
a195 3
	#first we are only going to delete from gui-layer
	#after that it's just determining wether hash is empty or not
	#and if it is, it must be deleted from project completely
a200 1
		#print ("\nDeleting from project: ",$_);
@


1.8
log
@Deletion of objects almost complete
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.7 2003/08/21 13:20:48 tuco80 Exp $
d159 1
a159 1
	print ("\n esta es la id de la relacion a borrar: ",$relID);
d163 1
a163 1
			print ("\nse hace push de: ",$_->id);
d229 1
a229 1
		print ("\nDeleting from project: ",$_);
@


1.7
log
@+ usage of "SELECTED" tags, move all selected objects at once and selection box with left mouse button instead of right
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.6 2003/08/18 07:11:30 spanhel Exp $
d74 8
d155 15
d218 14
@


1.6
log
@fixed the selection of hrelation
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.5 2003/08/13 10:52:28 tuco80 Exp $
d83 10
a92 2
	$self->clear;
	$self->draw($self->{CANVAS});
d99 3
a101 2
	$self->draw($self->{CANVAS});
	 $self->{CANVAS}->delete('tag1');
d153 1
d165 4
a168 4
    my $sel = $self->{SELECTED};
    my $positive = 1;
    if ($sel eq $positive){
	print "Si se metio tuanis\n";
d170 2
a171 2
	$self->{CANV_ID}[2]=$c->createOval(0,0,0,0,-width=>1, -fill => $selBoxCol,-tags=>['tag1','item']);
    }
d180 1
a180 1
    if ($sel == $positive){
d190 1
a190 1

@


1.5
log
@Selection of objects complete, except relations
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.4 2003/08/12 09:07:23 tuco80 Exp $
d90 1
a90 1
	$self->clear;
d92 2
d160 1
a160 1
	$self->{CANV_ID}[2]=$c->createOval(0,0,0,0,-width=>1, -fill => $selBoxCol,-tags=>[$tag_name,'item']);
@


1.4
log
@Selection of elements in GUI layers, not finished though
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.3 2003/08/08 14:57:37 tuco80 Exp $
d78 14
@


1.3
log
@Added prop.pm and selection property of objects
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.2 2003/04/24 20:39:59 michald Exp $
d14 2
d139 7
d154 10
@


1.2
log
@simple autoplacement of DBConn
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.1.1.1 2002/09/24 01:34:16 michald Exp $
d41 1
d70 6
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id: DBTrig.pm,v 1.2 2002/08/27 19:09:19 michal Exp $
d120 1
a120 1
       $_->moveEdge($tag_name, $x, $y);
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

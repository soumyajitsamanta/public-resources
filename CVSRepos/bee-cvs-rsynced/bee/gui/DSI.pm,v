head	1.20;
access;
symbols;
locks; strict;
comment	@# @;


1.20
date	2004.03.22.16.38.45;	author tuco80;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.22.16.29.58;	author tuco80;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.12.14.55.33;	author tuco80;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.01.07.39.11;	author spanhel;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.22.15.12.39;	author spanhel;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.19.14.32.16;	author spanhel;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.19.08.27.13;	author spanhel;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.18.07.11.30;	author spanhel;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.01.09.18.59;	author spanhel;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.14.11.46;	author spanhel;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.30.16.22.17;	author spanhel;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.26.14.03.35;	author spanhel;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.22.13.55.33;	author spanhel;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.20.16.25.53;	author spanhel;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.16.07.02.43;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.07.14.28.51;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.05.15.36.46;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.13.42.43;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.30.09.57.45;	author spanhel;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.24.20.01.39;	author michald;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Second Partial fix in "All Layers" ShopCard
@
text
@#-----------------------------------------------------
# interface to data sources
#-----------------------------------------------------
# $Id: DSI.pm,v 1.19 2004/03/22 16:29:58 tuco80 Exp $

package DSI;
use strict;
use Data::Dumper;
require "dbi_mysql.pl";
my $size = 300;

sub Connect2DB {
  my $host = shift;
  my $source = shift;
  my $prj = shift;
  my $sqlUser=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
  my $sqlPasswd=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
  my $sqlPort=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};   
  my $stat = &DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort);
  return ($stat);
}

sub DisConnect2DB {  
  my $source = shift;
  &DBDisConnect($source);
  return(0);
}

sub Ping {
  return(&PingDB);
}


sub GetSourceLine {
  my $table = shift;
  my $src = shift;
  my $limit = shift;
  my (@@aux, $SQL);
  $SQL='SELECT * FROM '.$table.' LIMIT '.$limit;
  SQLPrepareFetch($src,'2',$SQL);       	
  my  $i=0;
  my $res;
  while ( my (@@t)=&SQLFetch($src,'2') ) {	   
     #print Dumper(@@t);
     $res->{$i++}=\@@t;
  }   
  &SQLFetchClose($src,'2');
 return (\$res);   
}

sub UpdSelectedTables {
	# add selected tables to $Project hash   - default Layer
	my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
	my $prj = shift; # project hash
	my $rSelObj=shift; # reference to ListBox Selected Tables   (hash reference)   
	my $actL = shift; # active layer
	my $sTable;
	# checking md versus selected list   
	foreach (@@$rSelObj)  {$sTable->{'table'}->{$_}=$_;}; # convert array to HASH
	foreach (keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}})) {
		if (exists($sTable->{'table'}->{$_})) {
			delete($sTable->{'table'}->{$_}) if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}); 
		}
		else {
			# table in md isn't in selected tables
			if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}) {	   
				delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL});
				# also delete {'gui-presentation'} of all columns in the relevant table
				my $t=$_;
				foreach (keys%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$t}->{'column'}}) {
					if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$t}->{'column'}->{$_}->{'gui-presentation'}->{$actL})) {
						delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$t}->{'column'}->{$_}->{'gui-presentation'}->{$actL})
					}
				}
			}
			if (!keys(%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}})) {    	   
				# delete relation !!!!!!
				delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}) if (!$actL);
			}
			if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_})) {
				delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}) if (!$actL);   
			}   
		}
	}      

	foreach (keys( %{$sTable->{'table'}})){     
		if (!exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_})) {	  
			$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'access'}='RO';
			(my $tt=$_)=~s/_/ /g;
			$tt=ucfirst(~s/^lu\s+//ig); 
			$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'name'}=$tt;
			$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'name'}=$_;
			$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'description'}='';	  	  
			$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'tree-mode'}='open';
		}
		if (!$actL) {
			# for default layer columns are get from db connection
			my $col = &GetColumnList("$host/$source/$_",$prj);	
			&UpdSelectedColumns("$host/$source/$_",$prj,$col,$actL);
		}
		else {
			my @@col = keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'column'}};	     	     
			&UpdSelectedColumns("$host/$source/$_",$prj,\@@col,$actL);
		}
		# not for default layer
		$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if ($actL);
		$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if ($actL);
	}
	&UpdRelations($host."/".$source,$prj,$actL,$sTable);
}


sub UpdSelectedColumns {
# add selected columns to $Project hash
   my ($host,$source,$table) = (shift=~m|^([\w.]+)/(\w+)/(\w+)$|);
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Columns   
   my $actL = shift; # active layer       
   my $sColumns;
   foreach (@@$rSelObj)  {$sColumns->{'column'}->{$_}=$_;}; # convert array to HASH
   foreach (keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}})) {
      if (exists($sColumns->{'column'}->{$_})) {
        if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL}) {
	# table already exists in md
        delete($sColumns->{'column'}->{$_});
	}
      }
      else {
       	# table in md isn't in selected tables
	if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL}) {	  
	   delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL});
	}
	# ok or not?
	#column is not display in any layer - delete 
	if (!keys(%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}})) {
    	   delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}) if (!$actL);
	}
	if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_})) {
	  delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}) if (!$actL);   
	}  
      }      
   }     
  my $i=1;   # position in graphic representation
  foreach (keys %{$sColumns->{'column'}}) {           
      if (!exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_})) {	              
         
	 my $colAttr = &GetColProp($host."/".$source."/".$table,$prj,$_);
	 my ($tt,$l,$t);
	 ($t=$$colAttr->{'type'})=~s/\(\d+\)//;
	 ($l=$$colAttr->{'type'})=~s/^.*\((\d+)\).*$/$1/;
	 ($tt=$$colAttr->{'field'})=~s/_/ /g;	
	 $tt=~s/id$/ID/ig;
	 $tt=ucfirst($tt);
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'id'}=$$colAttr->{'field'};
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'name'}=$tt;	 
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'length'}=$l;	 	 
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'type'}=$t;
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'constraint'}->{'type'}='PK' if ($$colAttr->{'key'} eq 'PRI');	 	 	 	      
      }
       if ($actL) {  # not for default layer 	          	 
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL}->{'line'}='';	            
      }	 
   }
   
   if ($actL) {  # not for default layer 	  
      #$i=1;   # position in graphic representation
      foreach (sort keys( %{ $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}})) {  
	 if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL})) {
	   $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL}->{'line'}=$i++;	            
	 }  
      }	 
   }	 
   	          
}


sub UpdRelations {
  my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
  my $prj = shift;
  my $actL = shift;
  my $selT = shift;
  my ($new_id,$t,$tt, $p, $rel_o);  
  print Dumper($selT->{'table'});
  foreach (keys (%{$selT->{'table'}})) {
    $t=$_; # table name
    #if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}) {
       foreach (keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'column'}})) {
	  if (($tt=$_)=~s/_(id)_\S*$|_(id)$//i) {  # maybe relation - column in form e.g. customer_id
	    my $caseID = $1 ? $1 : $2;
		# what about name lu_customer_h ?????
	    #if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{'lu_'.$tt}->{'gui-presentation'}->{$actL})) {
	    my $rel_ex = 0;
	    my $tab_name = '';       
	    # relation between lookup table and fact table
	    if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{'lu_'.$tt})) {
	      $tab_name = 'lu_'.$tt;
	      $new_id=$t.'#'.$_.'@@'.$tab_name.'#id'; #   "faktura#datum_id@@lu_datum#id"	      
	      $rel_ex = 1;
	    }
    	    # relation between two fact tables
	    if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$tt})) {
	      $tab_name = $tt;
              $new_id=$t.'#'.$_.'@@'.$tab_name.'#id'; #   "faktura#datum_id@@lu_datum#id"	      
	      $rel_ex = 1;
	    } 	    
	    # relation between lookup table and fact table OR
	    # relation between two fact tables
	    if ($rel_ex) {              	   	      
	      if (!exists ($$prj->{'relation'}->{$new_id})) {
       	           $new_id=$t.'#'.$_.'@@'.$tab_name.'#id'; #   "faktura#datum_id@@lu_datum#id"
		   $$prj->{'relation'}->{$new_id}->{'description'}='';
        	   $$prj->{'relation'}->{$new_id}->{'name'}=$new_id;	   
		   $$prj->{'relation'}->{$new_id}->{'to'}->{'cardinality'}='N';
		   $$prj->{'relation'}->{$new_id}->{'to'}->{'optional'}='true';	   
  		   $$prj->{'relation'}->{$new_id}->{'to'}->{'content'}="$host/$source/$t/$_";	   		   
		   $$prj->{'relation'}->{$new_id}->{'from'}->{'cardinality'}='1';
		   $$prj->{'relation'}->{$new_id}->{'from'}->{'optional'}='true';
		   $$prj->{'relation'}->{$new_id}->{'from'}->{'content'}="$host/$source/$tab_name/$caseID";	   
	      }
	      if ($actL) {  # not for default layer 	  
	         if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$tab_name}->{'gui-presentation'}->{$actL})) {		   
		   $$prj->{'relation'}->{$new_id}->{'gui-presentation'}->{$actL}->{'description'}='';	
		 }  
              } 		 
	    }
	  }
	}   
  }
}

sub GetTableList {
# returns list of table names      
	my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
	my $prj = shift; # project hash
	my @@aux;
	my @@aux2;
        # osetrit undef hodnoty pswd="", user="root", port="3306"
	my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'tables-query'}->{'content'};					
	SQLPrepareFetch($source,'2',$SQL);       	
	while ( my ($t)=&SQLFetch($source,'2') ) {	   
	   push(@@aux,$t);
	   push(@@aux2,$t);
	}   
	&SQLFetchClose($source,'2');
	return (\@@aux, \@@aux2);
}

sub GetColProp {  
# Get Column properties
   my ($host,$source,$table) = (shift=~m|^([\w.]+)/(\w+)/(\w+)$|);
   my $prj = shift; # project hash
   my $col = shift;
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'column-query'}->{'content'};   
   $SQL=~s/\?Table\?/$table /;
   $SQL=~s/\?Column\?$/$col/;
   SQLPrepareFetch($source,'3',$SQL);       	
   #returns name of columns only
   my ($t,$aux);
   my ($Field,$Type,$Null,$Key,$Default,$Extra)=&SQLFetch($source,'3');
   $t->{'field'}=$Field;
   $t->{'type'}=$Type;
   $t->{'null'}=$Null;
   $t->{'key'}=$Key;
   $t->{'def'}=$Default;
   $t->{'extra'}=$Extra;
   &SQLFetchClose($source,'3');   
   return (\$t);    
}

sub GetColumnList {
# returns list of table columns names
   my ($host,$source,$table) = (shift=~m|^([\w.]+)/(\w+)/(\w+)$|);
   my $prj = shift; # project hash
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'columns-query'}->{'content'};
   #print '------------------------ '.$table.' ------------------------';
   $SQL=~s/\?Table\?$/$table/;
   print Dumper($SQL);
   SQLPrepareFetch($source,'3',$SQL);       	
   #returns name of columns only
   my @@aux;
   my @@aux2;
   while ( my ($Field,$Type,$Null,$Key,$Default,$Extra) = &SQLFetch($source,'3') ) {      
      push(@@aux,$Field);
	  push(@@aux2,$Field);
   }               
   &SQLFetchClose($source,'3');
   return (\@@aux, \@@aux2);
}

sub rnd {
  my ($n) = @@_;
  my $aux;
  my $a;
  $aux =rand($n)+1;
  $a = substr($aux,0,rindex($aux,"."));
  return ($a);
} 


1;
@


1.19
log
@Partial fix in "All Layers" ShopCard
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.18 2003/12/12 14:55:33 tuco80 Exp $
d281 1
d284 1
d287 1
a287 1
   return (\@@aux);
@


1.18
log
@Localization was missing in UpdSelectedTables
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.17 2003/10/01 07:39:11 spanhel Exp $
d52 56
a107 24
# add selected tables to $Project hash   - default Layer
   my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to ListBox Selected Tables   (hash reference)   
   my $actL = shift; # active layer
   my $sTable;
   # checking md versus selected list   
   foreach (@@$rSelObj)  {$sTable->{'table'}->{$_}=$_;}; # convert array to HASH
   foreach (keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}})) {
      if (exists($sTable->{'table'}->{$_})) {
        delete($sTable->{'table'}->{$_}) if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}); 
      }
      else {
      	# table in md isn't in selected tables
   	if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}) {	   
	  delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL});
	  # also delete {'gui-presentation'} of all columns in the relevant table
	  my $t=$_;
	  foreach (keys%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$t}->{'column'}}) {
	    if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$t}->{'column'}->{$_}->{'gui-presentation'}->{$actL})) {
	       delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$t}->{'column'}->{$_}->{'gui-presentation'}->{$actL})
	    }
	  }
	  
d109 1
a109 35
	if (!keys(%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}})) {    	   
	   # delete relation !!!!!!
	   delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}) if (!$actL);
	}
	if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_})) {
	  delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}) if (!$actL);   
	}   
      }
   }      
   
   foreach (keys( %{$sTable->{'table'}})){     
     if (!exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_})) {	  
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'access'}='RO';
	  (my $tt=$_)=~s/_/ /g;
	  $tt=ucfirst(~s/^lu\s+//ig); 
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'name'}=$tt;
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'name'}=$_;
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'description'}='';	  	  
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'tree-mode'}='open';
     }
     if (!$actL) {
   	     # for default layer columns are get from db connection
	     my $col = &GetColumnList("$host/$source/$_",$prj);	
	     &UpdSelectedColumns("$host/$source/$_",$prj,$col,$actL);
	  }
	  else {
	     my @@col = keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'column'}};	     	     
	     &UpdSelectedColumns("$host/$source/$_",$prj,\@@col,$actL);
	     
     }
     # not for default layer
     $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{en}=rnd($size)." ".rnd($size) if ($actL);
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}->{cz}=rnd($size)." ".rnd($size) if ($actL);
   }
   &UpdRelations($host."/".$source,$prj,$actL,$sTable);
d236 1
d242 1
d245 1
a245 1
	return (\@@aux);
@


1.17
log
@log. model
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.16 2003/08/22 15:12:39 spanhel Exp $
d108 2
a109 1
     $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);
d190 3
a192 2
	  if (($tt=$_)=~s/_id_\S*$|_id$//) {  # maybe relation - column in form e.g. customer_id
	    # what about name lu_customer_h ?????
d220 1
a220 1
		   $$prj->{'relation'}->{$new_id}->{'from'}->{'content'}="$host/$source/$tab_name/id";	   
@


1.16
log
@FM and LM
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.15 2003/08/19 14:32:16 spanhel Exp $
d218 1
a218 1
		   $$prj->{'relation'}->{$new_id}->{'from'}->{'content'}="$host/$source/$tab_name /id";	   
@


1.15
log
@view data
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.14 2003/08/19 08:27:13 spanhel Exp $
d189 1
a189 7
          $rel_o = 0;	  
	  if (($tt=$_)=~s/_id_\w*$//) {$rel_o = 1;}
	  if (($tt=$tt)=~s/_id$//) {$rel_o = 1;}	  
	   
	  #print Dumper($_,'   ',$tt);
	  if ($rel_o) {  # maybe relation - column in form e.g. customer_id
	    #print Dumper('aaa');
d192 3
d196 13
a208 2
	      #while (exists($$prj->{'relation'}->{$new_id='c'.rnd(500)})) {}; # generate new id 	              
              $new_id=$t.'#'.$_.'@@lu_'.$tt.'#id'; #   "faktura#datum_id@@lu_datum#id"	   
d210 1
d217 2
a218 2
		   $$prj->{'relation'}->{$new_id}->{'from'}->{'optional'}='true';	   
  		   $$prj->{'relation'}->{$new_id}->{'from'}->{'content'}="$host/$source/lu_$tt/id";	   	   
d221 1
a221 2
	         if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{'lu_'.$tt}->{'gui-presentation'}->{$actL})) {
		   print Dumper($$prj->{'relation'}->{$new_id});
@


1.14
log
@changes in loading fyz. and log. model
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.13 2003/08/18 07:11:30 spanhel Exp $
d33 18
d193 1
a193 1
	  print Dumper($_,'   ',$tt);
d195 1
a195 1
	    print Dumper('aaa');
@


1.13
log
@fixed the selection of hrelation
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.12 2003/08/01 09:18:59 spanhel Exp $
d150 1
a150 1
      foreach (keys %{ $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {  
d165 2
a166 1
  my ($new_id,$t,$tt, $p);  
d171 7
a177 1
	  if (($tt=$_)=~s/_id$//) {  # maybe relation - column in form e.g. customer_id
d195 1
@


1.12
log
@added Edit.pm package
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.11 2003/06/26 14:11:46 spanhel Exp $
d92 1
a92 1
   &UpdRelations($host."/".$source,$prj,$actL);
d164 1
d166 1
a166 1
  foreach (keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}})) {
d187 3
a189 1
	         $$prj->{'relation'}->{$new_id}->{'gui-presentation'}->{$actL}->{'description'}='';	
d241 1
@


1.11
log
@logical and fys. model
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.10 2003/05/30 16:22:17 spanhel Exp $
d9 1
a9 1
require "test/dbi_mysql.pl";
@


1.10
log
@logical model
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.9 2003/05/26 14:03:35 spanhel Exp $
d127 1
a127 1
  foreach (keys %{$sColumns->{'column'}}) {     
d129 1
d214 1
a214 1
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'column-query'}->{'content'};
d236 1
a236 1
   print '------------------------ '.$table.' ------------------------';
@


1.9
log
@change connection to DB, ShopCard - AddButton Function
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.8 2003/05/22 13:55:33 spanhel Exp $
d23 10
d62 3
d114 1
a114 1
	  delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL});
d120 4
a123 1
	}   
d142 11
a152 3
      if ($actL) {  # not for default layer 	  
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL}->{'line'}=$i++;	   
         
d154 2
a155 1
   }   	          
d200 1
a200 1
        SQLPrepareFetch($source,'2',$SQL);       	
d235 1
@


1.8
log
@attributes added into groups (+ color of groups)
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.7 2003/05/20 16:25:53 spanhel Exp $
d12 9
a20 20
sub GetTableList {
# returns list of table names      
	my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
	my $dbConn = shift; # project hash
	my $md = shift; # project hash
	my $aux;
        # osetrit undef hodnoty pswd="", user="root", port="3306"
	my $sqlUser=$dbConn->{'user'}->{'content'};
	my $sqlPasswd=$dbConn->{'password'}->{'content'};
        my $sqlPort=$dbConn->{'port'}->{'content'};
	my $SQL=$md->{'tables-query'}->{'content'};					
	# connection to DB - it's ok?
	&DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort)||die;	
        SQLPrepareFetch($source,'2',$SQL);       	
	while ( my ($t)=&SQLFetch($source,'2') ) {	   
	   $aux->{'obj'}->{$t}=$t;
	}   
	&SQLFetchClose($source,'2');
	&DBDisConnect($source);	
	return (\$aux);
d29 1
d31 1
d33 2
a34 2
      if (exists($$rSelObj->{'obj'}->{$_})) {
        delete($$rSelObj->{'obj'}->{$_}) if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}); 
a54 1
   my $col;   
d56 1
a56 2
   print Dumper(keys( %{$$rSelObj->{'obj'}}));
   foreach (keys( %{$$rSelObj->{'obj'}})){     
d68 1
a68 1
	     $col = &GetColumnList("$host/$source/$_",$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'},$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'});
d72 2
a73 2
	     $col->{'obj'} = $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'column'};
	     &UpdSelectedColumns("$host/$source/$_",$prj,\$col,$actL);
a76 2
#     print 'ahoj '.$actL;
#     print Dumper($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'});
d87 1
a87 1
   my $rSelObj=shift; # reference to ListBox Selected Columns   
d90 1
a90 1
   foreach (keys %{$$rSelObj->{'obj'}})  {$sColumns->{'column'}->{$_}=$_;}; # convert array to HASH
d111 1
a111 2

  foreach (keys %{$$rSelObj->{'obj'}}) {
d113 1
d115 3
a117 3
	 ($t=$$rSelObj->{'obj'}->{$_}->{'type'})=~s/\(\d+\)//;
	 ($l=$$rSelObj->{'obj'}->{$_}->{'type'})=~s/^.*\((\d+)\).*$/$1/;
	 ($tt=$$rSelObj->{'obj'}->{$_}->{'field'})=~s/_/ /g;	
d120 1
a120 1
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'id'}=$$rSelObj->{'obj'}->{$_}->{'field'};
d124 1
a124 1
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'constraint'}->{'type'}='PK' if ($$rSelObj->{'obj'}->{$_}->{'key'} eq 'PRI');	 	 	 	      
a126 2
#         print Dumper($actL);
#         print Dumper($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_});
d168 36
d208 4
a211 11
   my $dbConn = shift; # project hash
   my $md = shift; # project hash
   my $aux;
   #osetrit undef hodnoty pswd="", user="root", port="3306"
   my $sqlUser=$dbConn->{'user'}->{'content'};
   my $sqlPasswd=$dbConn->{'password'}->{'content'};
   my $sqlPort=$dbConn->{'port'}->{'content'};
   my $SQL=$md->{'columns-query'}->{'content'};
   $SQL=~s/\?Table\?$//;
   &DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort)||die;  		
   SQLPrepareFetch($source,'3',$SQL.$table);       	
d213 3
a215 12
   my $t;
   my $u;
   while ( my ($Field,$Type,$Null,$Key,$Default,$Extra)=&SQLFetch($source,'3') ) {      
      $t->{'field'}=$Field;
      $t->{'type'}=$Type;
      $t->{'null'}=$Null;
      $t->{'key'}=$Key;
      $t->{'def'}=$Default;
      $t->{'extra'}=$Extra;
      #push(@@aux,$t);      
      $aux->{'obj'}->{$Field}=$t;
      $t=();
d218 1
a218 2
   &DBDisConnect($source);
   return (\$aux);
@


1.7
log
@tree history, colors of attributs
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.6 2003/05/16 07:02:43 spanhel Exp $
a39 1
   print Dumper(keys( %{$$rSelObj->{'obj'}})); 
@


1.6
log
@adding and removing object from Layers
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.5 2003/05/07 14:28:51 spanhel Exp $
d40 1
a40 1
    
d67 1
d76 1
d84 1
a84 1
	     $col->{'obj'} = $table->{$_}->{'column'};
d89 2
d115 1
a115 1
	  delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL})
d141 4
a144 1
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{$actL}->{'line'}=$i++;	   
@


1.5
log
@schema model
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.4 2003/05/05 15:36:46 spanhel Exp $
a10 3
sub GetSourceList {

}
d14 4
a17 3
        my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
	my $prj = shift; # project hash
	my @@aux;
d19 6
a24 5
	my $sqlUser=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
	my $sqlPasswd=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
        my $sqlPort=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};
	my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'tables-query'}->{'content'};
	&DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort)||die;		
d27 1
a27 1
	   push(@@aux,$t);
d30 2
a31 9
	&DBDisConnect($source);
	return (\@@aux);
}

sub GetTableListL {
  my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
  my $prj = shift; # project hash
  my @@aux = keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}});
  return (\@@aux);      
d34 1
a34 1
sub AddSelectedTables {
d38 1
a38 1
   my $rSelObj=shift; # reference to ListBox Selected Tables      
d40 2
a41 4
   my $sTables;   
   
   foreach (@@$rSelObj)  {$sTables->{'table'}->{$_}=$_;}; # convert array to HASH
   # checking md versus selected list
d43 2
a44 5
      if (exists($sTables->{'table'}->{$_})) {
        if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}) {
	# table already exists in md
        delete($sTables->{'table'}->{$_});
	}
d47 11
a57 3
       	# table in md isn't in selected tables
	if (exists $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}) {	  
	  delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL})
d59 3
a61 3
	# ok or not?
	if (! keys(%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}})) {
    	   delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_});
d65 3
a67 3

   foreach (keys( %{$sTables->{'table'}})){
     
a74 1
  	  &AddSelectedColumns("$host/$source/$_",$prj,&GetColumnList("$host/$source/$_",$prj),$actL);	  	  
d76 12
a87 1
     $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size);	       
d89 1
a89 1
   &AddRelations($host."/".$source,$prj,$actL);
d93 1
a93 14
sub AddSelectedTablesL {
# add selected tables to $Project hash  - next Layers
   my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
   my $prj = shift; # project hash
   my $rSelObj = shift; # reference to ListBox Selected Tables
   my $actL = shift;  # active Layer
   my $sTables;     
   foreach (@@$rSelObj)  {$sTables->{'table'}->{$_}=$_;}; # convert array to HASH      
   foreach (keys( %{$sTables->{'table'}})){
      $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size);
   }
}

sub AddSelectedColumns {
a94 1
# add selected tables to $Project hash  
d98 1
a98 10
   my $actL = shift; # active layer
     
   #my $sqlUser=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
   #my $sqlPasswd=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
   #my $sqlPort=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};
  
   #my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'columns-query'}->{'content'};
   #$SQL=~s/\?Table\?$//;
#   &DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort)||die;		
#   SQLPrepareFetch($source,'1',$SQL.$table);       	
d100 1
d105 1
a105 1
        #delete($sColumns->{'column'}->{$_});
d114 3
a116 2
	if (! keys(%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}})) {
    	   delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_});
d119 2
a120 2
   }    
  
d122 2
a123 4
  #foreach (keys( %{$sColumns->{'column'}})) { 
  foreach (@@$rSelObj) {
      if (!exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}})) {	  
      #if (exists($sColumns->{'column'}->{$Field})) {
d125 3
a127 3
	 ($t=$_->{'type'})=~s/\(\d+\)//;
	 ($l=$_->{'type'})=~s/^.*\((\d+)\).*$/$1/;
	 ($tt=$_->{'field'})=~s/_/ /g;	
d130 10
a139 14
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}}->{'id'}=$_->{'field'};
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}}->{'name'}=$tt;	 
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}}->{'length'}=$l;	 	 
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}}->{'type'}=$t;
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}}->{'constraint'}->{'type'}='PK' if ($_->{'key'} eq 'PRI');	 	 	 	      
      }	   
   }   	      
#   &SQLFetchClose($source,'1');
#   &DBDisConnect($source);   
   my $i=1;     
   foreach (@@$rSelObj) {
    
     $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_->{'field'}}->{'gui-presentation'}->{$actL}->{'line'}=$i++;
   }
d143 1
a143 1
sub AddRelations {
d149 26
a174 28
       $t=$_;
    foreach (keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'column'}})) {
       if (($tt=$_)=~s/_id$//) {  # maybe relation - column in form e.g. customer_id
	 if (exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{'lu_'.$tt})) {
	   #while (exists($$prj->{'relation'}->{$new_id='c'.rnd(500)})) {}; # generate new id 	   
           # not ready yet - check if the ralation exists or not in MD !!!!!!!!!!!!!!!!!	   
	   $new_id=$t.'#'.$_.'@@lu_'.$tt.'#id'; #   "faktura#datum_id@@lu_datum#id"
	   if (!exists ($$prj->{'relation'}->{$new_id})) {
  		print Dumper($new_id);
		$p->{$new_id}->{'description'}='';
        	$p->{$new_id}->{'name'}=$new_id;	   
		$p->{$new_id}->{'to'}->{'cardinality'}='N';
		$p->{$new_id}->{'to'}->{'optional'}='true';	   
  		$p->{$new_id}->{'to'}->{'content'}="$host/$source/$t/$_";	   
             #	   $p->{$new_id}->{'gui-presentation'}->{'id'}=$gui_layer;
		$p->{$new_id}->{'gui-presentation'}->{$actL}->{'description'}='';
		$p->{$new_id}->{'from'}->{'cardinality'}='1';
		$p->{$new_id}->{'from'}->{'optional'}='true';	   
  		$p->{$new_id}->{'from'}->{'content'}="$host/$source/lu_$tt/id";	   	   
	   }	
	 }
       }

#       $$prj->{'relation'}->{$new_id}->{'description'}='';  
    }
  }    
#  if (undef $AutoCommit) {$AutoCommit=1};
  if (!undef $p) {$$prj->{'relation'}=$p;}; 
a176 5
#($host."/".$source."/",$prj);

sub AddSelectedSources {
  
}
d181 3
a183 2
   my $prj = shift; # project hash
   my @@aux;
d185 4
a188 4
   my $sqlUser=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
   my $sqlPasswd=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
   my $sqlPort=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'columns-query'}->{'content'};
d190 1
a190 1
   &DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort)||die;		
d194 1
d202 2
a203 1
      push(@@aux,$t);
d208 1
a208 1
   return (\@@aux);
a210 8
sub GetColumnListL {
# returns list of table columns names
   my ($host,$source,$table) = (shift=~m|^([\w.]+)/(\w+)/(\w+)$|);
   my $prj = shift; # project hash
   my @@aux = keys (%{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}});
   return (\@@aux);   
}   

a218 7

sub TestConnection {
  my $host = shift;
  my $port = shift;  
  my $db = 'mysql';  
  my $err = DBI->connect("DBI:mysql:database=$db;host=$host;port=$port", "root", "");
}
@


1.4
log
@schema - tables, columns, relations
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.3 2003/05/01 13:42:43 spanhel Exp $
d10 1
a10 1

a31 1
	#return (sort keys( %{$def->{$source}}));
d35 6
d43 1
a43 1
# add selected tables to $Project hash  
d47 1
d54 2
a55 1
        # table already exists in md
d57 1
d61 7
a67 1
	delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_});
d72 2
a73 2
     if (!exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_})) {
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{'1'}->{'coord'}=rnd(400)." ".rnd(400);
d79 19
a97 4
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'description'}='';
	  	
	  &AddSelectedColumns($host."/".$source."/".$_,$prj,&GetColumnList($host."/".$source."/".$_,$prj));	  
     }	       
a98 1
  &AddRelations($host."/".$source,$prj);
d107 5
d113 4
a116 8
   my $sqlUser=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
   my $sqlPasswd=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
   my $sqlPort=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};
  
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'columns-query'}->{'content'};
   $SQL=~s/\?Table\?$//;
   &DBConnect($source,$sqlUser,$sqlPasswd,undef,$host,$sqlPort)||die;		
   SQLPrepareFetch($source,'1',$SQL.$table);       	
a117 3
   
   foreach (@@$rSelObj)  {$sColumns->{'column'}->{$_}=$_;}; # convert array to HASH
#   Dumper($sColumns);
d120 4
a123 2
         # table already saved in md
         delete($sColumns->{'column'}->{$_});
d126 16
a141 9
       	# table in md in't in selected tables
	delete($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_});
      }
   }
   
   
   while ( my ($Field,$Type,$Null,$Key,$Default,$Extra)=&SQLFetch($source,'1') ) {                          
#       foreach (keys( %{$sColumns->{'column'}})) { 
      if (exists($sColumns->{'column'}->{$Field})) {
d143 3
a145 3
	 ($t=$Type)=~s/\(\d+\)//;
	 ($l=$Type)=~s/^.*\((\d+)\).*$/$1/;
	 ($tt=$Field)=~s/_/ /g;	
d148 5
a152 6
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$Field}->{'id'}=$Field;
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$Field}->{'name'}=$tt;	 
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$Field}->{'length'}=$l;	 	 
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$Field}->{'type'}=$t;
	 $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$Field}->{'constraint'}->{'type'}='PK' if ($Key eq 'PRI');	 	 	 
	      
d155 6
a160 5
   &SQLFetchClose($source,'1');
   &DBDisConnect($source);   
   my $i=1;
   foreach (sort @@$rSelObj) {
     $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{'1'}->{'line'}=$i++;
d168 1
a173 1
	 print $tt;
d175 16
a190 11
           print "jo";
	   while (exists($$prj->{'relation'}->{$new_id='c'.rnd(500)})) {}; # generate new id 	   
	   $p->{$new_id}->{'description'}='';
           $p->{$new_id}->{'name'}=$new_id;	   
	   $p->{$new_id}->{'to'}->{'cardinality'}='1';
	   $p->{$new_id}->{'to'}->{'optional'}='true';	   
  	   $p->{$new_id}->{'to'}->{'content'}=$host.'/'.$source.'/'.$t.'/'.$_;	   
	   $p->{$new_id}->{'gui-presentation'}->{'id'}='1';
	   $p->{$new_id}->{'from'}->{'cardinality'}='1';
	   $p->{$new_id}->{'from'}->{'optional'}='true';	   
  	   $p->{$new_id}->{'from'}->{'content'}=$host.'/'.$source.'/'.'lu_'.$tt.'/'.'id';	   	   
d197 2
a198 1
  $$prj->{'relation'}=$p; 
d221 8
a228 1
   while ( my ($t)=&SQLFetch($source,'3') ) {	   
d230 1
a233 1
   #return (sort keys( %{$def->{$source}}));   
d236 8
@


1.3
log
@update tree -  tables and columns
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.2 2003/04/30 09:57:45 spanhel Exp $
d66 1
d70 1
a70 1
   
d116 2
a117 1
         $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$Field}->{'type'}=$t;	 	 	 
d129 33
d163 1
a163 1

@


1.2
log
@connect to mysql
@
text
@d4 1
a4 1
# $Id: DSI.pm,v 1.1 2003/04/24 20:01:39 michald Exp $
d10 1
a10 31
#require "const.def";
#use vars qw($def);
#use vars qw($Project $TreeList $SLSeL);
our $def = { 
	'delta' => { 
		'lu_month' => {
			'id'=>{'type'=>'int',length=>'4','constraint'=>'PK'},
			'desc'=>{'type'=>'char',length=>'20'},
			'year'=>{'type'=>'int',length=>'4'},
		},
		'lu_date' => {
			'id'=>{'type'=>'int',length=>'4','constraint'=>'PK'},
			'desc'=>{'type'=>'char',length=>'20'},
			'month_id'=>{'type'=>'int',length=>'4'},
		},
		
	},
	'demo' => { 
		'lu_cust' => {
			'id'=>{'type'=>'int',length=>'4','constraint'=>'PK'},
			'desc'=>{'type'=>'char',length=>'20'},
			'city'=>{'type'=>'int',length=>'4'},
		},
		'lu_city' => {
			'id'=>{'type'=>'int',length=>'4','constraint'=>'PK'},
			'desc'=>{'type'=>'char',length=>'20'},
			'country'=>{'type'=>'int',length=>'4'},
		},
	},
};
#my tables;
a11 3
# returns list of source names
	#my $host = shift;
	#return (keys %{$def});
d21 3
a23 3
	my $sqlUser='root';#$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
	my $sqlPasswd='';#=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
        my $sqlPort='3306';#$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};
d41 17
a57 4
   my $rSelObj=shift; # reference to ListBox Selected Tables   
   foreach (@@$rSelObj) {
     # not yet in md - is it correct?
     # delete not selected Tables which are in MD
d59 1
a59 1
	  $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$_}->{'gui-presentation'}->{'1'}->{'coord'}=rnd(600)." ".rnd(600);
d62 1
a62 2
	  $tt=~s/^lu\s+//ig; 
	  $tt=ucfirst($tt);
d66 4
a69 9
	  #my $table=$_;
	  #my @@col = &GetColumnList($host."/".$source."/".$table,$prj);
	  
	  #foreach (@@$rSelObj) {
	  #   $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{'gui-presentation'}->{'1'}->{'line'}='1';
	  #}
     }	  
     
   }      
d79 3
a81 3
   my $sqlUser='root';#;$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'user'}->{'content'};
   my $sqlPasswd='';#$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'password'}->{'content'};
   my $sqlPort='3306';#$$prj->{'host'}->{$host}->{'source'}->{$source}->{'src-conn'}->{'port'}->{'content'};
d83 1
a83 1
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'columns-query'}->{'content'}; 
d86 14
a99 19
   SQLPrepareFetch($source,'300',$SQL.$table);       	
   my $line=1;
   while ( my ($Field,$Type,$Null,$Key,$Default,$Extra)=&SQLFetch($source,'300') ) {
       foreach (@@$rSelObj) {
	 if ($_ eq $Field) {
           if (!exists($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_})) {
	      my ($tt,$l,$t);
	      ($t=$Type)=~s/\(\d+\)//;
	      ($l=$Type)=~s/^.*\((\d+)\).*$/$1/;

	      ($tt=$Field)=~s/_/ /g;	
	      $tt=~s/id$/ID/ig;
	      $tt=ucfirst($tt);
	      $$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_}->{name}=$tt;
	      # !!!! break !!!!
	   }
         }
	   
       }   	   
d101 19
d121 4
a124 1

d128 1
a128 1
# add selected tables to $Project hash   
d130 1
a133 4
#	return (keys %{$def->{$source}->{$table}});
   #my $a = shift;
   #my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
   #my $table shift;
a134 2
   
   
d140 1
a140 1
   my $SQL=$$prj->{'host'}->{$host}->{'source'}->{$source}->{'metadata'}->{'columns-query'}->{'content'}; 
d148 2
a149 2
   #&SQLFetchClose($source,'2');
   #&DBDisConnect($source);
a150 1
   &DBDisConnect($source); 
d162 8
@


1.1
log
@prototype for reverse engineering
@
text
@d4 1
a4 1
# $Id$
d8 6
a13 4


# this module is prototype for testing purposes only
my $x = { 
d15 5
d25 1
a25 5
		'lu_month' => {
			'id'=>{'type'=>'int',length=>'4','constraint'=>'PK'},
			'desc'=>{'type'=>'char',length=>'20'},
			'year'=>{'type'=>'int',length=>'4'},
		}
d40 1
a40 1

d43 3
a45 2
	my $host = shift;
	return (keys %{$x});
d49 47
a95 3
# returns list of table names
	my ($host,$source) = (shift=~m|^([\w.]+)/(\w+)$|);
	return (keys %{$x->{$source}});
d98 41
d141 26
a166 2
	my ($host,$source,$table) = (shift=~m|^([\w.]+)/(\w+)/(\w+)$|);
	return (keys %{$x->{$source}->{$table}});
d169 8
@


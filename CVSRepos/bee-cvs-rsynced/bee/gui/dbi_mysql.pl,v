head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2004.02.02.10.34.42;	author tuco80;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.01.09.18.59;	author spanhel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@+ Null password check
@
text
@#__________________________________________________________
#
#   File:    MySQL library
#   By:      Michal Dovrtel
#   Date:    1.12.2002
#__________________________________________________________


use DBI;
$LogLevel=1;
my $stat;


@@SQLErrors = ();

$NL="\n";
my $st;
if ($LogLevel && !$LogLevelF) {
	$LogLevelF = "sql.log";
	open (LOG,">>$LogLevelF");
        $ofh = select(LOG); $| = 1; select ($ofh); #misto autoflush, ktery nekdy nefunguje
#	LOG->autoflush(1);
}

#__________________________________________________________
#

sub DBConnect {
	my($DB, $User, $Password, $AutoCommit, $Host, $Port) = @@_;

	if (undef $AutoCommit) {$AutoCommit=1};
	if (!$Host) {$Host="localhost"};
	if (!$Port) {$Port=3306};
	unless ($Password) {$Password = ""}
	$stat=1;
	$dbh{$DB} = DBI->connect("DBI:mysql:database=$DB;host=$Host;port=$Port", "$User", "$Password")
		|| (&LogError($DB,undef,undef));	
	
	if (($LogLevel)&&(!@@SQLErrors)) { print LOG "$NL$DB>---------- CONNECT ".&Time2SQL(time)." ----------".$NL };
	return ($stat);
}

#__________________________________________________________
#

sub SQLQuery {
	my($DB,$Query) = @@_;
	if ($LogLevel) { print LOG "$NL$DB> ".$Query.$NL };
	$dbh{$DB}->do($Query) || (&LogError($DB,undef,$Query));
}

#__________________________________________________________
#

sub SQLFetchOneLineQuery {
	my($DB,$Query) = @@_;
	$OLQid++;
	my $OLQidL=$OLQid;
	&SQLPrepareFetch($DB,$OLQidL,$Query);
	my (@@v)=&SQLFetch($DB,$OLQidL);
	&SQLFetchClose($DB,$OLQidL);
	@@v
}

#__________________________________________________________
#

sub LogError {
	my($DB,$QueryID,$Query) = @@_;	
	$stat=0;	
	if (exists($dbh{$DB})) {
	    #my $err=$dbh{$DB}->errstr;
	    #if ($LogLevel) { print LOG "$NL$DB.$QueryID> ######### $err.$NL" };
	    if ($LogLevel) { print LOG "$NL$DB.$QueryID> ######### $NL" };
	    push (@@SQLErrors, "$DB.$QueryID> $Query <B>$err</B>" );
	} else {
	    if ($LogLevel) { print LOG "$NL$DB> ######### Connection Failed.$NL" };
	    push (@@SQLErrors, "Connection Failed" );
        } 
}

#__________________________________________________________
#

sub SQLPrepareQuery {
	my($DB,$QueryID,$Query) = @@_;
	if ($LogLevel) { print LOG "$NL$DB.$QueryID> $Query$NL" };
	$sth{$DB}{$QueryID} = $dbh{$DB}->prepare($Query) 
		|| (&LogError($DB,$QueryID,$Query));
}

#__________________________________________________________
#

sub SQLExecuteQuery {
	my($DB,$QueryID,@@val) = @@_;
	if ($LogLevel) { print LOG "$NL$DB.$QueryID> --- ".join(',',@@val).$NL };
	$sth{$DB}{$QueryID}->execute(@@val)
		|| (&LogError($DB,$QueryID,"Execution of Values: ".join('|',@@val)));
}

#__________________________________________________________
#

sub SQLPrepareFetch {
	my($DB,$QueryID,$Query) = @@_;
	if ($LogLevel) { print LOG "$NL$DB.$QueryID> $Query$NL" };
	$sth{$DB}{$QueryID} = $dbh{$DB}->prepare($Query)
		|| (&LogError($DB,$QueryID,"Preparation of ".$Query));
	$sth{$DB}{$QueryID}->execute
		|| (&LogError($DB,$QueryID,"Execution of ".$Query));
}

#__________________________________________________________
#

sub SQLFetch {
	my($DB,$QueryID) = @@_;
	$sth{$DB}{$QueryID}->fetchrow_array
}

#  die $sth->errstr if $sth->err;

#__________________________________________________________
#

sub SQLFetchRef {
	my($DB,$QueryID) = @@_;
	$sth{$DB}{$QueryID}->fetchrow_arrayref
}

#  die $sth->errstr if $sth->err;

#__________________________________________________________
#

sub SQLFetchRows {	# rows affected 
	my($DB,$QueryID) = @@_;
	$sth{$DB}{$QueryID}->rows
}

#__________________________________________________________
#

sub LastInsertedOID {	# database specific !!!
	my($DB,$QueryID) = @@_;
	$sth{$DB}{$QueryID}->{pg_oid_status}
}

#__________________________________________________________
#

sub LastInsertedID {	# database specific !!!
	my($DB,$table,$col) = @@_;

	my $QueryID='lid';
	$sth{$DB}{$QueryID} = $dbh{$DB}->prepare("SELECT last_value FROM ${table}_${col}_seq")
		|| (&LogError($DB,$QueryID,"Preparation of ".$Query));
	$sth{$DB}{$QueryID}->execute
		|| (&LogError($DB,$QueryID,"Execution of ".$Query));
	my ($lid)=$sth{$DB}{$QueryID}->fetchrow_array;
	$sth{$DB}{$QueryID}->finish;
	delete $sth{$DB}{$QueryID};

	if ($LogLevel) { print LOG "$NL$DB> Last ID $table.$col=$lid$NL" };
	$lid
}

#__________________________________________________________
#

sub SQLFetchClose {
	my($DB,$QueryID) = @@_;
#	if (@@SQLErrors) {&Rollback($DB);@@SQLErrors=()}
#	else {&Commit($DB)}; #!!! je nutne Commit pro FetchClose?
	$sth{$DB}{$QueryID}->finish;
	delete $sth{$DB}{$QueryID}
}

#__________________________________________________________
#

sub Commit {
	my($DB) = @@_;
	if ($LogLevel) { print LOG "$NL$DB> COMMIT".$NL };
	$dbh{$DB}->commit();
}

#__________________________________________________________
#

sub Rollback {
	my($DB) = @@_;
	if ($LogLevel) { print LOG "$NL$DB> ROLLBACK".$NL };
	$dbh{$DB}->rollback();
}

#__________________________________________________________
#

sub DBDisConnect {
	my($DB) = @@_;
	if ($LogLevel) { print LOG "$NL$DB> DISCONNECT".$NL };
	$dbh{$DB}->disconnect;
	delete $dbh{$DB}
}

#__________________________________________________________
#

sub FixSQLString {	# database specific !!!
	my($DB,$str) = @@_;
	if ($str) { $dbh{$DB}->quote($str) }
	else {"''"}
}

#__________________________________________________________
#

sub PingDB {
   return ($dbh{$DB}->ping);
}

#__________________________________________________________
#

sub Time2SQL {
# Usage:  $syst_secs = &Time2SQL(time)

	my ($t)=@@_;
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst);

	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($t);

	$year+=1900;
	$mon++;
	$mon=~s/^(\d)$/0$1/;
	$mday=~s/^(\d)$/0$1/;
	$hour=~s/^(\d)$/0$1/;
	$min=~s/^(\d)$/0$1/;
	$sec=~s/^(\d)$/0$1/;
	$year."-".$mon."-".$mday." ".$hour.":".$min.":".$sec

}

#__________________________________________________________
#

1

@


1.1
log
@added Edit.pm package
@
text
@d33 2
a34 1
	if (!$Port) {$Port=3306};		
@


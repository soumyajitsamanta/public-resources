head	1.25;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.25
date	2003.11.11.14.10.05;	author tuco80;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.07.15.38.53;	author tuco80;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.06.12.28.23;	author tuco80;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.20.09.41.09;	author tuco80;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.16.08.54.40;	author spanhel;	state Exp;
branches;
next	1.20;

1.20
date	2003.10.01.07.39.11;	author spanhel;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.25.09.50.12;	author tuco80;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.22.09.48.35;	author tuco80;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.12.08.17.54;	author tuco80;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.08.14.07.20;	author tuco80;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.01.14.22.24;	author tuco80;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.29.11.45.22;	author tuco80;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.21.13.20.48;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.18.07.11.30;	author spanhel;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.14.11.55.59;	author tuco80;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.13.10.52.28;	author tuco80;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.08.14.57.37;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.31.07.31.10;	author spanhel;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.31.06.37.44;	author michald;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.26.14.11.46;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.30.16.22.17;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.07.14.28.51;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.24.20.39.57;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.20.01.38;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.14;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.14;	author michald;	state Exp;
branches;
next	;


desc
@@


1.25
log
@+ Editing of relation's cardinality and optionality
@
text
@#-----------------------------------------------------
# Connection Object
#-----------------------------------------------------
# $Id: DBConn.pm,v 1.24 2003/11/07 15:38:53 tuco80 Exp $

package DBConn;
use base Tk::Canvas;
use Data::Dumper;
use strict;

my $LinePad = 20;
#the following won't be for a box, but we keep the
#name for compatibility with the other objcts.
my $selBoxCol = 'purple'; #color of the selected line

##################################################
## the object constructor                       ##
##################################################

sub new {

	my $proto = shift;
	my ($id,$name,$desc,$type,$from,$to,$VLayer,$from_card,$to_card,$from_opt,$to_opt) = @@_;	# type=REL|CONN|SIGN
						# From Object, To Object, visible layer hash $Layer->{$VisibleLayer}
						# from_card, to_card represents cardinalities for type=REL
						# from_opt, to_opt represents optionalities for type=REL

	my $class = ref($proto) || $proto;
	my $self  = {};

	$self->{ID}      = $id;
	$self->{TYPE}    = $type;
	$self->{NAME}    = $name;
	$self->{DESC}    = $desc;
	$self->{EDGE}    = [$from,$to];	# Tables
	$self->{CARD}    = [$from_card,$to_card];	# Cardinalities
	$self->{OPT}     = [($from_opt)?($from_opt eq 'true'):'false',($to_opt)?($to_opt eq 'true'):'false'];		# Optionalities
	$self->{CANV_ID} = [];	# list of canvas elements identifiers [line1,line2,...]
	$self->{CANVAS}  = '';	# canvas
	$self->{COORDS}  = [];	# coords of central part of line
	$self->{VLAYER}  = $VLayer;	# visible layer hash $Layer->{$VisibleLayer}

	if (($from=~/^_CONST/)||($from=~/^_TRIG/)||($from=~/^_LOBJ/)||($from=~/_FILE/)) {
		$self->{OBJ}[0]=$from;	# path to object
		$self->{ATTR}[0]='';	# attr name
	} 
	
	
	elsif($from =~/_TRAN/) {	#TRANS
		($self->{OBJ}[0],$self->{ATTR}[0],$self->{ATTRPOS_I})=($from=~m|^(.*)/([^/-]+)(-\d+)?$|);
		#print "\n esto es lo que agarra en to: $self->{OBJ}[0] , $self->{ATTR}[0] , $self->{ATTRPOS_I}";
	}
	else{#TAB
		($self->{OBJ}[0],$self->{ATTR}[0])=($from=~m|^(.*)/([^/]+)$|);
	}
	
	#Adjust Attrpos_I
	if($self->{ATTRPOS_I}){$self->{ATTRPOS_I}*= -1;}
	else{$self->{ATTRPOS_I}=0;}

	

	if (($to=~/^_CONST/)||($to=~/^_TRIG/)||($to=~/^_LOBJ/)||($to=~/_FILE/)) {
		$self->{OBJ}[1]=$to;	# path to object
		$self->{ATTR}[1]='';	# attr name
	} 
	elsif($to =~/_TRAN/){# TRANS
		($self->{OBJ}[1],$self->{ATTR}[1],$self->{ATTRPOS_O})=($to=~m|^(.*)/([^/-]+)(-\d+)?$|);
		#print "\n esto es lo que agarra en to: $self->{OBJ}[1] , $self->{ATTR}[1] , $self->{ATTRPOS_O}";
	}
	else{#TAB
		($self->{OBJ}[1],$self->{ATTR}[1])=($to=~m|^(.*)/([^/]+)$|);
	}
	
	#Adjust Attrpos_O
	if($self->{ATTRPOS_O}){$self->{ATTRPOS_O}*= -1;}
	else{$self->{ATTRPOS_O}=0;}

	

	bless ($self, $class);
	if ((!exists $self->{VLAYER}->{$self->{OBJ}[0]}) || (!exists $self->{VLAYER}->{$self->{OBJ}[1]})) {
#		main->WriteLog('',"$self->{TYPE} ID=$self->{ID}, \"$self->{NAME}\" uses nonexistent onjects",1);
		print Dumper($self->{OBJ}[0],$self->{OBJ}[1]);
		print "$self->{TYPE} ID=$id, \"$name\" uses nonexistent objects\n";
		return
	}
	$self->{VLAYER}->{$self->{OBJ}[0]}->relation($self,0);
	$self->{VLAYER}->{$self->{OBJ}[1]}->relation($self,1);
	$self->{SELECTED} = 0; # To know if the object is selected or not
	return $self;

}

##############################################
## methods to access per-object data        ##
##                                          ##
## With args, they set the value.  Without  ##
## any, they only retrieve it/them.         ##
##############################################

sub name {
	my $self = shift;
	if (@@_) { 
    		$self->{NAME} = shift;
	}
	return $self->{NAME};
}

sub desc {
	my $self = shift;
	if (@@_) { $self->{DESC} = shift }
	return $self->{DESC};
}

sub id{
	my $self = shift;
	if(@@_){
		$self->{ID} = shift;
	}
	return $self->{ID};
}

sub type{
	my $self = shift;
	if(@@_){
		$self->{TYPE} = shift;
	}
	return $self->{TYPE};
}

sub cardinality{
	my $self = shift;
	if(@@_){
		$self->{CARD}[0] = shift;
		$self->{CARD}[1] = shift;
	}
	return @@{$self->{CARD}};
}

sub optionality{
	my $self = shift;
	if(@@_){
		$self->{OPT}[0] = shift;
		$self->{OPT}[1] = shift;
	}
	return @@{$self->{OPT}};
}

sub to_id{
	my $self = shift;
	return $self->{ATTR}[1];
}

sub to_obj{
	my $self = shift;
	return $self->{OBJ}[1];
}

sub from_id{
	my $self = shift;
	return $self->{ATTR}[0];
}

sub from_obj{
	my $self = shift;
	return $self->{OBJ}[0];
}

sub fieldTo{
	my $self = shift;
	return $self->{ATTRPOS_O};
}

sub fieldFrom{
	my $self = shift;
	return $self->{ATTRPOS_I};
}

sub selected {
	my $self = shift;
	if (@@_) { $self->{SELECTED} = shift }
	return $self->{SELECTED};
}

sub set_selected{
	my $self = shift;
	$self->{SELECTED} = 1;
	$self->clear;
	$self->draw($self->{CANVAS});
}

sub set_deselected{
	my $self = shift;
	$self->{SELECTED} = 0;
	$self->clear;
	$self->draw($self->{CANVAS});
}

sub coords {
	my $self = shift;
	my ($x1,$y1,$x2,$y2) = @@_;
	if (@@_) { $self->{COORDS} = [$x1,$y1,$x2,$y2] }
	return $self->{COORDS};
}

sub move {
}

sub draw {
	my $self = shift;
	my $c = shift;	# canvas
	$self->{CANVAS}=$c;        
	my $tname1 = "_".$self->{OBJ}[0];
	my $tname2 = "_".$self->{OBJ}[1];
	my ($tag_name,$arrowshape,$color,$width,@@dash,@@arrow,@@shape);
	if ($self->{TYPE} eq 'CONN') {
		$tag_name = '__CONN/'.$self->{ID};
		$color='blue';
		$width=1;
		$arrow[0]='none';
		$arrow[1]='first';
		$shape[0]=[0,0,0];
		$shape[1]=[7,10,3];
	} elsif ($self->{TYPE} eq 'SIGNAL') {
		$tag_name = '__SIGNAL/'.$self->{ID};
		$color='red';
		$width=2;
		$dash[0]=[8,2];
		$dash[1]=$dash[0];
		$dash[2]=$dash[0];
		$arrow[0]='none';
		$arrow[1]='first';
		$shape[0]=[0,0,0];
		$shape[1]=[12,12,4];
	} elsif ($self->{TYPE} eq 'REL') {
		$tag_name = '__REL/'.$self->{ID};
		$color='black';
		$width=1;
		for (0,1) {
			my $i=$_;
			if ($self->{CARD}[$i] eq 'N') {
				$arrow[$i]='first';
				$shape[$i]=[7,0,3];
			} else {
				$arrow[$i]='none';
				$shape[$i]=[0,0,0];
			}
			if ($self->{OPT}[$i]) {
				$dash[$i]=[3,1];
			}
		}
	} elsif ($self->{TYPE} eq 'HREL' ) {
		$tag_name = '__HREL/'.$self->{ID};
		$color='black';
		$width=1;
		for (0,1) {
			my $i=$_;
			if ($self->{CARD}[$i] eq 'N') {
				$arrow[$i]='first';
				$shape[$i]=[7,7,3];
			} else {
				$arrow[$i]='none';
				$shape[$i]=[0,0,0];
			}
			if ($self->{OPT}[$i]) {
				$dash[$i]=[3,1];
			}
		}
	}	
	if ($self->{SELECTED}){
		$color= $selBoxCol;
		$width++;
	}
	$self->{CANV_ID}[0]=$c->createLine(0,0,0,0, -fill=>$color, -dash=>$dash[0], -width=>$width, -join=>'round', -arrow=>$arrow[0], -arrowshape=>$shape[0],-tags=>[$tname1,$tag_name,'item']);
	$self->{CANV_ID}[1]=$c->createLine(0,0,0,0, -fill=>$color, -dash=>$dash[1], -width=>$width, -join=>'round', -arrow=>$arrow[1], -arrowshape=>$shape[1],-tags=>[$tname2,$tag_name,'item']);
	$self->{CANV_ID}[2]=$c->createLine(0,0,0,0, -fill=>$color, -dash=>$dash[2], -width=>$width, -join=>'round', -tags=>[$tag_name,'item']);
	$self->adjustCoords;
}

sub adjustCoords {	# adjust components coordinates
	my $self = shift;
	my ($t1,$t2);		
	return if (!$self->{CANVAS})
	  ||(!($t1=$self->{VLAYER}->{$self->{OBJ}[0]}->coords))
	  ||(!($t2=$self->{VLAYER}->{$self->{OBJ}[1]}->coords));
        	
	my ($x11,$y11,$x12,$y12) = @@{$t1};
	my ($x21,$y21,$x22,$y22) = @@{$t2};

	my ($x1,$x2,$lp1,$lp2);
	
	
	my ($y1,$y2);
	my $diff = 2;
	if ($self->{TYPE} eq 'HREL') {
          # REL - four possibilities oof connection left and right side of object
	  # line equation
	  # y=((y2-y1)/(x2-x1))*(x-x1)+y1
	  my $Y = $y21 + ($y22-$y21)/2; 
	  my $X = $x21 + ($x22-$x21)/2; 	  
	  my ($k1, $k2);
	  $k1 = $Y - (($y12-$y11)/($x12-$x11))*($X-$x11) - $y11;
	  $k2 = $Y - (($y12-$y11)/($x11-$x12))*($X-$x12) - $y11;
	  
	  my (@@A,@@B,@@C,@@D);
	  if (($k1 >= 0) && ($k2 >= 0)) {
	    # I
	    $A[0] = $x21+abs($x22-$x21)/2-$diff;$A[1]= $y21;
	    $B[0] = $A[0];$B[1]=$y21-$LinePad;
	    $C[0] = $x11+abs($x12-$x11)/2+$diff;$C[1]=$y12+$LinePad;
	    $D[0] = $C[0];$D[1]=$y12;    	    
	  }
	  if (($k1 <= 0) && ($k2 >= 0)) { 
	    # II
	    $A[0] = $x21;$A[1]= $y21+abs($y22-$y21)/2-$diff;
	    $B[0] = $x21-$LinePad;$B[1]=$A[1];
	    $C[0] = $x12+$LinePad;$C[1]=$y11+abs($y12-$y11)/2+$diff;
	    $D[0] = $x12;$D[1]=$C[1];
	  }
	  if (($k1 <= 0) && ($k2 <= 0)) { 
	     # III	     
	    $A[0] = $x21+abs($x22-$x21)/2-$diff;$A[1]= $y22;
	    $B[0] = $A[0];$B[1]=$y22+$LinePad;
	    $C[0] = $x11+abs($x12-$x11)/2+$diff;$C[1]=$y11-$LinePad;
	    $D[0] = $C[0];$D[1]=$y11;
	  }		
	  if (($k1 >= 0) && ($k2 <= 0)) { 	    
	     # IV 	
	    $A[0] = $x22;$A[1]= $y21+abs($y22-$y21)/2-$diff;
	    $B[0] = $x22+$LinePad;$B[1]=$A[1];
	    $C[0] = $x11-$LinePad;$C[1]=$y11+abs($y12-$y11)/2+$diff;
	    $D[0] = $x11;$D[1]=$C[1];
	  }
	  $self->{CANVAS}->coords($self->{CANV_ID}[0], $D[0],$D[1], $C[0], $C[1]);
	  $self->{CANVAS}->coords($self->{CANV_ID}[1], $A[0],$A[1], $B[0], $B[1]);		
	  $self->{CANVAS}->coords($self->{CANV_ID}[2], $B[0],$B[1],$C[0],$C[1]);
	  #$self->coords($x1+$LinePad,$y1,$x2-$LinePad,$y2);	  	  	  
	}
	
	else {
          # REL - only two possibilities oof connection left and right side of object
	  $y1=$y11+($self->{VLAYER}->{$self->{OBJ}[0]}->getAttrY($self->{ATTR}[0],$self->{ATTRPOS_I})||0);
	  $y2=$y21+($self->{VLAYER}->{$self->{OBJ}[1]}->getAttrY($self->{ATTR}[1],$self->{ATTRPOS_O})||0);
	  if ($x21>$x12) {
		$x1=$x12;
		$x2=$x21;
		$lp1=$LinePad;
		$lp2=$LinePad;
	  } else {
		  $x1=$x11;
		  $x2=$x22;
		  $lp1=-$LinePad;
		  $lp2=-$LinePad;
	  }
	  
	  #Lines are a little more restricted when connected from/to Transformations
	  if ($self->{VLAYER}->{$self->{OBJ}[0]}->type() eq 'TRAN'){
	  	$x1 = $x12;
		$lp1 = $LinePad;
	  }
	  if ($self->{VLAYER}->{$self->{OBJ}[1]}->type() eq 'TRAN'){
	  	$x2 = $x21;
		$lp2 = $LinePad;
	  }
	  print 
	  $self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x1+$lp1, $y1);
	  $self->{CANVAS}->coords($self->{CANV_ID}[1], $x2, $y2, $x2-$lp2, $y2);		
	  $self->{CANVAS}->coords($self->{CANV_ID}[2], $x1+$lp1,$y1,$x2-$lp2,$y2);
	  $self->coords($x1+$LinePad,$y1,$x2-$LinePad,$y2);

	}  
	
	
	#print '['.$x11.','.$y11.'],['.$x12.','.$y12."]\n";
	#print '['.$x21.','.$y21.'],['.$x22.','.$y22."]\n";
	#print '------------------------------'."\n";
}

sub delFromGUI{
	my $self = shift;
	my ($layerID, $callerID) = @@_;
	$self->clear;
	my @@ret;
	if(defined $callerID){
		if($self->{VLAYER}->{$self->{OBJ}[0]}->id eq $callerID){
			$self->{VLAYER}->{$self->{OBJ}[1]}->delRelation($self->{ID});
		}
		else{
			$self->{VLAYER}->{$self->{OBJ}[0]}->delRelation($self->{ID});
		}
	}
	else{#if we are only deleting the relation, then it has to be unreferenced in both sides
		$self->{VLAYER}->{$self->{OBJ}[0]}->delRelation($self->{ID});
		$self->{VLAYER}->{$self->{OBJ}[1]}->delRelation($self->{ID});
	}
	
	return @@ret;
		
}
	
#-----------------------------

sub clear {
	my $self = shift;
	foreach (@@{$self->{CANV_ID}}) {
		$self->{CANVAS}->delete($_);
	}
	$self->{CANV_ID}=();
}

#-----------------------------

1;
@


1.24
log
@Support for files complete. Naming of bees,ins,outs to name, not ID
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.23 2003/11/06 12:28:23 tuco80 Exp $
d130 18
@


1.23
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.22 2003/10/20 09:41:09 tuco80 Exp $
d63 1
a63 1
	if (($to=~/^_CONST/)||($to=~/^_TRIG/)||($to=~/^_LOBJ/)) {
@


1.22
log
@Project exported to .scheme and .bee xml scripts
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.21 2003/10/16 08:54:40 spanhel Exp $
d43 1
a43 1
	if (($from=~/^_CONST/)||($from=~/^_TRIG/)||($from=~/^_LOBJ/)) {
@


1.21
log
@LM - change position of TO and FROM point
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.20 2003/10/01 07:39:11 spanhel Exp $
a50 1
		if($self->{ATTRPOS_I}){$self->{ATTRPOS_I}*= -1;}
d56 4
a68 1
		if($self->{ATTRPOS_O}){$self->{ATTRPOS_O}*= -1;}
d74 4
d85 1
a85 1
		print "$self->{TYPE} ID=$id, \"$name\" uses nonexistent objectsss\n";
d135 25
@


1.20
log
@log. model
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.19 2003/09/25 09:50:12 tuco80 Exp $
d246 1
d260 1
a260 1
	    $A[0] = $x21+abs($x22-$x21)/2;$A[1]= $y21;
d262 1
a262 1
	    $C[0] = $x11+abs($x12-$x11)/2;$C[1]=$y12+$LinePad;
d267 1
a267 1
	    $A[0] = $x21;$A[1]= $y21+abs($y22-$y21)/2;
d269 1
a269 1
	    $C[0] = $x12+$LinePad;$C[1]=$y11+abs($y12-$y11)/2;
d274 1
a274 1
	    $A[0] = $x21+abs($x22-$x21)/2;$A[1]= $y22;
d276 1
a276 1
	    $C[0] = $x11+abs($x12-$x11)/2;$C[1]=$y11-$LinePad;
d281 1
a281 1
	    $A[0] = $x22;$A[1]= $y21+abs($y22-$y21)/2;
d283 1
a283 1
	    $C[0] = $x11-$LinePad;$C[1]=$y11+abs($y12-$y11)/2;
@


1.19
log
@Arity of Transformation I/O complete
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.18 2003/09/22 09:48:35 tuco80 Exp $
d78 2
a79 1
		print "$self->{TYPE} ID=$id, \"$name\" uses nonexistent objects\n";
@


1.18
log
@fixed select in draw().  DBtransf & DBConn + arity butnot finished
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.17 2003/09/12 08:17:54 tuco80 Exp $
d123 5
@


1.17
log
@Fixed small problem with lines from/to Transformations
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.16 2003/09/08 14:07:20 tuco80 Exp $
d46 9
a54 1
	} else {	# TAB or TRANS
d58 2
d63 7
a69 1
	} else {	# TAB or TRANS
d73 2
d78 1
a78 1
		print "$self->{TYPE} ID=$id, \"$name\" uses nonexistent onjects\n";
d287 2
a288 2
	  $y1=$y11+($self->{VLAYER}->{$self->{OBJ}[0]}->getAttrY($self->{ATTR}[0])||0);
	  $y2=$y21+($self->{VLAYER}->{$self->{OBJ}[1]}->getAttrY($self->{ATTR}[1])||0);
d310 1
@


1.16
log
@Added creation of relations between objects (Hrel,Sign,Rel & Conn)
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.15 2003/09/01 14:22:24 tuco80 Exp $
d281 10
@


1.15
log
@Deletion of Objects Complete
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.14 2003/08/29 11:45:22 tuco80 Exp $
a200 1
		#$tag_name = 'SELECTED'.$tag_name;
a306 1
		#print "\ncallerID defined";
a310 1
		#print "\nCallerID undef";
@


1.14
log
@Deletion of objects almost complete
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.13 2003/08/21 13:20:48 tuco80 Exp $
d300 1
d308 1
d313 1
d315 2
@


1.13
log
@+ usage of "SELECTED" tags, move all selected objects at once and selection box with left mouse button instead of right
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.12 2003/08/18 07:11:30 spanhel Exp $
d91 16
d296 19
@


1.12
log
@fixed the selection of hrelation
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.11 2003/08/14 11:55:59 tuco80 Exp $
d185 1
@


1.11
log
@Added ShopCard for View, trig, transf & const. (only hrelation not selectable)
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.10 2003/08/13 10:52:28 tuco80 Exp $
d184 1
@


1.10
log
@Selection of objects complete, except relations
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.9 2003/08/08 14:57:37 tuco80 Exp $
d12 3
d182 3
a184 1

@


1.9
log
@Added prop.pm and selection property of objects
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.8 2003/07/31 07:31:10 spanhel Exp $
d92 14
@


1.8
log
@FM,LM
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.7 2003/07/31 06:37:44 michald Exp $
d62 1
d86 6
@


1.7
log
@some fixes for processing of transformation schema
@
text
@a0 1

d4 1
a4 1
# $Id: DBConn.pm,v 1.6 2003/06/26 14:11:46 spanhel Exp $
d157 1
a157 2
	}
	
a161 1

d180 1
d184 1
a184 4
	  my $X = $x21 + ($x22-$x21)/2; 

	  #my $Y = (($y12-$y11)/($x12-$x11))*($X-$x11) + $y11; # from left bottom corner to right up corner
	  #my $Y = (($y12-$y11)/($x11-$x12))*($X-$x12) + $y11; # from left up corner to right bottom corner
d188 1
a188 11
	  if ($x21>$x12) {
		$x1=$x12;
		$x2=$x21;
		$lp1=$LinePad;
		$lp2=$LinePad;
	  } else {
		  $x1=$x11;
		  $x2=$x22;
		  $lp1=-$LinePad;
		  $lp2=-$LinePad;
	  }
d225 2
a226 1
          $y1=$y11+($self->{VLAYER}->{$self->{OBJ}[0]}->getAttrY($self->{ATTR}[0])||0);
@


1.6
log
@logical and fys. model
@
text
@d5 1
a5 1
# $Id: DBConn.pm,v 1.5 2003/05/30 16:22:17 spanhel Exp $
d149 1
a149 1
				$shape[$i]=[7,0,3];
@


1.5
log
@logical model
@
text
@d5 1
a5 1
# $Id: DBConn.pm,v 1.4 2003/05/07 14:28:51 spanhel Exp $
d180 14
a193 1
	if ($x21>$x12) {
d198 39
a236 10
	} else {
		$x1=$x11;
		$x2=$x22;
		$lp1=-$LinePad;
		$lp2=-$LinePad;
	}
	my ($y1,$y2);
	if ($self->{TYPE} eq 'HREL') {
	  $y1=$y11-abs($y12-$y11)/2+($self->{VLAYER}->{$self->{OBJ}[0]}->getAttrY($self->{ATTR}[0])||0);
 	  $y2=$y21-abs($y22-$y21)/2+($self->{VLAYER}->{$self->{OBJ}[1]}->getAttrY($self->{ATTR}[1])||0);
d238 1
d242 16
d261 3
a263 5

	$self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x1+$lp1, $y1);
	$self->{CANVAS}->coords($self->{CANV_ID}[1], $x2, $y2, $x2-$lp2, $y2);
	$self->{CANVAS}->coords($self->{CANV_ID}[2], $x1+$lp1,$y1,$x2-$lp2,$y2);
	$self->coords($x1+$LinePad,$y1,$x2-$LinePad,$y2);
@


1.4
log
@schema model
@
text
@d1 1
d5 1
a5 1
# $Id: DBConn.pm,v 1.3 2003/04/24 20:39:57 michald Exp $
d101 1
a101 2
	$self->{CANVAS}=$c;

d141 17
d159 1
d170 1
a170 1
	my ($t1,$t2);
d174 1
a174 1

d179 1
d191 10
a201 2
	my $y1=$y11+($self->{VLAYER}->{$self->{OBJ}[0]}->getAttrY($self->{ATTR}[0])||0);
	my $y2=$y21+($self->{VLAYER}->{$self->{OBJ}[1]}->getAttrY($self->{ATTR}[1])||0);
@


1.3
log
@simple autoplacement of DBConn
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.2 2003/04/24 20:01:38 michald Exp $
d8 1
a54 1
	
@


1.2
log
@prototype for reverse engineering
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.1.1.1 2002/09/24 01:34:14 michald Exp $
a96 14
sub moveEdge {
	my $self = shift;
	my ($tab,$x,$y) = @@_;

	if ($tab eq $self->{OBJ}[0]) {
            $self->{COORDS}[0]+=$x;
            $self->{COORDS}[1]+=$y;
	} else {
            $self->{COORDS}[2]+=$x;
            $self->{COORDS}[3]+=$y;
	}
	$self->{CANVAS}->coords($self->{CANV_ID}[2],$self->{COORDS});
}

d160 13
a172 1
	my $x1=$x12;
a173 1
	my $x2=$x21;
d176 3
a178 3
	$self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x1+$LinePad, $y1);
	$self->{CANVAS}->coords($self->{CANV_ID}[1], $x2, $y2, $x2-$LinePad, $y2);
	$self->{CANVAS}->coords($self->{CANV_ID}[2], $x1+$LinePad,$y1,$x2-$LinePad,$y2);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id: DBConn.pm,v 1.2 2002/08/27 19:09:19 michal Exp $
d54 6
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

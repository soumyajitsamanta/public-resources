head	1.14;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2004.05.18.12.47.32;	author tuco80;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.08.14.41.14;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.17.12.35.05;	author tuco80;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.11.15.27.17;	author tuco80;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.27.11.09.37;	author tuco80;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.19.11.55.04;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.25.10.26.16;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.06.12.28.24;	author tuco80;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.03.18.33.42;	author tuco80;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.22.09.32.22;	author tuco80;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.25.09.17.12;	author tuco80;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.30.16.22.17;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.07.14.28.51;	author spanhel;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.16;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.16;	author michald;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Support for diferent bee types. (Not exported to .schema files yet though)
@
text
@#-----------------------------------------------------
# Toolbar
#-----------------------------------------------------
# $Id: bar.pl,v 1.13 2004/04/08 14:41:14 tuco80 Exp $

use strict;
use warnings;
use Data::Dumper;
use vars qw($toolbar @@toolB $TreeList $top $Project $tSchemaC );
my $size = 500;


#-----------------------------------------------------

sub SetToolbar {

	my $row=0; 

	if (!$toolB[$row]) { 
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{SAVE},
        	    -command => \&SaveProj,
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Save Project");
	}
	$row++;
	if (!$toolB[$row]) { 
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{OPEN},
        	    -command => \&OpenProj,
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Open Project");
	}
	$row++;
	if (!$toolB[$row]) { 
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{PRINT},
        	    -command => \&Print,
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Print Visible Layer");
	}
	$row++;
	if (!$toolB[$row]) { 
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{PROP},
        	    -command => \&Properties,
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Project Properties");
	}
	$row++;
	
	if ($mainTabs->raised eq 'prop') {
	
		if ($toolB[$row]) { $toolB[$row]->destroy }
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{DELETE},
        	    -command => sub {},
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Delete Object");
		$row++;
		if ($toolB[$row]) { $toolB[$row]->destroy }
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{L_ARR},
        	    -command => \&UpdateProp,
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Update");
		$row++;
		&ClearToolbar($row);

	} elsif ($mainTabs->raised eq 'schema') { 

		if ($toolB[$row]) { $toolB[$row]->destroy }
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{DELETE},
        	    -command => sub {},
       		    -state=>'disabled',
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Delete Object");
		$row++;
		if ($toolB[$row]) { $toolB[$row]->destroy }
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{NEW},
        	    -command => sub {&NewObject},
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "New Object");
		$row++;
		if ($toolB[$row]) { $toolB[$row]->destroy }
		$toolB[$row]=$toolbar->Button(
        	    -image    => $Img{R_ARR},
        	    -command => sub {},
       		    -state=>'disabled',
        	)->pack(qw/-side bottom -anchor s /);
		$baloon->attach($toolB[$row], -balloonmsg => "Add To Canvas");
		$row++;
		&ClearToolbar($row);

	} else {
		&ClearToolbar($row);
	}
}

#-----------------------------------------------------

sub ClearToolbar {
	my $from=$_[0];
	for ($from..20) {
		return if (!$toolB[$_]);
		$toolB[$_]->destroy;
		undef $toolB[$_];
	}
}

#-----------------------------------------------------


sub NewObject {
  my $r = $TreeList->info('anchor');
  if ($r){
  	my $ObjType = $TreeList->info('data', $r);
	#print "\nEste es r: $r y este Objtectype: $ObjType";
	if ($ObjType eq 'LAYER') {
		&NewLayer($top);
	}
=pod
	I'M LEAVING THIS HERE IN CASE WE USE IN THE FUTURE, FOR EXAMPLE
	IF WE WANT TO CREATE AN ATTRIBUTE DIRECTLY INTO A GROUP, ADDING
	NEW HOSTS, TABLES ETC
	
	 
	
	
	elsif ($ObjType eq 'VIEW') {
		#my ($host,$src,$v)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		#$p=$Project->{host}->{$host}->{source}->{$src}->{view};
		#$id=$v;
		#$tv = 1;

	}
=cut
	elsif ($ObjType eq 'HOST') {
		my $t1 = $top->Toplevel(-title=>"Choose New Object To Be Created");
		my $t = $t1->Frame->pack(-padx=>10,-pady=>5);
		my ($type, $entry, $label, $srcType);
		my ($usr,$pass,$port,$driver,$name,$newID,$desc);
		my $frameD = $t1->LabFrame(-label => "Description", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);   
    	my $sc = $frameD->Scrolled(qw/Text -setgrid true -height 3 -width 25 -wrap word -scrollbars e/, -background=>'white')->pack;
		
		
		#We format the window now
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$name);
		my $namLabel = $t->Label(-text => 'Display Name', -anchor => 'e', -justify => 'right');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $namLabel->configure(-foreground=>'black');
		Tk::grid( $namLabel, -row => 0, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 0, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$usr);
		$label = $t->Label(-text => 'User', -anchor => 'e', -justify => 'right');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 1, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 1, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$pass);
		$label = $t->Label(-text => 'Password', -anchor => 'e', -justify => 'right');
		$entry->configure(-state=>'normal', -foreground=>'black',);
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 2, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 2, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$port);
		$label = $t->Label(-text => 'Port', -anchor => 'e', -justify => 'right');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 3, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 3, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$newID);
		$label = $t->Label(-text => 'ID (Name in Server)', -anchor => 'e', -justify => 'center');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 4, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 4, -column => 2,-sticky => 'ew');
		
		my $typeRad = $t1->LabFrame(-label => "DB Type", -labelside => "acrosstop")->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'PostGres',
            	-relief   => 'flat',
            	-value    => 1,
        	)->grid(-row => 0, -column => 0, -sticky => 'w')->select;
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'MySQL',
            	-relief   => 'flat',
            	-value    => 0,
        	)->grid(-row => 0, -column => 1, -sticky => 'w');
		my $tt = $t1->LabFrame(-label => "Source Type", -labelside => "acrosstop")->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$tt->Radiobutton(
            	-variable => \$srcType,
	    		-text => 'DBI',
            	-relief   => 'flat',
            	-value    => 1,
				-command => sub{
	    						$namLabel->configure(-text => 'Display Name');
								$label->configure(-text=>'ID (Name in Server)');
							}
        	)->grid(-row => 0, -column => 0, -sticky => 'w')->select;
		$tt->Radiobutton(
            	-variable => \$srcType,
	    		-text => 'FILE',
            	-relief   => 'flat',
            	-value    => 0,
				-command => sub{
	    						$namLabel->configure(-text => 'File Name');
								$label->configure(-text=>'         Path in Server');
							}
        	)->grid(-row => 0, -column => 1, -sticky => 'w');
		
		my $ttt = $t1->Frame->pack(-anchor=>'w',-padx=>10,-pady=>5);
		$ttt->Button(
            	-text    => 'Create',
       	    	-font => $ButtonFont,
            	-command => sub { 
								($desc=$sc->get('0.0','end'))=~s/[\n]+$//;
								unless($newID){
									$top->messageBox(-icon    => 'error',
                            						-type => 'OK', -default => 'OK',
						    						-font => $QuestionFont,
                            						-message => "ERROR: you must specify the name!!");
									return 0;
								}
								if ($srcType) {#We make a DB Source
									$Project->{host}->{$r}->{source}->{$newID}->{name}=$name;
									$Project->{host}->{$r}->{source}->{$newID}->{'tree-mode'}='close';
									$Project->{host}->{$r}->{source}->{$newID}->{description}=$desc;
									if($type){#this means it is PostGres
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{version}=1;
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'columns-query'}->{type}="SQL";
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'columns-query'}->{content}="SELECT ... FROM ...";
										
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'tables-query'}->{type}="SQL";
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'tables-query'}->{content}="SELECT ... FROM ...";
										
										$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{driver}='dbi:Pg';
									}#if type
									else{#otherwise, it's MySQL
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{version}=1;
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'columns-query'}->{type}="SQL";
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'columns-query'}->{content}="SHOW COLUMNS FROM ?Table?";
										
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'column-query'}->{type}="SQL";
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'column-query'}->{content}="DESCRIBE ?Table? ?Column?";
										
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'tables-query'}->{type}="SQL";
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'tables-query'}->{content}="SHOW TABLES";
										
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'sources-query'}->{type}="SQL";
										$Project->{host}->{$r}->{source}->{$newID}->{metadata}->{'sources-query'}->{content}="SHOW DATABASES";
										
										$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{driver}='dbi-mysql';
									}#else (if type)
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'src-name'}->{'gui-line'}=1;	
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'src-name'}->{content}=$newID;
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'password'}->{'gui-Line'}=2;
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'password'}->{content}=$pass;
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'user'}->{'gui-line'}=3;
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'user'}->{content}=$usr;
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'port'}->{'gui-line'}=4;
									$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{'port'}->{content}=$port;
									
									$TreeList->add("$r/$newID", -text => $name, -image => $Img{SRC}, -data => 'SRC', -at => 0);			
									$TreeList->setmode("$r/$newID",'close');
									$TreeList->close("$r/$newID");
									$TreeList->selectionClear();
	    				 			$TreeList->selectionSet("$r/$newID");
									$TreeList->anchorSet("$r/$newID");
								}#if srcType 
								else {#otherwise file source
									my $path = $newID;			
									my $x = &prop::rnd($size);
									my $y = &prop::rnd($size);
									$newID = &prop::IDGen();
									$Project->{host}->{$r}->{file}->{$newID}->{name}=$name;
									$Project->{host}->{$r}->{file}->{$newID}->{'tree-mode'}='close';
									$Project->{host}->{$r}->{file}->{$newID}->{description}=$desc;
									$Project->{host}->{$r}->{file}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{en}="$x $y";
									$Project->{host}->{$r}->{file}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{cz}="$x $y";
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'src-name'}->{'gui-line'}=1;	
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'src-name'}->{content}="$path/$name";
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'password'}->{'gui-Line'}=2;
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'password'}->{content}=$pass;
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'user'}->{'gui-line'}=3;
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'user'}->{content}=$usr;
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'port'}->{'gui-line'}=4;
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'port'}->{content}=$port;
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{driver}='dir';
									$Layer->{$VisibleLayer}->{"$r/_FILE/$newID"}=DBFile->new("$r/_FILE/$newID",$name,$desc,"$path/$name",$x,$y);
									$Layer->{$VisibleLayer}->{"$r/_FILE/$newID"}->draw($tSchemaC);
									$TreeList->add("$r/_FILE/$newID", -text => $name, -image => $Img{FILE}, -data => 'FILE');
									#$TreeList->setmode($path,'close');
									#$TreeList->close($path);
									#$TreeList->selectionClear();
	    				 			#$TreeList->selectionSet($path);
									#$TreeList->anchorSet($path);
								}#else (if srcType)
								$t1->destroy;
							},
			)->pack(-anchor=>'e',-side=>'left');

		$ttt->Button(
            	-text    => 'Cancel',
       	    	-font => $ButtonFont,
            	-command => [$t1 => 'destroy'],
        	)->pack(-anchor=>'e',-side=>'left');
		
		$typeRad->form(-top => $t, -left => 5);
		$frameD->form(-top => $typeRad, -left => 5);
		$tt->form(-top => $frameD, -left => 5);
    	$ttt->form(-top => $tt, -left => 5);
		
	}#If host 
	elsif ($ObjType eq 'SRC') {
		#Here we create a new table in this data base
		#WE assume that it actualy exists though,
		#and user must make sure of that, because
		#if it's not, it'll give error when trying
		#to connect to it
		my $t1 = $top->Toplevel(-title=>"Choose New Object To Be Created");
		my $t = $t1->Frame->pack(-padx=>10,-pady=>5);
		my ($type, $entry, $label);
		my ($name,$newID,$desc);
		my $frameD = $t1->LabFrame(-label => "Description", -labelside => "acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);   
    	my $sc = $frameD->Scrolled(qw/Text -setgrid true -height 3 -width 25 -wrap word -scrollbars e/, -background=>'white')->pack;
		
		
		#We format the window now
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$name);
		$label = $t->Label(-text => 'Display Name', -anchor => 'e', -justify => 'right');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 0, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 0, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$newID);
		$label = $t->Label(-text => 'ID (Name in Server)', -anchor => 'e', -justify => 'center');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 1, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 1, -column => 2,-sticky => 'ew');
		
		my $typeRad = $t1->LabFrame(-label => "Access Type", -labelside => "acrosstop")->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'RO',
            	-relief   => 'flat',
            	-value    => 'RO',
        	)->grid(-row => 0, -column => 0, -sticky => 'w')->select;
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'RW',
            	-relief   => 'flat',
            	-value    => 'RW',
        	)->grid(-row => 0, -column => 1, -sticky => 'w');
		
		my $ttt = $t1->Frame->pack(-anchor=>'w',-padx=>10,-pady=>5);
		$ttt->Button(
            	-text    => 'Create',
       	    	-font => $ButtonFont,
            	-command => sub { 
								unless($newID){
									$top->messageBox(-icon    => 'error',
                            						-type => 'OK', -default => 'OK',
						    						-font => $QuestionFont,
                            						-message => "ERROR: you must specify the name!!");
									return 0;
								}
								($desc=$sc->get('0.0','end'))=~s/[\n]+$//;
								my ($host,$src)=($r=~m|^([\w.]+)/(\w+)$|);
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$newID}->{access}=$type;
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$newID}->{name}=$name;
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$newID}->{description}=$desc;
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$newID}->{'tree-mode'}='close';
								my $path="$r/$newID";
								$TreeList->add($path, -text => $name, -image => $Img{TAB}, -data => 'TAB');			
								$TreeList->setmode($path,'close');
								$TreeList->close($path);
								$TreeList->selectionClear();
	    				 		$TreeList->selectionSet($path);
								$TreeList->anchorSet($path);
								$t1->destroy;
							},
			)->pack(-anchor=>'e',-side=>'left');

		$ttt->Button(
            	-text    => 'Cancel',
       	    	-font => $ButtonFont,
            	-command => [$t1 => 'destroy'],
        	)->pack(-anchor=>'e',-side=>'left');
		
		$typeRad->form(-top => $t, -left => 5);
		$frameD->form(-top => $typeRad, -left => 5);
		$ttt->form(-top => $frameD, -left => 5);
		
	
	}#elsif SRC 
	elsif ($ObjType eq 'TAB') {
		#Here we create a new column for this table
		#As in the creation of tables, we assume it
		#actually exists in the actual data base.
		my $t1 = $top->Toplevel(-title=>"Choose New Object To Be Created");
		my $t = $t1->Frame->pack(-padx=>10,-pady=>5);
		my ($type, @@entry, @@label);
		my ($name,$newID,$desc,$length,$pk,$unique,$notnull);		
		
		#We format the window now
		
		$entry[0] = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$name);
		$label[0] = $t->Label(-text => 'Display Name', -anchor => 'e', -justify => 'right');
		$entry[0]->configure(-state=>'normal', -foreground=>'black');
	    $label[0]->configure(-foreground=>'black');
		Tk::grid( $label[0], -row => 0, -column => 1, -sticky => 'e');
        Tk::grid( $entry[0], -row => 0, -column => 2,-sticky => 'ew');
		
		$entry[1] = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$newID);
		$label[1] = $t->Label(-text => 'ID (Name in Server)', -anchor => 'e', -justify => 'center');
		$entry[1]->configure(-state=>'normal', -foreground=>'black');
	    $label[1]->configure(-foreground=>'black');
		Tk::grid( $label[1], -row => 1, -column => 1, -sticky => 'e');
        Tk::grid( $entry[1], -row => 1, -column => 2,-sticky => 'ew');
		
		$entry[2] = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$length);
		$label[2] = $t->Label(-text => 'Length', -anchor => 'e', -justify => 'center');
		$entry[2]->configure(-state=>'normal', -foreground=>'black');
	    $label[2]->configure(-foreground=>'black');
		Tk::grid( $label[2], -row => 2, -column => 1, -sticky => 'e');
        Tk::grid( $entry[2], -row => 2, -column => 2,-sticky => 'ew');
		
		my $typeRad = $t1->LabFrame(-label=>"Data Type", -labelside=>"acrosstop")->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'int',
            	-relief   => 'flat',
            	-value    => 'int',
        	)->grid(-row => 0, -column => 0, -sticky => 'w')->select;
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'float',
            	-relief   => 'flat',
            	-value    => 'float',
        	)->grid(-row => 0, -column => 1, -sticky => 'w');
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'char',
            	-relief   => 'flat',
            	-value    => 'char',
        	)->grid(-row => 1, -column => 0, -sticky => 'w');
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'varchar',
            	-relief   => 'flat',
            	-value    => 'varchar',
        	)->grid(-row => 1, -column => 1, -sticky => 'w');
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'date',
            	-relief   => 'flat',
            	-value    => 'date',
        	)->grid(-row => 2, -column => 0, -sticky => 'w');
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'time',
            	-relief   => 'flat',
            	-value    => 'time',
        	)->grid(-row => 2, -column => 1, -sticky => 'w');
		
		my $checks = $t1->LabFrame(-label=>"Constraints", -labelside=>"acrosstop")->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$checks->Checkbutton(
				-variable => \$pk,
	    		-text => 'Primary Key',
            	-relief   => 'flat',
			)->grid(-row => 1, -column => 1, -sticky => 'w');
		$checks->Checkbutton(
				-variable => \$unique,
	    		-text => 'Unique',
            	-relief   => 'flat',
			)->grid(-row => 2, -column => 1, -sticky => 'w');
		$checks->Checkbutton(
				-variable => \$notnull,
	    		-text => 'Not Null',
            	-relief   => 'flat',
			)->grid(-row => 3, -column => 1, -sticky => 'w');
		my $ttt = $t1->Frame->pack(-anchor=>'w',-padx=>10,-pady=>5);
		$ttt->Button(
            	-text    => 'Create',
       	    	-font => $ButtonFont,
            	-command => sub { 
								unless($newID){
									$top->messageBox(-icon    => 'error',
                            						-type => 'OK', -default => 'OK',
						    						-font => $QuestionFont,
                            						-message => "ERROR: you must specify the name!!");
									return 0;
								}
								my ($host,$src,$tbl)=($r=~m|^([\w.]+)/(\w+)/(\w+)$|);
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$tbl}->{column}->{$newID}->{type}=$type;
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$tbl}->{column}->{$newID}->{name}=$name;
								$Project->{host}->{$host}->{source}->{$src}->{table}->{$tbl}->{column}->{$newID}->{length}=$length;
								my $path="$r/$newID";
								$TreeList->add($path, -text => $name, -image => $Img{COL}, -data => 'COL');			
								$name='';
								$newID='';
								$length='';
							},
			)->pack(-anchor=>'e',-side=>'left');

		$ttt->Button(
            	-text    => 'Cancel',
       	    	-font => $ButtonFont,
            	-command => [$t1 => 'destroy'],
        	)->pack(-anchor=>'e',-side=>'left');
		
		$typeRad->form(-top => $t, -left => 5);
		$checks->form(-top =>$typeRad, -left => 5);
		$ttt->form(-top => $checks, -left => 5);
		
	}#elsif TAB
	elsif ($ObjType eq 'TRAN') {
		my $t1 = $top->Toplevel(-title=>"Choose New Object To Be Created");
		my $t = $t1->Frame->pack(-padx=>10,-pady=>5);
		my ($type, $arEnt, $arLab,$data);
		my $arity='1';
		my $tt = $t1->Frame(-relief => 'raised', -borderwidth=>1)->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$arEnt = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$arity);
		$arLab = $t->Label(-text => 'Arity Of The New Object', -anchor => 'e', -justify => 'right');
		$arEnt->configure(-state=>'normal', -foreground=>'black');
	    $arLab->configure(-foreground=>'black');
		Tk::grid( $arLab, -row => 0, -column => 1, -sticky => 'e');
        Tk::grid( $arEnt, -row => 0, -column => 2,-sticky => 'ew');
		
			
		my $typeRad = $t1->LabFrame(-label=>"Choose Type", -labelside=>"acrosstop")->pack(-anchor=>'e',-padx=>10,-pady=>5);
		$typeRad->Radiobutton(
            	-variable => \$data,
	    		-text => 'Stream',
            	-relief   => 'flat',
            	-value    => 'stream',
        	)->grid(-row => 0, -column => 0, -sticky => 'w')->select;
		$typeRad->Radiobutton(
            	-variable => \$data,
	    		-text => 'Scalar',
            	-relief   => 'flat',
            	-value    => 'scalar',
        	)->grid(-row => 1, -column => 0, -sticky => 'w');
			
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'Input',
            	-relief   => 'flat',
            	-value    => 1,
        	)->grid(-row => 0, -column => 1, -sticky => 'w')->select;
		$typeRad->Radiobutton(
            	-variable => \$type,
	    		-text => 'Output',
            	-relief   => 'flat',
            	-value    => 0,
        	)->grid(-row => 1, -column => 1, -sticky => 'w');
		
		my $ttt = $t1->Frame->pack(-anchor=>'w',-padx=>10,-pady=>5);
		$ttt->Button(
            	-text    => 'Create',
       	    	-font => $ButtonFont,
            	-command => sub { 
	    						my ($host,$tr)=($r=~m|^([\w.]+)/_TRAN/(\w+)$|);
	    						my $newID = &prop::IDGen();
								my $name = substr($newID,1,2);
								my $line = 1;
								if ($type) {#We make an input
									$arity = $data eq 'scalar' ? 1 : $arity;
									$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{name}= $name;
									$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{length}= $arity;
									$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{type}=$data;
									if($Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}){
										$line = $Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->getInOrder();
										#print "\n le toca en la linea numero $line";
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addInp($newID,$name,"",undef,$arity,$line);#There are 3 args missing, but they can be undef
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->clear();
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->draw($tSchemaC);
										$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{description}="";
										$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{line}=$line;
										#$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{line}=$line;
									}
									$TreeList->add("$host/_TRAN/$tr/$newID", -text => $name, -image => $Img{TRAN_I}, -data => 'TRAN_I', -at=>0);
								} 
								else {#an Output
									$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{name}= $name;
									$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{length}= $arity;
									$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{type}=$data;
									if($Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}){
										$line = $Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->getOutOrder();
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addOut($newID,$name,"",undef,$arity,$line);#There are 3 args missing, but they can be undef
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->clear();
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->draw($tSchemaC);
										$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{description}="";
										$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{line}=$line;
										#$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{line}=$line;
									}
									$TreeList->add("$host/_TRAN/$tr/$newID", -text => $name, -image => $Img{TRAN_O}, -data => 'TRAN_O', -at=>-1);
								}
								$t1->destroy;
							},
			)->pack(-anchor=>'e',-side=>'left');

		$ttt->Button(
            	-text    => 'Cancel',
       	    	-font => $ButtonFont,
            	-command => [$t1 => 'destroy'],
        	)->pack(-anchor=>'e',-side=>'left');

	} 
	elsif ($ObjType eq 'TRAN_I') {
		my ($host,$tr)=($r=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		my $newID = &prop::IDGen();
		my $name = substr($newID,1,2); 
		my $line = 1;
		$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{name}= $name;
		$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{length}= 1;
		if($Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}){
			$line = $Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->getInOrder();
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addInp($newID,$name,"",undef,1,$line);#There are 3 args missing, but they can be undef
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->clear();
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->draw($tSchemaC);
			$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{description}="";
			$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{line}=$line;
			$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{line}=$line;
		}
		$TreeList->add("$host/_TRAN/$tr/$newID", -text => $name, -image => $Img{TRAN_I}, -data => 'TRAN_I', -at=>0);
		

	} 
	elsif ($ObjType eq 'TRAN_O') {
		my ($host,$tr)=($r=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		my $newID = &prop::IDGen();
		my $name = substr($newID,1,2); #
		my $line = 1;
		$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{name}= $name;
		$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{length}= 1;
		if($Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}){
			$line = $Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->getOutOrder();
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addOut($newID,$name,"",undef,1,$line);#There are 3 args missing, but they can be undef
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->clear();
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->draw($tSchemaC);
			$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{description}="";
			$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{line}=$line;
			$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{line}=$line;
		}
		$TreeList->add("$host/_TRAN/$tr/$newID", -text => $name, -image => $Img{TRAN_O}, -data => 'TRAN_O', -at=>-1);

	}
	elsif ($ObjType eq 'DIR/_ATTR'){
		print "\nNew Attribute";
		#This one does not have a Group
		my $newID = &prop::IDGen();
		my $x = &prop::rnd($size);
		my $y = &prop::rnd($size);
		$Project->{attr}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{en}="$x $y";
		$Project->{attr}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{cz}="$x $y";
		$Project->{attr}->{$newID}->{description}->{en}= "New Attribute created with ID = $newID";
		$Project->{attr}->{$newID}->{description}->{cz}= "New Attribute created with ID = $newID";
		$Project->{attr}->{$newID}->{name}->{en}= "NewAttribute";
		$Project->{attr}->{$newID}->{name}->{cz}= "NewAttribute";
		$Project->{attr}->{$newID}->{pk}[0]="";
		$Project->{attr}->{$newID}->{fk}[0]="";
		$TreeList->add("_LOBJ/_ATTR/$newID", -text => "NewAttribute", -image => $Img{ATTR}, -data => 'ATTR');                       
		$Layer->{$VisibleLayer}->{"_LOBJ/_ATTR/$newID"} = DBLogObj->new($newID,"NewAttribute","New Attribute created with ID = $newID",$x,$y,$unSortAttr,$unSortAttr,'ATTR');
		$Layer->{$VisibleLayer}->{"_LOBJ/_ATTR/$newID"}->draw($tSchemaC);
		
   	}
   	elsif ($ObjType eq 'DIR/_FACT'){
		print "\nNew Fact";
		my $newID = &prop::IDGen();
		my $x = &prop::rnd($size);
		my $y = &prop::rnd($size);
		$Project->{fact}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{en}="$x $y";
		$Project->{fact}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{cz}="$x $y";
		$Project->{fact}->{$newID}->{description}->{en}= "New Fact created with ID = $newID";
		$Project->{fact}->{$newID}->{description}->{cz}= "New Fact created with ID = $newID";
		$Project->{fact}->{$newID}->{name}->{en}= "NewFact";
		$Project->{fact}->{$newID}->{name}->{cz}= "NewFact";
		$Project->{fact}->{$newID}->{expr}[0] = "No Expresion entered";
		$TreeList->add("_LOBJ/_FACT/$newID", -text => "NewFact", -image => $Img{FACT}, -data => 'FACT');                       
		$Layer->{$VisibleLayer}->{"_LOBJ/_FACT/$newID"} = DBLogObj->new($newID,"NewFact","New Fact created with ID = $newID",$x,$y,$factColor,undef,'FACT');
		$Layer->{$VisibleLayer}->{"_LOBJ/_FACT/$newID"}->draw($tSchemaC);
   	}
   	elsif ($ObjType eq 'DIR/_TRIG'){
		print "\nNew Trigger";
		my $newID = &prop::IDGen();
		my $x = &prop::rnd($size);
		my $y = &prop::rnd($size);
		$Project->{trigger}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{en}="$x $y";
		$Project->{trigger}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{cz}="$x $y";
		$Project->{trigger}->{$newID}->{description}="No description Input yet";
		$Project->{trigger}->{$newID}->{name} = "NewTrigger"; 
		$Project->{trigger}->{$newID}->{type} = "manual";
		$TreeList->add("_TRIG/$newID", -text => "NewTrigger", -image => $Img{TRIG}, -data => 'TRIG');                       
		$Layer->{$VisibleLayer}->{"_TRIG/$newID"} = DBTrig->new($newID,$Project->{trigger}->{$newID}->{name},$Project->{trigger}->{$newID}->{description},$x,$y);
		$Layer->{$VisibleLayer}->{"_TRIG/$newID"}->draw($tSchemaC);
   	}
   	elsif ($ObjType eq 'DIR/_TRAN'){
		print "\nNew Transformation";
		my $host;
		($host)=($r=~m|^([\w.]+)/_TRAN$|);
		my $newID = &prop::IDGen();
		my $x = &prop::rnd($size);
		my $y = &prop::rnd($size);
		$Project->{host}->{$host}->{transformation}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{en}="$x $y";
		$Project->{host}->{$host}->{transformation}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{cz}="$x $y";
		$Project->{host}->{$host}->{transformation}->{$newID}->{description}="No description Input yet";
		$Project->{host}->{$host}->{transformation}->{$newID}->{name} = "NewTran"; 
		$Project->{host}->{$host}->{transformation}->{$newID}->{input}={};
		$Project->{host}->{$host}->{transformation}->{$newID}->{output}={};
		$Project->{host}->{$host}->{transformation}->{$newID}->{proc}->{language}="perl";
		$Project->{host}->{$host}->{transformation}->{$newID}->{proc}->{content}="";
		$Project->{host}->{$host}->{transformation}->{$newID}->{type}=$tranType;
		my $name = $Project->{host}->{$host}->{transformation}->{$newID}->{name};
		my $desc = $Project->{host}->{$host}->{transformation}->{$newID}->{description};
		$TreeList->add("$host/_TRAN/$newID", -text => "NewTran", -image => $Img{TRAN}, -data => 'TRAN');                       
		$TreeList->setmode("$host/_TRAN/$newID",'close');
		$TreeList->close("$host/_TRAN/$newID");
		$Layer->{$VisibleLayer}->{"$host/_TRAN/$newID"} = DBTransf->new("$host/_TRAN/$newID",$name,$desc,$x,$y);
		$Layer->{$VisibleLayer}->{"$host/_TRAN/$newID"}->draw($tSchemaC);
   	}
   	elsif ($ObjType eq 'DIR/_CONST'){
		print "\nNew Constant";
		my $newID = &prop::IDGen();
		my $x = &prop::rnd($size);
		my $y = &prop::rnd($size);
		$Project->{const}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{en}="$x $y";
		$Project->{const}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}->{cz}="$x $y";
		$Project->{const}->{$newID}->{description}="No description Input yet";
		$Project->{const}->{$newID}->{name} = "NewConstant"; 
		$Project->{const}->{$newID}->{data} = 0;
		$TreeList->add("_CONST/$newID", -text => "NewConstant", -image => $Img{CONST}, -data => 'CONST');                       
		$Layer->{$VisibleLayer}->{"_CONST/$newID"} = DBConst->new($newID,$Project->{const}->{$newID}->{name},$Project->{const}->{$newID}->{description},0,$x,$y);
		$Layer->{$VisibleLayer}->{"_CONST/$newID"}->draw($tSchemaC);
   	}
	elsif ($ObjType eq 'DIR/_LAYER'){
		print "\nNew Layer";
		my $newID = &prop::IDGen();
		$Project->{'gui-layer'}->{$newID}->{description}->{en}="No description Input yet";
		$Project->{'gui-layer'}->{$newID}->{description}->{cz}="Jeste Nic";
		$Project->{'gui-layer'}->{$newID}->{name}->{en} = "New Layer"; 
		$Project->{'gui-layer'}->{$newID}->{name}->{cz} = "New Layer"; 
		$TreeList->add("_LAYER/$newID", -text => "New Layer", -image => $Img{LAYER}, -data => 'LAYER');
   	}
	elsif ($ObjType eq 'ATTR') {		
		# attributes can be in group or not
		my $id;
		($id=$r)=~s/^_LOBJ\/_ATTR\/\S*\/\S*\/|^_LOBJ\/_ATTR\/\S*\/|^_LOBJ\/_ATTR\///;	
		my $dialog = $top->Dialog(-text => 'Choose Key Type',  -title => 'Create Key', 
								-default_button => 'Foreign', -buttons => [qw(Primary Foreign Cancel)]);
		my $answer = $dialog->Show();
		if($answer eq 'Primary'){
			push (@@{$Project->{attr}->{$id}->{pk}}, "");
		}
		elsif($answer eq 'Foreign'){
			push (@@{$Project->{attr}->{$id}->{fk}}, "");
		} 
	}
	elsif ($ObjType eq 'FACT') {		
		# attributes can be in group or not
		my $id;
		($id=$r)=~s|^_LOBJ/_FACT/||;	
		push (@@{$Project->{fact}->{$id}->{expr}}, "");
	}
  }
}

1;

__END__
@


1.13
log
@Fixed notation bug (dbi:MySQL -> dbi-mysql)
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.12 2004/02/17 12:35:05 tuco80 Exp $
d726 1
@


1.12
log
@+ Expression Handling(add/edit) for Facts
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.11 2004/02/11 15:27:17 tuco80 Exp $
d262 1
a262 1
										$Project->{host}->{$r}->{source}->{$newID}->{'src-conn'}->{driver}='dbi:MySQL';
@


1.11
log
@+Creation of primary/foreign keys for attributes
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.10 2004/01/27 11:09:37 tuco80 Exp $
d674 2
d692 1
d770 6
a775 1
		&ShowProperties;
@


1.10
log
@+ Creation of Layers
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.9 2003/12/19 11:55:04 tuco80 Exp $
d128 1
a128 8
	elsif ($ObjType eq 'ATTR') {		
		# attributes can be in group or not
		my $id;
		($id=$r)=~s|^_LOBJ/_ATTR/||;		
		#$p=$Project->{attr};
		print "\nNew Attribute in $id and $r";

	}
d754 15
@


1.9
log
@Made column creation a little less tedious
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.8 2003/11/25 10:26:16 tuco80 Exp $
d9 1
a9 1
use vars qw($toolbar @@toolB $TreeList $top $Project $tSchemaC);
d423 1
a423 1
		my ($name,$newID,$desc,$length);		
d486 16
d533 2
a534 1
		$ttt->form(-top => $typeRad, -left => 5);
d752 9
@


1.8
log
@Fixed bug in language changing, still small detail missing
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.7 2003/11/06 12:28:24 tuco80 Exp $
d120 1
a120 1
	print "\nEste es r: $r y este Objtectype: $ObjType";
d422 1
a422 1
		my ($type, $entry, $label);
d427 20
a446 20
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$name);
		$label = $t->Label(-text => 'Display Name', -anchor => 'e', -justify => 'right');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 0, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 0, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$newID);
		$label = $t->Label(-text => 'ID (Name in Server)', -anchor => 'e', -justify => 'center');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 1, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 1, -column => 2,-sticky => 'ew');
		
		$entry = $t->Entry(-relief=>'sunken', -width=>10, -textvariable=>\$length);
		$label = $t->Label(-text => 'Length', -anchor => 'e', -justify => 'center');
		$entry->configure(-state=>'normal', -foreground=>'black');
	    $label->configure(-foreground=>'black');
		Tk::grid( $label, -row => 2, -column => 1, -sticky => 'e');
        Tk::grid( $entry, -row => 2, -column => 2,-sticky => 'ew');
d504 3
a506 6
								#$TreeList->setmode($path,'close');
								#$TreeList->close($path);
								#$TreeList->selectionClear();
	    				 		#$TreeList->selectionSet($path);
								#$TreeList->anchorSet($path);
								$t1->destroy;
d716 2
@


1.7
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.6 2003/11/03 18:33:42 tuco80 Exp $
d295 2
a296 1
									$Project->{host}->{$r}->{file}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}="$x $y";
d661 2
a662 1
		$Project->{attr}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}="$x $y";
d677 2
a678 1
		$Project->{fact}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}="$x $y";
d692 2
a693 1
		$Project->{trigger}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}="$x $y";
d708 2
a709 1
		$Project->{host}->{$host}->{transformation}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}="$x $y";
d727 2
a728 1
		$Project->{const}->{$newID}->{'gui-presentation'}->{$VisibleLayer}->{'coord'}="$x $y";
@


1.6
log
@+ creation of tables and columns
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.5 2003/10/22 09:32:22 tuco80 Exp $
d7 1
d120 1
a120 1
	#print "\nEste es r: $r";
d288 3
a290 1
									my $path = $newID;
d295 1
d297 1
a297 1
									$Project->{host}->{$r}->{file}->{$newID}->{'src-conn'}->{'src-name'}->{content}=$path."/$newID";
d305 8
a312 7
									$path="$r/_FILE/$newID";
									$TreeList->add($path, -text => $name, -image => $Img{FILE}, -data => 'FILE');			
									$TreeList->setmode($path,'close');
									$TreeList->close($path);
									$TreeList->selectionClear();
	    				 			$TreeList->selectionSet($path);
									$TreeList->anchorSet($path);
d503 5
a507 5
								$TreeList->setmode($path,'close');
								$TreeList->close($path);
								$TreeList->selectionClear();
	    				 		$TreeList->selectionSet($path);
								$TreeList->anchorSet($path);
@


1.5
log
@Changed ID substring for the name, as it didn't change after 1 cycle
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.4 2003/09/25 09:17:12 tuco80 Exp $
d136 2
a137 18
	elsif ($ObjType eq 'HOST') {
		#$p=$Project->{host};
		#$id=$SLSel;
		
	} 
	elsif ($ObjType eq 'SRC') {
		#my ($host,$src)=($SLSel=~m|^([\w.]+)/(\w+)$|);
		#$p=$Project->{host}->{$host}->{source};
		#$id=$src;
		
	} 
	elsif ($ObjType eq 'TAB') {
		#my ($host,$src,$tbl)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		#$p=$Project->{host}->{$host}->{source}->{$src}->{table};
		#$id=$tbl;
		#$tv = 1;

	} 
d146 371
d520 1
a520 1
		my ($type, $arEnt, $arLab);
d529 17
a545 1
		$tt->Radiobutton(
d550 2
a551 2
        	)->grid(-row => 0, -column => 0, -sticky => 'w')->select;
		$tt->Radiobutton(
d556 1
a556 1
        	)->grid(-row => 1, -column => 0, -sticky => 'w');
d568 1
d571 1
d575 1
a575 1
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addInp($newID,$name,"",undef,$arity);#There are 3 args missing, but they can be undef
d580 1
a580 1
										$Project->{host}->{$host}->{transformation}->{$tr}->{input}->{$newID}->{line}=$line;
d587 1
d590 1
a590 1
										$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addOut($newID,$name,"",undef,$arity);#There are 3 args missing, but they can be undef
d595 1
a595 1
										$Project->{host}->{$host}->{transformation}->{$tr}->{output}->{$newID}->{line}=$line;
d619 1
a619 1
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addInp($newID,$name,"");#There are 3 args missing, but they can be undef
d639 1
a639 1
			$Layer->{$VisibleLayer}->{"$host/_TRAN/$tr"}->addOut($newID,$name,"");#There are 3 args missing, but they can be undef
@


1.4
log
@+ Creation of new Objects
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.3 2003/05/30 16:22:17 spanhel Exp $
d194 1
a194 1
								my $name = substr($newID,2,2);
d201 1
a201 1
										print "\n le toca en la linea numero $line";
d207 1
d221 1
d239 1
a239 1
		my $name = substr($newID,2,2); 
d242 1
d250 1
d259 1
a259 1
		my $name = substr($newID,2,2); #
d262 1
d270 1
@


1.3
log
@logical model
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.2 2003/05/07 14:28:51 spanhel Exp $
d8 3
a10 1
use vars qw($toolbar @@toolB $TreeList $top);
d117 228
a344 2
  if ($r=~/^_LAYER/) {
    &NewLayer($top);
@


1.2
log
@schema model
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.1.1.1 2002/09/24 01:34:16 michald Exp $
d8 1
a8 1
use vars qw($toolbar @@toolB $TreeList);
d116 1
a116 1
    &NewLayer();
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id: bar.pl,v 1.3 2002/08/30 00:37:25 michal Exp $
d7 2
a8 2

use vars qw($toolbar @@toolB);
d80 1
a80 1
        	    -command => sub {},
d111 8
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

head	1.25;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.25
date	2003.12.11.17.45.54;	author tuco80;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.11.14.06.25;	author tuco80;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.20.16.48.03;	author tuco80;	state Exp;
branches;
next	1.22;

1.22
date	2003.11.19.10.25.49;	author tuco80;	state Exp;
branches;
next	1.21;

1.21
date	2003.11.07.10.26.28;	author tuco80;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.06.12.28.24;	author tuco80;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.02.13.41.40;	author tuco80;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.01.07.39.11;	author spanhel;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.22.09.48.35;	author tuco80;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.08.14.07.20;	author tuco80;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.02.08.17.53;	author tuco80;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.01.14.22.24;	author tuco80;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.29.11.45.22;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.21.13.20.48;	author tuco80;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.19.14.32.16;	author spanhel;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.13.10.52.28;	author tuco80;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.12.09.07.22;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.08.14.57.37;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.30.07.23.24;	author spanhel;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.26.14.11.46;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.30.16.22.17;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.22.13.55.32;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.20.16.25.52;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.20.39.58;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.22;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.22;	author michald;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Tiny bug with selection box
@
text
@#-----------------------------------------------------
# Logical Object
#-----------------------------------------------------
# $Id: DBLogObj.pm,v 1.24 2003/12/11 14:06:25 tuco80 Exp $

package DBLogObj;
use base Tk::Canvas;
use strict;
use Data::Dumper;
require "font.def";
use vars qw($EntityFont $RoleFont);

#my $EntityFont='-*-verdana-bold-r-normal-*-11-*-iso8859-2';
my $attrXpad = 7;
my $attrYpad = 4;
my $uBannerClr_FT = 'SeaGreen'; #fact tables
my $uBannerClr_LU = 'blue'; #look up tables
my $attrYstep = 10;
my $tblHeadY = 16;
my $TabElemN=4; # No of table drawing elements (ID numbering of Attr elements will start on this)
my $selBoxWidth = 3;  #width that selection box will have around the object
my $selBoxCol = 'blue'; #fill color of the selection box

##################################################
## the object constructor                       ##
##################################################

sub new {

	my ($proto,$id,$name,$desc,$x,$y, $color_a, $color_r,$type)=@@_;

	my $class = ref($proto) || $proto;
	my $self  = {};
        
	$self->{ID}    = $id;
	$self->{NAME}    = $name;
	$self->{DESC}    = $desc;
	$self->{REL}     = [];	# array of relations
	#$self->{LAYERS}  = [1];	# list of layers in which this object is visible
	$self->{CANV_ID} = [];	# list of canvas identifiers [head_text,head_rect,body_rect,...]
	$self->{CANVAS} = '';	# canvas
	$self->{COORDS}  = [$x,$y,$x,$y];	# coords of object outline box
	$self->{COLOR}->{ATTR} = $color_a;
    $self->{COLOR}->{ROLE} = $color_r;
    $self->{TYPE} = $type;  # attribute or fact
	$self->{TEXT_W}  = 0;	# text width
	$self->{TEXT_H}  = 0;	# text height
	$self->{ROLE}    = ();	# hash of Attribute Parameters {name,desc,constrain,type,len,order}
    $self->{ROLE_Y}  = ();	# hash of Attributes Y coords
    $self->{ROLE_N}  = 0;	# No of Attributes   
	$self->{SELECTED} = 0;  # To know if the object is selected or not
	#$self->{ROLE}  = $role;	# text width
	
	 
	bless ($self, $class);
	return $self;

}

##############################################
## methods to access per-object data        ##
##                                          ##
## With args, they set the value.  Without  ##
## any, they only retrieve it/them.         ##
##############################################

sub name {
	my $self = shift;
	if (@@_) { 
    	$self->{NAME} = shift;
		if ($self->{CANV_ID}[1]) {
			if ($self->type() eq 'ATTR'){
				$self->{CANVAS}->itemconfigure($self->{CANV_ID}[2], -text=>$self->{NAME});
			}
			else{
				$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -text=>$self->{NAME});
			}
		}
	}
	return $self->{NAME};
}

sub desc {
	my $self = shift;
	if (@@_) { $self->{DESC} = shift }
	return $self->{DESC};
}

sub id{
	my $self = shift;
	if(@@_){
		$self->{ID} = shift;
	}
	return $self->{ID};
}

#Only for compliance of the objects, needed for creations of new relations beteween objects
sub type{
	my $self = shift;
	if(@@_){
		$self->{TYPE} = shift;
	}
	return $self->{TYPE};
}

sub selected {
	my $self = shift;
	if (@@_) { $self->{SELECTED} = shift }
	return $self->{SELECTED};
}

sub set_selected{
	my $self = shift;
	$self->{SELECTED} = 1;
	my($x1,$y1,$x2,$y2)=$self->coords();
	my $temp = $selBoxWidth;
	$temp--;
	my $sx1 = $x1-$temp;
	my $sy1 = $y1-$temp;
	my $sx2 = $x2+$temp;
	my $sy2 = $y2+$temp;
	my $pos = $self->{TYPE}=~/ATTR/ ? 3 : 2;
	$self->{CANVAS}->coords($self->{CANV_ID}[$pos], $sx1, $sy1, $sx2, $sy2);
		
}

sub change_color_role{
	my $self = shift;
	my $color = shift;
	my $from = shift;
	$self->{COLOR}->{ROLE} = $color;
	$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -fill => $color) if $self->{CANV_ID}[1];
	#CAREFUL!! This is only for Editing the color in Edit.pm!!!
	#this is not correct behavior!!
	if ($from){
		$self->{ROLE}    = ();	# hash of Attribute Parameters {name,desc,constrain,type,len,order}
    	$self->{ROLE_Y}  = ();	# hash of Attributes Y coords
    	$self->{ROLE_N}  = 0;	# No of Attributes  
		$self->addRole($color,1); 
	}
}

sub change_color_attr{
	my $self = shift;
	my $color = shift;
	$self->{COLOR}->{ATTR} = $color;
	$self->{CANVAS}->itemconfigure($self->{CANV_ID}[0], -fill => $color) if $self->{CANV_ID}[0];
}

sub set_deselected{
	my $self = shift;
	$self->{SELECTED} = 0;
	my $pos = $self->{TYPE}=~/ATTR/ ? 3 : 2;
	$self->{CANVAS}->coords($self->{CANV_ID}[$pos], -10, -10, -10, -10);
}

sub coords {
	my $self = shift;
	if (@@_) {
		my ($x1,$y1,$x2,$y2) = @@_;
		$self->{COORDS} = [$x1,$y1,$x2,$y2];
		$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
	}
	return $self->{CANVAS}->coords($self->{CANV_ID}[0]) if ($self->{CANVAS});
}

sub addRole {
	my $self = shift;
	my ($name,$lineOrder) = @@_;
	if ($lineOrder) {$lineOrder--} else { $lineOrder=$self->{ROLE_N} };
	$self->{ROLE}{$name} = {name=>$name, order=>$lineOrder };
	$self->{ROLE_N}++;
}

sub delRoles{
	my $self = shift;
	$self->{ROLE}    = ();	# hash of Attribute Parameters {name,desc,constrain,type,len,order}
    $self->{ROLE_Y}  = ();	# hash of Attributes Y coords
    $self->{ROLE_N}  = 0;	# No of Attributes   
}
	

sub getAttrY {	#return Y coordinate of connection point
	my $self = shift;
	return $self->{COORDS}[3]-$self->{COORDS}[1];
}

sub relation {
	my $self = shift;
	if (@@_) {
		my ($id,$edge) = @@_;	# relation id, edge position [0,1] ... first or last
        	push (@@{$self->{REL}}, $id);
	}
	return $self->{REL}
}

sub delRelation{
	my $self = shift;
	my ($relID) = @@_;
	my @@newRels;
	foreach (@@{$self->relation}) {	#move all connected relations
		unless ($_->id eq $relID){
			push(@@newRels,$_);
		}
	}
	@@{$self->{REL}}=@@newRels;
}

sub move {
	my $self = shift;
	my ($c,$x,$y) = @@_;	# canvas,x,y
	my $tag_name;
	
	if ($self->{TYPE}=~/ATTR/) {
	   $tag_name = "_LOBJ/_ATTR/$self->{ID}";
	} 
	else {
	   $tag_name = "_LOBJ/_FACT/$self->{ID}";
        } 
	$c->move('_'.$tag_name, $x, $y);
	if($self->{SELECTED}){
		$c->move('SELECTED_'.$tag_name, $x, $y);
		
	}
	foreach (@@{$self->relation}) {	#move all connected relations
		$_->adjustCoords;
	}
	$self->{COORDS} = $self->{CANVAS}->coords($self->{CANV_ID}[0]);
}

sub draw {
	my ($self,$c) = @@_;	# canvas
	$self->{CANVAS}=$c;
	my ($x1,$y1) = @@{$self->{COORDS}};	
	my $tag_name;        	
	my $t; ($t=$self->{NAME});#=~s/\s+/\n/g;	#here should be something more clever for line wrapping

	if ($self->{TYPE}=~/ATTR/) {
	   $tag_name = "__LOBJ/_ATTR/$self->{ID}";
	   my $sel = $self->{SELECTED};
 	   #This is the selection box, which will remain hidden until the object is selected
	   $self->{CANV_ID}[3]=$c->createRectangle(-10,-10,-10,-10,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
	   $self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill =>  $self->{COLOR}->{ATTR}, -tags=>[$tag_name,'item']);
	   $self->{CANV_ID}[1]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $self->{COLOR}->{ROLE}, -tags=>[$tag_name, 'attr']);
	   $self->{CANV_ID}[2]=$c->createText(0,0, qw/-anchor c -fill white -justify left/,-text=>$t,-font=>$EntityFont, -tags=>[$tag_name,'item']); 
	   foreach (keys %{$self->{ROLE}}) {$self->drawRole($_)};
	   $self->setTextWidth;
	   $self->adjustCoords; 
	} 
	else {
	   $tag_name = "__LOBJ/_FACT/$self->{ID}";
	   $self->{CANV_ID}[2]=$c->createOval(-10,-10,-10,-10,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
	   $self->{CANV_ID}[0]=$c->createOval(0,0,0,0, -width=>1, -fill => $self->{COLOR}->{ATTR}, -tags=>[$tag_name,'item']);
	   $self->{CANV_ID}[1]=$c->createText(0,0, qw/-anchor c -fill white -justify center/,-text=>$t,-font=>$EntityFont, -tags=>[$tag_name,'item']);
	   my @@w=$c->bbox($self->{CANV_ID}[1]);	# check text outline coords
	   $self->{TEXT_W}=$w[2]-$w[0];
	   my $x2=$x1+$self->{TEXT_W}+$attrXpad*2;
	   my $y2=$y1+$w[3]-$w[1]+$attrYpad*2;
	   $c->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
	   $c->coords($self->{CANV_ID}[1], ($x1+$x2)/2, ($y1+$y2)/2);
	   $self->coords($x1, $y1, $x2, $y2);
   }
   
   if ($self->{SELECTED}){$self->set_selected();}						
}


sub setTextWidth {
	my $self = shift;
	my @@w=$self->{CANVAS}->bbox($self->{CANV_ID}[2]);
	$self->{TEXT_W}=$w[2]-$w[0];
	$self->{TEXT_H}=$w[3]-$w[1];
	foreach (keys %{$self->{ROLE}}) {
		my @@w = $self->{CANVAS}->bbox($self->{CANV_ID}[$self->{ROLE}{$_}{order}+$TabElemN]);
		if ($self->{TEXT_W} < $w[2]-$w[0]) { $self->{TEXT_W} = $w[2]-$w[0] };
	}
}

sub adjustCoords {	# adjust components coordinates
	my $self = shift;
	my ($x1,$y1) = @@{$self->{COORDS}};
	#my $x2=$x1+$self->{TEXT_W}+$attrXpad*2;
	#$y1 = $y1 + $self->{TEXT_H};
	my $x2=$x1+$self->{TEXT_W}+$attrXpad*2;
	my $y2=$y1 + $attrYpad*2 +$self->{TEXT_H};
	my $sel = $self->{SELECTED};	
	$self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
	$self->{CANVAS}->coords($self->{CANV_ID}[1], $x1, $y2, $x2, $y2+($self->{ROLE_N})*$attrYstep + $attrYpad);
	$self->{CANVAS}->coords($self->{CANV_ID}[2], ($x1+$x2)/2, ($y1+$y2)/2);
	$self->coords($x1, $y1,  $x2, $y2+($self->{ROLE_N})*$attrYstep + $attrYpad);
	foreach (@@{$self->relation}) {	#adjust all connected relations
		$_->adjustCoords;
	};
}

sub delFromGUI{
	my $self = shift;
	my ($layerID) = @@_;
	$self->clear; 
	foreach (@@{$self->relation}) {	#delete all connected relations
		$_->delFromGUI($layerID,$self->{ID});
	};
	return @@{$self->relation};
}
	
	
sub drawRole {
	my $self = shift;
	my $id = shift;	# role name
	my $move_tag = "__LOBJ/_ATTR/$self->{ID}";
	my $sel_tag = ".$id";
#	return if (!($self->{ATTR}{$id}));
	my ($x1,$y1) = @@{$self->{COORDS}};
	#print Dumper();
	$self->{ROLE_Y}{$id} = $tblHeadY + $attrYpad + $self->{ROLE}{$id}{order} * $attrYstep;# +$self->{TEXT_H};
	$y1 += $self->{ROLE_Y}{$id}; #+$self->{TEXT_H};
	$self->{CANV_ID}[$self->{ROLE}{$id}{order}+$TabElemN]=$self->{CANVAS}->createText($x1+$attrXpad, $y1+2*$attrYpad, -anchor=>'w', -fill=>'black',-text=>$self->{ROLE}{$id}{name}, -font=>$RoleFont, -tags=>[$move_tag,$sel_tag]);
}

#-----------------------------

sub clear {
	my $self = shift;
	foreach (@@{$self->{CANV_ID}}) {
		$self->{CANVAS}->delete($_);
	}
	$self->{CANV_ID}=();
}

#-----------------------------

1;

@


1.24
log
@Fixed drag-and-drop for attributes
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.23 2003/11/20 16:48:03 tuco80 Exp $
d162 1
a162 1
		#$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
@


1.23
log
@Position is language dependant
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.22 2003/11/19 10:25:49 tuco80 Exp $
d162 1
a162 1
		$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
d174 8
@


1.22
log
@Fixed fact bug in subroutine name
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.21 2003/11/07 10:26:28 tuco80 Exp $
d220 1
@


1.21
log
@small problem with color changing of attributes fixed
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.20 2003/11/06 12:28:24 tuco80 Exp $
d72 6
a77 1
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[2], -text=>$self->{NAME});
@


1.20
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.19 2003/10/02 13:41:40 tuco80 Exp $
d127 1
a127 1
	$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -fill => $color);
d142 1
a142 1
	$self->{CANVAS}->itemconfigure($self->{CANV_ID}[0], -fill => $color);
@


1.19
log
@Fixed small bug in name changing
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.18 2003/10/01 07:39:11 spanhel Exp $
d72 1
a72 1
			#$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -text=>$self->{NAME});
d120 23
@


1.18
log
@log. model
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.17 2003/09/22 09:48:35 tuco80 Exp $
d72 1
a72 1
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -text=>$self->{NAME});
@


1.17
log
@fixed select in draw().  DBtransf & DBConn + arity butnot finished
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.16 2003/09/08 14:07:20 tuco80 Exp $
d199 1
a199 1
	my $t; ($t=$self->{NAME})=~s/\s+/\n/g;	#here should be something more clever for line wrapping
@


1.16
log
@Added creation of relations between objects (Hrel,Sign,Rel & Conn)
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.15 2003/09/02 08:17:53 tuco80 Exp $
d225 3
a227 1
   }						
@


1.15
log
@Fixed bug in deletion of HRelations, got rid of some unnecesary prints and comments
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.14 2003/09/01 14:22:24 tuco80 Exp $
d92 9
d207 1
a207 1
	   $self->{CANV_ID}[1]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $self->{COLOR}->{ROLE}, -tags=>[$tag_name]);
d278 1
a278 1
	$self->{CANV_ID}[$self->{ROLE}{$id}{order}+$TabElemN]=$self->{CANVAS}->createText($x1+$attrXpad, $y1+2*$attrYpad, -anchor=>'w', -fill=>'black',-text=>$self->{ROLE}{$id}{name}, -font=>$RoleFont, -tags=>[$move_tag,$sel_tag,'item']);
@


1.14
log
@Deletion of Objects Complete
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.13 2003/08/29 11:45:22 tuco80 Exp $
a100 2
	#$self->clear;
	#$self->draw($self->{CANVAS});
a115 2
	#$self->clear;
	#$self->draw($self->{CANVAS});
d117 1
a117 1
	$self->{CANVAS}->coords($self->{CANV_ID}[$pos], 0, 0, 0, 0);
a155 1
	#print ("\n esta es la id de la relacion a borrar: ",$relID);
a158 1
			#print ("\nse hace push de: ",$_->id);
a159 1
		#print ("este es un ID en el arreglo: ", $_->id);
a179 1
	#my $i=1;
d196 1
a196 1
	   $self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
d206 1
a206 2
	   my $sel = $self->{SELECTED};
	   $self->{CANV_ID}[2]=$c->createOval(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
a248 3
	#first we are only going to delete from gui-layer
	#after that it's just determining wether hash is empty or not
	#and if it is, it must be deleted from project completely
a253 1
		#print ("\nDeleting from project: ",$_);
@


1.13
log
@Deletion of objects almost complete
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.12 2003/08/21 13:20:48 tuco80 Exp $
d160 1
a160 1
	print ("\n esta es la id de la relacion a borrar: ",$relID);
d164 1
a164 1
			print ("\nse hace push de: ",$_->id);
d266 1
a266 1
		print ("\nDeleting from project: ",$_);
@


1.12
log
@+ usage of "SELECTED" tags, move all selected objects at once and selection box with left mouse button instead of right
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.11 2003/08/19 14:32:16 spanhel Exp $
d39 1
a39 1
	$self->{LAYERS}  = [1];	# list of layers in which this object is visible
d44 2
a45 2
        $self->{COLOR}->{ROLE} = $color_r;
        $self->{TYPE} = $type;  # attribute or fact
d49 2
a50 2
        $self->{ROLE_Y}  = ();	# hash of Attributes Y coords
        $self->{ROLE_N}  = 0;	# No of Attributes   
d84 8
a111 15
=pod	if ($self->{TYPE}=~/ATTR/) {
		#my $sy2 = $y2+$selBoxWidth;
		my $sy2 = ($y2+($self->{ROLE_N})*$attrYstep + $attrYpad)+$temp;
		#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
		#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
		$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
	}
	else{ #it's a fact!
		my $sy2 = $y2+$temp;
		#my $sy2 = $y1+(($self->{I_N}+1)*$attrYstep+$attrYpad*2)+$selBoxWidth;
		#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
		#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
		$self->{CANVAS}->coords($self->{CANV_ID}[2], $sx1, $sy1, $sx2, $sy2);
	}
=cut
a120 7
=pod	if ($self->{TYPE}=~/ATTR/) {
		$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
	}
	else{ #it's a fact!
		$c->coords($self->{CANV_ID}[2], $sx1, $sy1, $sx2, $sy2);
	}
=cut
d156 15
d190 1
a190 1
	};
d203 2
a204 8
 	   #if ($sel){
		#print "Si se metio tuanis\n";
		#print ($self->{SELECTED},"\n");
		
		#This is the selection box, which will remain hidden until the object is selected
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
	   #}
	   #print Dumper($self->{CANV_ID});
d215 1
a215 5
	   #if ($sel){
		#print "Si se metio tuanis\n";
		#print ($self->{SELECTED},"\n");
		$self->{CANV_ID}[2]=$c->createOval(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
	   #}
a221 12
=pod	   if ($sel){
		my $sx1 = $x1-$selBoxWidth;
		my $sy1 = $y1-$selBoxWidth;
		my $sx2 = $x2+$selBoxWidth;
		my $sy2 = $y2+$selBoxWidth;
		#my $sy2 = $y1+(($self->{I_N}+1)*$attrYstep+$attrYpad*2)+$selBoxWidth;
		#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
		#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
		$c->coords($self->{CANV_ID}[2], $sx1, $sy1, $sx2, $sy2);
	   }
=cut	  

d225 1
a225 1
        }						
d247 1
a247 12
	my $sel = $self->{SELECTED};
=pod	if ($sel){
		my $sx1 = $x1-$selBoxWidth;
		my $sy1 = $y1-$selBoxWidth;
		my $sx2 = $x2+$selBoxWidth;
		#my $sy2 = $y2+$selBoxWidth;
		my $sy2 = ($y2+($self->{ROLE_N})*$attrYstep + $attrYpad)+$selBoxWidth;
		#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
		#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
		$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
	}
=cut	
a248 1
	
d257 15
@


1.11
log
@view data
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.10 2003/08/13 10:52:28 tuco80 Exp $
d93 27
a119 2
	$self->clear;
	$self->draw($self->{CANVAS});
d125 11
a135 2
	$self->clear;
	$self->draw($self->{CANVAS});
d182 4
d202 1
a202 1
 	   if ($sel){
d205 4
a208 2
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>1, -fill => $selBoxCol,-tags=>[$tag_name,'item']);
	   }
d220 1
a220 1
	   if ($sel){
d223 2
a224 2
		$self->{CANV_ID}[2]=$c->createOval(0,0,0,0,-width=>1, -fill => $selBoxCol,-tags=>[$tag_name,'item']);
	   }
d231 1
a231 1
	   if ($sel){
d241 1
d269 1
a269 1
	if ($sel){
d279 1
@


1.10
log
@Selection of objects complete, except relations
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.9 2003/08/12 09:07:22 tuco80 Exp $
d186 1
a186 1
	   $self->{CANV_ID}[1]=$c->createText(0,0, qw/-anchor c -fill white -justify left/,-text=>$t,-font=>$EntityFont, -tags=>[$tag_name,'item']);
@


1.9
log
@Selection of elements in GUI layers, not finished though
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.8 2003/08/08 14:57:37 tuco80 Exp $
d20 1
a20 1
my $TabElemN=3; # No of table drawing elements (ID numbering of Attr elements will start on this)
d90 14
d164 2
a165 3
	   my $positive = 1;
 	   if ($sel eq $positive){
		print "Si se metio tuanis\n";
d169 1
d180 2
a181 3
	   my $positive = 1;
	   if ($sel eq $positive){
		print "Si se metio tuanis\n";
d191 1
a191 1
	   if ($sel == $positive){
d228 1
a228 2
	my $positive = 1;
	if ($sel == $positive){
d255 1
a255 1
	print Dumper();
@


1.8
log
@Added prop.pm and selection property of objects
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.7 2003/06/30 07:23:24 spanhel Exp $
d21 2
d149 7
d161 1
a161 1
	   $self->adjustCoords;
d165 7
d178 10
d214 12
@


1.7
log
@changes in role order (logical model)
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.6 2003/06/26 14:11:46 spanhel Exp $
d48 2
a49 1
        $self->{ROLE_N}  = 0;	# No of Attributes      
d80 6
@


1.6
log
@logical and fys. model
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.5 2003/05/30 16:22:17 spanhel Exp $
d45 1
a118 1
	   #$tag_name = "_LOBJ/_ATTR$self->{GROUP}$self->{ID}";
d125 1
a125 1
	my $i=1;
d159 1
a159 7
        }	
	
	
	
	

	
d167 1
a167 1

d178 1
d180 1
a180 1
	my $y2=$y1+$tblHeadY;
a181 6
	#$self->{CANVAS}->coords($self->{CANV_ID}[1], $x1, $y2, $x2, $y1+($self->{ATTR_N}+1)*$attrYstep+$attrYpad*2);
	#my @@aux = @@{$self->{ROLE}};
        
	#print Dumper($self->{NAME});
	#print Dumper(@@aux);
	#print Dumper($#aux);
d183 1
a183 1
	$self->{CANVAS}->coords($self->{CANV_ID}[1], $x1, $y2, $x2, $y1+($self->{ROLE_N}+1)*$attrYstep+$attrYpad*2);
d185 1
a185 1
	$self->coords($x1, $y1,  $x2, $y1+($self->{ROLE_N}+1)*$attrYstep+$attrYpad*2);
d198 4
a201 3
	$self->{ROLE_Y}{$id} = $tblHeadY + $attrYpad + $self->{ROLE}{$id}{order} * $attrYstep;
	$y1 += $self->{ROLE_Y}{$id};
	$self->{CANV_ID}[$self->{ROLE}{$id}{order}+$TabElemN]=$self->{CANVAS}->createText($x1+$attrXpad, $y1+3, -anchor=>'w', -fill=>'black',-text=>$self->{ROLE}{$id}{name}, -font=>$RoleFont, -tags=>[$move_tag,$sel_tag,'item']);
@


1.5
log
@logical model
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.4 2003/05/22 13:55:32 spanhel Exp $
d11 1
a11 1
use vars qw($EntityFont);
d16 6
d28 1
a28 1
	my ($proto,$id,$name,$desc,$x,$y, $color,$group)=@@_;
d41 9
a49 3
	$self->{COLOR} = $color;
        $self->{GROUP} = $group;
	$self->{TEXT_W}  = 0;	# text width      
d90 8
d117 1
a117 1
	if ($self->{GROUP}) {
a126 2
		print $i++;
		print Dumper($_->{NAME});
d135 11
a145 5
	my $tag_name;        
	
	if ($self->{GROUP}) {
	   $tag_name = "__LOBJ/_ATTR$self->{GROUP}$self->{ID}";
	   $self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $self->{COLOR}, -tags=>[$tag_name,'item']);
d149 10
a158 1
	   $self->{CANV_ID}[0]=$c->createOval(0,0,0,0, -width=>1, -fill => $self->{COLOR}, -tags=>[$tag_name,'item']);
d161 7
a167 2
	my $t; ($t=$self->{NAME})=~s/\s+/\n/g;	#here should be something more clever for line wrapping
	$self->{CANV_ID}[1]=$c->createText(0,0, qw/-anchor c -fill white -justify center/,-text=>$t,-font=>$EntityFont, -tags=>[$tag_name,'item']);
d169 3
a171 1
	my @@w=$c->bbox($self->{CANV_ID}[1]);	# check text outline coords
d173 11
d185 16
a200 1
	my $y2=$y1+$w[3]-$w[1]+$attrYpad*2;
d202 10
a211 3
	$c->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
	$c->coords($self->{CANV_ID}[1], ($x1+$x2)/2, ($y1+$y2)/2);
	$self->coords($x1, $y1, $x2, $y2);
d227 1
@


1.4
log
@attributes added into groups (+ color of groups)
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.3 2003/05/20 16:25:52 spanhel Exp $
d98 2
a99 1
	   $tag_name = "_LOBJ/_ATTR$self->{GROUP}$self->{ID}";
d105 1
d107 2
d121 1
d125 3
a127 2
        }
	$self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $self->{COLOR}, -tags=>[$tag_name,'item']);
a138 1

@


1.3
log
@tree history, colors of attributs
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.2 2003/04/24 20:39:58 michald Exp $
d22 1
a22 1
	my ($proto,$id,$name,$desc,$x,$y, $color)=@@_;
d36 1
a36 1

d95 8
a102 1
	my $tag_name = '_LOBJ/_ATTR/'.$self->{ID};
d112 9
a120 3
	my ($x1,$y1) = @@{$self->{COORDS}};
	my $tag_name = '__LOBJ/_ATTR/'.$self->{ID};
print Dumper($self->{COLOR});
@


1.2
log
@simple autoplacement of DBConn
@
text
@d4 1
a4 1
# $Id: DBLogObj.pm,v 1.1.1.1 2002/09/24 01:34:22 michald Exp $
d9 3
d13 1
a13 4

my $EntityFont='-*-verdana-bold-r-normal-*-11-*-iso8859-2';
my $NameFont='-*-arial-bold-r-normal-*-9-*-iso8859-2';
my $uBannerClr = 'RoyalBlue2';
a15 3



d22 1
a22 1
	my ($proto,$id,$name,$desc,$x,$y)=@@_;
d26 1
a26 1

d35 1
d37 2
a38 2
	$self->{TEXT_W}  = 0;	# text width

d107 2
a108 2

	$self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $uBannerClr, -tags=>[$tag_name,'item']);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id$
d100 1
a100 1
		$_->moveEdge($tag_name, $x, $y);
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

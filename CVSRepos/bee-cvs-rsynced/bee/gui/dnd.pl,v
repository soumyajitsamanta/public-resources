head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2004.01.06.14.06.18;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.18.13.34.28;	author tuco80;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.18.13.32.19;	author tuco80;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.11.14.06.25;	author tuco80;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.25.09.50.12;	author tuco80;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.22.09.34.49;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.30.11.10.59;	author spanhel;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.26.14.11.46;	author spanhel;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Small bug with dropping outside a group
@
text
@#-----------------------------------------------------
# Properties Tab
#-----------------------------------------------------
# $Id: dnd.pl,v 1.7 2003/12/18 13:34:28 tuco80 Exp $

use strict;
require "const.def";
use vars qw($Project $TreeList $Layer $tSchemaC 
			$unSortAttr $lang);

our $drag_entry;

sub StartDrag {
    my($token) = @@_;
    my $w = $token->parent; # $w is the source hlist
    my $e = $w->XEvent;
    
    $drag_entry = $w->nearest($e->y); # get the hlist entry under cursor    
    if (defined $drag_entry) {
	if ($w->info('data', $drag_entry)=~/^ATTR/) {
		#$token->configure(-text => $w->entrycget($drag_entry, '-text'));
		$token->configure(-image => $Img{ATTR});
		my($X, $Y) = ($e->X, $e->Y);
		$token->MoveToplevelWindow($X, $Y);
		$token->raise;
		$token->deiconify;
		$token->FindSite($X, $Y, $e);
	} 
	else {
		$token->configure(-image => $top->Pixmap(-file => 'img/stop.xpm'));
	}
	# Show the token		
    }
}

#-----------------------------------------------------

sub MotionOnTree {
	my($lb, $dnd_source) = @@_;
	my $w = $dnd_source->parent; # $w is the source hlist
	if ($w->info('data', $drag_entry)=~/ATTR/) {
		my $y = $lb->pointery - $lb->rooty;
		my $nearest = $lb->nearest($y);
		$w->info('data', $nearest);		
		if ($nearest=~/_LOBJ\/_ATTR/) {
			$w->selectionClear();
			$w->selectionSet($nearest);
		}
	}
}

#-----------------------------------------------------

sub MotionOnCanvas {	# just for clearing pending selection on tree
	my($lb, $dnd_source) = @@_;
	my $w = $dnd_source->parent; # $w is the source hlist
	if ($w->info('data', $drag_entry)=~/TAB|PROC/) {
		$w->selectionClear();
	}
}

#-----------------------------------------------------

sub DropOnTree {
	my($lb, $dnd_source) = @@_;
	my $w = $dnd_source->parent; # $w is the source hlist
	if ($w->info('data', $drag_entry)=~/ATTR/) {		
		my $end = ($lb->info("children"))[-1];
		my @@pos = (-after => $end) if defined $end;
		my $y = $lb->pointery - $lb->rooty;
		my $nearest = $lb->nearest($y);
                $w->info('data', $nearest);
		if ($nearest=~/_LOBJ\/_ATTR/) {
			if (defined $nearest) {
			    my(@@bbox) = $lb->infoBbox($nearest);
			    if ($y > ($bbox[3]-$bbox[1])/2+$bbox[1]) {
				@@pos = (-after => $nearest);
			    } else {
				@@pos = (-before => $nearest);
			    }
			}
		&drop_attr($drag_entry,$nearest);	
		}
	}
	$w->selectionClear();
}

#-----------------------------------------------------

sub drop_attr {
	my $from = shift;
	my $to = shift;
	my ($id, $path_from, $path_to); 
	($path_from = $from)=~s|([^\/]*$)||;
	my $attr_id = $1; # id of moved attribute
	($path_from)=~s|\/$||;   
	$to=~s|\/$||; 
	#print "\nEl to antes es: $to";
	if ($to eq '_LOBJ/_ATTR'){
		$path_to = $to;
	}
	else{
		$to=~m/__G\.([^\/]*)/;
		($path_to)="_LOBJ/_ATTR/__G.$1"; 
	}
	if ($path_from ne $path_to) {
		my $group;
		my @@role;
		#print "\nEl path from es aqui: $path_from";
		#print "\nEl path to aqui es: $path_to";
		#print "\nEl to aqui es: $to";
		#print "\nEl attr id es: $attr_id";
		if ($path_from eq '_LOBJ/_ATTR') {
			# move attribute from:_LOBJ/_ATTR to: _LOBJ/_ATTR/__G.group OR _LOBJ/_ATTR/__G.group/__R.role
			($group = $path_to)=~s|__G\.(.*)||;
			$group=$1;
			#print "\nEl grupo es $group \n1\n";
			$Project->{attr}->{$attr_id}->{group}=$group;      # change project hash;
			#update the tree
			$TreeList->delete('entry',"$path_from/$attr_id");
			my $n = $Project->{attr}->{$attr_id}->{name}->{$lang};
			foreach (keys %{$Project->{group}->{$group}->{role}}) {
				$TreeList->add("_LOBJ/_ATTR/__G.$group/__R.$_/$attr_id", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');  			 
				push(@@role, $Project->{group}->{$group}->{role}->{$_}->{name}->{$lang});
			}
			# attribute has only group; not any role
			$TreeList->add("_LOBJ/_ATTR/__G.$group/$attr_id", -text => $n, -image => $Img{ATTR}, -data => 'ATTR') if ($#role<0);
		}
		else {
			#print "---2\n";
			($group = $path_from)=~s|(.*__G\.([^\/]*))||;	
			$group=$2;
			$path_from = $1;
			#print "\nEl grupo es $group \nEl path from es $path_from hasta aca1\n";
			my $n = undef;
			if ($group){
				foreach (keys %{$Project->{group}->{$group}->{role}}) {
					$TreeList->delete('entry',"$path_from/__R.$_/$attr_id");
					$n=1;
					print "\n Entro al ciclo de roles, quepor??";
				}
			}
			unless ($n){$TreeList->delete('entry',"$path_from/$attr_id");} #only group, no roles.
			$n = $Project->{attr}->{$attr_id}->{name}->{$lang};
			
			if ($path_to eq '_LOBJ/_ATTR') {
				# move attribute from:_LOBJ/_ATTR/__G.group OR _LOBJ/_ATTR/__G.group/__R.role to: _LOBJ/_ATTR
				delete($Project->{attr}->{$attr_id}->{group});
				undef $group;
				$TreeList->add("$path_to/$attr_id",-text => $n, -image => $Img{ATTR}, -data => 'ATTR');
			}
			else {
				# move attribute from: _LOBJ/_ATTR/__G.group to  _LOBJ/_ATTR/__G.group/__R.role    OR
				# move attribute from: _LOBJ/_ATTR/__G.group/__R.role to  _LOBJ/_ATTR/__G.group
				($group = $path_to)=~s|__G\.([^\/]*)||;	
				$group=$1;
				#print "2\nPath to si no lobj/Attr es: $path_to";
				$Project->{attr}->{$attr_id}->{group}=$group;      # change project hash;
				#Now Update the tree
				foreach (keys %{$Project->{group}->{$group}->{role}}) {
					$TreeList->add("$path_to/__R.$_/$attr_id", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');  			 
					push(@@role, $Project->{group}->{$group}->{role}->{$_}->{name}->{$lang});
				}
				$TreeList->add("$path_to/$attr_id", -text => $n, -image => $Img{ATTR}, -data => 'ATTR') if ($#role<0);
			}
		}
		my $layerHash = "_LOBJ/_ATTR/$attr_id";
		my $color_a= $group ? $Project->{group}->{$group}->{color_a} : $unSortAttr;
		my $color_r= $group ? $Project->{group}->{$group}->{color_r} : $unSortAttr;
		#Change the layers that have this attribute in them
		foreach my $lay(keys %{$Layer}){
			if (exists($Layer->{$lay}->{$layerHash})){
				$Layer->{$lay}->{$layerHash}->change_color_attr($color_a);
				$Layer->{$lay}->{$layerHash}->change_color_role($color_r);
				$Layer->{$lay}->{$layerHash}->delRoles;
				my $order=1;
				foreach (@@role){
					$Layer->{$lay}->{$layerHash}->addRole($_,$order++);
				}
				if ($lay eq $VisibleLayer){
					$Layer->{$lay}->{$layerHash}->clear;
					$Layer->{$lay}->{$layerHash}->draw($tSchemaC);
				}
			}
		}
	}   
}

sub DropOnCanvas {
	my($lb, $dnd_source) = @@_;
	my $w = $dnd_source->parent; # $w is the source hlist
	if ($w->info('data', $drag_entry)=~/TAB|PROC/) {
		my $x = $lb->pointerx - $lb->rootx;
		my $y = $lb->pointery - $lb->rooty;
		print "\nEstas son las coordenadas.  X:$x, Y:$y";
	}
	$w->selectionClear();
}

#-----------------------------------------------------

1
__END__
@


1.7
log
@Got rid of some prints
@
text
@d4 1
a4 1
# $Id: dnd.pl,v 1.6 2003/12/18 13:32:19 tuco80 Exp $
d140 1
d148 1
a148 1
				#delete ('entry',"$path_from/$attr_id");
@


1.6
log
@Fixed bug in "Drag and Drop"
@
text
@d4 1
a4 1
# $Id: dnd.pl,v 1.5 2003/12/11 14:06:25 tuco80 Exp $
d98 1
a98 1
	print "\nEl to antes es: $to";
d109 4
a112 4
		print "\nEl path from es aqui: $path_from";
		print "\nEl path to aqui es: $path_to";
		print "\nEl to aqui es: $to";
		print "\nEl attr id es: $attr_id";
d117 1
a117 1
			print "\nEl grupo es $group \n1\n";
d130 1
a130 1
			print "---2\n";
d134 1
a134 1
			print "\nEl grupo es $group \nEl path from es $path_from hasta aca1\n";
d156 1
a156 1
				print "2\nPath to si no lobj/Attr es: $path_to";
a184 9

		# refresh tree
		print "\nPath to is: $path_to \nPath from is: $path_from\nAttr id is: $attr_id\nFrom is: $from";
		#&GetHistory;
		#&ClearLayer(\$Layer,$tSchemaC);
		#$TreeList->delete('all');			     
		#undef $Layer;				    
		#&AddProjObjects2List($Project,\$Layer);
		#&ShowLayer(\$Layer,$tSchemaC);    
@


1.5
log
@Fixed drag-and-drop for attributes
@
text
@d4 1
a4 1
# $Id: dnd.pl,v 1.4 2003/09/25 09:50:12 tuco80 Exp $
d98 1
d103 2
a104 2
		$to=~s|__G\.([^\/]*$)||;
		($path_to)="_LOBJ/_ATTR/$to"; 
d109 3
a111 2
		print "\nEl parth from es aqui: $path_from";
		print "\nEl to aqui es: $path_to";
d115 1
a115 1
			($group = $path_to)=~s|__G\.([^\/]*)||;
d131 4
a134 2
			($group = $path_from)=~s|__G\.([^\/]*)||;	
			$group=$1;
d144 1
d156 1
a156 1
				print "2\n";
d163 1
@


1.4
log
@Arity of Transformation I/O complete
@
text
@d4 1
a4 1
# $Id: dnd.pl,v 1.3 2003/08/22 09:34:49 spanhel Exp $
d8 2
a9 1
use vars qw($Project $TreeList $Layer $tSchemaC);
d91 98
a188 41
  my $from = shift;
  my $path_to = shift;
  my ($id, $path_from); 
  ($path_from = $from)=~s|([^\/]*$)||;
  
  my $attr_id = $1; # id of moved attribute
  
  ($path_from)=~s|\/$||;   
  if ($path_from ne $path_to) {
    if ($path_from eq '_LOBJ/_ATTR') {
	# move attribute from:_LOBJ/_ATTR to: _LOBJ/_ATTR/__G.group OR _LOBJ/_ATTR/__G.group/__R.role
	(my $group = $path_to)=~s|__G\.([^\/]*)||;
	$group=$1;
	print "1\n";
	$Project->{attr}->{$attr_id}->{group}=$group;      # change project hash;
    }
    else {
      if ($path_to eq '_LOBJ/_ATTR') {
        # move attribute from:_LOBJ/_ATTR/__G.group OR _LOBJ/_ATTR/__G.group/__R.role to: _LOBJ/_ATTR
	delete ($Project->{attr}->{$attr_id}->{group});
      }
      else {
         # move attribute from: _LOBJ/_ATTR/__G.group to  _LOBJ/_ATTR/__G.group/__R.role    OR
	 # move attribute from: _LOBJ/_ATTR/__G.group/__R.role to  _LOBJ/_ATTR/__G.group
	(my $group = $path_to)=~s|__G\.([^\/]*)||;	
	$group=$1;
	print "2\n";
	$Project->{attr}->{$attr_id}->{group}=$group;      # change project hash;
      }
    }
 
 
 
     # refresh tree
     &GetHistory;
     &ClearLayer(\$Layer,$tSchemaC);
     $TreeList->delete('all');			     
     undef $Layer;				    
     &AddProjObjects2List($Project,\$Layer);
     &ShowLayer(\$Layer,$tSchemaC);    
  }   
@


1.3
log
@fix bug - drag and drop
@
text
@d4 1
a4 1
# $Id: dnd.pl,v 1.2 2003/07/30 11:10:59 spanhel Exp $
d139 1
@


1.2
log
@LM, FM
@
text
@d4 1
a4 1
# $Id: dnd.pl,v 1.1 2003/06/26 14:11:46 spanhel Exp $
d16 2
a17 1
    $drag_entry = $w->nearest($e->y); # get the hlist entry under cursor
d94 1
d96 1
d103 1
d116 1
d120 3
d130 1
a130 1
  } 
@


1.1
log
@logical and fys. model
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.13 2003/05/30 16:22:17 spanhel Exp $
d30 1
a30 3
	# Show the token
	
	
d121 1
a121 2
     &ShowLayer(\$Layer,$tSchemaC);
    
@


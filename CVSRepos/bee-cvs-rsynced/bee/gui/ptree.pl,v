head	1.28;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.28
date	2004.05.18.12.47.32;	author tuco80;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.10.16.56.30;	author tuco80;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.25.13.04.09;	author tuco80;	state Exp;
branches;
next	1.25;

1.25
date	2003.11.20.16.48.03;	author tuco80;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.06.12.28.24;	author tuco80;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.03.09.56.03;	author tuco80;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.01.08.20.59;	author tuco80;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.01.07.39.11;	author spanhel;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.25.09.50.12;	author tuco80;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.22.09.34.49;	author spanhel;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.19.14.32.16;	author spanhel;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.18.07.11.30;	author spanhel;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.14.11.55.59;	author tuco80;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.01.09.18.59;	author spanhel;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.31.07.31.11;	author spanhel;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.31.06.37.44;	author michald;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.26.14.11.46;	author spanhel;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.30.16.22.18;	author spanhel;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.22.13.55.33;	author spanhel;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.20.16.25.53;	author spanhel;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.16.07.02.43;	author spanhel;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.07.14.28.51;	author spanhel;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.05.15.36.46;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.01.13.42.45;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.30.09.57.46;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.28.07.36.33;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.20.01.41;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.20;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.20;	author michald;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Support for diferent bee types. (Not exported to .schema files yet though)
@
text
@#-----------------------------------------------------
# Project Tree Frame
#-----------------------------------------------------
# $Id: ptree.pl,v 1.27 2004/02/10 16:56:30 tuco80 Exp $

use strict;
use warnings;
use Data::Dumper;
require "const.def";
use vars qw($Project $TreeList $mainTabs $TreeFont $lang $tSchemaC $ProjectFile); 
#my $unSortAttr = 'thistle1';

#-----------------------------------------------------

sub CreateTreeList {

	my($widget) = @@_;

	my $SourceList = $widget->Scrolled(qw\Tree -separator / -indicator 1
    				       -selectmode extended
    				       -indent 25 -scrollbars osoe
				       -itemtype imagetext 
				       -selectbackground LightGoldenrod2\,
					   -font=>$TreeFont
				 )->packAdjust(-side => 'left', -fill => 'both');

	$SourceList->bind('<1>' => sub  {
		&ShowProperties;
		&Debug::UpdateObj;					
	});

	$SourceList->bind('<Double-1>' => sub  {
		&SelectTreeItem;
		
	});
	$SourceList->bind('<Shift-Delete>' => sub{
		#&items_delete(1);
	});
	$SourceList->bind('<Delete>' => sub{
		#&items_delete(undef);
	});

	$SourceList->pack(qw/-side left -fill y/);

	return $SourceList;
}

#-------------------------------

sub SelectTreeItem {	# action for left button double-click on TreeList
	our ($SLSel)=$TreeList->info('anchor');
	if ($SLSel){
		if ($TreeList->info('data', $SLSel) eq 'LAYER') {
			our ($id);
			# set proper icons in Tree List
			($id=$SLSel)=~s|^_LAYER/||;
			foreach (keys %{ $Project->{'gui-layer'} }) {
				$TreeList->entryconfigure('_LAYER/'.$_,-image => $Img{LAYER});
			}
			$TreeList->entryconfigure($SLSel,-image => $Img{LAYER_SEL});
			&ClearLayer(\$Layer,$tSchemaC);
			$VisibleLayer=$id;
			&ShowLayer(\$Layer,$tSchemaC);
			$mainTabs->raise('schema');
		} else {
			if ($mainTabs->raised eq 'prop') { 
				$mainTabs->raise('schema')
			} else {
				$mainTabs->raise('prop')
			}
		}
	}
}

#-------------------------------

sub AddProjObjects2List {
	my ($Project,$Layer) = @@_;
	#&SetHistory;
	foreach (sort keys %{ $Project->{host} }) {
		# Hosts
		my $host=$_;
		$TreeList->add("$host",  -text => $Project->{host}->{$host}->{name}, -image => $Img{HOST}, -data => 'HOST');
		#$TreeList->setmode("$host",$Project->{host}->{$_}->{'tree-mode'});
		$TreeList->setmode("$host",'close');
		foreach (sort keys %{ $Project->{host}->{$host}->{source} }) {
			# Data Sources
			my $src=$_;
			$TreeList->add("$host/$src",  -text => $Project->{host}->{$host}->{source}->{$src}->{name}, -image => $Img{SRC}, -data => 'SRC');			
			#$TreeList->setmode("$host/$src",$Project->{host}->{$host}->{source}->{$src}->{'tree-mode'});
			$TreeList->setmode("$host/$src",'close');
			my $tl=$Project->{host}->{$host}->{source}->{$src}->{table};
			foreach (sort keys %{ $tl }) {
				# Tables
				my $tbl=$_;
				$TreeList->add("$host/$src/$tbl", -text => $tl->{$tbl}->{name}, -image => $Img{TAB}, -data => 'TAB');
				#$TreeList->setmode("$host/$src/$tbl",$tl->{$tbl}->{'tree-mode'});
				$TreeList->setmode("$host/$src/$tbl",'close');
				#foreach (foreach keys %{ $tl->{$tbl}->{'gui-presentation'} }) {					
				foreach (keys %{ $tl->{$tbl}->{'gui-presentation'} }) {				
					my ($x,$y)=split(' ',$tl->{$tbl}->{'gui-presentation'}->{$_}->{coord}->{$lang});
					$$Layer->{$_}->{"$host/$src/$tbl"}=DBTable->new("$host/$src/$tbl",$tl->{$tbl}->{name},$tl->{$tbl}->{description},$x,$y);
				}
				foreach (sort keys %{ $tl->{$tbl}->{column} }) {
					# Table Columns
					my $cid=$_;
					my $c=$tl->{$tbl}->{column}->{$cid};
					$TreeList->add("$host/$src/$tbl/$_",  -text => $c->{name}, -image => $Img{COL}, -data => 'COL');
					foreach (keys %{ $c->{'gui-presentation'} }) {
						$$Layer->{$_}->{"$host/$src/$tbl"}->addAttr($cid,$c->{name},$c->{description},$c->{constraint},$c->{type},$c->{'length'},$c->{'gui-presentation'}->{$_}->{line});
					}
				}				
				#if (!exists($tl->{$tbl}->{'tree-mode'})) {$tl->{$tbl}->{'tree-mode'}='close'};
				#if ($tl->{$tbl}->{'tree-mode'} eq 'open') {$TreeList->open("$host/$src/$tbl")}
				#else { $TreeList->close("$host/$src/$tbl");}
				$TreeList->close("$host/$src/$tbl");
				
			}
			foreach (sort keys %{$Project->{host}->{$host}->{source}->{$src}->{view}} ) {
				# Views
				my $tbl=$_;
				$TreeList->add("$host/$src/$tbl",  -text => $Project->{host}->{$host}->{source}->{$src}->{view}->{$tbl}->{name}, -image => $Img{ETL_VIEW}, -data => 'VIEW');
				$TreeList->setmode("$host/$src/$tbl",'close');
				foreach (sort keys %{ $Project->{host}->{$host}->{source}->{$src}->{view}->{$tbl}->{column} }) {
					# View Columns
					$TreeList->add("$host/$src/$tbl/$_",  -text => $Project->{host}->{$host}->{source}->{$src}->{view}->{$tbl}->{column}->{$_}->{name}, -image => $Img{COL}, -data => 'VCOL');
				}
				$TreeList->close("$host/$src/$tbl");
			}			
			#if (!exists($Project->{host}->{$host}->{source}->{$src}->{'tree-mode'})) {$Project->{host}->{$host}->{source}->{$src}->{'tree-mode'}='close'};
			#if ($Project->{host}->{$host}->{source}->{$src}->{'tree-mode'} eq 'open') {$TreeList->open("$host/$src");}
			#else { $TreeList->close("$host/$src");}
			$TreeList->close("$host/$src");
		
			
		}
		$TreeList->add("$host/_TRAN", -text => "Transformations", -image => $Img{DIR}, -data => 'DIR/_TRAN');
		$TreeList->setmode("$host/_TRAN",'close');
		my $tl=$Project->{host}->{$host}->{transformation};
		foreach (sort keys %{ $tl }) {
			# Transformations
			my $tr=$_;
			$TreeList->add("$host/_TRAN/$tr",  -text => $tl->{$tr}->{name}, -image => $Img{TRAN}, -data => 'TRAN');
			$TreeList->setmode("$host/_TRAN/$tr",'close');
			foreach (keys %{ $tl->{$tr}->{'gui-presentation'} }) {
				my ($x,$y)=split(' ',$tl->{$tr}->{'gui-presentation'}->{$_}->{coord}->{$lang});
				my $type;
				if (exists($tl->{$tr}->{type})){
					$type=$tl->{$tr}->{type};
				}
				else{
					$type = 'Implicit';
					$tl->{$tr}->{type}='Implicit';
				}
				$$Layer->{$_}->{"$host/_TRAN/$tr"}=DBTransf->new("$host/_TRAN/$tr",$tl->{$tr}->{name},$tl->{$tr}->{description},$x,$y,$type);
			}
			foreach (sort keys %{ $tl->{$tr}->{input} }) {
				# Transformation Inputs
				my $cid=$_;
				my $c=$tl->{$tr}->{input}->{$cid};
				$TreeList->add("$host/_TRAN/$tr/$cid", -text => $c->{name}, -image => $Img{TRAN_I}, -data => 'TRAN_I');
				foreach (keys %{ $c->{'gui-presentation'} }) {
					$$Layer->{$_}->{"$host/_TRAN/$tr"}->addInp($cid,$c->{name},$c->{description},$c->{type},$c->{'length'},$c->{'gui-presentation'}->{$_}->{line});
				}
			}
			foreach (sort keys %{ $tl->{$tr}->{output} }) {
				# Transformation Outputs
				my $cid=$_;
				my $c=$tl->{$tr}->{output}->{$cid};
				$TreeList->add("$host/_TRAN/$tr/$cid", -text => $c->{name}, -image => $Img{TRAN_O}, -data => 'TRAN_O');
				foreach (keys %{ $c->{'gui-presentation'} }) {
					$$Layer->{$_}->{"$host/_TRAN/$tr"}->addOut($cid,$c->{name},$c->{description},$c->{type},$c->{'length'},$c->{'gui-presentation'}->{$_}->{line});
				}
			}
			$TreeList->close("$host/_TRAN/$tr");
		}
		$TreeList->close("$host/_TRAN");
		$TreeList->add("$host/_FILE", -text => "Files", -image => $Img{DIR}, -data => 'DIR/_FILE');
	 	$TreeList->setmode("$host/_FILE",'close');
		$tl = $Project->{host}->{$host}->{file};
		foreach my $file (sort keys %{$tl}){
			$TreeList->add("$host/_FILE/$file",  -text => $tl->{$file}->{name}, -image => $Img{FILE}, -data => 'FILE');
			#$TreeList->setmode("$host/_FILE/$file",'close');
			foreach (keys %{ $tl->{$file}->{'gui-presentation'} }) {
				my ($x,$y)=split(' ',$tl->{$file}->{'gui-presentation'}->{$_}->{coord}->{$lang});
				my $path = $tl->{$file}->{'src-conn'}->{'src-name'}->{content};
				$$Layer->{$_}->{"$host/_FILE/$file"}=DBFile->new("$host/_FILE/$file",$tl->{$file}->{name},$tl->{$file}->{description},$path,$x,$y);
			}
			#$TreeList->close("$host/_FILE/$file");
		}
	 	$TreeList->close("$host/_FILE");
		$TreeList->close("$host");
	}

	$TreeList->add("_TRIG", -text => "Triggers", -image => $Img{DIR}, -data => 'DIR/_TRIG');
	$TreeList->setmode("_TRIG",'close');
	foreach (sort keys %{ $Project->{trigger} }) {
		# Trigers
		my $tr=$_;
		$TreeList->add("_TRIG/$tr",  -text => $tr, -image => $Img{TRIG}, -data => 'TRIG');
		foreach (keys %{ $Project->{trigger}->{$tr}->{'gui-presentation'} }) {
			my ($x,$y)=split(' ',$Project->{trigger}->{$tr}->{'gui-presentation'}->{$_}->{coord}->{$lang});
			$$Layer->{$_}->{"_TRIG/$tr"}=DBTrig->new($tr,$Project->{trigger}->{$tr}->{name},$Project->{trigger}->{$tr}->{description},$x,$y);
		}
	}
	$TreeList->close("_TRIG");

	$TreeList->add("_CONST", -text => "Constants", -image => $Img{DIR}, -data => 'DIR/_CONST');
	$TreeList->setmode("_CONST",'close');
	foreach (sort keys %{ $Project->{const} }) {
		# Constants
		my $tr=$_;
		$TreeList->add("_CONST/$tr",  -text => $Project->{const}->{$tr}->{name}, -image => $Img{CONST}, -data => 'CONST');
		foreach (keys %{ $Project->{const}->{$tr}->{'gui-presentation'} }) {
			my ($x,$y)=split(' ',$Project->{const}->{$tr}->{'gui-presentation'}->{$_}->{coord}->{$lang});
			$$Layer->{$_}->{"_CONST/$tr"}=DBConst->new($tr,$Project->{const}->{$tr}->{name},$Project->{const}->{$tr}->{description},$Project->{const}->{$tr}->{data},$x,$y);
		}
	}
	$TreeList->close("_CONST");

	$TreeList->add("_CONN", -text => "Connections", -image => $Img{DIR}, -data => 'DIR');
	$TreeList->setmode("_CONN",'close');
	foreach (sort keys %{ $Project->{connection} }) {
		# Connections
		my $tr=$_;
		my $pr=$Project->{connection}->{$tr};
		my $n = ($pr->{name}) ? $pr->{name} : "\[$tr\]";
		$TreeList->add("_CONN/$tr", -text => $n, -image => $Img{CONN}, -data => 'CONN');
		foreach (keys %{ $pr->{'gui-presentation'} }) {			
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'CONN',$pr->{from},$pr->{to},$$Layer->{$_});
			$$Layer->{$_}->{"_CONN/$tr"}=$l if ($l);
		}
	}
	$TreeList->close("_CONN");

	$TreeList->add("_SIGNAL", -text => "Signals", -image => $Img{DIR}, -data => 'DIR');
	$TreeList->setmode("_SIGNAL",'close');
	foreach (sort keys %{ $Project->{signal} }) {
		# Signals
		my $tr=$_;
		my $pr=$Project->{signal}->{$tr};
		my $n = ($pr->{name}) ? $pr->{name} : "\[$tr\]";
		$TreeList->add("_SIGNAL/$tr", -text => $n, -image => $Img{SIGNAL}, -data => 'SIGNAL');
		foreach (keys %{ $pr->{'gui-presentation'} }) {
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'SIGNAL',$pr->{from},$pr->{to},$$Layer->{$_});
			$$Layer->{$_}->{"_SIGNAL/$tr"}=$l if ($l);
		}
	}
	$TreeList->close("_SIGNAL");


#---------logical objects----------

	$TreeList->add("_LOBJ", -text => "Logical Objects", -image => $Img{DIR}, -data => 'DIR/_LOBJ');
	$TreeList->setmode("_LOBJ",'close');	

	# directory of attributes
	$TreeList->add("_LOBJ/_ATTR", -text => "Attributes", -image => $Img{DIR}, -data => 'DIR/_ATTR');
	$TreeList->setmode("_LOBJ/_ATTR",'close'); # directory Attributes
        foreach (sort keys %{ $Project->{group} }) {
	    my $gr = $_;
	    $TreeList->add("_LOBJ/_ATTR/__G.$gr",  -text => $Project->{group}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'GROUP');	    
	    $TreeList->setmode("_LOBJ/_ATTR/__G.$gr",'close');    
	    #$TreeList->close("_LOBJ/_ATTR/__G.$gr");
	    foreach (sort keys %{ $Project->{group}->{$_}->{role}}) {
	      $TreeList->add("_LOBJ/_ATTR/__G.$gr/__R.$_",  -text => $Project->{group}->{$gr}->{role}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'ROLE');	    
  	      $TreeList->setmode("_LOBJ/_ATTR/__G.$gr/__R.$_",'close');    
	     # $TreeList->close("_LOBJ/_ATTR/__G.$gr/__R.$_");
	    }
	    
	}
	foreach (sort keys %{ $Project->{attr} }) {
		#Attributes
		my $tr=$_;
		my ($color_a, $color_r);
		my $gr = $Project->{attr}->{$tr}->{group};
		
		#print Dumper($_);
		my $pr=$Project->{attr}->{$tr};
		my $n = ($pr->{name}->{$lang}) ? $pr->{name}->{$lang}: "\[$tr\]";
	    my @@role; 
		
		if ($gr) { 
		  my ($path);
		  # each attribute is generated into each role
		  undef @@role;		      
		  foreach (keys %{$Project->{group}->{$gr}->{role}}) {
		     $path='/'.$gr.'/'.$_.'/';
		     $TreeList->add("_LOBJ/_ATTR/__G.$gr/__R.$_/$tr", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');  			 
		     push(@@role, $Project->{group}->{$gr}->{role}->{$_}->{name}->{$lang});
		  }
		  # attribute has only group; not any role
		  $TreeList->add("_LOBJ/_ATTR/__G.$gr/$tr", -text => $n, -image => $Img{ATTR}, -data => 'ATTR') if ($#role<0);
		  $color_a=$Project->{group}->{$Project->{attr}->{$tr}->{group}}->{color_a};
		  $color_r=$Project->{group}->{$Project->{attr}->{$tr}->{group}}->{color_r};		 
		}
		else {		  
		  $color_a=$unSortAttr;
		  $color_r=$unSortAttr;
		  
		  $TreeList->add("_LOBJ/_ATTR/$tr", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');

		}

				
		foreach (keys %{ $pr->{'gui-presentation'} }) {
		      my $gui = $_;
			  my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord}->{$lang}); 
			  #print "\n$tr"; 
			  #print Dumper($pr->{description}->{$lang});
		      $$Layer->{$_}->{"_LOBJ/_ATTR/$tr"} = DBLogObj->new($tr,$n,$pr->{description}->{$lang},$x,$y,$color_a,$color_r,'ATTR');

		      my $order=1;
		      foreach (@@role)  {
		         $$Layer->{$gui}->{"_LOBJ/_ATTR/$tr"}->addRole($_,$order++);
		      }	  
		}
	}
	foreach (keys %{ $Project->{group} }) {
	    my $gr = $_;
	    $TreeList->close("_LOBJ/_ATTR/__G.$gr");
	    foreach (keys %{ $Project->{group}->{$_}->{role}}) {
	      $TreeList->close("_LOBJ/_ATTR/__G.$gr/__R.$_");
	    }
	    
	}
	$TreeList->close("_LOBJ/_ATTR");

	$TreeList->add("_LOBJ/_FACT", -text => "Facts", -image => $Img{DIR}, -data => 'DIR/_FACT');
	$TreeList->setmode("_LOBJ/_FACT",'close');
	foreach (sort keys %{$Project->{fact}}) {
		my $tr=$_;
		my $pr=$Project->{fact}->{$tr};
		my $n = ($pr->{name}->{$lang}) ? $pr->{name}->{$lang} : "\[$tr\]";
		my $d = ($pr->{description}->{$lang}) ? $pr->{description}->{$lang} : "\[No Description Input\]";
		$TreeList->add("_LOBJ/_FACT/$tr", -text => $n, -image => $Img{FACT}, -data => 'FACT');
		foreach (keys %{ $pr->{'gui-presentation'} }) {
			my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord}->{$lang});
			$$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$n,$d,$x,$y,$factColor,undef,'FACT');
		}
	}
	$TreeList->close("_LOBJ/_FACT");

	$TreeList->close("_LOBJ");

#-------------------
	$TreeList->add("_REL", -text => "Relations", -image => $Img{DIR}, -data => 'DIR');
	$TreeList->setmode("_REL",'close');
	foreach (sort keys %{ $Project->{relation} }) {
		# Relations		
		my $tr=$_;
		my $pr=$Project->{relation}->{$tr};
		my $n = ($pr->{name}) ? $pr->{name} : "\[$tr\]";
		$TreeList->add("_REL/$tr", -text => $n, -image => $Img{REL}, -data => 'REL');
		foreach (keys %{ $pr->{'gui-presentation'}}) {						
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'REL',$pr->{from}->{content},$pr->{to}->{content},$$Layer->{$_},$Project->{relation}->{$tr}->{from}->{cardinality},$Project->{relation}->{$tr}->{to}->{cardinality},$Project->{relation}->{$tr}->{from}->{optional},$Project->{relation}->{$tr}->{to}->{optional});
			$$Layer->{$_}->{"_REL/$tr"}=$l if ($l);
		}
	}
	#$TreeList->close("_REL");

	#$TreeList->add("_REL", -text => "HRelations", -image => $Img{DIR}, -data => 'DIR');
	#$TreeList->setmode("_REL",'close');
	foreach (sort keys %{ $Project->{hrelation} }) {
		# Relations		
		my $tr=$_;
		my $pr=$Project->{hrelation}->{$tr};
		my $n = ($pr->{name}) ? $pr->{name} : "\[$tr\]";
		$TreeList->add("_REL/$tr", -text => $n, -image => $Img{REL}, -data => 'REL');
		foreach (keys %{ $pr->{'gui-presentation'}}) {						
			my ($from, $to);

			if (exists ($Project->{attr}->{$pr->{from}->{content}})) {
			  $from = "_LOBJ/_ATTR/$pr->{from}->{content}";
			}
			else {
			  $from = "_LOBJ/_FACT/$pr->{from}->{content}";
			}
			if (exists ($Project->{attr}->{$pr->{to}->{content}})) {
			  $to =	"_LOBJ/_ATTR/$pr->{to}->{content}";
			}
			else {
			  $to = "_LOBJ/_FACT/$pr->{to}->{content}";
			}
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'HREL',$from,$to,$$Layer->{$_},$Project->{hrelation}->{$tr}->{from}->{cardinality},$Project->{hrelation}->{$tr}->{to}->{cardinality},$Project->{hrelation}->{$tr}->{from}->{optional},$Project->{hrelation}->{$tr}->{to}->{optional});
			if ($l) {
			   $$Layer->{$_}->{"_HREL/$tr"}=$l ;
			} 
		}
	}
	$TreeList->close("_REL");


	$TreeList->add("_LAYER", -text => "Schema Layers", -image => $Img{DIR}, -data => 'DIR/_LAYER');
	$TreeList->setmode("_LAYER",'close');
	foreach my $tr (sort keys %{ $Project->{'gui-layer'} }) {
		# GUI Layers
		my $lim=$Img{LAYER};
		my $isVisible; ($isVisible=$Project->{'gui-layer'}->{$tr}->{visible})||($isVisible='NO');
		if ($isVisible eq 'YES') { $VisibleLayer=$tr; $lim=$Img{LAYER_SEL} }
		$TreeList->add("_LAYER/$tr",  -text => $Project->{'gui-layer'}->{$tr}->{name}->{$lang}, -image => $lim, -data => 'LAYER');
	}
	$TreeList->close("_LAYER");
	$TreeList->add("_LIB", -text => "Libraries", -image => $Img{DIR}, -data => 'DIR');
	$TreeList->setmode("_LIB",'close');
	$TreeList->close("_LIB");
        &SetHistory;
	
}

sub GetHistory {
	# get mode of each node in tree and save it to Project has
  	# into attribute ->{'tree-mode'}
  	my $mode;
  	undef $Project->{'tree-history'};
  	# ********************* host, source, table ***********************
  	foreach (keys %{$Project->{'host'}}) {
    	my $h=$_;     
    	$mode = ($TreeList->getmode($_) eq 'open') ? 'close' : 'open';
    	#$Project->{'host'}->{$_}->{'tree-mode'}=$mode;
    	$Project->{'tree-history'}->{'1'}->{'host'}->{$_}->{'mode'}=$mode if ($mode eq 'open');
    	foreach (keys %{$Project->{'host'}->{$h}->{'source'}}) {
			my $s=$_;
        	$mode = ($TreeList->getmode($h.'/'.$_) eq 'open') ? 'close' : 'open';
			#$Project->{'host'}->{$h}->{'source'}->{$_}->{'tree-mode'}=$mode;
			$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$_}->{'mode'}=$mode if ($mode eq 'open');
			foreach (keys %{$Project->{'host'}->{$h}->{'source'}->{$s}->{'table'}}) {           
	   			my $t = $_;
	   			$mode = ($TreeList->getmode($h.'/'.$s.'/'.$_) eq 'open') ? 'close' : 'open';
	   			#$Project->{'host'}->{$h}->{'source'}->{$s}->{'table'}->{$_}->{'tree-mode'}=$mode;
	   			$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$s}->{'table'}->{$_}->{'mode'}=$mode if ($mode eq 'open');
			}   
    	}
		$mode = ($TreeList->getmode($h.'/_TRAN') eq 'open') ? 'close' : 'open';
		$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'transformation'}->{'_TRAN'}->{'mode'}=$mode if ($mode eq 'open');
		foreach (keys %{$Project->{'host'}->{$h}->{'transformation'}}) {
        	$mode = ($TreeList->getmode($h.'/_TRAN/'.$_) eq 'open') ? 'close' : 'open';
			#$Project->{'host'}->{$h}->{'source'}->{$_}->{'tree-mode'}=$mode;
			$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'transformation'}->{_TRAN}->{tran}->{$_}->{'mode'}=$mode if ($mode eq 'open');
		}
  	}
  
  	# ********************* Attributes, Facts ***********************
  	$mode = ($TreeList->getmode('_LOBJ') eq 'open') ? 'close' : 'open';
  	$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'mode'}=$mode if ($mode eq 'open');
  	$mode = ($TreeList->getmode('_LOBJ/_ATTR') eq 'open') ? 'close' : 'open';
  	$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'mode'}=$mode if ($mode eq 'open');
  	$mode = ($TreeList->getmode('_LOBJ/_FACT') eq 'open') ? 'close' : 'open';
  	$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'FACT'}->{'_FACT'}->{'mode'}=$mode if ($mode eq 'open');
  	foreach (keys %{$Project->{'group'}}) {
    	my $gr = $_;
     	$mode = ($TreeList->getmode('_LOBJ/_ATTR/__G.'.$gr) eq 'open') ? 'close' : 'open';
     	$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{'mode'}=$mode if ($mode eq 'open');
     	foreach (keys %{$Project->{'group'}->{$gr}->{'role'}}) {
       		$mode = ($TreeList->getmode('_LOBJ/_ATTR/__G.'.$gr.'/__R.'.$_) eq 'open') ? 'close' : 'open';
       		$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{ROLE}->{$_}->{'mode'}=$mode if ($mode eq 'open');
     	}
  	}
 	
	# ********************* Layers **********************************
  	$mode = ($TreeList->getmode('_LAYER') eq 'open') ? 'close' : 'open';
  	$Project->{'tree-history'}->{'1'}->{'LAYER'}->{'_LAYER'}->{'mode'}=$mode if ($mode eq 'open');
  
  	# ********************** relations *********************************
  	$mode = ($TreeList->getmode('_REL') eq 'open') ? 'close' : 'open';
  	$Project->{'tree-history'}->{'1'}->{'REL'}->{'_REL'}->{'mode'}=$mode if ($mode eq 'open'); 
}

sub SetHistory {
  	# get mode of each node in tree and save it to Project has
  	#into attribute ->{'tree-mode'}
  	my $mode;
  	# ********************* host, source, table ***********************
  	foreach (keys %{$Project->{'tree-history'}->{'1'}->{'host'}}) {
    	my $h=$_;         
     	if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$_}->{'mode'})) {
       		$TreeList->setmode("$_",'open');
       		$TreeList->open($_);          
     	}  
     	foreach (keys %{$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}}) {
			my $s=$_;        
			if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$_}->{'mode'})) {	
		  		$TreeList->setmode($h.'/'.$_,'open');
        	  	$TreeList->open($h.'/'.$_);
			}            
			foreach (keys %{$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$s}->{'table'}}) {           
		   		my $t = $_;
   		   		if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$s}->{'table'}->{$_}->{'mode'})) {
  	    	 		$TreeList->setmode($h.'/'.$s.'/'.$_,'open');
            		$TreeList->open($h.'/'.$s.'/'.$_);          
		   		}  
			}   
    	}
		if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'transformation'}->{'_TRAN'}->{'mode'})) {
			$TreeList->setmode($h.'/_TRAN','open');
    		$TreeList->open($h.'/_TRAN');	
		}
		foreach my $t(keys %{$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'transformation'}->{'_TRAN'}}) {
			if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'transformation'}->{'_TRAN'}->{tran}->{$t}->{'mode'})) {
				$TreeList->setmode($h.'/_TRAN/'.$t,'open');
    			$TreeList->open($h.'/_TRAN'.$t);	
			}
		}			
	}
  	# *************** attributes, facts *******************************
  	if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'mode'})) {	
	  	$TreeList->setmode('_LOBJ','open');
        $TreeList->open('_LOBJ');
  	}
  	if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'mode'})) {	
	  	$TreeList->setmode('_LOBJ/_ATTR','open');
        $TreeList->open('_LOBJ/_ATTR');
  	}
  	if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'FACT'}->{'_FACT'}->{'mode'})) {	
	  	$TreeList->setmode('_LOBJ/_FACT','open');
        $TreeList->open('_LOBJ/_FACT');
  	}
  	foreach(keys %{$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}}) {    
    	if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$_}->{'mode'})) {
			my $gr = $_;
			$TreeList->setmode('_LOBJ/_ATTR/__G.'.$gr,'open');
        	$TreeList->open('_LOBJ/_ATTR/__G.'.$gr);
			foreach(keys %{$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{ROLE}}) {
	   			if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{ROLE}->{$_}->{'mode'})) {
	      			$TreeList->setmode("_LOBJ/_ATTR/__G.$gr/__R.$_",'open');
              		$TreeList->open("_LOBJ/_ATTR/__G.$gr/__R.$_");
	   			}   
			}
    	}
	}
  
  	# ********************** layers ************************************
  	if (exists ($Project->{'tree-history'}->{'1'}->{'LAYER'}->{'_LAYER'}->{'mode'})) {	
	  	$TreeList->setmode('_LAYER','open');
        $TreeList->open('_LAYER');
  	}
  	# ********************** relations *********************************
  	if (exists ($Project->{'tree-history'}->{'1'}->{'REL'}->{'_REL'}->{'mode'})) {	
	  	$TreeList->setmode('_REL','open');
        $TreeList->open('_REL');
  	}      
}

#-----------------------------------------------------

1
@


1.27
log
@key sort for project loading
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.26 2003/11/25 13:04:09 tuco80 Exp $
d147 9
a155 1
				$$Layer->{$_}->{"$host/_TRAN/$tr"}=DBTransf->new("$host/_TRAN/$tr",$tl->{$tr}->{name},$tl->{$tr}->{description},$x,$y);
@


1.26
log
@Finished language changing
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.25 2003/11/20 16:48:03 tuco80 Exp $
d80 1
a80 1
	foreach (keys %{ $Project->{host} }) {
d86 1
a86 1
		foreach (keys %{ $Project->{host}->{$host}->{source} }) {
d93 1
a93 1
			foreach (keys %{ $tl }) {
d100 1
a100 1
				foreach (keys %{ $tl->{$tbl}->{'gui-presentation'} }) {					
d104 1
a104 1
				foreach (keys %{ $tl->{$tbl}->{column} }) {
d119 1
a119 1
			foreach (keys %{$Project->{host}->{$host}->{source}->{$src}->{view}} ) {
d124 1
a124 1
				foreach (keys %{ $Project->{host}->{$host}->{source}->{$src}->{view}->{$tbl}->{column} }) {
d140 1
a140 1
		foreach (keys %{ $tl }) {
d149 1
a149 1
			foreach (keys %{ $tl->{$tr}->{input} }) {
d158 1
a158 1
			foreach (keys %{ $tl->{$tr}->{output} }) {
d173 1
a173 1
		foreach my $file (keys %{$tl}){
d189 1
a189 1
	foreach (keys %{ $Project->{trigger} }) {
d202 1
a202 1
	foreach (keys %{ $Project->{const} }) {
d215 1
a215 1
	foreach (keys %{ $Project->{connection} }) {
d230 1
a230 1
	foreach (keys %{ $Project->{signal} }) {
d252 1
a252 1
        foreach (keys %{ $Project->{group} }) {
d257 1
a257 1
	    foreach (keys %{ $Project->{group}->{$_}->{role}}) {
d264 1
a264 1
	foreach (keys %{ $Project->{attr} }) {
d323 1
a323 1
	foreach (keys %{$Project->{fact}}) {
d341 1
a341 1
	foreach (keys %{ $Project->{relation} }) {
d356 1
a356 1
	foreach (keys %{ $Project->{hrelation} }) {
d386 1
a386 1
	$TreeList->add("_LAYER", -text => "Schema Layers", -image => $Img{DIR}, -data => 'DIR');
d388 1
a388 1
	foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
@


1.25
log
@Position is language dependant
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.24 2003/11/06 12:28:24 tuco80 Exp $
a51 1
	print "\nEsto agarramos: $SLSel";
a100 1

d300 1
a300 1
		      my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord}->{$lang}); 
@


1.24
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.23 2003/11/03 09:56:03 tuco80 Exp $
d10 1
a10 1
use vars qw($Project $TreeList $mainTabs $TreeFont $lang $tSchemaC);
d52 1
d103 1
a103 1
					my ($x,$y)=split(' ',$tl->{$tbl}->{'gui-presentation'}->{$_}->{coord});
d148 1
a148 1
				my ($x,$y)=split(' ',$tl->{$tr}->{'gui-presentation'}->{$_}->{coord});
d179 1
a179 1
				my ($x,$y)=split(' ',$tl->{$file}->{'gui-presentation'}->{$_}->{coord});
d196 1
a196 1
			my ($x,$y)=split(' ',$Project->{trigger}->{$tr}->{'gui-presentation'}->{$_}->{coord});
d209 1
a209 1
			my ($x,$y)=split(' ',$Project->{const}->{$tr}->{'gui-presentation'}->{$_}->{coord});
d302 1
a302 1
		      my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord}); 
d332 1
a332 1
			my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord});
a397 1

@


1.23
log
@Removed deletion of objects from tree temporarily, as it could have misbehaved
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.22 2003/10/01 08:20:59 tuco80 Exp $
d7 1
d174 9
a182 4
		foreach (keys %{$tl}){
			$TreeList->add("$host/_FILE/$_",  -text => $Project->{host}->{$host}->{file}->{$_}->{name}, -image => $Img{FILE}, -data => 'FILE');
			$TreeList->setmode("$host/_FILE/$_",'close');
			$TreeList->close("$host/_FILE/$_");
d255 1
a255 1
	    $TreeList->add("_LOBJ/_ATTR/__G.$gr",  -text => $Project->{group}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'DIR/_GROUP');	    
d259 1
a259 1
	      $TreeList->add("_LOBJ/_ATTR/__G.$gr/__R.$_",  -text => $Project->{group}->{$gr}->{role}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'DIR');	    
@


1.22
log
@Fixed bug in name/desc editing.  +Deletion of objects from visible layer (Del) or project (Shift-Del)
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.21 2003/10/01 07:39:11 spanhel Exp $
d36 1
a36 1
		&items_delete(1);
d39 1
a39 1
		&items_delete(undef);
d89 2
a90 1
			$TreeList->setmode("$host/$src",$Project->{host}->{$host}->{source}->{$src}->{'tree-mode'});
d170 9
a178 3
                #if (!exists($Project->{host}->{$_}->{'tree-mode'})) {$Project->{host}->{$_}->{'tree-mode'}='close'};
		#if ($Project->{host}->{$_}->{'tree-mode'} eq 'open') {$TreeList->open("$host");}
		#else { $TreeList->close("$host");}
d249 1
a249 1
	    $TreeList->add("_LOBJ/_ATTR/__G.$gr",  -text => $Project->{group}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'DIR');	    
d400 30
a429 23
  # get mode of each node in tree and save it to Project has
  # into attribute ->{'tree-mode'}
  my $mode;
  undef $Project->{'tree-history'};
  # ********************* host, source, table ***********************
  foreach (keys %{$Project->{'host'}}) {
     my $h=$_;     
     $mode = ($TreeList->getmode($_) eq 'open') ? 'close' : 'open';
     $Project->{'host'}->{$_}->{'tree-mode'}=$mode;
     $Project->{'tree-history'}->{'1'}->{'host'}->{$_}->{'mode'}=$mode if ($mode eq 'open');
     foreach (keys %{$Project->{'host'}->{$h}->{'source'}}) {
	my $s=$_;
        $mode = ($TreeList->getmode($h.'/'.$_) eq 'open') ? 'close' : 'open';
	$Project->{'host'}->{$h}->{'source'}->{$_}->{'tree-mode'}=$mode;
	$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$_}->{'mode'}=$mode if ($mode eq 'open');
	foreach (keys %{$Project->{'host'}->{$h}->{'source'}->{$s}->{'table'}}) {           
	   my $t = $_;
	   $mode = ($TreeList->getmode($h.'/'.$s.'/'.$_) eq 'open') ? 'close' : 'open';
	   $Project->{'host'}->{$h}->{'source'}->{$s}->{'table'}->{$_}->{'tree-mode'}=$mode;
	   $Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$s}->{'table'}->{$_}->{'mode'}=$mode if ($mode eq 'open');
	}   
     }
  }
d431 20
a450 20
  # ********************* Attributes, Facts ***********************
  $mode = ($TreeList->getmode('_LOBJ') eq 'open') ? 'close' : 'open';
  $Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'mode'}=$mode if ($mode eq 'open');
  $mode = ($TreeList->getmode('_LOBJ/_ATTR') eq 'open') ? 'close' : 'open';
  $Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'mode'}=$mode if ($mode eq 'open');
  $mode = ($TreeList->getmode('_LOBJ/_FACT') eq 'open') ? 'close' : 'open';
  $Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'FACT'}->{'_FACT'}->{'mode'}=$mode if ($mode eq 'open');
  foreach (keys %{$Project->{'group'}}) {
     my $gr = $_;
     $mode = ($TreeList->getmode('_LOBJ/_ATTR/__G.'.$gr) eq 'open') ? 'close' : 'open';
     $Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{'mode'}=$mode if ($mode eq 'open');
     foreach (keys %{$Project->{'group'}->{$gr}->{'role'}}) {
       $mode = ($TreeList->getmode('_LOBJ/_ATTR/__G.'.$gr.'/__R.'.$_) eq 'open') ? 'close' : 'open';
       $Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{ROLE}->{$_}->{'mode'}=$mode if ($mode eq 'open');
     }
  }
 
  # ********************* Layers **********************************
  $mode = ($TreeList->getmode('_LAYER') eq 'open') ? 'close' : 'open';
  $Project->{'tree-history'}->{'1'}->{'LAYER'}->{'_LAYER'}->{'mode'}=$mode if ($mode eq 'open');
d452 3
a454 3
  # ********************** relations *********************************
  $mode = ($TreeList->getmode('_REL') eq 'open') ? 'close' : 'open';
  $Project->{'tree-history'}->{'1'}->{'REL'}->{'_REL'}->{'mode'}=$mode if ($mode eq 'open'); 
d458 60
a517 48
  # get mode of each node in tree and save it to Project has
  # into attribute ->{'tree-mode'}
  my $mode;
  # ********************* host, source, table ***********************
  foreach (keys %{$Project->{'tree-history'}->{'1'}->{'host'}}) {
     my $h=$_;         
     if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$_}->{'mode'})) {
       $TreeList->setmode("$_",'open');
       $TreeList->open($_);          
     }  
     foreach (keys %{$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}}) {
	my $s=$_;        
	if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$_}->{'mode'})) {	
	  $TreeList->setmode($h.'/'.$_,'open');
          $TreeList->open($h.'/'.$_);
	}            
	foreach (keys %{$Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$s}->{'table'}}) {           
	   my $t = $_;
   	   if (exists ($Project->{'tree-history'}->{'1'}->{'host'}->{$h}->{'source'}->{$s}->{'table'}->{$_}->{'mode'})) {
  	     $TreeList->setmode($h.'/'.$s.'/'.$_,'open');
             $TreeList->open($h.'/'.$s.'/'.$_);          
	   }  
	}   
     }
  }
  # *************** attributes, facts *******************************
  if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'mode'})) {	
	  $TreeList->setmode('_LOBJ','open');
          $TreeList->open('_LOBJ');
  }
  if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'mode'})) {	
	  $TreeList->setmode('_LOBJ/_ATTR','open');
          $TreeList->open('_LOBJ/_ATTR');
  }
  if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'FACT'}->{'_FACT'}->{'mode'})) {	
	  $TreeList->setmode('_LOBJ/_FACT','open');
          $TreeList->open('_LOBJ/_FACT');
  }
  foreach(keys %{$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}}) {    
    if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$_}->{'mode'})) {
	my $gr = $_;
	$TreeList->setmode('_LOBJ/_ATTR/__G.'.$gr,'open');
        $TreeList->open('_LOBJ/_ATTR/__G.'.$gr);
	foreach(keys %{$Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{ROLE}}) {
	   if (exists ($Project->{'tree-history'}->{'1'}->{'LObj'}->{'_LOBJ'}->{'ATTR'}->{'_ATTR'}->{'GROUP'}->{$gr}->{ROLE}->{$_}->{'mode'})) {
	      $TreeList->setmode("_LOBJ/_ATTR/__G.$gr/__R.$_",'open');
              $TreeList->open("_LOBJ/_ATTR/__G.$gr/__R.$_");
	   }   
a518 2
    }
  }
d520 10
a529 10
  # ********************** layers ************************************
  if (exists ($Project->{'tree-history'}->{'1'}->{'LAYER'}->{'_LAYER'}->{'mode'})) {	
	  $TreeList->setmode('_LAYER','open');
          $TreeList->open('_LAYER');
  }
  # ********************** relations *********************************
  if (exists ($Project->{'tree-history'}->{'1'}->{'REL'}->{'_REL'}->{'mode'})) {	
	  $TreeList->setmode('_REL','open');
          $TreeList->open('_REL');
  }      
@


1.21
log
@log. model
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.20 2003/09/25 09:50:12 tuco80 Exp $
d9 1
a9 1
use vars qw($Project $TreeList $mainTabs $TreeFont $lang);
d19 1
a19 1
    				       -selectmode browse
d35 6
d261 1
a261 1
	        my @@role; 
d289 2
a290 2
			  #print "\n$tr";                      
		      print Dumper($pr->{description}->{$lang});
d292 1
d315 1
d319 1
a319 1
			$$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$pr->{name}->{$lang},$pr->{description}->{$lang},$x,$y,$factColor,undef,'FACT');
@


1.20
log
@Arity of Transformation I/O complete
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.19 2003/08/22 09:34:49 spanhel Exp $
d284 1
d373 1
a373 1
		$TreeList->add("_LAYER/$tr",  -text => $Project->{'gui-layer'}->{$tr}->{name}, -image => $lim, -data => 'LAYER');
@


1.19
log
@fix bug - drag and drop
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.18 2003/08/19 14:32:16 spanhel Exp $
d10 1
a10 1
my $unSortAttr = 'thistle1';
d43 1
a43 1
sub SelectTreeItem {	# action for left button double-click on TreeList	
d45 13
a57 15
	if ($TreeList->info('data', $SLSel) eq 'LAYER') {
		our ($id);
		# set proper icons in Tree List
		($id=$SLSel)=~s|^_LAYER/||;
		foreach (keys %{ $Project->{'gui-layer'} }) {
			$TreeList->entryconfigure('_LAYER/'.$_,-image => $Img{LAYER});
		}
		$TreeList->entryconfigure($SLSel,-image => $Img{LAYER_SEL});
		&ClearLayer(\$Layer,$tSchemaC);
		$VisibleLayer=$id;
		&ShowLayer(\$Layer,$tSchemaC);
		$mainTabs->raise('schema');
	} else {
		if ($mainTabs->raised eq 'prop') { 
			$mainTabs->raise('schema')
d59 5
a63 1
			$mainTabs->raise('prop')
d282 3
a284 2
		      my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord});                       
		      $$Layer->{$_}->{"_LOBJ/_ATTR/$tr"} = DBLogObj->new($tr,"$pr->{name}->{$lang}",$pr->{description}->{$lang},$x,$y,$color_a,$color_r,'ATTR');
d310 1
a310 1
			$$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$pr->{name}->{$lang},$pr->{description}->{$lang},$x,$y,'honeydew4',undef,'FACT');
@


1.18
log
@view data
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.17 2003/08/18 07:11:30 spanhel Exp $
a245 1
		print Dumper($_);
d250 1
d377 1
@


1.17
log
@fixed the selection of hrelation
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.16 2003/08/14 11:55:59 tuco80 Exp $
d246 1
@


1.16
log
@Added ShopCard for View, trig, transf & const. (only hrelation not selectable)
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.15 2003/08/01 09:18:59 spanhel Exp $
d354 1
a354 1
			   $$Layer->{$_}->{"_REL/$tr"}=$l ;
@


1.15
log
@added Edit.pm package
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.14 2003/07/31 07:31:11 spanhel Exp $
d128 1
a128 1
		$TreeList->add("$host/_TRAN", -text => "Transformations", -image => $Img{DIR}, -data => 'DIR');
d167 1
a167 1
	$TreeList->add("_TRIG", -text => "Triggers", -image => $Img{DIR}, -data => 'DIR');
d180 1
a180 1
	$TreeList->add("_CONST", -text => "Constants", -image => $Img{DIR}, -data => 'DIR');
@


1.14
log
@FM,LM
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.13 2003/07/31 06:37:44 michald Exp $
d253 1
d259 1
a259 1
  		     $path='/'.$gr.'/'.$_.'/';
d271 1
d273 1
d275 1
@


1.13
log
@some fixes for processing of transformation schema
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.12 2003/06/26 14:11:46 spanhel Exp $
d28 1
a28 2
		&Debug::UpdateObj;
				
@


1.12
log
@logical and fys. model
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.11 2003/05/30 16:22:18 spanhel Exp $
d303 1
a303 1
			$$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$pr->{name}->{$lang},$pr->{description}->{$lang},$x,$y,'snow3',undef,'FACT');
@


1.11
log
@logical model
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.10 2003/05/22 13:55:33 spanhel Exp $
d76 2
a77 1
		$TreeList->setmode("$host",$Project->{host}->{$_}->{'tree-mode'});
d88 2
a89 1
				$TreeList->setmode("$host/$src/$tbl",$tl->{$tbl}->{'tree-mode'});
d105 4
a108 3
				if (!exists($tl->{$tbl}->{'tree-mode'})) {$tl->{$tbl}->{'tree-mode'}='close'};
				if ($tl->{$tbl}->{'tree-mode'} eq 'open') {$TreeList->open("$host/$src/$tbl")}
				else { $TreeList->close("$host/$src/$tbl");}
d122 4
a125 3
			if (!exists($Project->{host}->{$host}->{source}->{$src}->{'tree-mode'})) {$Project->{host}->{$host}->{source}->{$src}->{'tree-mode'}='close'};
			if ($Project->{host}->{$host}->{source}->{$src}->{'tree-mode'} eq 'open') {$TreeList->open("$host/$src");}
			else { $TreeList->close("$host/$src");}
d162 4
a165 3
                if (!exists($Project->{host}->{$_}->{'tree-mode'})) {$Project->{host}->{$_}->{'tree-mode'}='close'};
		if ($Project->{host}->{$_}->{'tree-mode'} eq 'open') {$TreeList->open("$host");}
		else { $TreeList->close("$host");}
d228 1
a228 1
	$TreeList->setmode("_LOBJ",'open');	
d232 1
a232 1
	$TreeList->setmode("_LOBJ/_ATTR",'close');
d234 10
a243 6
	   # $TreeList->add("_LOBJ/_ATTR/$Project->{group}->{$_}->{name}->{$lang}",  -text => $Project->{group}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'DIR');
   	   # $TreeList->setmode("_LOBJ/_ATTR/$Project->{group}->{$_}->{name}->{$lang}",'close');    
	   # $TreeList->close("_LOBJ/_ATTR/$Project->{group}->{$_}->{name}->{$lang}");
	    $TreeList->add("_LOBJ/_ATTR/$_",  -text => $Project->{group}->{$_}->{name}->{$lang}, -image => $Img{DIR}, -data => 'DIR');
	    $TreeList->setmode("_LOBJ/_ATTR/$_",'close');    
	    $TreeList->close("_LOBJ/_ATTR/$_");
d248 3
a250 1
		my $color;
d253 1
a253 2
		my $gr = $Project->{attr}->{$tr}->{group};
		
d255 17
a271 2
		  $gr='/'.$gr.'/';
		  $color=$Project->{group}->{$Project->{attr}->{$tr}->{group}}->{color};
d273 1
a273 5
		else {
		  $gr='/';
		   $color=$unSortAttr
		}
		$TreeList->add("_LOBJ/_ATTR$gr$_", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');		
d275 1
d277 5
a281 1
		      $$Layer->{$_}->{"_LOBJ/_ATTR$gr$tr"}=DBLogObj->new($tr,$pr->{name}->{$lang},$pr->{description}->{$lang},$x,$y,$color,$gr);
d284 8
d303 1
a303 1
			$$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$pr->{name}->{$lang},$pr->{description}->{$lang},$x,$y,'snow3');
d308 1
a308 3
	$TreeList->open("_LOBJ");
	#print Dumper('--------------------------------');
	#print Dumper(keys %{$$Layer->{1}});
d335 15
a349 2
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'HREL',"_LOBJ/_ATTR/$pr->{from}->{content}","_LOBJ/_ATTR/$pr->{to}->{content}",$$Layer->{$_},$Project->{hrelation}->{$tr}->{from}->{cardinality},$Project->{hrelation}->{$tr}->{to}->{cardinality},$Project->{hrelation}->{$tr}->{from}->{optional},$Project->{hrelation}->{$tr}->{to}->{optional});
			#print Dumper($tr,' ',$_);
a350 1
			   #print 'jo';
a355 2
	#print Dumper('--------------------------------');
	#print Dumper(keys %{$$Layer->{1}});
d359 1
a359 1
	$TreeList->setmode("_LAYER",'open');
d367 1
a367 1
	$TreeList->open("_LAYER");
d372 1
a372 2
        #print Dumper('--------------------------------');
        #print Dumper(keys %{$$Layer->{1}});
d378 3
a380 1
  my $mode;   
d385 1
d390 1
d395 54
d452 26
d479 10
@


1.10
log
@attributes added into groups (+ color of groups)
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.9 2003/05/20 16:25:53 spanhel Exp $
d222 2
a223 2
	$TreeList->add("_LOBJ", -text => "Logical Objects", -image => $Img{DIR}, -data => 'DIR');
	$TreeList->setmode("_LOBJ",'close');	
d226 1
a226 1
	$TreeList->add("_LOBJ/_ATTR", -text => "Attributes", -image => $Img{DIR}, -data => 'DIR');
d260 1
a260 1
	$TreeList->add("_LOBJ/_FACT", -text => "Facts", -image => $Img{DIR}, -data => 'DIR');
d274 3
a276 1
	$TreeList->close("_LOBJ");
d287 1
a287 1
		foreach (keys %{ $pr->{'gui-presentation'}}) {			
d292 19
d312 3
d330 2
@


1.9
log
@tree history, colors of attributs
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.8 2003/05/16 07:02:43 spanhel Exp $
d10 1
d223 1
a223 1
	$TreeList->setmode("_LOBJ",'close');
d225 1
d228 8
d239 1
a239 1
		my $color=$Project->{group}->{$Project->{attr}->{$tr}->{group}}->{color};
d242 11
a252 1
		$TreeList->add("_LOBJ/_ATTR/$tr", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');		
d254 2
a255 2
			my ($x,$y)=split(' ',$pr->{'gui-presentation'}->{$_}->{coord});
			$$Layer->{$_}->{"_LOBJ/_ATTR/$tr"}=DBLogObj->new($tr,$pr->{name}->{$lang},$pr->{description}->{$lang},$x,$y,$color);
d262 1
a262 1
	foreach (keys %{ $Project->{fact}}) {
a276 1
        #print  Dumper($$Layer);
a305 2

#print Dumper($TreeList);
@


1.8
log
@adding and removing object from Layers
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.7 2003/05/07 14:28:51 spanhel Exp $
d8 2
a9 1
use vars qw($Project $TreeList $mainTabs $TreeFont);
d28 1
a28 1
		&SetHistory($TreeList->info('anchor'));
d32 1
a32 1
		&SelectTreeItem;		
d70 1
d75 1
a75 1
		$TreeList->setmode("$host",'close');
d79 2
a80 2
			$TreeList->add("$host/$src",  -text => $Project->{host}->{$host}->{source}->{$src}->{name}, -image => $Img{SRC}, -data => 'SRC');
			$TreeList->setmode("$host/$src",'close');
d85 5
a89 3
				$TreeList->add("$host/$src/$tbl",  -text => $tl->{$tbl}->{name}, -image => $Img{TAB}, -data => 'TAB');
				$TreeList->setmode("$host/$src/$tbl",'close');
				foreach (keys %{ $tl->{$tbl}->{'gui-presentation'} }) {
d101 5
a105 2
				}
				$TreeList->open("$host/$src/$tbl");
d116 7
a122 3
				$TreeList->open("$host/$src/$tbl");
			}
			$TreeList->close("$host/$src");
d157 3
a159 1
		$TreeList->close("$host");
d162 1
a162 1
	$TreeList->add("_TRIG", -text => "Trigers", -image => $Img{DIR}, -data => 'DIR');
d164 1
a164 1
	foreach (keys %{ $Project->{triger} }) {
d168 3
a170 3
		foreach (keys %{ $Project->{triger}->{$tr}->{'gui-presentation'} }) {
			my ($x,$y)=split(' ',$Project->{triger}->{$tr}->{'gui-presentation'}->{$_}->{coord});
			$$Layer->{$_}->{"_TRIG/$tr"}=DBTrig->new($tr,$Project->{triger}->{$tr}->{name},$Project->{triger}->{$tr}->{description},$x,$y);
d229 1
d231 2
a232 2
		my $n = ($pr->{name}) ? $pr->{name} : "\[$tr\]";
		$TreeList->add("_LOBJ/_ATTR/$tr", -text => $n, -image => $Img{ATTR}, -data => 'ATTR');
d235 1
a235 1
			$$Layer->{$_}->{"_LOBJ/_ATTR/$tr"}=DBLogObj->new($tr,$pr->{name},$pr->{description},$x,$y);
d242 1
a242 1
	foreach (keys %{ $Project->{fact} }) {
d245 1
a245 1
		my $n = ($pr->{name}) ? $pr->{name} : "\[$tr\]";
d249 1
a249 1
			$$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$pr->{name},$pr->{description},$x,$y);
d274 1
a274 1
	$TreeList->setmode("_LAYER",'close');
d282 1
a282 1
#	$TreeList->close("_LAYER");
d291 17
a307 16
sub rev_tree_mode {
  my $p = shift;
  if (!exists $$p->{'tree-mode'}) {
    $$p->{'tree-mode'}='open';
  }
  else {
     $$p->{'tree-mode'}='open' if ($$p->{'tree-mode'} eq 'close');
     $$p->{'tree-mode'}='close' if ($$p->{'tree-mode'} eq 'open');
  }
}
sub SetHistory {
  my $actItem = shift;
  #print Dumper($actItem);
  if ($actItem) {
     if ($actItem=~/^_LAYER\/(\d+)/) {	
	&rev_tree_mode(\$Project->{'gui-layer'}->{$1});
a309 1
 
@


1.7
log
@schema model
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.6 2003/05/05 15:36:46 spanhel Exp $
d8 1
a8 1
use vars qw($TreeList $mainTabs $TreeFont);
d27 1
d31 2
a32 1
		&SelectTreeItem;
d37 1
a37 1
	return $SourceList
d98 1
a98 1
				$TreeList->close("$host/$src/$tbl");
d109 1
a109 1
				$TreeList->close("$host/$src/$tbl");
d205 1
d277 21
@


1.6
log
@schema - tables, columns, relations
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.5 2003/05/01 13:42:45 spanhel Exp $
d7 1
a7 1

d40 1
a40 2
sub SelectTreeItem {	# action for left button double-click on TreeList

a65 1

a66 1
#	print Dumper($TreeList);
d181 1
a181 1
		foreach (keys %{ $pr->{'gui-presentation'} }) {
d240 1
a240 1

d244 1
a244 1
		# Relations
d249 1
a249 2
		#print "*********************".Dumper($$Layer->{$_})."**************";
		foreach (keys %{ $pr->{'gui-presentation'} }) {			
@


1.5
log
@update tree -  tables and columns
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.4 2003/04/30 09:57:46 spanhel Exp $
d252 2
a253 1
		foreach (keys %{ $pr->{'gui-presentation'} }) {
@


1.4
log
@connect to mysql
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.3 2003/04/28 07:36:33 michald Exp $
d69 1
a69 1
	#print Dumper($Project);
d274 1
a274 1

@


1.3
log
@introduction of Debug package
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.2 2003/04/24 20:01:41 michald Exp $
d69 1
a69 1
#print Dumper($Project);
@


1.2
log
@prototype for reverse engineering
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.1.1.1 2002/09/24 01:34:20 michald Exp $
d26 1
d51 1
a51 1
		&ClearLayer(\%Layer,$tSchemaC);
d53 1
a53 1
		&ShowLayer(\%Layer,$tSchemaC);
d88 1
a88 1
					$Layer->{$_}->{"$host/$src/$tbl"}=DBTable->new("$host/$src/$tbl",$tl->{$tbl}->{name},$tl->{$tbl}->{description},$x,$y);
d96 1
a96 1
						$Layer->{$_}->{"$host/$src/$tbl"}->addAttr($cid,$c->{name},$c->{description},$c->{constraint},$c->{type},$c->{'length'},$c->{'gui-presentation'}->{$_}->{line});
d101 1
a101 1
			foreach (keys %{ $Project->{host}->{$host}->{source}->{$src}->{view} }) {
d124 1
a124 1
				$Layer->{$_}->{"$host/_TRAN/$tr"}=DBTransf->new("$host/_TRAN/$tr",$tl->{$tr}->{name},$tl->{$tr}->{description},$x,$y);
d132 1
a132 1
					$Layer->{$_}->{"$host/_TRAN/$tr"}->addInp($cid,$c->{name},$c->{description},$c->{type},$c->{'length'},$c->{'gui-presentation'}->{$_}->{line});
d141 1
a141 1
					$Layer->{$_}->{"$host/_TRAN/$tr"}->addOut($cid,$c->{name},$c->{description},$c->{type},$c->{'length'},$c->{'gui-presentation'}->{$_}->{line});
d158 1
a158 1
			$Layer->{$_}->{"_TRIG/$tr"}=DBTrig->new($tr,$Project->{triger}->{$tr}->{name},$Project->{triger}->{$tr}->{description},$x,$y);
d171 1
a171 1
			$Layer->{$_}->{"_CONST/$tr"}=DBConst->new($tr,$Project->{const}->{$tr}->{name},$Project->{const}->{$tr}->{description},$Project->{const}->{$tr}->{data},$x,$y);
d185 2
a186 2
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'CONN',$pr->{from},$pr->{to},$Layer->{$_});
			$Layer->{$_}->{"_CONN/$tr"}=$l if ($l);
d200 2
a201 2
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'SIGNAL',$pr->{from},$pr->{to},$Layer->{$_});
			$Layer->{$_}->{"_SIGNAL/$tr"}=$l if ($l);
d221 1
a221 1
			$Layer->{$_}->{"_LOBJ/_ATTR/$tr"}=DBLogObj->new($tr,$pr->{name},$pr->{description},$x,$y);
d235 1
a235 1
			$Layer->{$_}->{"_LOBJ/_FACT/$tr"}=DBLogObj->new($tr,$pr->{name},$pr->{description},$x,$y);
d253 2
a254 2
			my $l=DBConn->new($tr,$pr->{name},$pr->{description},'REL',$pr->{from}->{content},$pr->{to}->{content},$Layer->{$_},$Project->{relation}->{$tr}->{from}->{cardinality},$Project->{relation}->{$tr}->{to}->{cardinality},$Project->{relation}->{$tr}->{from}->{optional},$Project->{relation}->{$tr}->{to}->{optional});
			$Layer->{$_}->{"_REL/$tr"}=$l if ($l);
d261 1
a261 1
	foreach (keys %{ $Project->{'gui-layer'} }) {
a262 1
		my $tr=$_;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id: ptree.pl,v 1.3 2002/08/30 00:37:25 michal Exp $
d46 1
a46 1
		foreach (keys %{ %$Project->{'gui-layer'} }) {
d69 1
a69 1
	foreach (keys %{ %$Project->{host} }) {
d74 1
a74 1
		foreach (keys %{ %$Project->{host}->{$host}->{source} }) {
d80 1
a80 1
			foreach (keys %{ %$tl }) {
d85 1
a85 1
				foreach (keys %{ %$tl->{$tbl}->{'gui-presentation'} }) {
d89 1
a89 1
				foreach (keys %{ %$tl->{$tbl}->{column} }) {
d94 1
a94 1
					foreach (keys %{ %$c->{'gui-presentation'} }) {
d100 1
a100 1
			foreach (keys %{ %$Project->{host}->{$host}->{source}->{$src}->{view} }) {
d105 1
a105 1
				foreach (keys %{ %$Project->{host}->{$host}->{source}->{$src}->{view}->{$tbl}->{column} }) {
d116 1
a116 1
		foreach (keys %{ %$tl }) {
d121 1
a121 1
			foreach (keys %{ %$tl->{$tr}->{'gui-presentation'} }) {
d125 1
a125 1
			foreach (keys %{ %$tl->{$tr}->{input} }) {
d130 1
a130 1
				foreach (keys %{ %$c->{'gui-presentation'} }) {
d134 1
a134 1
			foreach (keys %{ %$tl->{$tr}->{output} }) {
d139 1
a139 1
				foreach (keys %{ %$c->{'gui-presentation'} }) {
d151 1
a151 1
	foreach (keys %{ %$Project->{triger} }) {
d155 1
a155 1
		foreach (keys %{ %$Project->{triger}->{$tr}->{'gui-presentation'} }) {
d164 1
a164 1
	foreach (keys %{ %$Project->{const} }) {
d168 1
a168 1
		foreach (keys %{ %$Project->{const}->{$tr}->{'gui-presentation'} }) {
d177 1
a177 1
	foreach (keys %{ %$Project->{connection} }) {
d183 3
a185 2
		foreach (keys %{ %$pr->{'gui-presentation'} }) {
			$Layer->{$_}->{"_CONN/$tr"}=DBConn->new($tr,$pr->{name},$pr->{description},'CONN',$pr->{from},$pr->{to},$Layer->{$_});
d192 1
a192 1
	foreach (keys %{ %$Project->{signal} }) {
d198 3
a200 2
		foreach (keys %{ %$pr->{'gui-presentation'} }) {
			$Layer->{$_}->{"_SIGNAL/$tr"}=DBConn->new($tr,$pr->{name},$pr->{description},'SIGNAL',$pr->{from},$pr->{to},$Layer->{$_});
d212 1
a212 1
	foreach (keys %{ %$Project->{attr} }) {
d218 1
a218 1
		foreach (keys %{ %$pr->{'gui-presentation'} }) {
d227 1
a227 1
	foreach (keys %{ %$Project->{fact} }) {
d232 1
a232 1
		foreach (keys %{ %$pr->{'gui-presentation'} }) {
d245 1
a245 1
	foreach (keys %{ %$Project->{relation} }) {
d251 3
a253 2
		foreach (keys %{ %$pr->{'gui-presentation'} }) {
			$Layer->{$_}->{"_REL/$tr"}=DBConn->new($tr,$pr->{name},$pr->{description},'REL',$pr->{from}->{content},$pr->{to}->{content},$Layer->{$_},$Project->{relation}->{$tr}->{from}->{cardinality},$Project->{relation}->{$tr}->{to}->{cardinality},$Project->{relation}->{$tr}->{from}->{optional},$Project->{relation}->{$tr}->{to}->{optional});
d260 1
a260 1
	foreach (keys %{ %$Project->{'gui-layer'} }) {
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

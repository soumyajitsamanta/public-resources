head	1.17;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2003.11.20.16.48.03;	author tuco80;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.06.12.28.23;	author tuco80;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.31.15.49.52;	author tuco80;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.31.15.33.12;	author tuco80;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.22.09.48.35;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.08.14.07.20;	author tuco80;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.02.08.17.53;	author tuco80;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.01.14.22.24;	author tuco80;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.29.11.45.22;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.21.13.20.48;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.13.10.52.28;	author tuco80;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.12.09.07.22;	author tuco80;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.08.14.57.37;	author tuco80;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.31.06.37.44;	author michald;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.24.20.39.58;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.26.18.24.15;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.14;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.14;	author michald;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Position is language dependant
@
text
@#-----------------------------------------------------
# Invariable Object
#-----------------------------------------------------
# $Id: DBConst.pm,v 1.16 2003/11/06 12:28:23 tuco80 Exp $

package DBConst;
use base Tk::Canvas;
use Data::Dumper;
use strict;
use warnings;


my $EntityFont='-*-verdana-bold-r-normal-*-11-*-iso8859-2';
my $NameFont='-*-arial-bold-r-normal-*-9-*-iso8859-2';
my $uBannerClr = 'DodgerBlue3';
my $tblHeadY = 16;
my $attrXpad = 7;
my $attrYpad = 7;
my $selBoxWidth = 3;  #width that selection box will have around the object
my $selBoxCol = 'blue'; #fill color of the selection box


##################################################
## the object constructor                       ##
##################################################

sub new {

	my ($proto,$id,$name,$desc,$value,$x,$y)=@@_;

	my $class = ref($proto) || $proto;
	my $self  = {};

	$self->{ID}    = $id;
	$self->{NAME}    = $name;
	$self->{DESC}    = $desc;
	$self->{REL}     = [];	# array of relations
	$self->{LAYERS}  = [1];	# list of layers in which this object is visible
	$self->{CANV_ID} = [];	# list of canvas identifiers [head_text,head_rect,body_rect,...]
	$self->{CANVAS} = '';	# canvas
	$self->{COORDS}  = [$x,$y,$x,$y];	# coords of object outline box

	$self->{TEXT_W}  = 0;	# largest text width
	$self->{VALUE}   = $value;	# value
	$self->{SELECTED} = 0;  # To know if the object is selected or not

	bless ($self, $class);
	return $self;

}

##############################################
## methods to access per-object data        ##
##                                          ##
## With args, they set the value.  Without  ##
## any, they only retrieve it/them.         ##
##############################################

sub name {
	my $self = shift;
	if (@@_) { 
    		$self->{NAME} = shift;
		if ($self->{CANV_ID}[2]) {
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[2], -text=>$self->{NAME});
		}
	}
	return $self->{NAME};
}

sub desc {
	my $self = shift;
	if (@@_) { $self->{DESC} = shift }
	return $self->{DESC};
}

sub id{
	my $self = shift;
	if(@@_){
		$self->{ID} = shift;
	}
	return $self->{ID};
}

#Only for compliance of the objects, needed for creation of new relations beteween objects
sub type{
	return 'CONST';
}

sub selected {
	my $self = shift;
	if (@@_) { $self->{SELECTED} = shift }
	return $self->{SELECTED};
}

sub set_selected{
	my $self = shift;
	$self->{SELECTED} = 1;
	my($x1,$y1,$x2,$y2)=$self->coords();
	my $temp = $selBoxWidth;
	$temp--;
	my $sx1 = $x1-$temp;
	my $sy1 = $y1-$temp;
	my $sx2 = $x2+$temp;
	my $sy2 = $y2+$temp;
	$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);			
}

sub set_deselected{
	my $self = shift;
	$self->{SELECTED} = 0;
	$self->{CANVAS}->coords($self->{CANV_ID}[3], -10, -10, -10, -10);
}

sub value {
	my $self = shift;
	if (@@_) {
		$self->{VALUE} = shift;
	}
	return $self->{VALUE};
}

sub coords {
	my $self = shift;
	if (@@_) {
		my ($x1,$y1,$x2,$y2) = @@_;
		$self->{COORDS} = [$x1,$y1,$x2,$y2];
		$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
	}
	return ($self->{CANV_ID}[0]) ? $self->{CANVAS}->coords($self->{CANV_ID}[0]) : [0,0,0,0];
}

sub getAttrY {	#return Y coordinate of connection point
	my $self = shift;
	return ($self->{COORDS}[3]-$self->{COORDS}[1])/2;
}

sub getAttrX {	#return X coordinate of connection point
	my $self = shift;
	return $self->{COORDS}[3]-$self->{COORDS}[1];
}

sub relation {
	my $self = shift;
	if (@@_) {
		my ($id,$edge) = @@_;	# relation id, edge position [0,1] ... first or last
        	push (@@{$self->{REL}}, $id);
	}
	return $self->{REL}
}

sub delRelation{
	my $self = shift;
	my ($relID) = @@_;
	my @@newRels;
	foreach (@@{$self->relation}) {	#move all connected relations
		unless ($_->id eq $relID){
			push(@@newRels,$_);
		}
	}
	@@{$self->{REL}}=@@newRels;
}

sub move {
	my $self = shift;
	my ($c,$x,$y) = @@_;	# canvas,x,y
	my $tag_name = '_CONST/'.$self->{ID};
	$c->move('_'.$tag_name, $x, $y);
	if($self->{SELECTED}){$c->move($self->{CANV_ID}[3],$x,$y);}
	foreach (@@{$self->relation}) {	#move all connected relations
		$_->adjustCoords;
	};
	$self->{COORDS} = $self->{CANVAS}->coords($self->{CANV_ID}[0]);
}
 
sub draw {
	my ($self,$c) = @@_;	# canvas
	$self->{CANVAS}=$c;
	my ($x1,$y1) = @@{$self->{COORDS}};
	my $tag_name = '__CONST/'.$self->{ID};
	#This is the selection box which will remain hidden until object is selected
	$self->{CANV_ID}[3]=$c->createRectangle(-10,-10,-10,-10,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
	$self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $uBannerClr, -tags=>[$tag_name,'item']);
	$self->{CANV_ID}[1]=$c->createText(0,0, qw/ -fill white/,-text=>$self->{VALUE},-font=>$EntityFont, -tags=>[$tag_name,'attr']);
	$self->{CANV_ID}[2]=$c->createText(0,0, qw/ -fill black/,-text=>$self->{NAME},-font=>$NameFont, -tags=>[$tag_name,'item']);
	
	my @@w=$c->bbox($self->{CANV_ID}[1]);	# check text outline coords
	$self->{TEXT_W}=$w[2]-$w[0];
	my $x2=$x1+$self->{TEXT_W}+($attrXpad*2);
	my $y2=$y1+$tblHeadY;
	#@@w=$c->bbox($self->{CANV_ID}[2]);	# check name outline coords
	#my $xx2=$x1+$attrXpad;
	#my $yy2=$y1-$attrYpad;

	$c->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
	#$c->coords($self->{CANV_ID}[1], ($x1+$x2)/2+$attrXpad, ($y1+$y2)/2);
	$c->coords($self->{CANV_ID}[1], (($x1+$x2)/2), ($y1+$y2)/2);
	$c->coords($self->{CANV_ID}[2], (($x1+$x2)/2), $y1-$attrYpad);
	$self->coords($x1, $y1, $x2, $y2);
	if ($self->{SELECTED}){$self->set_selected();}

}

sub delFromGUI{
	#first we are only going to delete from gui-layer
	#after that it's just determining wether hash is empty or not
	#and if it is, it must be deleted from project completely
	my $self = shift;
	my ($layerID) = @@_;
	$self->clear;
	foreach (@@{$self->relation}) {	#delete all connected relations
		$_->delFromGUI($layerID, $self->{ID});
	};
	return @@{$self->relation};
}

#-----------------------------

sub clear {
	my $self = shift;
	foreach (@@{$self->{CANV_ID}}) {
		$self->{CANVAS}->delete($_);
	}
	$self->{CANV_ID}=();
}

#-----------------------------

1;
@


1.16
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.15 2003/10/31 15:49:52 tuco80 Exp $
d172 1
@


1.15
log
@Fixed detail about grafication
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.14 2003/10/31 15:33:12 tuco80 Exp $
d10 1
@


1.14
log
@Fixed detail that presented small graficating problems in some cases
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.13 2003/09/22 09:48:35 tuco80 Exp $
d181 2
a182 2
	$self->{CANV_ID}[1]=$c->createText(0,0, qw/-anchor e -fill white/,-text=>$self->{VALUE},-font=>$EntityFont, -tags=>[$tag_name,'attr']);
	$self->{CANV_ID}[2]=$c->createText(0,0, qw/-anchor e -fill black/,-text=>$self->{NAME},-font=>$NameFont, -tags=>[$tag_name,'item']);
d186 1
a186 1
	my $x2=$x1+$self->{TEXT_W}+$attrXpad*2;
d188 3
a190 3
	@@w=$c->bbox($self->{CANV_ID}[2]);	# check name outline coords
	my $xx2=$x2-$attrXpad;
	my $yy2=$y1-$attrYpad;
d193 3
a195 2
	$c->coords($self->{CANV_ID}[1], ($x1+$x2)/2+$attrXpad, ($y1+$y2)/2);
	$c->coords($self->{CANV_ID}[2], $xx2, $yy2);
@


1.13
log
@fixed select in draw().  DBtransf & DBConn + arity butnot finished
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.12 2003/09/08 14:07:20 tuco80 Exp $
a116 9
		if ($self->{CANV_ID}[1]) {
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[1], -text=>$self->{VALUE});
			my @@w=$self->{CANVAS}->bbox($self->{CANV_ID}[1]);	# check text outline coords
			$self->{TEXT_W}=$w[2]-$w[0];
			my ($x1, $y1, $x2, $y2) = $self->{CANVAS}->coords($self->{CANV_ID}[0]);
			$x1=$x2-$self->{TEXT_W}-$attrXpad*2;
			$self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
			$self->coords($x1, $y1, $x2, $y2);
		}
@


1.12
log
@Added creation of relations between objects (Hrel,Sign,Rel & Conn)
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.11 2003/09/02 08:17:53 tuco80 Exp $
d205 1
@


1.11
log
@Fixed bug in deletion of HRelations, got rid of some unnecesary prints and comments
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.10 2003/09/01 14:22:24 tuco80 Exp $
d83 5
d142 1
a142 1
	return $self->{COORDS}[3]-$self->{COORDS}[1];
d190 1
a190 1
	$self->{CANV_ID}[1]=$c->createText(0,0, qw/-anchor e -fill white/,-text=>$self->{VALUE},-font=>$EntityFont, -tags=>[$tag_name,'item']);
a196 10
	if ($self->{SELECTED}){
		my $sx1 = $x1-$selBoxWidth;
		my $sy1 = $y1-$selBoxWidth;
		my $sx2 = $x2+$selBoxWidth;
		my $sy2 = $y2+$selBoxWidth;
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name,'item']);
		$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
		$self->{CANVAS}->lower($self->{CANV_ID}[3],0);
	}

a216 1
		#print ("\nDeleting from project: ",$_);
@


1.10
log
@Deletion of Objects Complete
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.9 2003/08/29 11:45:22 tuco80 Exp $
a91 6
	#my $c = $self->{CANVAS};
	#$self->clear;
	#$self->{CANVAS}->delete($self{CANV_ID}[3]);
	#$self->draw($self->{CANVAS});
	#my $tag_name = 'SELECTED__CONST/'.$self->{ID};
	#$self->{CANV_ID}[3]=$self->{CANVAS}->createRectangle(0,0,0,0,-width=>$selBoxWidth-1, -outline => $selBoxCol,-tags=>[$tag_name]);
d99 1
a99 14
	#my $sy2 = $y1+(($self->{I_N}+1)*$attrYstep+$attrYpad*2)+$selBoxWidth;
	$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
	#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
	#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
	#$c->raise('item');
	#$c->raise($self->{CANV_ID}[1]);
	#$c->raise($self->{CANV_ID}[2]);
	#$self->{CANVAS}->coords($self->{CANV_ID}[3], $x1, $y1, $x2, $y2);
	#$tag_name = '__CONST/'.$self->{ID};
	#$self->{CANVAS}->lower($self->{CANV_ID}[3]);
	#my $text = $self->{CANVAS}->gettags($self->{CANV_ID}[3]);
	#print ($text);
	#print "\ny el arreglo\n";
	#print Dumper($self->{CANV_ID});			
d105 1
a105 4
	$self->{CANVAS}->coords($self->{CANV_ID}[3], 0, 0, 0, 0);
	#$self->clear;
	#$self->draw($self->{CANVAS});
	#$self->{CANVAS}->delete($self->{CANV_ID}[3]);
a157 1
	#print ("\n esta es la id de la relacion a borrar: ",$relID);
a160 1
			#print ("\nse hace push de: ",$_->id);
a161 1
		#print ("este es un ID en el arreglo: ", $_->id);
d182 2
a183 9
	#my $sel = $self->{SELECTED};
	#my $positive = 1;
	#if ($sel eq $positive){
		#print "Si se metio tuanis\n";
		#print ($self->{SELECTED},"\n");
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$tag_name]);
	#}
	#This one is just to be able to know where to put the selection rectangle
	#$c->create('rectangle', 0, 0, 0, 0, -fill => undef, -outline => undef, -tags => 'marker');
a196 3
		#my $sy2 = $y1+(($self->{I_N}+1)*$attrYstep+$attrYpad*2)+$selBoxWidth;
		#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
		#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
@


1.9
log
@Deletion of objects almost complete
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.8 2003/08/21 13:20:48 tuco80 Exp $
d180 1
a180 1
	print ("\n esta es la id de la relacion a borrar: ",$relID);
d184 1
a184 1
			print ("\nse hace push de: ",$_->id);
d257 1
a257 1
		print ("\nDeleting from project: ",$_);
@


1.8
log
@+ usage of "SELECTED" tags, move all selected objects at once and selection box with left mouse button instead of right
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.7 2003/08/13 10:52:28 tuco80 Exp $
d75 8
d176 15
d246 14
@


1.7
log
@Selection of objects complete, except relations
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.6 2003/08/12 09:07:22 tuco80 Exp $
d8 1
d84 27
a110 2
	$self->clear;
	$self->draw($self->{CANVAS});
d116 4
a119 2
	$self->clear;
	$self->draw($self->{CANVAS});
d173 1
d184 4
a187 4
	my $sel = $self->{SELECTED};
	my $positive = 1;
	if ($sel eq $positive){
		print "Si se metio tuanis\n";
d189 4
a192 2
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>1, -fill => $selBoxCol,-tags=>[$tag_name,'item']);
	}
d201 1
a201 1
	if ($sel == $positive){
d209 1
d211 1
@


1.6
log
@Selection of elements in GUI layers, not finished though
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.5 2003/08/08 14:57:37 tuco80 Exp $
d78 14
@


1.5
log
@Added prop.pm and selection property of objects
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.4 2003/07/31 06:37:44 michald Exp $
d17 2
a18 1

d135 1
a135 1

d141 7
a147 1

d151 1
a151 1

d156 10
@


1.4
log
@some fixes for processing of transformation schema
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.3 2003/04/24 20:39:58 michald Exp $
d42 1
d71 6
@


1.3
log
@simple autoplacement of DBConn
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.2 2002/09/26 18:24:15 michald Exp $
d96 1
a96 1
	return $self->{CANVAS}->coords($self->{CANV_ID}[0]);
@


1.2
log
@log. model subsyst. improvement
@
text
@d4 1
a4 1
# $Id: DBConst.pm,v 1.2 2002/08/27 19:09:19 michal Exp $
d124 1
a124 1
		$_->moveEdge($tag_name, $x, $y);
@


1.1
log
@Initial revision
@
text
@d104 5
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

head	1.17;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2003.11.20.16.48.03;	author tuco80;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.06.12.28.24;	author tuco80;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.22.09.48.35;	author tuco80;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.08.14.07.20;	author tuco80;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.02.08.17.54;	author tuco80;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.01.14.22.24;	author tuco80;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.29.11.45.22;	author tuco80;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.21.13.20.48;	author tuco80;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.13.10.52.28;	author tuco80;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.12.09.07.22;	author tuco80;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.08.14.57.37;	author tuco80;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.22.13.55.33;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.20.16.25.53;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.16.07.02.42;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.07.14.28.51;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.20.39.59;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.14;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.14;	author michald;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Position is language dependant
@
text
@#-----------------------------------------------------
# Table Object
#-----------------------------------------------------
# $Id: DBTable.pm,v 1.16 2003/11/06 12:28:24 tuco80 Exp $

package DBTable;
use base Tk::Canvas;
use strict;
use warnings;
#require "font.def";
#use vars qw($FontFamily $EntityFont $AttributeFont);

my $FontFamily = '-*-verdana';
my $EntityFont=$FontFamily.'-bold-r-normal-*-12-*-iso8859-2';
my $AttributeFont=$FontFamily.'-medium-r-normal-*-10-*-iso8859-2';

# **************** color of table header in Schema *****************
my $uBannerClr_FT = 'SeaGreen'; #fact tables
my $uBannerClr_LU = 'blue'; #look up tables
my $attrYstep = 11;
my $tblHeadY = 16;
my $attrXpad = 10;
my $attrYpad = 10;
my $TabElemN=4; # No of table drawing elements (ID numbering of Attr elements will start on this)
my $selBoxWidth = 3;  #width that selection box will have around the object
my $selBoxCol = 'blue'; #fill color of the selection box



#use vars qw($FontFamily, $EntityFont $AttributeFont);
##################################################
## the object constructor                       ##
##################################################

sub new {

    my $proto = shift;
    my $id = shift;
    my $name = shift;
    my $desc = shift;
    my $x = shift;
    my $y = shift;

    my $class = ref($proto) || $proto;
    my $self  = {};

    $self->{ID}    = $id;
    $self->{NAME}    = $name;
    $self->{DESC}    = $desc;
    $self->{ATTR}    = ();	# hash of Attribute Parameters {name,desc,constrain,type,len,order}
    $self->{ATTR_Y}  = ();	# hash of Attributes Y coords
    $self->{ATTR_N}  = 0;	# No of Attributes
    $self->{PK}      = ();	# hash of members of Primary Key
    $self->{INX}     = ();	# hash of indexes (as hash of members of Index)
    $self->{REL}     = [];	# array of relations
    $self->{LAYERS}  = [1];	# table is visible in Layers
    $self->{CANV_ID} = [];	# list of canvas identifiers [head_text,head_rect,body_rect,...]
    $self->{CANVAS} = '';	# canvas
    $self->{COORDS}  = [$x,$y,$x,$y];	# coords of table box presentation
    $self->{TEXT_W}  = 0;	# largest text width
    $self->{SELECTED} = 0;      # To know if the object is selected or not
    bless ($self, $class);
    return $self;

}

##############################################
## methods to access per-object data        ##
##                                          ##
## With args, they set the value.  Without  ##
## any, they only retrieve it/them.         ##
##############################################

sub id {
	my $self = shift;
	if (@@_) { $self->{ID} = shift }
	return $self->{ID};
}

sub name {
	my $self = shift;
	if (@@_) {
		$self->{NAME} = shift;
		if ($self->{CANV_ID}[2]) {
			$self->{CANVAS}->itemconfigure($self->{CANV_ID}[2], -text=>$self->{NAME});
		}
	}
	$self->setTextWidth;
	$self->adjustCoords;

	return $self->{NAME};
}

#Only for compliance of the objects, needed for creations of new relations beteween objects
sub type{
	return 'TAB';
}

sub desc {
	my $self = shift;
	if (@@_) { $self->{DESC} = shift }
	return $self->{DESC};
}

sub selected {
	my $self = shift;
	if (@@_) { $self->{SELECTED} = shift }
	return $self->{SELECTED};
}

sub set_selected{
	my $self = shift;
	$self->{SELECTED} = 1;
	my $tag_name = '_'.$self->{ID};
	my($x1,$y1,$x2,$y2)=$self->coords();
	my $temp = $selBoxWidth;
	$temp--;
	my $sx1 = $x1-$temp;
	my $sy1 = $y1-$temp;
	my $sx2 = $x2+$temp;
	my $sy2 = $y1+(($self->{ATTR_N}+1)*$attrYstep+$attrYpad*2)+$temp;
	$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
	#print $self->{ID};
}

sub set_deselected{
	my $self = shift;
	$self->{SELECTED} = 0;
	$self->{CANVAS}->coords($self->{CANV_ID}[3],-10, -10, -10, -10);
	
}


sub coords {
	my $self = shift;
	my ($x1,$y1,$x2,$y2) = @@_;
	if (@@_) {
		$self->{COORDS} = [$x1,$y1,$x2,$y2];
		#$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
	}
	return ($self->{CANV_ID}[0]) ? $self->{CANVAS}->coords($self->{CANV_ID}[0]) : [0,0,0,0];
}

#CAREFUL!!! This method only exists in DBTable and DBTransf
sub coordsAround {
	my $self = shift;
	my ($x1,$y1,$x2,$y2) = $self->coords;
	$y2 = $y1+(($self->{ATTR_N}+1)*$attrYstep+$attrYpad*2);
	return $y2;
}

sub getAttrY {
	my $self = shift;
	my $name = shift;
	return ($self->{ATTR_Y}{$name});
}

sub addAttr {
	my $self = shift;
	my ($id,$name,$desc,$constrain,$type,$len,$lineOrder) = @@_;
	if ($lineOrder) {$lineOrder--} else { $lineOrder=$self->{ATTR_N} };
	$self->{ATTR}{$id} = {name=>$name, desc=>$desc, constrain=>$constrain, type=>$type, len=>$len, order=>$lineOrder };
	$self->{ATTR_N}++;
}

sub getAttr {
	my $self = shift;
	my ($id,$param) = @@_;
	return $self->{ATTR}{$id}->{$param};
}

sub relation {
	my $self = shift;
	my ($id,$edge) = @@_;	# relation id, edge position [0,1] ... first or last
	if (@@_) { 
		push (@@{$self->{REL}}, $id);
	}
	return $self->{REL}
}

sub getByCoord{
	my $self = shift;
	my ($y) = @@_;
	my ($x1,$y1) = $self->coords();
	my $mid;
	my $pad = 4;
	foreach(keys %{$self->{ATTR}}){
		$mid = $self->{ATTR_Y}{$_};
		if($y>=($y1+$mid-$pad)&& $y<=($y1+$mid+$pad)){
			return $_;
		}
	}
	return undef;	
}
	

sub delRelation{
	my $self = shift;
	my ($relID) = @@_;
	my @@newRels;
	foreach (@@{$self->relation}) {	#move all connected relations
		unless ($_->id eq $relID){
			push(@@newRels,$_);
		}
	}
	@@{$self->{REL}}=@@newRels;
}

sub move {
	my $self = shift;
	my $c = shift;	# canvas
	my ($x,$y) = @@_;
	my $tag_name = "_".$self->{ID};
	$c->move($tag_name, $x, $y);
	if ($self->{SELECTED}){$c->move($self->{CANV_ID}[3], $x, $y);}
	foreach (@@{$self->relation}) {	#move all connected relations
		$_->adjustCoords;
	};
	$self->{COORDS} = $self->{CANVAS}->coords($self->{CANV_ID}[0]);
}

sub draw {
	my $self = shift;
	my $c = shift;	# canvas
	$self->{CANVAS}=$c;
	my ($x1,$y1) = @@{$self->{COORDS}};
	my $move_tag = '_'.$self->{ID};
	my $y2=$y1+$tblHeadY;
	#this is the selection rectangle, will remain hidden until object is selected
	$self->{CANV_ID}[3]=$c->createRectangle(-10,-10,-10,-10,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$move_tag]);
	if ($self->{NAME}=~/^lu_/) {
	  $self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $uBannerClr_FT, -tags=>[$move_tag,'item']);
	}
	else {
	  $self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $uBannerClr_LU, -tags=>[$move_tag,'item']);
	}
	
	
	$self->{CANV_ID}[1]=$c->createRectangle(0,0,0,0, -width=>1, -fill => 'white', -tags=>[$move_tag]);
	$self->{CANV_ID}[2]=$c->createText(0,0, qw/-anchor c -fill white/,-text=>$self->{NAME},-font=>$EntityFont, -tags=>[$move_tag,'item']);
        
	foreach (keys %{$self->{ATTR}}) {$self->drawAttr($_)};

	$self->setTextWidth;
	$self->adjustCoords;
	if ($self->{SELECTED}){$self->set_selected();}

}

sub adjustCoords {	# adjust components coordinates
	my $self = shift;
	my ($x1,$y1) = @@{$self->{COORDS}};
	my $x2=$x1+$self->{TEXT_W}+$attrXpad*2;
	my $y2=$y1+$tblHeadY;
	$self->{CANVAS}->coords($self->{CANV_ID}[0], $x1, $y1, $x2, $y2);
	$self->{CANVAS}->coords($self->{CANV_ID}[1], $x1, $y2, $x2, $y1+($self->{ATTR_N}+1)*$attrYstep+$attrYpad*2);
	$self->{CANVAS}->coords($self->{CANV_ID}[2], ($x1+$x2)/2, ($y1+$y2)/2);
	$self->coords($x1, $y1, $x2, $y2);
	foreach (@@{$self->relation}) {	#adjust all connected relations
		$_->adjustCoords;
	};
}

sub setTextWidth {
	my $self = shift;
	my @@w=$self->{CANVAS}->bbox($self->{CANV_ID}[2]);
	$self->{TEXT_W}=$w[2]-$w[0];

	foreach (keys %{$self->{ATTR}}) {
		my @@w = $self->{CANVAS}->bbox($self->{CANV_ID}[$self->{ATTR}{$_}{order}+$TabElemN]);
		if ($self->{TEXT_W} < $w[2]-$w[0]) { $self->{TEXT_W} = $w[2]-$w[0] };
	}
}

sub drawAttr {
	my $self = shift;
	my $id = shift;	# attr name
	my $move_tag = "_$self->{ID}";
	my $sel_tag = ".$id";
#	return if (!($self->{ATTR}{$id}));
	my ($x1,$y1) = @@{$self->{COORDS}};
	$self->{ATTR_Y}{$id} = $tblHeadY + $attrYpad + $self->{ATTR}{$id}{order} * $attrYstep; 
	$y1 += $self->{ATTR_Y}{$id};
	$self->{CANV_ID}[$self->{ATTR}{$id}{order}+$TabElemN]=$self->{CANVAS}->createText($x1+$attrXpad, $y1, -anchor=>'w', -fill=>'black',-text=>$self->{ATTR}{$id}{name}, -font=>$AttributeFont, -tags=>[$move_tag,$sel_tag,'attr']);
}

sub delFromGUI{
	my $self = shift;
	my ($layerID) = @@_;
	$self->clear; 
	foreach (@@{$self->relation}) {	#delete all connected relations
		$_->delFromGUI($layerID,$self->{ID});
	}; 
	return @@{$self->relation}; 
}

#-----------------------------

sub clear {
	my $self = shift;
	foreach (@@{$self->{CANV_ID}}) {
		$self->{CANVAS}->delete($_);
	}
	$self->{CANV_ID}=();
}

#-----------------------------

1;

@


1.16
log
@+Color changing for Groups, +Property edition for groups/roles
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.15 2003/09/22 09:48:35 tuco80 Exp $
d139 1
a139 1
		$self->{CANVAS}->coords($self->{CANV_ID}[0],$x1,$y1,$x2,$y2);
d219 1
@


1.15
log
@fixed select in draw().  DBtransf & DBConn + arity butnot finished
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.14 2003/09/08 14:07:20 tuco80 Exp $
d9 1
d20 1
a20 1
my $attrYstep = 10;
d123 1
a123 1
	print $self->{ID};
@


1.14
log
@Added creation of relations between objects (Hrel,Sign,Rel & Conn)
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.13 2003/09/02 08:17:54 tuco80 Exp $
d122 1
d244 1
@


1.13
log
@Fixed bug in deletion of HRelations, got rid of some unnecesary prints and comments
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.12 2003/09/01 14:22:24 tuco80 Exp $
d93 5
d142 8
d153 1
a153 1
	return $self->{ATTR_Y}{$name};
d179 16
a213 1
	#$c->move('SELECTED',$x,$y);
d278 1
a278 1
	$self->{ATTR_Y}{$id} = $tblHeadY + $attrYpad + $self->{ATTR}{$id}{order} * $attrYstep;
d280 1
a280 1
	$self->{CANV_ID}[$self->{ATTR}{$id}{order}+$TabElemN]=$self->{CANVAS}->createText($x1+$attrXpad, $y1, -anchor=>'w', -fill=>'black',-text=>$self->{ATTR}{$id}{name}, -font=>$AttributeFont, -tags=>[$move_tag,$sel_tag,'item']);
@


1.12
log
@Deletion of Objects Complete
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.11 2003/08/29 11:45:22 tuco80 Exp $
a107 2
	#$self->clear;
	#$self->draw($self->{CANVAS});
a116 1
	#$self->{CANVAS}->addtag('SELECTED', $tag_name);
d122 1
a122 3
	#$self->clear;
	#$self->draw($self->{CANVAS});
	$self->{CANVAS}->coords($self->{CANV_ID}[3],0, 0, 0, 0);
a169 1
	#print ("\n esta es la id de la relacion a borrar: ",$relID);
a172 1
			#print ("\nse hace push de: ",$_->id);
a173 1
		#print ("este es un ID en el arreglo: ", $_->id);
d198 2
a199 8
	#my $sel = $self->{SELECTED};
	#if ($sel){
		#print "Si se metio tuanis en Table\n";
		#print ($self->{SELECTED},"\n");
		
		#this is the selection rectangle, will remain hidden until object is selected
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>$selBoxWidth, -outline => $selBoxCol,-tags=>['SELECTED'.$move_tag]);
	#}
a222 14
=pod	my $sel = $self->{SELECTED};
	if ($sel){
		my $sx1 = $x1-$selBoxWidth;
		my $sy1 = $y1-$selBoxWidth;
		my $sx2 = $x2+$selBoxWidth;
		#my $sy2 = $y2+$selBoxWidth;
		my $sy2 = $y1+(($self->{ATTR_N}+1)*$attrYstep+$attrYpad*2)+$selBoxWidth;
		#my ($sx1, $sy1, $sx2, $sy2) = {($x1-$selBoxWidth), ($y1-$selBoxWidth), ($x2+$selBoxWidth), ($y2+$selBoxWidth)};
		#print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
		$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
		#$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1);
		
	}
=cut
a255 3
	#first we are only going to delete from gui-layer
	#after that it's just determining wether hash is empty or not
	#and if it is, it must be deleted from project completely
a260 1
		#print ("\nDeleting from project: ",$_);
a275 95

=pod
sub Path2ProjHash {	# transfer Layer Path to Project Hash Node and ID

	my ($SLSel)=@@_;
	my $Project = $::Project;
	my ($p,$id,$ObjType);
	if ($SLSel=~/_LOBJ\/_ATTR\//) {
            $ObjType= 'ATTR';
	}
	else {
  	  $ObjType=$::TreeList->info('data', $SLSel);        
	}  
	
	if ($ObjType eq 'CONST') {
		($id=$SLSel)=~s|^_CONST/||;
		$p=$Project->{const};

	} elsif ($ObjType eq 'CONN') {
		($id=$SLSel)=~s|^_CONN/||;
		$p=$Project->{connection};

	} elsif ($ObjType eq 'SIGNAL') {
		($id=$SLSel)=~s|^_SIGNAL/||;
		$p=$Project->{signal};

	} elsif ($ObjType eq 'REL') {
		($id=$SLSel)=~s|^_REL/||;
		$p=$Project->{relation};

      	} elsif ($ObjType eq 'HREL') {
		($id=$SLSel)=~s|^_HREL/||;
		$p=$Project->{hrelation};		

	} elsif ($ObjType eq 'ATTR') {		
		# attributes can be in group or not
		($id=$SLSel)=~s|^_LOBJ/_ATTR/||;		
		$p=$Project->{attr};

	} elsif ($ObjType eq 'FACT') {
		($id=$SLSel)=~s|^_LOBJ/_FACT/||;
		$p=$Project->{fact};

	} elsif ($ObjType eq 'TRIG') {
		($id=$SLSel)=~s|^_TRIG/||;
		$p=$Project->{triger};

	} elsif ($ObjType eq 'TRAN') {
		my ($host);
		($host,$id)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)$|);
		$p=$Project->{host}->{$host}->{transformation};

	} elsif ($ObjType eq 'TRAN_I') {
		my ($host,$tr,$col)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{transformation}->{$tr}->{input};
		$id=$col;

	} elsif ($ObjType eq 'TRAN_O') {
		my ($host,$tr,$col)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{transformation}->{$tr}->{output};
		$id=$col;

	} elsif ($ObjType eq 'HOST') {
		$p=$Project->{host};
		$id=$SLSel;
		
	} elsif ($ObjType eq 'SRC') {
		my ($host,$src)=($SLSel=~m|^([\w.]+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{source};
		$id=$src;
		
	} elsif ($ObjType eq 'TAB') {
		my ($host,$src,$tbl)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{source}->{$src}->{table};
		$id=$tbl;

	} elsif ($ObjType eq 'VIEW') {
		my ($host,$src,$v)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{source}->{$src}->{view};
		$id=$v;

	} elsif ($ObjType eq 'COL') {
		my ($host,$src,$tbl,$col)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{source}->{$src}->{table}->{$tbl}->{column};
		$id=$col;

	} elsif ($ObjType eq 'VCOL') {
		my ($host,$src,$v,$col)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);
		$p=$Project->{host}->{$host}->{source}->{$src}->{view}->{$v}->{column};
		$id=$col;
	}
	return ($p,$id);

}
=cut
@


1.11
log
@Deletion of objects almost complete
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.10 2003/08/21 13:20:48 tuco80 Exp $
d175 1
a175 1
	print ("\n esta es la id de la relacion a borrar: ",$relID);
d179 1
a179 1
			print ("\nse hace push de: ",$_->id);
d292 1
a292 1
		print ("\nDeleting from project: ",$_);
@


1.10
log
@+ usage of "SELECTED" tags, move all selected objects at once and selection box with left mouse button instead of right
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.9 2003/08/13 10:52:28 tuco80 Exp $
a98 1

d171 15
d283 14
d308 95
@


1.9
log
@Selection of objects complete, except relations
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.8 2003/08/12 09:07:22 tuco80 Exp $
d109 12
a120 2
	$self->clear;
	$self->draw($self->{CANVAS});
d126 4
a129 2
	$self->clear;
	$self->draw($self->{CANVAS});
d178 2
d192 2
a193 2
	my $sel = $self->{SELECTED};
	if ($sel){
d196 4
a199 2
		$self->{CANV_ID}[3]=$c->createRectangle(0,0,0,0,-width=>1, -fill => $selBoxCol,-tags=>[$move_tag,'item']);
	}
d223 1
a223 1
	my $sel = $self->{SELECTED};
d236 1
@


1.8
log
@Selection of elements in GUI layers, not finished though
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.7 2003/08/08 14:57:37 tuco80 Exp $
d23 1
a23 1
my $TabElemN=3; # No of table drawing elements (ID numbering of Attr elements will start on this)
d106 14
d179 2
a180 3
	my $positive = 1;
	if ($sel eq $positive){
		print "Si se metio tuanis en Table\n";
d208 1
a208 2
	my $positive = 1;
	if ($sel == $positive){
d215 3
a217 3
		print ("las coords son: (",$sx1,",", $sy1,") (" ,$sx2,",", $sy2,")\n");
		#$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1, $sx2, $sy2);
		$self->{CANVAS}->coords($self->{CANV_ID}[3], $sx1, $sy1);
@


1.7
log
@Added prop.pm and selection property of objects
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.6 2003/05/22 13:55:33 spanhel Exp $
d24 2
d164 7
d194 14
@


1.6
log
@attributes added into groups (+ color of groups)
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.5 2003/05/20 16:25:53 spanhel Exp $
d58 1
d96 8
@


1.5
log
@tree history, colors of attributs
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.4 2003/05/16 07:02:42 spanhel Exp $
d9 2
a10 2
require "font.def";
use vars qw($FontFamily $EntityFont $AttributeFont);
d12 3
a14 3
#my $FontFamily = '-*-verdana';
#my $EntityFont=$FontFamily.'-bold-r-normal-*-12-*-iso8859-2';
#my $AttributeFont=$FontFamily.'-medium-r-normal-*-10-*-iso8859-2';
@


1.4
log
@adding and removing object from Layers
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.3 2003/05/07 14:28:51 spanhel Exp $
d9 2
a10 2
use Data::Dumper;
#require "const.def";
d12 3
a14 3
my $FontFamily = '-*-verdana';
my $EntityFont=$FontFamily.'-bold-r-normal-*-12-*-iso8859-2';
my $AttributeFont=$FontFamily.'-medium-r-normal-*-10-*-iso8859-2';
a152 1
	print Dumper($self);
@


1.3
log
@schema model
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.2 2003/04/24 20:39:59 michald Exp $
a5 1
#require "const.def";
d9 2
d25 3
d153 1
d222 1
@


1.2
log
@simple autoplacement of DBConn
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.1.1.1 2002/09/24 01:34:14 michald Exp $
d6 1
d11 7
a17 3
my $EntityFont='-*-verdana-bold-r-normal-*-11-*-iso8859-2';
my $AttributeFont='-*-verdana-medium-r-normal-*-10-*-iso8859-2';
my $uBannerClr = 'SeaGreen';
d149 8
a156 1
	$self->{CANV_ID}[0]=$c->createRectangle(0,0,0,0, -width=>1, -fill => $uBannerClr, -tags=>[$move_tag,'item']);
d159 1
a159 1

@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id: DBTable.pm,v 1.2 2002/08/27 19:09:19 michal Exp $
d133 1
a133 1
		$_->moveEdge($self->{ID}, $x, $y);
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

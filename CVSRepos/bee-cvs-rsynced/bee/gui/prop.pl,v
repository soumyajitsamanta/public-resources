head	1.19;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.19
date	2003.08.05.15.21.56;	author tuco80;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.04.11.22.29;	author tuco80;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.01.09.18.59;	author spanhel;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.31.07.31.10;	author spanhel;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.30.11.10.59;	author spanhel;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.26.14.11.46;	author spanhel;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.30.16.22.17;	author spanhel;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.26.14.03.36;	author spanhel;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.22.13.55.33;	author spanhel;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.20.16.25.53;	author spanhel;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.16.07.02.43;	author spanhel;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.07.14.28.51;	author spanhel;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.06.20.56.17;	author michald;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.05.15.36.46;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.01.13.42.44;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.30.09.57.45;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.28.07.36.32;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.24.20.01.40;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.20;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.20;	author michald;	state Exp;
branches;
next	;


desc
@@


1.19
log
@changes in Edit.pm (prop.pl now prop.pm)
@
text
@#-----------------------------------------------------
# Properties Tab
#-----------------------------------------------------
# $Id: prop.pl,v 1.17 2003/08/01 09:18:59 spanhel Exp $

use strict;
use ShopCard;
use DSI;
#require "test/dbi_mysql.pl";
require "const.def";
use vars qw($Project $TreeList $Layer $tSchemaC $TabsFont $top $lang);
my $size = 300;
use Data::Dumper;

my ($DBTypeSel);
#my $admTabs;
my $AdmTab;
my $defLayer = 0;

#-----------------------------------------------------

sub CreatePropPage {

	$AdmTab = $_[0];
    
}
    
#-----------------------------------------------------

sub ClearPropPage {

	foreach ($AdmTab->children) { $_->destroy }	# Clear Admin Tab contents
    
}
    
#-----------------------------------------------------

my %PropData;	# hash of temporary properties data

sub UpdateProp {
	my $sel=$TreeList->info('anchor');
	my $pe=$PropData{_P}->{$PropData{_ID}};
	# save old properties
	push (@@Changes, {p=>$PropData{_P}, id=>$PropData{_ID}, cont=>$pe} );
	# set properties in Project Hash
	$pe->{name}=$PropData{name};
	($pe->{description}=$PropData{description}->get('0.0','end'))=~s/[\n\s]+$//;
	# set name in Tree List
	$TreeList->entryconfigure($sel, -text => ($PropData{name}) ? $PropData{name} : "\[$PropData{_ID}\]");
	# set properties in Visible Layer
	if ($Layer->{$VisibleLayer}->{$sel}) {
		$Layer->{$VisibleLayer}->{$sel}->name($pe->{name});
		$Layer->{$VisibleLayer}->{$sel}->desc($pe->{description});
	}
	# updata Canvas Balloons
	&UpdateCanvasBalloons(\$Layer,$tSchemaC);
	Debug::UpToDate(0);

#	&$updProc if ($updProc);
}

#-----------------------------------------------------

  
sub UndoProp {
	my ($p) = pop(@@Changes);
}

my $LastSLSel='';	# last Tree Selection

sub ShowProperties {	#create Admin Form

	our (@@pl)  = (-pady => 5,-padx => 10);	#pack param
	our (@@plt) = (-expand => "yes",
		      -fill => "both",
		      -padx => 5, -pady => 5,
		      -side => "top");	#pack param for tabs
	our ($frameN, $frameD, $frameID);
		
	our ($SLSel)=$TreeList->info('anchor');
	
	return if ((!$SLSel)||($LastSLSel eq $SLSel));
	$LastSLSel=$SLSel;
	&ClearPropPage;

	sub AdmTabHeader {	#shows name/description
        	print "esto lo hace prop.pl\n";
		my($AdmTab) = @@_;	# project hash, id, proc for additional updates after button press
		my $p=$PropData{_P};
		my $pe=$p->{$PropData{_ID}};
		if ($SLSel=~/^_LOBJ\/_ATTR/ || $SLSel=~/^_LOBJ\/_FACT/)  {
		   # only attr has following hash:
		   #  ->' 'attr'  'name' => {'$toolbaren' => 'Year','cz' => 'Rok' },                                
		   $PropData{name}=$pe->{name}->{$lang};
		}
		else {
		   $PropData{name}=$pe->{name};
		}  
		
		$frameN = $AdmTab->LabFrame(-label => "Name", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		$frameN->Entry(qw/-relief sunken -width 20/, -textvariable=>\$PropData{name}, -background=>'white')->pack;
		$frameD = $AdmTab->LabFrame(-label => "Description", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		$PropData{description} = $frameD->Scrolled(qw/Text -setgrid true -height 5 -width 40 -wrap word -scrollbars e/, -background=>'white')->pack;
		if ($SLSel=~/^_LOBJ\/_ATTR/ || $SLSel=~/^_LOBJ\/_FACT/)  {
  		    $PropData{description}->insert('0.0', $pe->{description}->{$lang});
		}
		else {
  		    $PropData{description}->insert('0.0', $pe->{description});
		}    

		my $frameID = $AdmTab->Label( -text => $SLSel, -relief => 'groove', -background=>'LightGoldenrod')->pack(@@pl);

		$frameID->form(-top => 5, -left => 5);
		$frameN->form(-top => $frameID, -left => 5);
		$frameD->form(-top => $frameN, -left => 5);

	}

	my $ObjType=$TreeList->info('data', $SLSel);
	
=pod  
	 all this part, they should all be the same
	  therefore the if dissappears completely
	if ($ObjType eq 'CONST') {  #MODIFIED BY DANIEL  08.01.2003!!
		($PropData{_ID}=$SLSel)=~s|^_CONST/||;
		$PropData{_P}=$Project->{const};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{const});
		#my $ax = Edit->new($ObjType, $AdmTab, $SLSel, \$TreeList ,\$Project);
		$ax->draw;
		#&AdmTabHeader($AdmTab,\&upd);
		#print "all good1\n";
		#our ($d)=$Project->{const}->{$PropData{_ID}}->{data};
		#my $frameV = $AdmTab->LabFrame(-label => "Value", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		#$frameV->Entry(qw/-relief sunken -width 40/, -textvariable => \$d, -background=>'white')->pack;
		#print "all good2\n";
		#$frameV->form(-top => $frameD, -left => 5);
		#print "all good 3\n";
		#sub upd {
		#	$Project->{const}->{$PropData{_ID}}->{data}=$d;
		#	$Layer->{$VisibleLayer}->{$SLSel}->value($d);
		#}

	} elsif ($ObjType eq 'CONN') {  #MODIFIED BY DANIEL 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_CONN/||;
		$PropData{_P}=$Project->{connection};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{connection});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'SIGNAL') { #MODIFIED BY DANIEL 08.01.2003!!
		#print 'A';
		($PropData{_ID}=$SLSel)=~s|^_SIGNAL/||;
		$PropData{_P}=$Project->{signal};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{signal});
		$ax->draw;
		#&AdmTabHeader($AdmTab);
		#print 'B';		

	} elsif ($ObjType eq 'REL') {
		($PropData{_ID}=$SLSel)=~s|^_REL/||;
		$PropData{_P}=$Project->{relation};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{relation});
		$ax->draw; 
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'TRIG') { #MODIFIED BY DANIEL 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_TRIG/||;
		$PropData{_P}=$Project->{trigger};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{trigger});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'ATTR') { #MODIFIED BY DANIEL 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_LOBJ/_ATTR/.*/||;
		$PropData{_P}=$Project->{attr};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{attr});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'FACT') { #MODIFIED BY DANIEL	 08.01.2003
		($PropData{_ID}=$SLSel)=~s|^_LOBJ/_FACT/||;
		$PropData{_P}=$Project->{fact};
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{fact});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'TRAN') { #MODIFIED BY DANIEL 08.01.2003
		my ($host);
		($host,$PropData{_ID})=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{transformation};

		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Input", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Output", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "Triger", -underline => 0);
		my $Tab5=$admTabs->add("tbl5", -label => "Status", -underline => 0);
		
		#-*-*-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.01.2003

		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{transformation});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*-*/
		
		#&AdmTabHeader($Tab1);

	} elsif ($ObjType eq 'TRAN_I') { #MODIFIED BY DANIEL 08.01.2003
		my ($host,$tr,$col)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{transformation}->{$tr}->{input};
		$PropData{_ID}=$col;
		my $r = $PropData{_ID};
		#???? is this ok?
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{transformation}->{$tr}->{input});
		$ax->draw;
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'TRAN_O') { #MODIFIED BY DANIEL 08.01.2003
		my ($host,$tr,$col)=($SLSel=~m|^([\w.]+)/_TRAN/(\w+)/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{transformation}->{$tr}->{output};
		$PropData{_ID}=$col;
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $AdmTab, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{transformation}->{$tr}->{output});
		print "before draw\n";
		$ax->draw;
		print "after draw\n";
		#&AdmTabHeader($AdmTab);

	} elsif ($ObjType eq 'HOST') { #MODIFIED BY DANIEL 08.01.2003
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Data Sources", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Transformations", -underline => 0);

		$PropData{_P}=$Project->{host};
		$PropData{_ID}=$SLSel;
		
		#-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.01.2003
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*/
		#&AdmTabHeader($Tab1);
		#&SelSources($Tab2,'Data Sources',\&DSI::GetSourceList,\&DSI::AddSelectedSources, $SLSel, $PropData{_P}->{$PropData{_ID}}->{source});
		
	} elsif ($ObjType eq 'SRC') { #MODIFIED BY DANIEL 08.01.2003
		my ($host,$src)=($SLSel=~m|^([\w.]+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Tables", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "DBMS Views", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "ETL Views", -underline => 0);

		$PropData{_P}=$Project->{host}->{$host}->{source};
		$PropData{_ID}=$src;
		
		#-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.01.2003 
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{source});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*/
		#&AdmTabHeader($Tab1);

		my $vTabs = $Tab2->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0, -raisecmd => sub{
												     });
		my $all = ShopCard->new($vT1,$top,'Tables',\&DSI::GetTableList,\&DSI::UpdSelectedTables,$SLSel, $PropData{_P}->{$PropData{_ID}}->{table},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Tables',\&RefObj);
		$all->AddButton('R','SELECT','Use selection of Tables',\&UseObj);
                my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			# tr - id of layer
			$i++;
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;			  
			$vT = $vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($PropData{_P}->{$PropData{_ID}}->{table}, $tr);
										$all->ShowAvObj($PropData{_P}->{$PropData{_ID}}->{table});										   						
										});				                     
			$all = ShopCard->new($vT,$top,'Tables',undef,\&DSI::UpdSelectedTables,$SLSel, $PropData{_P}->{$PropData{_ID}}->{table},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
			$all->show();
	        	$all->AddButton('R','SELECT','Use selection of Tables',\&UseObj);		
			
		}

		#my $DBTl = $AdmTab->Label(-text => "Source Type:", -anchor => 'e', -justify => 'right');
		#my @@dbn= (keys %{$DBTypes->{database}});
		#my $DBT = $AdmTab->Optionmenu(-options => \@@dbn, -variable => \$DBTypeSel, -command=>sub{
		
#													});
                my $conn='!Connected';
		my $DBConB; 
 		my $stat;
		$DBConB = $AdmTab->Button(-text => "$conn", 
					  -padx => 10, 
					  -image    => $AdmTab->Pixmap(-file => 'img/stop.xpm'),
					  -command => sub {		 						                                																										
							      if ($stat) {
 								$stat = &DSI::DisConnect2DB($src);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/stop.xpm'));								
							      } 
							      else {
								$stat = &DSI::Connect2DB($host,$src,\$Project);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/run.xpm'));  
							      }
								  
							   })->pack();		
		
	} elsif ($ObjType eq 'TAB') {#Modified by Daniel 08.04.2003
		my ($host,$src,$tbl)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Columns", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Indexes", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "Data", -underline => 0);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{table};
		$PropData{_ID}=$tbl;
		#-*-*-*-*-*-*-*-*->
		#ADDED BY DANIEL 08.04.2003 
		my $r = $PropData{_ID};
		my $ax = Edit->new($ObjType, $Tab1, $SLSel, $r, \$TreeList ,\$Project->{host}->{$host}->{source}->{$src}->{table});
		$ax->draw;
		#<-*-*-*-*-*-*-*-*-*/
		#&AdmTabHeader($Tab1);

		my $vTabs = $Tab2->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);
		my $all = ShopCard->new($vT1,$top,'Columns',\&DSI::GetColumnList,\&DSI::UpdSelectedColumns,$SLSel, $PropData{_P}->{$PropData{_ID}}->{column},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Columns',\&RefObj);
        	$all->AddButton('R','SELECT','Use selection of Columns',\&UseObj);		
         
		my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			$i++;			
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;
			$vT=$vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($PropData{_P}->{$PropData{_ID}}->{column}, $tr);
										$all->ShowAvObj($PropData{_P}->{$PropData{_ID}}->{column});										   						
										});
			$all = ShopCard->new($vT,$top,'Columns',undef,\&DSI::UpdSelectedColumns,$SLSel, $PropData{_P}->{$PropData{_ID}}->{column},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
			$all->show();
			$all->AddButton('R','SELECT','Use selection of Columns',\&UseObj);
		}
		my $conn='!Connected';
		my $DBConB; 
 		my $stat;
		$DBConB = $AdmTab->Button(-text => "$conn", 
					  -padx => 10, 
					  -image    => $AdmTab->Pixmap(-file => 'img/stop.xpm'),
					  -command => sub {		 						                                																										
							      if ($stat) {
 								$stat = &DSI::DisConnect2DB($src);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/stop.xpm'));								
							      } 
							      else {
								$stat = &DSI::Connect2DB($host,$src,\$Project);
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/run.xpm'));  
							      }
								  
							   })->pack();		
		

	} elsif ($ObjType eq 'VIEW') {
		my ($host,$src,$v)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Columns", -underline => 0);
		my $Tab3=$admTabs->add("tbl3", -label => "Input", -underline => 0);
		my $Tab4=$admTabs->add("tbl4", -label => "Data", -underline => 0);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{view};
		$PropData{_ID}=$v;
		&AdmTabHeader($Tab1);

	} elsif ($ObjType eq 'COL') {
		my ($host,$src,$tbl,$col)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);
		my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		my $Tab2=$admTabs->add("tbl2", -label => "Data", -underline => 0);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{table}->{$tbl}->{column};
		$PropData{_ID}=$col;
		&AdmTabHeader($Tab1);
		
	} elsif ($ObjType eq 'VCOL') {
		my ($host,$src,$v,$col)=($SLSel=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);
		$PropData{_P}=$Project->{host}->{$host}->{source}->{$src}->{view}->{$v}->{column};
		$PropData{_ID}=$col;
		&AdmTabHeader($AdmTab);
		
	} elsif ($ObjType eq 'LAYER') {
                my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $Tab1=$admTabs->add("tbl1", -label => "Admin", -underline => 0);
		#my $Tab2=$admTabs->add("tbl2", -label => "New Layer", -underline => 0);		
		$PropData{_P}=$Project->{'gui-layer'};
		($PropData{_ID}=$SLSel)=~s|^_LAYER/||;		
		&AdmTabHeader($Tab1);
#		$Tab1->Button(
#	      	        	    -text => 'Save',
#	        		    -font => $ButtonFont,
	#		            -command => sub {
	 #                                           }
		#	     )->pack(-side=>'left', -padx => 5);
#		$Tab1->Button(
	#      	        	    -text => 'Delete',
	 #       		    -font => $ButtonFont,
		#	            -command => sub {
			#	                    }
			 #    )->pack(-side=>'left');

#		&NewLayer($Tab2);		
	} elsif ($ObjType eq 'DIR/_LOBJ') {
	     my $admTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);	
             my $tl = $admTabs->LabFrame(-label => "Entity of Logical Model", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5, -pady => 5);
	     my $sB=$tl->Button(
        	     -text => "Load attributes",
        	     -command => sub{print 'aaa'},
             )->grid(qw/-row 0 -column 0 -sticky nw/);
	     #$sB->{baloon}->attach($sB, -balloonmsg => "Select");
	     $sB=$tl->Button(
        	     -text => "Load ",
        	     -command => sub{print 'aaa'},
             )->grid(qw/-row 0 -column 1 -sticky nw/);
	     $sB=$tl->Button(
        	     -text => "Load Facts",
        	     -command => sub{print 'aaa'},
             )->grid(qw/-row 1 -column 0 -sticky nw/);
	} elsif ($ObjType eq 'DIR/_ATTR') {
		my $vTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);
         	my $all = ShopCard->new($vT1,$top,'Attributes',\&GetAttr,\&UpdAttr,$SLSel, $Project->{'attr'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Attributes',\&RefObj);
		$all->AddButton('R','SELECT','Use selection of Attributes',\&UseObj);
		my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			# tr - id of layer
			$i++;
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;			  
			$vT = $vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($Project->{'attr'}, $tr);
										$all->ShowAvObj($Project->{'attr'});										   						
										});				                     
		        $all = ShopCard->new($vT,$top,'Attributes',\&GetAttr,\&UpdAttr,$SLSel, $Project->{'attr'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
		        $all->show();	
		        $all->AddButton('R','SELECT','Use selection of Attributes',\&UseObj);		
			
		}
	} elsif ($ObjType eq 'DIR/_FACT') {
  	        my $vTabs = $AdmTab->NoteBook(-ipadx => 6, -ipady => 6, -font=>$TabsFont)->pack(@@plt);
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);
         	my $all = ShopCard->new($vT1,$top,'Facts',\&GetFact,\&UpdFact,$SLSel, $Project->{'fact'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$defLayer);
		$all->show();
		$all->AddButton('L','REFRESH','Refresh Available Facts',\&RefObj);
		$all->AddButton('R','SELECT','Use selection of Facts',\&UseObj);
		my $i=0;
		foreach my $tr (keys %{ $Project->{'gui-layer'} }) {
			# tr - id of layer
			$i++;
			my ($vT,$all,$s);
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;			  
			$vT = $vTabs->add("vt$i", -label => $s,-raisecmd => sub{
			 							$all->ShowSelObj($Project->{'fact'}, $tr);
										$all->ShowAvObj($Project->{'fact'});										   						
										});				                     
		        $all = ShopCard->new($vT,$top,'Attributes',\&GetFact,\&UpdFact,$SLSel, $Project->{'fact'},\$Project,\$TreeList,\$Layer,\$tSchemaC,$tr);
         		$all->show();	
		        $all->AddButton('R','SELECT','Use selection of Facts',\&UseObj);
		}
	}
	
	This the whole if part, now everything should be the same
	=end  text
	
=cut
	
	my $ax = Edit->new($ObjType, $AdmTab, $SLSel, \$TreeList ,\$Project);
	$ax->draw;
	

	
 }

#-----------------------------------------------------


#-----------------------------------------------------
sub RefObj {
	
    my $SC = shift; # reference to Shopping Card
    my $L=$$SC->{avL};
    my $R=$$SC->{SelL};
    my $l = '^'.join('$|^',$$L->get(0,'end')).'$|^'.join('$|^',$$R->get(0,'end')).'$';	
    my $GetListProc = $$SC->{GetListProc};
    # $$SC->{avObj}  ... identification of active object: localho/delta/ ..
    my $obj = &$GetListProc($$SC->{avObj},$$SC->{prj});
    foreach(@@$obj) {
	    $$L->insert('end', $_) if (!/$l/);	#don't insert if object is already presented in one of lists
    }
    $$L->selectionSet(0,'end');	
}

sub UseObj {
    my $SC = shift; # reference to Shopping Card
    my @@Obj;
    my $updProc = $$SC->{'AddListProc'};	
    my $layer = $$SC->{layer};
    my $prj = $$SC->{prj};
    my $tree = $$SC->{tree};
    my $schema = $$SC->{schema};
    my $SL = $$SC->{SelL};
    foreach ($$SL->get(0,'end')) {
      push(@@Obj,$_);
    };
    &GetHistory;
    &$updProc($$SC->{avObj},$prj,\@@Obj,$$SC->{layerID});				
    &ClearLayer($layer,$$schema);
    $$tree->delete('all');			
    undef $$layer;				    
    &AddProjObjects2List($$prj,$layer);
} 

# get attributes from tables
sub GetAttr {
  my $av = shift;
  my $prj = shift;
  my @@aux;
  foreach (keys %{$$prj->{'host'}}) {
    my $host = $_;
    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
      my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          my $table = $_;	  
	  if ($_=~/^lu_/) { # only lookup table; con
  	    if (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{'id'})) {
	       (my $cut=$_)=~s/^lu_//;	    
	       push (@@aux,$cut);
	    }	        
	  }  
        }
    }
  }
  return (\@@aux);
} 

# 
sub UpdAttr {
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Attributes   
   my $actL = shift; # active layer
   my  @@arrPk;
   my  @@arrFk;
   foreach(@@$rSelObj) {
     my $attr = $_;
     undef $$prj->{'attr'}->{$attr}->{'pk'}; # reset pk;
      
     foreach (keys %{$$prj->{'host'}}) {
      my $host = $_;
      foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
        my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
            my $table = $_;	  
	    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
	       #print Dumper($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}->{$_});	       
	       if (($table=~/^lu_$attr$/) && ($_ eq 'id')) {	             
               #if ($_ eq 'id') {	             	       		     
		   push(@@arrPk,"$host/$source/$table/$_");# if ($table eq "lu_$attr");		     		     		     		     
		   $$prj->{'attr'}->{$attr}->{'name'}->{'cz'}=$attr;
		   $$prj->{'attr'}->{$attr}->{'name'}->{'en'}=$attr;
		   if (!(exists ($$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL})))  {
   		      $$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     
		   }  
	       }
	       
	       my $r = $attr.'_id';	       
	       if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{"lu_$attr"}))) {
	         (my $att=$table)=~s/^lu_//;
		 if (exists($$prj->{'attr'}->{$att})) { 
		   # without the condition above, if  $$prj->{'attr'}->{$att} doesn't exist then
  		   if (exists($$prj->{'attr'}->{$att}->{'gui-presentation'}->{$actL})) {
		     push(@@arrFk,"$host/$source/$table/$_");
	           }
		 }  		 
	       }
	       
	       	  
	    }	    	    
	  }  
        }
      }
     
      my $i=0;
      foreach (@@arrPk) {$$prj->{'attr'}->{$attr}->{'pk'}[$i++]=$_};  	    
      undef @@arrPk;
      $i=0;
      foreach (@@arrFk) {
	$$prj->{'attr'}->{$attr}->{'fk'}[$i++]=$_;
        # relation
	my $m = ($_=~m|^([\w.]+)/(\w+)/(\w+)/(\w+)$|);	
	my $t=$3;	
	if ($t=~/^lu_/) {
	    $t=~s/^lu_//;
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'name'} = "$attr#$t";
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'description'} = "$attr#$t";
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'cardinality'}='N'; 	
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'optional'}='true';
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'content'}= $t;	
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'cardinality'}='1'; 	
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'optional'}='false';
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'content'}= $attr;
	    $$prj->{'hrelation'}->{"$attr#$t"}->{'gui-presentation'}->{$actL}->{'description'}='' if ($actL);
	}
	else { # connection attribut and facts
	  foreach (keys %{$$prj->{'fact'}}) {
	    if (exists ($$prj->{'host'}->{$1}->{'source'}->{$2}->{'table'}->{$3}->{'column'}->{$_})) {
		$$prj->{'hrelation'}->{"$attr#$_"}->{'name'} = "$attr#$_";
		$$prj->{'hrelation'}->{"$attr#$_"}->{'description'} = "$attr#$_";
		$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'cardinality'}='N'; 	
		$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'optional'}='true';
		$$prj->{'hrelation'}->{"$attr#$_"}->{'to'}->{'content'}= $_;	
		$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'cardinality'}='1'; 	
		$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'optional'}='false';
		$$prj->{'hrelation'}->{"$attr#$_"}->{'from'}->{'content'}= $attr;
		$$prj->{'hrelation'}->{"$attr#$_"}->{'gui-presentation'}->{$actL}->{'description'}='' if ($actL);
	    }	
	  }
	}      	
	
      };  	          
      undef @@arrFk;          
   }
} 


# get facts from tables
sub GetFact {
  my $av = shift;
  my $prj = shift;
  my @@aux;
  foreach (keys %{$$prj->{'host'}}) {
    my $host = $_;
    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
      my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          my $table = $_;	  
	  if (!($_=~/^lu_/)) { # not lookup table
  	    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
	       if (!($_=~/_id$/) && !($_=~/^id$/)) {		   
	           push (@@aux,$_);             
	       }
	    }	        
	  }  
        }
    }
  }
  return (\@@aux);
} 

# 
sub UpdFact {
   my $h = shift;
   my $prj = shift; # project hash
   my $rSelObj=shift; # reference to array of Selected Facts   
   my $actL = shift; # active layer
   my  @@arrF;
   foreach(@@$rSelObj) {
     my $fact = $_;
     foreach (keys %{$$prj->{'host'}}) {
      my $host = $_;
      foreach (keys %{$$prj->{'host'}->{$host}->{'source'}}) {
        my $source = $_;
        foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}}) {
          my $table = $_;	  
	    foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {	  
	       #if (($table=~/^lu_/) && ($_ eq 'id')) {	             
	       if (($table=~/^lu_/) && ($_ eq 'id')) {	             
		     #if (!($table=~/^lu_/)) {
                     # !!!!
		     push(@@arrF,"$host/$source/$table/$_") if ($fact eq $_);
		     #}
		     $$prj->{'fact'}->{$fact}->{'name'}->{'cz'}=$fact;
		     $$prj->{'fact'}->{$fact}->{'name'}->{'en'}=$fact;
		     $$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     		      
	       }
	       if (!($table=~/^lu_/) && ($_ eq $fact)) {
	          # found fact and added connection between fact and attribute
		  foreach (keys %{$$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{$table}->{'column'}}) {
                     if ($_=~/_id/) { # probably attributes
                        (my $tt = $_)=~s/_id$//;			
			if (exists ($$prj->{'attr'}->{$tt})) {
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'name'} = "$tt#$fact";
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'description'} = "$tt#$fact";
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'cardinality'}='N'; 	
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'optional'}='true';
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'to'}->{'content'}= $fact;	
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'cardinality'}='1'; 	
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'optional'}='false';
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'from'}->{'content'}= $tt;
			  if ($actL) {
			    if (exists($$prj->{'attr'}->{$tt})) {
			       if (exists($$prj->{'attr'}->{$tt}->{'gui-presentation'}->{$actL})) {  
				  $$prj->{'hrelation'}->{"$tt#$fact"}->{'gui-presentation'}->{$actL}->{'description'}='';   
			       }
			    }   
			  }  
			}
			 
		     }
		  }
	       }
	    }	        
	  }  
        }
      }
      my $i=0;
      foreach (@@arrF) {$$prj->{'fact'}->{$fact}->{'expr'}[$i++]=$_};  	    
      undef @@arrF;            
   }
} 

sub rnd {
  my ($n) = @@_;
  my $aux;
  my $a;
  $aux =rand($n)+1;
  $a = substr($aux,0,rindex($aux,"."));
  return ($a);
}    

1;

__END__


@


1.18
log
@Changes in Edit.pm and prop.pl, to have the admin tab created in Edit.pm and not in prop.pl
@
text
@d120 4
d129 1
d483 10
@


1.17
log
@added Edit.pm package
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.16 2003/07/31 07:31:10 spanhel Exp $
d87 2
a88 1
        	my($AdmTab) = @@_;	# project hash, id, proc for additional updates after button press
d97 1
a97 1
  		   $PropData{name}=$pe->{name};
d120 1
a120 1
	if ($ObjType eq 'CONST') {
d123 15
a137 10
		&AdmTabHeader($AdmTab,\&upd);

		our ($d)=$Project->{const}->{$PropData{_ID}}->{data};
		my $frameV = $AdmTab->LabFrame(-label => "Value", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
		$frameV->Entry(qw/-relief sunken -width 40/, -textvariable => \$d, -background=>'white')->pack;
		$frameV->form(-top => $frameD, -left => 5);
		sub upd {
			$Project->{const}->{$PropData{_ID}}->{data}=$d;
			$Layer->{$VisibleLayer}->{$SLSel}->value($d);
		}
d139 1
a139 1
	} elsif ($ObjType eq 'CONN') {
d142 4
a145 1
		&AdmTabHeader($AdmTab);
d147 2
a148 2
	} elsif ($ObjType eq 'SIGNAL') {
		print 'A';
d151 5
a155 2
		&AdmTabHeader($AdmTab);
		print 'B';		
d165 1
a165 1
	} elsif ($ObjType eq 'TRIG') {
d168 4
a171 1
		&AdmTabHeader($AdmTab);
d173 1
a173 1
	} elsif ($ObjType eq 'ATTR') {
d176 4
a179 1
		&AdmTabHeader($AdmTab);
d181 1
a181 1
	} elsif ($ObjType eq 'FACT') {
d184 4
a187 1
		&AdmTabHeader($AdmTab);
d189 1
a189 1
	} elsif ($ObjType eq 'TRAN') {
d200 10
a209 1
		&AdmTabHeader($Tab1);
d211 1
a211 1
	} elsif ($ObjType eq 'TRAN_I') {
d215 5
a219 1
		&AdmTabHeader($AdmTab);
d221 1
a221 1
	} elsif ($ObjType eq 'TRAN_O') {
d225 6
a230 1
		&AdmTabHeader($AdmTab);
d232 1
a232 1
	} elsif ($ObjType eq 'HOST') {
d240 8
a247 1
		&AdmTabHeader($Tab1);
d250 1
a250 1
	} elsif ($ObjType eq 'SRC') {
d260 8
a267 1
		&AdmTabHeader($Tab1);
d315 1
a315 1
	} elsif ($ObjType eq 'TAB') {
d324 7
a330 1
		&AdmTabHeader($Tab1);
@


1.16
log
@FM,LM
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.15 2003/07/30 11:10:59 spanhel Exp $
d139 1
d143 1
d148 2
a149 1
		my $ax = Edit->new(%PropData,$PropData{_ID},$PropData{_P},'REL', $AdmTab);
d155 1
a155 1
		$PropData{_P}=$Project->{triger};
a491 1
   print Dumper(@@$rSelObj);
a535 1
        print Dumper('1');
@


1.15
log
@LM, FM
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.14 2003/06/26 14:11:46 spanhel Exp $
d73 5
a77 5
	our (@@pl)=(-pady => 5,-padx => 10);	#pack param
	our (@@plt)=(-expand => "yes",
		    -fill => "both",
		    -padx => 5, -pady => 5,
		    -side => "top");	#pack param for tabs
d87 1
a87 1
        	my($AdmTab,$updProc) = @@_;	# project hash, id, proc for additional updates after button press
d96 1
a96 1
  		  $PropData{name}=$pe->{name};
d146 3
a148 1
		&AdmTabHeader($AdmTab);
@


1.14
log
@logical and fys. model
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.13 2003/05/30 16:22:17 spanhel Exp $
d483 1
a483 1
   my $rSelObj=shift; # reference to array of Selected Columns   
d487 1
d491 1
d499 1
a507 1
 
d509 13
a521 2
	       my $r = $attr.'_id';
	       if (($_ eq $r) && (exists ($$prj->{'host'}->{$host}->{'source'}->{$source}->{'table'}->{"lu_$attr"}))) {push(@@arrFk,"$host/$source/$table/$_")};
d526 1
d532 2
a533 1
        $$prj->{'attr'}->{$attr}->{'fk'}[$i++]=$_;
d625 1
a625 1
                        (my $tt = $_)=~s/_id$//;
d635 7
a641 1
			  $$prj->{'hrelation'}->{"$tt#$fact"}->{'gui-presentation'}->{$actL}->{'description'}='' if ($actL);  
@


1.13
log
@logical model
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.12 2003/05/26 14:03:36 spanhel Exp $
d448 1
d452 1
a452 1
    undef $$layer;				
d467 1
a467 1
	  #if ($_=~/^lu_/) { # only lookup table; con
d472 1
a472 1
	  #}  
d497 8
a504 6
	       #if (($table=~/^lu_$attr$/) && ($_ eq 'id')) {	             
                if ($_ eq 'id') {	             	       		     
		     push(@@arrPk,"$host/$source/$table/$_") if ($table eq "lu_$attr");		     		     		     		     
		     $$prj->{'attr'}->{$attr}->{'name'}->{'cz'}=$attr;
		     $$prj->{'attr'}->{$attr}->{'name'}->{'en'}=$attr;
		     $$prj->{'attr'}->{$attr}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     
d508 1
a508 1
	       if (($_=~/^$r$/)) {push(@@arrFk,"$host/$source/$table/$_")};
d521 28
a548 11
	my $t=$3;
	$t=~s/^lu_//;
	$$prj->{'hrelation'}->{"$attr#$t"}->{'name'} = "$attr#$t";
	$$prj->{'hrelation'}->{"$attr#$t"}->{'description'} = "$attr#$t";
	$$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'cardinality'}='N'; 	
	$$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'optional'}='true';
	$$prj->{'hrelation'}->{"$attr#$t"}->{'to'}->{'content'}= $t;	
	$$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'cardinality'}='1'; 	
	$$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'optional'}='false';
	$$prj->{'hrelation'}->{"$attr#$t"}->{'from'}->{'content'}= $attr;
	$$prj->{'hrelation'}->{"$attr#$t"}->{'gui-presentation'}->{$actL}->{'description'}='' if ($actL); 	
d550 1
a550 2
      };  	    
      
d584 1
a584 1
   my $rSelObj=shift; # reference to array of Selected Columns   
d604 21
a624 3
		     $$prj->{'fact'}->{$fact}->{'gui-presentation'}->{$actL}->{'coord'}=rnd($size)." ".rnd($size) if ($actL);     
		     
 
@


1.12
log
@change connection to DB, ShopCard - AddButton Function
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.11 2003/05/22 13:55:33 spanhel Exp $
d12 1
a51 1
		print "updateProp";
d92 1
a92 1
		   #  ->' 'attr'  'name' => {'en' => 'Year','cz' => 'Rok' },                                
d245 10
a254 3
					  -command => sub {		 						                                		
								$stat = &DSI::Connect2DB($host,$src,\$Project) if (!$stat);																
								$DBConB->configure('image'=> $AdmTab->Pixmap(-file => 'img/run.xpm')) if ($stat); 
d272 1
a272 1
		$all->AddButton('L','REFRESH','Refresh Available Columns',\&DSI::GetColumnList,\$Project);
d277 2
a278 2
			$i++;
			my $s;
d280 1
a280 1
			my $vT=$vTabs->add("vt$i", -label => $s,-raisecmd => sub{
d288 18
d336 1
a336 1
		my $Tab2=$admTabs->add("tbl2", -label => "New Layer", -underline => 0);		
d354 59
d414 1
a435 1

d453 153
d611 1
@


1.11
log
@attributes added into groups (+ color of groups)
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.10 2003/05/20 16:25:53 spanhel Exp $
d8 2
d13 1
d64 1
d214 4
a217 2
		my $all = ShopCard->new($vT1,$top,'Tables',\&DSI::GetTableList,\&DSI::UpdSelectedTables,$SLSel, $PropData{_P}->{$PropData{_ID}}->{table},$PropData{_P}->{$PropData{_ID}}->{'src-conn'},$PropData{_P}->{$PropData{_ID}}->{'metadata'});
		$all->show(\$Project,\$TreeList,\$Layer,\&AddProjObjects2List,\&ClearLayer,\&ShowLayer,$tSchemaC, $defLayer);
d228 3
a230 2
                        $all = ShopCard->new($vT,$top,'Tables',undef,\&DSI::UpdSelectedTables,$SLSel, $PropData{_P}->{$PropData{_ID}}->{table},$PropData{_P}->{$PropData{_ID}}->{'src-conn'},$PropData{_P}->{$PropData{_ID}}->{'metadata'});
			$all->show(\$Project,\$TreeList,\$Layer,\&AddProjObjects2List,\&ClearLayer,\&ShowLayer,$tSchemaC,$tr);
d234 16
a249 5
		my $DBTl = $AdmTab->Label(-text => "Source Type:", -anchor => 'e', -justify => 'right');
		my @@dbn= (keys %{$DBTypes->{database}});
		my $DBT = $AdmTab->Optionmenu(-options => \@@dbn, -variable => \$DBTypeSel, -command=>sub{
													});
		my $DBConB = $AdmTab->Button(-text => "Connect", -padx => 10, -command => sub {&ConnectDB($AdmTab)})->pack();		
d263 5
a267 2
		my $all = ShopCard->new($vT1,$top,'Columns',\&DSI::GetColumnList,\&DSI::UpdSelectedColumns,$SLSel, $PropData{_P}->{$PropData{_ID}}->{column},$Project->{host}->{$host}->{source}->{$src}->{'src-conn'},$Project->{host}->{$host}->{source}->{$src}->{'metadata'});
		$all->show(\$Project,\$TreeList,\$Layer,\&AddProjObjects2List,\&ClearLayer,\&ShowLayer,$tSchemaC, $defLayer);
d277 3
a279 2
			$all = ShopCard->new($vT,$top,'Columns',undef,\&DSI::UpdSelectedColumns,$SLSel, $PropData{_P}->{$PropData{_ID}}->{column},$Project->{host}->{$host}->{source}->{$src}->{'src-conn'},$Project->{host}->{$host}->{source}->{$src}->{'metadata'});
			$all->show(\$Project,\$TreeList,\$Layer,\&AddProjObjects2List,\&ClearLayer,\&ShowLayer,$tSchemaC,$tr);
d333 37
@


1.10
log
@tree history, colors of attributs
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.9 2003/05/16 07:02:43 spanhel Exp $
d8 2
a9 2

use vars qw($Project $TreeList $Layer $tSchemaC $TabsFont $top);
d48 1
a64 165
#-----------------------------------------------------

sub MoveObj {
	my $fromL=shift;
	my $toL=shift;
	foreach (reverse($fromL->curselection())) {
		$toL->insert('end',$fromL->get($_));
		$toL->selectionSet('end');
		$fromL->delete($_);
	}
}

sub RefObj {
	my $list=shift;
	my $list2=shift;
	my $GetListProc=shift;
	my $GetListProcPar=shift;
	my $ObjList;
	my $l = '^'.join('$|^',$list->get(0,'end')).'$|^'.join('$|^',$list2->get(0,'end')).'$';
#	foreach(source::sources()) {	
  	if ($GetListProc) {
  	  $ObjList=&$GetListProc($GetListProcPar,\$Project);	  		  
	}
	#else {
	# $ObjList=\keys( %{$Project});
	#}
	foreach(@@$ObjList) {
#		$list->insert('end', $_) if ((!/$l/)&&(url::host($_) eq $PropData{name}));
		$list->insert('end', $_) if (!/$l/);	#don't insert if object is already presented in one of lists
	}
	$list->selectionSet(0,'end');	
}

sub SelSources {	#shows shoping card form for selection and ordering of specific objects
	my $SelTab = shift;	# Parent tab to draw in
	my $ObjName = shift;	# Name of selected object - for descriptoion purposes only
	my $GetListProc = shift;	# reference to procedure returning list of available objects
								# if undef, then available obj will be collected from $avObj
	my $UpdListProc = shift;	# reference to procedure adding list of selected objects to $Project hash
	my $avObj = shift;	# parameter for $GetListProc 
						# or hash of available objects in case $GetListProc is undefined
	my $selObj = shift;	# hash of selected objects
#	my $rObjList;
	my $entryW=30; # list width
	my $entryH=12; # list height
	
	my ($avL,$selL,$uB,$nB,$upB,$dwB);
	my ($AvFiltS,$SelFiltS);

	my $st = $SelTab->Frame()->pack(-anchor=>"nw");
	my $AvailF = $st->LabFrame(-label => "Available $ObjName", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
        # available sources; tab Tables
	$avL = $AvailF->Scrolled(qw/Listbox -selectmode extended -setgrid 1 -scrollbars oe/, -height=>$entryH, -width=>$entryW );
	$avL->grid(qw/-row 0 -column 0 -sticky w -padx 1/);
	if ($GetListProc) {
		$uB=$AvailF->Button(
        		-image    => $Img{REFRESH},
        		-command => sub{&RefObj($avL,$selL,$GetListProc,$avObj)},
        	)->grid(qw/-row 0 -column 1 -sticky n -padx 1/);
		$baloon->attach($uB, -balloonmsg => "Refresh Available $ObjName on \"$PropData{name}\"");
	}

           
	&FiltObj($AvailF->Frame()->grid(qw/-row 1 -column 0 -sticky w/),$avL,$AvFiltS,$entryW);

	my $tl = $st->Frame->pack(-anchor=>"center",-side=>'left',-padx => 5);
	my $sB=$tl->Button(
        	-image    => $Img{R_ARR},
        	-command => sub{&MoveObj($avL,$selL)},
        )->pack(qw/-side bottom -anchor n /);
	$baloon->attach($sB, -balloonmsg => "Select $ObjName");
	my $dB=$tl->Button(
        	-image    => $Img{L_ARR},
        	-command => sub{&MoveObj($selL,$avL)},
        )->pack(qw/-side bottom -anchor n /);
	$baloon->attach($dB, -balloonmsg => "Unselect $ObjName");
	
	my $SelF = $st->LabFrame(-label => "Selectedd $ObjName", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
	$selL = $SelF->Scrolled(qw/Listbox -selectmode extended -setgrid 1 -scrollbars oe/, -height=>$entryH, -width=>$entryW );
	$selL->grid(qw/-row 0 -column 0 -sticky w -padx 1/);
	foreach (keys( %{$selObj})) {	# populate selected list
		$selL->insert('end', $_);
	}

	my $SelBF=$SelF->Frame()->grid(qw/-row 0 -column 1 -sticky n -padx 1/);
	if ($GetListProc) {
		$nB=$SelBF->Button(
        		-image    => $Img{NEW},
        		-command => sub{&NewObj($selL)},
        	)->pack(qw/-side top -anchor n -padx 1/);
		$baloon->attach($nB, -balloonmsg => "Add New $ObjName");
		$upB=$SelBF->Button(
        		-image    => $Img{U_ARR},
        		-command => sub{&UpObj($selL)},
        	)->pack(qw/-side top -anchor n -padx 1/);
		$baloon->attach($upB, -balloonmsg => "Move Up");
		$dwB=$SelBF->Button(
        		-image    => $Img{D_ARR},
        		-command => sub{&DownObj($selL)},
        	)->pack(qw/-side top -anchor n -padx 1/);
		$baloon->attach($dwB, -balloonmsg => "Move Down");
	}
	my $saveB=$SelBF->Button(
        	-image    => $Img{SELECT},
        	-command => sub{my @@SelOb=$selL->get(0,'end');
		                &$UpdListProc($avObj,\$Project,\@@SelOb,1);
				$TreeList->delete('all');
				&UpdProjObjects2List($Project,\$Layer);				
#				&ShowLayer(\$Layer,$tSchemaC);
				},
        )->pack(qw/-side top -anchor n -padx 1/);
	$baloon->attach($saveB, -balloonmsg => "Use selection of $ObjName");

	&FiltObj($SelF->Frame()->grid(qw/-row 1 -column 0 -sticky w/),$selL,$SelFiltS,$entryW);      
}
sub NewObj {
}

sub UpObj {
	my $list=shift;
	foreach ($list->curselection()) {
		my $itm=$list->get($_);
		$list->delete($_);
		$list->insert($_-1,$itm);
		$list->selectionSet($_-1);
	}
}

sub DownObj {
	my $list=shift;
	foreach (reverse($list->curselection())) {
		my $itm=$list->get($_);
		$list->delete($_);
		$list->insert($_+1,$itm);
		$list->selectionSet($_+1);
	}
}

sub FiltSel {
	my $list=shift;
	my $selS=shift;
	my $selT=shift;	# 0...selectionSet, 1...selectionClear
	$selS='.*' if (!$selS);
	foreach (0..$list->size()-1) {
		($selT ? $list->selectionClear($_) : $list->selectionSet($_)) if ($list->get($_)=~/$selS/);
	}
}

sub FiltObj {
	my ($AvailF,$avL,$AvFiltS,$entryW)=@@_;
	$AvailF->Entry(-relief=>'sunken', -width=>$entryW-4, -textvariable=>\$AvFiltS)
		->grid(qw/-row 1 -column 0 -sticky w -padx 1/);
	my $fB=$AvailF->Button(
        	-image    => $Img{SELECT},
        	-command => sub{&FiltSel($avL,$AvFiltS)},
        )->grid(qw/-row 1 -column 1 -sticky w -padx 0/);
	$baloon->attach($fB, -balloonmsg => "Set Selection on Filter");
	my $ufB=$AvailF->Button(
        	-image    => $Img{UNSELECT},
        	-command => sub{&FiltSel($avL,$AvFiltS,1)},
        )->grid(qw/-row 1 -column 2 -sticky w -padx 0/);
	$baloon->attach($ufB, -balloonmsg => "Clear Selection on Filter");
}
#-----------------------------------------------------

d86 9
a94 1
		$PropData{name}=$pe->{name};
d99 6
a104 1
		$PropData{description}->insert('0.0', $pe->{description});
d114 1
a114 1
	my $ObjType=$TreeList->info('data', $SLSel);	
d150 1
a150 1
		($PropData{_ID}=$SLSel)=~s|^_LOBJ/_ATTR/||;
d193 1
a193 1
		&SelSources($Tab2,'Data Sources',\&DSI::GetSourceList,\&DSI::AddSelectedSources, $SLSel, $PropData{_P}->{$PropData{_ID}}->{source});
a211 1
#		&SelSources($vT1,'Tables',\&DSI::GetTableList,\&DSI::AddSelectedTables, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});
a244 1
		#&SelSources($vT1,'Columns',\&DSI::GetColumnList, \&DSI::AddSelectedColumns, $SLSel, $PropData{_P}->{$PropData{_ID}}->{column});
a256 1
#ShowLayer(\$Layer,$tSchemaC
a257 1
			#&SelSources($vT,'Columns',undef,undef,$SLSel,$PropData{_P}->{$PropData{_ID}}->{column});
a314 60

sub DBConnectForm {
	my ($ff,$prefix,$DBTypeN) = @@_; # frame, DB connection variables prefix
	foreach ($ff->children) { $_->destroy }
	my $f = $ff->LabFrame(-label => "Database", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
	foreach (keys %{ %$DBTypes->{database}->{$DBTypeSel}->{default} }) {
		${$prefix.$_}=%$DBTypes->{database}->{$DBTypeSel}->{default}->{$_}->{content};
		my $row=%$DBTypes->{database}->{$DBTypeSel}->{default}->{$_}->{id};
		my $e = $f->Entry(qw/-relief sunken -width 20/, -textvariable => \${$prefix.$_} );
		my $l = $f->Label(-text => $_.":", -anchor => 'e', -justify => 'right');
        	Tk::grid( $l, -row => $row, -column => 0, -sticky => 'e');
        	Tk::grid( $e, -row => $row, -column => 1,-sticky => 'ew');
		$entry{$prefix.$_}=$e;
	}
}

sub ConnectDB {
    my ($f,$prefix) = @@_; # frame
    if ( $entry{$prefix.'Button'}->cget('-text') eq  "Connect") {
        &DBConnect($mdDatabase, $mdUsername, $mdPassword, 0, $mdHost, $mdPort);
	if (@@SQLErrors==()) {
            $entry{$prefix.'Button'}->configure(-text => "Disconnect");
            $entry{$prefix.'Button'}->focus;
	    foreach (keys %entry) {
	        if (/^$prefix/&&(!/Button/)) {$entry{$_}->configure(-state=>'disabled')}
	    }
	    $entry{'proj'.'New'}->configure(-state=>'normal');
	    # looks for available project
            my $QueryID='gat';
	    &SQLPrepareFetch($mdDatabase,$QueryID,"SELECT oid,name FROM proj");
	    while (($i,$n)=&SQLFetch($mdDatabase,$QueryID)) {
                $ProjectList->insert('end', $n);
                push(@@ProjectList,$i);
	    }
	    &SQLFetchClose($mdDatabase,$QueryID);
        } else { 
	    $ErrDialog->configure(
        	-text       => "Connection to $mdDatabase failed",
            );
            my $button = $ErrDialog->Show;
	    @@SQLErrors=();
	}
    }
    else {
        &DBDisConnect($mdDatabase);
        $entry{$prefix.'Button'}->configure(-text => "Connect");
	foreach (keys %entry) {
	        if (/^$prefix/) {$entry{$_}->configure(-state=>'normal')}
	}
        $entry{'proj'.'New'}->configure(-state=>'disabled');
        $entry{'proj'.'Configure'}->configure(-state=>'disabled');
        $entry{'proj'.'Delete'}->configure(-state=>'disabled');
        $ProjectList->delete(0,'end');
        $SelDescrText->delete('1.0','end');
        $entry{$prefix.'Password'}->focus;
    }
}


#-----------------------------------------------------
@


1.9
log
@adding and removing object from Layers
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.8 2003/05/07 14:28:51 spanhel Exp $
a96 49
sub NewObj {
}

sub UpObj {
	my $list=shift;
	foreach ($list->curselection()) {
		my $itm=$list->get($_);
		$list->delete($_);
		$list->insert($_-1,$itm);
		$list->selectionSet($_-1);
	}
}

sub DownObj {
	my $list=shift;
	foreach (reverse($list->curselection())) {
		my $itm=$list->get($_);
		$list->delete($_);
		$list->insert($_+1,$itm);
		$list->selectionSet($_+1);
	}
}

sub FiltSel {
	my $list=shift;
	my $selS=shift;
	my $selT=shift;	# 0...selectionSet, 1...selectionClear
	$selS='.*' if (!$selS);
	foreach (0..$list->size()-1) {
		($selT ? $list->selectionClear($_) : $list->selectionSet($_)) if ($list->get($_)=~/$selS/);
	}
}

sub FiltObj {
	my ($AvailF,$avL,$AvFiltS,$entryW)=@@_;
	$AvailF->Entry(-relief=>'sunken', -width=>$entryW-4, -textvariable=>\$AvFiltS)
		->grid(qw/-row 1 -column 0 -sticky w -padx 1/);
	my $fB=$AvailF->Button(
        	-image    => $Img{SELECT},
        	-command => sub{&FiltSel($avL,$AvFiltS)},
        )->grid(qw/-row 1 -column 1 -sticky w -padx 0/);
	$baloon->attach($fB, -balloonmsg => "Set Selection on Filter");
	my $ufB=$AvailF->Button(
        	-image    => $Img{UNSELECT},
        	-command => sub{&FiltSel($avL,$AvFiltS,1)},
        )->grid(qw/-row 1 -column 2 -sticky w -padx 0/);
	$baloon->attach($ufB, -balloonmsg => "Clear Selection on Filter");
}

d179 32
d212 15
d245 1
a245 1
	
d265 1
a265 1
	my $ObjType=$TreeList->info('data', $SLSel);
d434 1
a434 1

d440 22
@


1.8
log
@schema model
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.7 2003/05/06 20:56:17 michald Exp $
d7 1
a7 1
#use ShopCard;
d9 1
a9 1
use vars qw($Project $TreeList $Layer $tSchemaC $TabsFont);
d14 1
d84 1
a84 1
  	#if ($GetListProc) {
d86 1
a86 1
	#}
d88 1
a88 1
	  
d151 1
a151 1
	my $AddListProc = shift;	# reference to procedure adding list of selected objects to $Project hash
a173 3
	#else {
        #   &RefObj($avL,$selL,$GetListProc,$avObj)
	#}	
d175 1
d190 1
a190 1
	my $SelF = $st->LabFrame(-label => "Selected $ObjName", -labelside=>"acrosstop")->pack(-anchor=>"nw",-side=>'left',-padx => 5);
d217 2
a218 2
        	-command => sub{my @@SelObj=$selL->get(0,'end');
		                &$AddListProc($avObj,\$Project,\@@SelObj,1);
d220 1
a220 1
				&AddProjObjects2List($Project,\$Layer);				
d226 1
a226 1
	&FiltObj($SelF->Frame()->grid(qw/-row 1 -column 0 -sticky w/),$selL,$SelFiltS,$entryW);
d361 6
a366 7
		my $vT1=$vTabs->add("vt", -label => "All\nLayers", -underline => 0);

#		ShopCard->new($vT1,$top,'Tables',\&DSI::GetTableList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});
#		&SelSources($vT1,'Tables',\&DSI::GetTableList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});
		&SelSources($vT1,'Tables',\&DSI::GetTableList,\&DSI::AddSelectedTables, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});

		my $i=0;
d368 1
d370 9
a378 4
			my $s;
			($s = $Project->{'gui-layer'}->{$tr}->{name}) =~ s/(\w{3})\s(\w{3})/$1\n$2/g;
			my $vT=$vTabs->add("vt$i", -label => $s);
			&SelSources($vT,'Tables',undef,undef,$PropData{_P}->{$PropData{_ID}}->{table});
d384 2
a385 11
#!!!!!!!!			&DBConnectForm($frameDB,'x',\$DBTypeSel);
		});

		my $DBConB = $AdmTab->Button(-text => "Connect", -padx => 10, -command => sub {&ConnectDB($AdmTab)})->pack();
#		DBConnectForm($frameDB,'x',\$DBTypeSel);

#		$DBTl->form(-top => $frameDescr, -left => '%0');
#		$DBT->form(-top => $DBTl, -left => '%0');
#		$DBConB->form(-top => $DBT, -left => '%0', -right=>$frameDB);
#		$frameDB->form(-top => $frameDescr, -left => $DBT);
		
d399 3
a401 1
		&SelSources($vT1,'Columns',\&DSI::GetColumnList, \&DSI::AddSelectedColumns, $SLSel, $PropData{_P}->{$PropData{_ID}}->{column});
d407 8
a414 2
			my $vT=$vTabs->add("vt$i", -label => $s);#->bind('Motion',&auxs());
			&SelSources($vT,'Columns',undef,undef,$PropData{_P}->{$PropData{_ID}}->{column});
@


1.7
log
@some minor fixes
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.6 2003/05/05 15:36:46 spanhel Exp $
d7 1
a7 1
use ShopCard;
a60 1
print Dumper($p);
d83 6
a88 1
	$ObjList=&$GetListProc($GetListProcPar,\$Project);
d172 5
a176 1
	}        
d219 1
a219 1
		                &$AddListProc($avObj,\$Project,\@@SelObj);
d221 2
a222 1
				&AddProjObjects2List($Project,\$Layer);
d410 1
a410 1
			my $vT=$vTabs->add("vt$i", -label => $s)->bind('Motion',&auxs());
@


1.6
log
@schema - tables, columns, relations
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.5 2003/05/01 13:42:44 spanhel Exp $
d7 1
a7 1
#use ShopCard;
d355 2
a356 1
#		ShopCard->new($vT1,'Tables',\&DSI::GetTableList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});
@


1.5
log
@update tree -  tables and columns
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.4 2003/04/30 09:57:45 spanhel Exp $
d364 1
a364 1
			&SelSources($vT,'Tables',undef,undef, $PropData{_P}->{$PropData{_ID}}->{table});
d400 2
a401 2
			my $vT=$vTabs->add("vt$i", -label => $s);
			&SelSources($vT,'Columns',undef, $PropData{_P}->{$PropData{_ID}}->{column});
@


1.4
log
@connect to mysql
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.3 2003/04/28 07:36:32 michald Exp $
d212 2
a213 1
				#&AddProjObjects2List($Project,\$Layer);
@


1.3
log
@introduction of Debug package
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.2 2003/04/24 20:01:40 michald Exp $
d10 1
a10 1

d81 1
a81 1
	
d83 3
a85 2
#	foreach(source::sources()) {
	foreach(&$GetListProc($GetListProcPar)) {
d89 1
a89 1
	$list->selectionSet(0,'end');
d146 1
d150 1
a150 1
	
d153 1
d159 1
d168 1
a168 2
	}

d189 1
d210 4
a213 1
        	-command => sub{},
d234 1
d337 1
a337 1
		&SelSources($Tab2,'Data Sources',\&DSI::GetSourceList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{source});
d355 1
a355 1
		&SelSources($vT1,'Tables',\&DSI::GetTableList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});
d363 1
a363 1
			&SelSources($vT,'Tables',undef, $PropData{_P}->{$PropData{_ID}}->{table});
d393 1
a393 1
		&SelSources($vT1,'Columns',\&DSI::GetColumnList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{column});
@


1.2
log
@prototype for reverse engineering
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.1.1.1 2002/09/24 01:34:20 michald Exp $
d7 1
d9 1
a9 1
use vars qw($Project $TreeList %Layer $tSchemaC $TabsFont);
d46 3
a48 3
	if (%Layer->{$VisibleLayer}->{$sel}) {
		%Layer->{$VisibleLayer}->{$sel}->name($pe->{name});
		%Layer->{$VisibleLayer}->{$sel}->desc($pe->{description});
d51 3
a53 1
	&UpdateCanvasBalloons(\%Layer,$tSchemaC);
d140 1
a140 1
sub SelSources {	#shows shoping card form for selection and orderion of specific objects
d144 3
a146 1
	my $GetListProcPar = shift;	# parameter for $GetListProc
d151 1
a151 1
	my ($avL,$selL);
d158 7
a164 5
	my $uB=$AvailF->Button(
        	-image    => $Img{REFRESH},
        	-command => sub{&RefObj($avL,$selL,$GetListProc,$GetListProcPar)},
        )->grid(qw/-row 0 -column 1 -sticky n -padx 1/);
	$baloon->attach($uB, -balloonmsg => "Refresh Available $ObjName on \"$PropData{name}\"");
d187 17
a203 15
	my $nB=$SelBF->Button(
        	-image    => $Img{NEW},
        	-command => sub{&NewObj($selL)},
        )->pack(qw/-side top -anchor n -padx 1/);
	$baloon->attach($nB, -balloonmsg => "Add New $ObjName");
	my $upB=$SelBF->Button(
        	-image    => $Img{U_ARR},
        	-command => sub{&UpObj($selL)},
        )->pack(qw/-side top -anchor n -padx 1/);
	$baloon->attach($upB, -balloonmsg => "Move Up");
	my $dwB=$SelBF->Button(
        	-image    => $Img{D_ARR},
        	-command => sub{&DownObj($selL)},
        )->pack(qw/-side top -anchor n -padx 1/);
	$baloon->attach($dwB, -balloonmsg => "Move Down");
d262 1
a262 1
			%Layer->{$VisibleLayer}->{$SLSel}->value($d);
a341 1
		&SelSources($Tab2,'Tables',\&DSI::GetTableList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{table});
d343 14
d382 12
a393 1
		&SelSources($Tab2,'Columns',\&DSI::GetColumnList, $SLSel, $PropData{_P}->{$PropData{_ID}}->{column});
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# $Id: prop.pl,v 1.7 2002/09/04 18:19:34 michal Exp $
d8 1
a8 1
use vars qw($Project $TreeList %Layer %Layer $tSchemaC $TabsFont);
d76 3
d80 4
a83 2
	foreach(source::sources()) {
		$list->insert('end', $_) if ((!/$l/)&&(url::host($_) eq $PropData{name}));
d137 7
a143 2
sub SelSources {	#shows name/description
	my($SelTab,$ObjName) = @@_;
d155 1
a155 1
        	-command => sub{&RefObj($avL,$selL)},
d176 1
a176 1
	foreach (keys( %{$PropData{_P}->{$PropData{_ID}}->{source}})) {	# populate selected list
d195 5
d320 1
a320 1
		&SelSources($Tab2,'Data Sources');
d333 1
d337 1
a337 1
		my @@dbn= (keys %{%$DBTypes->{database}});
d360 1
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2003.11.06.12.08.47;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.1
log
@renaming .xml to .scheme and .bee
@
text
@<?xml version="1.0" encoding="ISO-8859-2"?>
<script lang="perl" name='check'>
<description>
---
</description>

<input name="access" type='stream' arity='1' />

<output name="check" type='stream'/>

<code>
<![CDATA[
use strict;
#	Module for parsing web log
#	Input: stream of web log entries in specified format
#	Output: stream of separated items from web log
#
#	Format supported: CLF, EXTENDED
#	Output: CLF parsed stream
#
#	David Pavlik 
#
#	Last revision:
#	2003-5-7	xpav	new
#

my @@parsedLog;  
#	number of processed lines
my $line = 0;
#	number of error lines
my $error = 0;

#	Definition of known log formats

# Regular expression for Common Log Format
my $regexpCFL = q{^(\S+) (\S+) (\S+) \[([^:]+):(\d+:\d+:\d+) ([^\]]+)\] "(\S+) (.+?) (\S+)" (\S+) (\S+)};
#	Regular expression for Extended Log Format
my $regexpEXT = q{^(\S+) (\S+) (\S+) \[([^:]+):(\d+:\d+:\d+) ([^\]]+)\] "(\S+) (.+?) (\S+)" (\S+) (\S+) "([^"]+)" "([^"]+)"$};
#	Detected format
my $regexp;


#	All variables that can be read
my ($hostname,$url,$status,$date,$time,$authuser,$servername,$useragent,$referer,$size,$duration,$in,$out);

#	addind "" for null all values
sub printOut {
	return ($hostname,$url,$status,$date,$time,$authuser,$servername,$useragent,$referer,$size,$duration,$in,$out);
}

# Reading the first line for testing the format
#	Hopefully the first line is valid (not error line) :)
if (($_) = $access->fetch)
{	
	chomp;
	if (@@parsedLog = /$regexpCFL/)
	{
		$regexp = $regexpCFL;
		#	storing values for CLF
		$hostname = $1;
		$authuser = $3;
		$date = $4;
		$time = $5;
		$url = $8;
		$status = $10;
		$size = $11;
		$check->put(printOut());
	}
	elsif (@@parsedLog = /$regexpEXT/)
	{
		$regexp = $regexpEXT;
		print "#	FORMAT=EXT\n";
		
		#	storing values for extended
		$hostname = $1;
		$authuser = $3;
		$date = $4;
		$time = $5;
		$url = $8;
		$status = $10;
		$size = $11;
		$referer = $12;
		$useragent = $13;
		$check->put(printOut());
	} 
	else
	{
		print;
		print "# ERROR=Unknown format\n";
		exit 1;
	}

	# Reading the rest
	while ((($_) = $access->fetch) && ($regexp))
	{
		chomp;
		$line++;
		if (@@parsedLog = /$regexp/)
		{
			#	handling for CLF and Extended format
			#	add handling for more formats here
			if (($regexp eq $regexpCFL) || ($regexp eq $regexpEXT))
			{
				#	storing values for CLF
				$hostname = $1;
				$authuser = $3;
				$date = $4;
				$time = $5;
				$url = $8;
				$status = $10;
				$size = $11;
				if ($regexp eq $regexpEXT)
				{
					$referer = $12;
					$useragent = $13;
				}
				$check->put(printOut());
			}
		}
		else
		{
			$error++;
		}
	}
}
]]>
</code>

</script>

@

head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2004.06.08.15.11.59;	author numberone;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.10.13.15.44;	author numberone;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.08.10.26.56;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.06.12.06.33;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
Prepare API

every bee must call ->prepare() before ->put()/->fetch()

or they can call ->prepare_sql("SELECT/INSERT ...")

->put() is identical to new ->execute()
@
text
@<?xml version="1.0" encoding="ISO-8859-2"?>
<script lang="perl" name='eat'>

<input name="in" type='stream' arity='1' />

<code>
<![CDATA[

$in->prepare();

my $i = 0;
my @@x;
while((@@x) = $in->fetch) {
#	print "eat: $i [",join(", ",@@x),"]\n" if(($i & 16383) == 0);
	$i++;
}

print "eat: $i rows readed\n";

]]>
</code>

</script>

@


1.3
log
@
path-17x100k benchmark

some dad cleanups
@
text
@d9 2
d12 3
a14 1
while((my($x) = $in->fetch)) {
a15 1
#    print "eat: $i\n" if(($i % 100) == 0);
d18 2
@


1.2
log
@
demo with two paths of data flow, of different lengths
@
text
@d12 1
a12 2
	print "eat: <".(1*$x+0).">\n";
    print "eat: $i\n" if(($i % 100) == 0);
@


1.1
log
@renaming .xml to .scheme and .bee
@
text
@d10 1
a10 1
while($in->fetch) {
d12 1
@


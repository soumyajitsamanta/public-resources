head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2004.06.08.15.12.37;	author numberone;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.06.15.23.53;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.06.12.04.20;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
Prepare API

every bee must call ->prepare() before ->put()/->fetch()

or they can call ->prepare_sql("SELECT/INSERT ...")

->put() is identical to new ->execute()
@
text
@<?xml version="1.0" encoding="ISO-8859-2"?>
<script lang="perl" name="pass">
<description>
prvni vstup je scalar $shell, druhy je tabulka s polozkami
jako v /etc/passwd. pocita pocet lidi pouzivajicich $shell
a soucasne preposila login, gcos uid a shell na svuj prvni 
vystup. na druhy vystup da na konci pocet uzivatelu
pouzivajicich $shell
</description>

<input name="shell" type='scalar'/>
<input name="passwd" type='stream' arity='7' />

<output name="output" type='stream' arity='4' />
<output name="count" type='scalar' />

<code>
<![CDATA[

$passwd->prepare();
$output->prepare();

$count = 0;

while(my @@entry = $passwd->fetch) {
	$count++ if($entry[6] eq $shell);
	$output->put($entry[0],$entry[2],$entry[4],$entry[6]);
}

]]>
</code>
</script>

@


1.2
log
@debug prints removed
@
text
@d20 3
@


1.1
log
@renaming .xml to .scheme and .bee
@
text
@d18 2
a24 1
	print "pass: ".$entry[0]."\n";
d27 1
@


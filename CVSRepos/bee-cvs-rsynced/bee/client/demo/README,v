head	1.6;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2003.11.06.14.31.32;	author numberone;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.06.12.04.20;	author numberone;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.08.17.55.32;	author numberone;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.16.02.18.32;	author numberone;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.26.07.52.42;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.34.11;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.34.11;	author michald;	state Exp;
branches;
next	;


desc
@@


1.6
log
@demo updates (display:// problem)
@
text
@
Demo transformation
-------------------

Try bee/client/demo transformation:

1) Execute $bee/client/demo/init.sql under your MySQL root's account
3) In one terminal, launch 

		$bash cd $bee/dad
		$bash perl dad.pl 2333

4) In third execute demo: 

		$bash cd $bee/client
		$bash perl task.pl demo task.scheme

See $bee/client/demo/task.scheme definition file:

This will create to bees: 'pass' and 'find'. 
  o 'pass' opens your /etc/passwd file (don't worry, the only table 
    defined on all systems ;-), greps accounts with $shell specified 
	in task.scheme and sends [login,gcos,uid,shell] to 'find' bee. 
  
  o 'find' bee has two inputs:
       1) [login,gcos,uid,shell] stream from 'pass' and..
	   2) names of few shells defined in bee.shell table in your database. 

Bee 'find' will save known shells with user logins to database and 
unknown will dump to the screen.

Yes, we know, no much usable ETL process, but it's just demo :-)

Visualisation of bees and their inputs and outputs:

               +----------+                        +----------+
               |          | [login,gcos,uid,shell] |          |
       $shell -|   pass   |========================|   find   |=[uid,shell]
               |          |                        |          |
 [/etc/passwd]=|          |- $count         $from -|          |=[gcos,shell]
               |          |                        |          |
               +----------+       [dbi:shell:name]>|          |
                                                   +----------+



@


1.5
log
@renaming .xml to .scheme and .bee
@
text
@d7 28
a34 12
1) Execute bee/client/demo/init.sql under your MySQL root's account
2) In one terminal, launch ./auth.pl from bee/auth/ directory
3) In another launch ./otec.pl from bee/otec/
4) In third execute demo: cd bee/client; ./task.pl demo task.xml

See bee/client/demo/task.xml definition file:
This will create to bees: 'pass' and 'find'. 'pass' opens your /etc/passwd
file, greps accounts with $shell specified in task.xml and sends
[login,gcos,uid,shell] to 'find' bee. 'find' bee has to inputs:
[login,gcos,uid,shell] from 'pass' and names of few shells defined
in bee.shell table in your MySQL database. 'find' will save known
shells with user logins to database and unknown will dump to screen.
@


1.4
log
@send/recv, in C, optimized, LEN_ code, small integers
@
text
@a1 23
	bee.sourceforge.net
	-------------------

About
-----

The BEE Project is a suite of tools supporting Business Intelligence project 
implementation including ETL tool and ROLAP server and a client. Suite design 
is based on ROLAP methodology with aim to cover projects on Linux/Intel 
platform with data volume up to 50 GB effectively.

Install
-------

You will need following perl modules in order to run bee:

    XML::Parser
    XML::Simple
    FreezeThaw
    DBI
    DBD::mysql


@


1.3
log
@allow spaces in metadata. README, init.sql initial revision
@
text
@a17 3
    Net::SSLeay
    IO::Socket::SSL
    Frontier::RPC2
d20 1
a22 1
    FreezeThaw
@


1.2
log
@version merging with my cvs
@
text
@d2 43
a44 1
 Example
@


1.1
log
@Initial revision
@
text
@d14 1
@


1.1.1.1
log
@Initial public release of BEE Project.
@
text
@@

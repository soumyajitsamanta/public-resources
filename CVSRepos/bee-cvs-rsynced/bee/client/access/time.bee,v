head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2004.06.15.10.11.40;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.11.06.53.57;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
new Prepare API

This breaks compatibility with old .bee code, because every stream
input/output must be initialized first, bee has to call ->prepare()
method on stream objects in .bee code before calling ->put or ->get.

Or, instead of ->prepare(), bee can call general ->prepare_sql($cmd),
or, in the future, methods like ->prepare_select($table,$cols,$where,..),
->prepare_update(...), ->prepare_delete(...)

Next new method, execute(), is same as put() for UPDATE or DELETE.
But note that in order to do SELECT, we need to call DBI's execute().
Method prepare() with no arguments call's execute() for as.

So, correct is:

$input->prepare()
$input->fetch, fetch, fetch, ..

$input->prepare_sql("SELECT ...") or die "no SQL stream"
$input->exeucte() # !
$input->fetch, fetch, fetch, ..

$input->prepare_sql("UPDATE ...") or die "no SQL stream"
$input->execute(..), execute, excute (or put())

All stream .bee input/output variables have following methods:

prepare()         -- prepare and execute DBI statement
prepare_sql($cmd) -- prepare DBI statement
execute()         -- execute DBI statement
put()             -- execute DBI statement or write to stream
fetch()           -- fetch from DBI statement or read to stream
table()           -- returns table name, from URL
fields()          -- returns list of fields, from URL
@
text
@<?xml version="1.0" encoding="ISO-8859-2"?>
<script lang="perl" name='time'>

<input name="Time" type='stream' arity="1" />

<output name="Out" type='stream'/>

<code>
<![CDATA[

#	hash for converting the month into numeric value
my %monthNMR = (
							'Jan','1',
							'Feb','2',
							'Mar','3',
							'Apr','4',
							'May','5',
							'Jun','6',
							'Jul','7',
							'Aug','8',
							'Sep','9',
							'Oct','10',
							'Nov','11',
							'Dec','12',
						);

$Time->prepare();
$Out->prepare();

my $line = 0;
while(my($date,$time,$zone) = $Time->fetch) {
	my($year,$month,$day,$hour,$minute);

	($hour,$minute) 	= ($time =~ /^(\d\d):(\d\d):\d\d$/);
	($day,$month,$year) = ($date =~ /^(\d\d)\/(\w\w\w)\/(\d\d\d\d)$/);

	$minute = ($minute - ($minute % 10));
	$minute = "00" unless $minute;

#	print "TIME: $hour:$minute line ",++$line,"\n";
	$Out->put($year,$month,$day,$hour,$minute);
}
]]>
</code>

</script>

@


1.1
log
@merging old version to cvs
@
text
@d27 2
@


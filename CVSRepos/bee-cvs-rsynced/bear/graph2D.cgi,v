head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2003.11.04.12.26.25;	author vacula;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.04.09.38.40;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.04.04.45.13;	author michald;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.31.12.47.54;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.04.08.14.34;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.02.08.35.00;	author vacula;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.01.15.20.47;	author vacula;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fix myPath
@
text
@#!/usr/bin/perl

use strict;
use CGI qw( :standard );
require "const/Const.pm";

my $q = new CGI;

my $id_img = $q->param("id");
 
if (-e "$Const::myPath$Const::cache2DReport/$id_img") {
	print $q->header("image/png");
	open(IMG, "$Const::myPath/$Const::cache2DReport/$id_img");
	while (<IMG>) {print}
	close(IMG);
}

1
@


1.6
log
@back changes
@
text
@a9 1
#$id_img = 'aabecbpg4C.png';
d11 1
a11 1
if (-e "$Const::myPath$Const::cache2DReport/aaa$id_img") {
d13 1
a13 1
	open(IMG, "$Const::myPath$Const::cache2DReport/$id_img");
@


1.5
log
@graph2D fix for mod_perl
@
text
@a4 3
#use CGI::Pretty;

#use Data::Dumper;
d7 1
d9 2
a10 2
my $id_img = param("id");
$id_img = 'aabecbpg4C.png';
d12 3
a14 3
if (-e "$Const::cache2DReport/$id_img") {
	print header("image/png");
	open(IMG, "$Const::cache2DReport/$id_img");
@


1.4
log
@mod perl rocks!
@
text
@d8 1
a8 2
use vars qw($cache2Dreport);
require "const.def";
d12 1
d14 1
a14 1
if (-e "$cache2Dreport/$id_img") {
d16 1
a16 1
	open(IMG, "$cache2Dreport/$id_img");
d21 1
a21 1
1@


1.3
log
@writing 2D graphs html into cache
@
text
@d20 2
@


1.2
log
@return img
@
text
@d5 1
a5 1
use CGI::Pretty;
d7 3
a9 1
use Data::Dumper;
d12 1
a12 4
my $id_img = param("id");			
my $cachedir = param("cache");
my $format = param("format");

d14 1
a14 1
if (-e "$cachedir/$id_img.$format") {
d16 1
a16 1
	open(IMG, "$cachedir/$id_img.$format");
@


1.1
log
@main file for 2D graphs
@
text
@a3 14

use GD::Graph::bars;
use GD::Graph::hbars;
use GD::Graph::lines;
use GD::Graph::points;
use GD::Graph::linespoints;
use GD::Graph::mixed;
use GD::Graph::pie;
use GD::Graph::pie3d;
use GD::Graph::bars3d;
use GD::Graph::lines3d;
use GD::Graph::colour;
use GD::Graph::Map;
use SOAP::Lite;
a6 3
use vars qw( $bearHost $bearPort $compress_threshold );
require "const.def";

a8 9
#---------------------------------------------------------------------------------------------------------------------------------------------

# --- make SOAP connection ---
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => $compress_threshold}]; 
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
d10 10
a19 3
my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
a20 230
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

##############################################################################################################################################
#---------------------------------------------------------------------------------------------------------------------------------------------

our $q = new CGI;

my $id_report  	= param("id");			
my $lang	= param("lang");
my $use_enc	= param("use_enc");			
my $cachedir 	= param("cachedir");			

print $q->header(-charset=>$use_enc);
print $q->start_html();

	my $dataset = SOAP->GetResultName($id_report,$lang);
	my $Obj     = SOAP->GetMetadata($id_report);
	my $style;
	if (ref($Obj->{'report'}{$id_report}{'format_def'}) =~ /HASH/) {
		$style = $Obj->{'report'}{$id_report}{'format_def'};
	} elsif ($Obj->{'report'}{$id_report}{'format_def'}) {
		my $id = $Obj->{'report'}{$id_report}{'format_def'};
		my $x = SOAP->GetMetadata($id);
		my $subType = SOAP->GetObjectType($id);
		$style = $x->{$subType}{$id};
	}	

	my ( $x_label, $y_label, @@data ) = data( \$dataset , $style->{base}{sets} );

#	@@data = ( 
#	    ["1st","2nd","3rd","4th","5th","6th","7th", "8th", "9th"],
#	    [    1,    2,    5,    6,    3,  1.5,    1,     3,     4],
#	);

	my @@hrefs = ["http://www.perl.org", 
          "http://www.cpan.org", 
	  "http://freshmeat.net", 
	  "javascript:alert('Sample of using JavaScript');"
	];

	my $format = "png";
	my $chart = "GD::Graph::".$style->{form};
	my $name = (exists $Obj->{'report'}{$id_report}{name}{$lang}) ? $Obj->{'report'}{$id_report}{name}{$lang} : $id_report;

#	my $graph = $chart->new( $style->{base}{width}, $style->{base}{height} );
	my $graph = GD::Graph::bars->new($style->{base}{width}, $style->{base}{height});
#	my $graph = GD::Graph::bars->new(500, 400);
	
	my %attributes = defineAttr($style->{form},$name,$x_label,$y_label,$style->{layout},$style->{colors},);
#	my @@legend = @@datarow;

	$graph->set( %attributes ) or die $graph->error;
#	$graph->set_legend(@@legend);

	my $gd = $graph->plot(\@@data) or die $graph->error;
	
#	writeToSTDOUT($gd,$format);
	writeToImg(\$gd,$format,$cachedir,$id_report);

	my $map = new GD::Graph::Map($graph, hrefs => \@@hrefs);

#	writeToHtml(\$gd);
	
	print $map->imagemap("graf.cgi?id=$id_report&cache=$cachedir&format=$format", \@@data);
	

print $q->end_html;

#--------------------------------------------------------------------------------------------------------------------------------------------

sub data {
	my $dataset = shift;
	my $datasheet = shift;

	my @@datarow = joinDataset(\$$dataset->{row});
	my @@datacol = joinDataset(\$$dataset->{col});

	my (@@data,$x_label,$y_label);

	if ( $datasheet eq 'rows' ) {
	   for ( my $i=0;$i<@@datarow;$i++ ) {
	       my @@datas;
	       for ( my $j=0;$j<@@datacol;$j++ ) {
	  	   push(@@datas,(exists $$dataset->{c}{$i}{$j}) ? $$dataset->{c}{$i}{$j} : undef);
	       }
	       push(@@{$data[$i]},@@datas);
	   }
	   unshift(@@data,\@@datacol);
	   my $key = 0;
	   foreach ( keys %{$$dataset->{colHeader}} ) {
	      $x_label .= ($key == ( keys(%{$$dataset->{colHeader}}) - 1) ) ? $$dataset->{colHeader}{$_}{name} : $$dataset->{colHeader}{$_}{name}." | ";
	      $key++;
	   }
	   $key = 0;
	   foreach ( keys %{$$dataset->{rowHeader}} ) {
	      $y_label .= ($key == ( keys(%{$$dataset->{rowHeader}}) - 1) ) ? $$dataset->{rowHeader}{$_}{name} : $$dataset->{rowHeader}{$_}{name}." | ";
	      $key++;
	   }
	}
	if ( $datasheet eq 'cols' ) {
	   for ( my $i=0;$i<@@datacol;$i++ ) {
	       my @@datas;
	       for ( my $j=0;$j<@@datarow;$j++ ) {
	  	  push(@@datas,(exists $$dataset->{c}{$j}{$i}) ? $$dataset->{c}{$j}{$i} : undef);
	       }
	       push(@@{$data[$i]},@@datas);
	   }
	   unshift(@@data,\@@datarow);
	   my $key = 0;
	   foreach ( keys %{$$dataset->{rowHeader}} ) {
	      $x_label .= ($key == ( keys(%{$$dataset->{rowHeader}}) - 1) ) ? $$dataset->{rowHeader}{$_}{name} : $$dataset->{rowHeader}{$_}{name}." | ";
	      $key++;
	   }
	   $key = 0;
	   foreach ( keys %{$$dataset->{colHeader}} ) {
	      $y_label .= ($key == ( keys(%{$$dataset->{colHeader}}) - 1) ) ? $$dataset->{colHeader}{$_}{name} : $$dataset->{colHeader}{$_}{name}." | ";
	      $key++;
	   }
	}

	return ($x_label,$y_label,@@data);
}

#--------------------------------------------------------------------------------------------------------------------------------------------

sub joinDataset {
	my $dataset = shift;
	my (@@data);

	for ( my $i=0;$i<@@{$$dataset};$i++ ) {
	    my $rowItem;
	    for ( my $j=0;$j<@@{$$dataset->[$i]};$j++ ){
	        $rowItem .= ($j == (@@{$$dataset->[$i]}-1)) ? $$dataset->[$i][$j] : $$dataset->[$i][$j].'|';
	    }
	    push(@@data,$rowItem);
	}
	return @@data;
}

#--------------------------------------------------------------------------------------------------------------------------------------------

sub defineAttr {
	my $chart = shift;
	my $name = shift;
	my $x_label = shift;
	my $y_label = shift;
	my $layout = shift;
	my $colors = shift;
	my (%attr);

	$attr{"t_margin"} = (exists $layout->{t_margin}) ? $layout->{t_margin} : 0;
	$attr{"b_margin"} = (exists $layout->{b_margin}) ? $layout->{b_margin} : 0;
	$attr{"l_margin"} = (exists $layout->{l_margin}) ? $layout->{l_margin} : 0;
	$attr{"r_margin"} = (exists $layout->{r_margin}) ? $layout->{r_margin} : 0;
#	if (defined $colors->{bgclr} ) {
#	   $attr{"transparent"} = 0;
#	   $attr{"bgclr"} = '#7fe310';
#	}
	if ( not ( $chart eq 'pie'  or  $chart eq 'pie3d' ) ) {
	   $attr{"title"} = $name;
	   $attr{"x_label"} = $x_label;
	   $attr{"y_label"} = $y_label;
	   $attr{"x_long_ticks"} = (exists $layout->{x_long_ticks}) ? $layout->{x_long_ticks} : 0;
	   $attr{"y_long_ticks"} = (exists $layout->{y_long_ticks}) ? $layout->{y_long_ticks} : 0;
	   $attr{"x_label_position"} = (exists $layout->{x_label_position}) ? $layout->{x_label_position} : 3/4;
	   $attr{"y_label_position"} = (exists $layout->{y_label_position}) ? $layout->{y_label_position} : 3/4;
	   $attr{"x_plot_values"} = (exists $layout->{x_plot_values}) ? $layout->{x_plot_values} : 0;
	   $attr{"y_plot_values"} = (exists $layout->{y_plot_values}) ? $layout->{y_plot_values} : 0;
	   $attr{"x_label_skip"} = (exists $layout->{x_label_skip}) ? $layout->{x_label_skip} : 1;
	   $attr{"y_label_skip"} = (exists $layout->{y_label_skip}) ? $layout->{y_label_skip} : 1;
	   $attr{"x_tick_offset"} = (exists $layout->{x_tick_offset}) ? $layout->{x_tick_offset} : 0;
	   $attr{"x_labels_vertical"} = (exists $layout->{x_labels_vertical}) ? $layout->{x_labels_vertical} : 0;
	   $attr{"axis_space"} = (exists $layout->{axis_space}) ? $layout->{axis_space} : 4;
	   $attr{"text_space"} = (exists $layout->{text_space}) ? $layout->{text_space} : 8;
#	   if (defined $colors->{labelclr}) {
#	      $attr{"labelclr"} = '#7fe310';
#	   }
#	   if (defined $colors->{textclr}) {
#	      $attr{"textclr"} = '#7fe310';
#	   }
#	   if (defined $colors->{axislabelclr}) {
#	      $attr{"axislabelclr"} = '#7fe310';
#	   }
	}

	return %attr;
}

#--------------------------------------------------------------------------------------------------------------------------------------------

sub writeToSTDOUT {
	my $gd = shift;
	my $format = shift;
	
	print header("image/$format");
	binmode STDOUT;
	print $gd->$format;
}

#--------------------------------------------------------------------------------------------------------------------------------------------

sub writeToImg {
	my $gd = shift;
	my $format = shift;
	my $cache_dir = shift;
	my $name = shift;

	open(IMG, ">$cache_dir/$name.$format") or die $!;
	binmode IMG;
	print IMG $$gd->$format;
	close IMG;
}

#--------------------------------------------------------------------------------------------------------------------------------------------

sub writeToHtml {

#	open(RT,">html/$file") || return eval "print '<pre>something wrrrrrong!</pre>'";
#	binmode(RT,":utf8");
#	print header(-charset=>$use_enc);
#	print RT <<END;
#
#	open(HTML, ">$cache_dir/$name.html") or die $!;
#	print HTML $$gd->$format;
#	close IMG;
}

#--------------------------------------------------------------------------------------------------------------------------------------------

1;
@


head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.04.11.12.06.16;	author vacula;	state dead;
branches;
next	1.1;

1.1
date	2003.03.19.21.14.09;	author vacula;	state Exp;
branches;
next	;


desc
@@


1.2
log
@clean
@
text
@#!/usr/bin/perl -w
 

%COL = (
	'MAP'  => ["X","Y","Z","CLR"],
	'NAME' => ["Mesto","Rok","Prodej","Zbozi"],
);

%LOOKUP = (
	'Mesto' => ["Praha","Brno","Liberec","Ostrava"],
	'Zbozi' => ["klavesnice","mys","monitor","procesor",],
	'Rok'   => [1999,2000,2001,2002,],
);

@@DATA = ([0,0,200,2,],[3,1,864,3,],[1,2,589,2,],[1,0,1065,0],[2,3,34,0,],[0,2,2564,1,],);

%FORMAT = ( 'AXIS' =>  {'color'     => 'green',
			'format'    => 'cylinder',
			'size'      => 1,
			'labelcolor'=> 'green',  
		       },
	  'LATTICE'=> {'X' => [
	  			{ 'step'   => 1,
			          'format' => 'line',
	 	 	          'size'   => 1,
	 		          'color'  => 'blue', },
				],
		       
		       'Y' => [
		       	        { 'step'   => 1,
			          'format' => 'line',
	 	 	          'size'   => 1,
	 		          'color'  => 'blue', },
				],
		       
		       'Z' => [
		       	        { 'step'   => 1,
			          'format' => 'line',
	 	 	          'size'   => 1,
	 		          'color'  => 'blue', },
	  			{ 'step'   => 2,
			          'format' => 'line',
	 	 	          'size'   => 10,
	 		          'color'  => 'red',},		       	       
				],
		       
		      },
	  	       
);


#############################################################################################################################################
$rows = @@DATA; 
$cols = @@{$COL{MAP}};

for ($col=0;$col < $cols;$col++){

    if ($COL{MAP}->[$col] eq 'X'){
     $labelX = $COL{NAME}->[$col];
     if (exists($LOOKUP{$labelX})){
     $typeX = "qualit";  
     $lookX = @@{$LOOKUP{$labelX}};
       $lengthX = 0;
       $maxX = 0;
        for ($row=0;$row < $rows;$row++){ 
          if ($DATA[$row][$col] > $lengthX ){ 
	    $lengthX = $DATA[$row][$col] +1;
	  }
       }
     }
     else{
       $typeX = "quantit";  
       $lengthX = 10;
       $maxX = 0;
        for ($row=0;$row < $rows;$row++){
	  if ($DATA[$row][$col] > $maxX ){ 
	    $maxX = $DATA[$row][$col] +1;
	  }
      }
     } 
   }

    if ($COL{MAP}->[$col] eq 'Y'){
     $labelY = $COL{NAME}->[$col];
     if (exists($LOOKUP{$labelY})){ 
     $lookY = @@{$LOOKUP{$labelY}};
       $typeY = "qualit";
       $lengthY = 0;
       $maxY = 0;
        for ($row=0;$row < $rows;$row++){ 
          if ($DATA[$row][$col] > $lengthY ){ 
	    $lengthY = $DATA[$row][$col] +1;
	  }
       }
     }
     else{
       $typeY = "quantit";  
       $lengthY = 10;
       $maxY = 0;
        for ($row=0;$row < $rows;$row++){
	  if ($DATA[$row][$col] > $maxY ){ 
	    $maxY = $DATA[$row][$col] +1;
	  }
	}  
     } 
   }
 
    if ($COL{MAP}->[$col] eq 'Z'){
     $labelZ = $COL{NAME}->[$col];
     if (exists($LOOKUP{$labelZ})){ 
     $lookZ = @@{$LOOKUP{$labelZ}};
       $typeZ = "qualit";
       $lengthZ = 0;
       $maxZ = 0;
        for ($row=0;$row < $rows;$row++){ 
          if ($DATA[$row][$col] > $lengthZ ){ 
	    $lengthZ = $DATA[$row][$col] +1;
	  }
       }
     }
     else{
       $typeZ = "quantit";  
       $lengthZ = 10;
       $maxZ = 0;
        for ($row=0;$row < $rows;$row++){
	  if ($DATA[$row][$col] > $maxZ ){ 
	    $maxZ = $DATA[$row][$col] +1;
	  }
	}
	$exponent = length($maxZ)-1;
        $digit = eval("1e$exponent");
	$num = substr("$maxZ",0,1);
        $maxZ = eval ("1+$num") * $digit;

     } 
   }

}


$primX[0] =0;
for ($xi=1;$xi<=10;$xi++){
$primX[$xi] = $primX[$xi-1]+$maxX/10;
}

$primY[0] =0;
for ($yi=1;$yi<=10;$yi++){
$primY[$yi] = $primY[$yi-1]+$maxY/10;
}

$primZ[0] =0;
for ($zi=1;$zi<=10;$zi++){
$primZ[$zi] = $primZ[$zi-1]+$maxZ/10;
}



%AXIS = ( 
	  'X' => [ {'length'  => $lengthX,
		    'label'   => $labelX,
	  	    'visible' => $FORMAT{AXIS},
		   },
		 ],
  	  'Y' => [ { 'length'  => $lengthY,
		     'label'   => $labelY,
	  	     'visible' => $FORMAT{AXIS},
		   },
		 ],
          'Z' => [ { 'length'  => $lengthZ,
		     'label'   => $labelZ,
	  	     'visible' => $FORMAT{AXIS},
		   },
		 ],	 
);		






sub lattice{

if ($typeX eq 'qualit') {
 foreach $hash ( @@{$FORMAT{LATTICE}->{X}} ) {
  $XZ{tendency_Z}->[0]->{visible} = 1;
  $XZ{tendency_Z}->[1] = $hash;
  $XY{tendency_Y}->[0]->{visible} = 1;
  $XY{tendency_Y}->[1] = $hash;
 
    for ($r=0;$r < $lookX;$r++){
    $XZ{tendency_Z} -> [1] -> {label} -> [$r] -> {visible} = 1;
    $XZ{tendency_Z} -> [1] -> {label} -> [$r] -> {string} = ${$LOOKUP{$labelX}}[$r];
    $XZ{tendency_Z} -> [1] -> {label} -> [$r] -> {color} = 'white';
    }
    }
}

if ($typeY eq 'qualit') {
 foreach $hash ( @@{$FORMAT{LATTICE}->{Y}} ) {
  $XY{tendency_X}->[0]->{visible} = 1;
  $XY{tendency_X}->[1] = $hash;
  $YZ{tendency_Z}->[0]->{visible} = 1;
  $YZ{tendency_Z}->[1] = $hash;
 }
    for ($r=0;$r < $lookX;$r++){
    $XY{tendency_X} -> [1] -> {label} -> [$r] -> {visible} = 1;
    $XY{tendency_X} -> [1] -> {label} -> [$r] -> {string} = ${$LOOKUP{$labelY}}[$r];
    $XY{tendency_X} -> [1] -> {label} -> [$r] -> {color} = 'white';
    }
}

if ($typeZ eq 'qualit') {
 foreach $hash ( @@{$FORMAT{LATTICE}->{Z}} ) {
  $XZ{tendency_X}->[0]->{visible} = 1;
  $XZ{tendency_X}->[1] = $hash;
  $YZ{tendency_Y}->[0]->{visible} = 1;
  $YZ{tendency_Y}->[1] = $hash;
 }
    for ($r=0;$r < $lookZ;$r++){
    $XZ{tendency_X} -> [1] -> {label} -> [$r] -> {visible} = 1;
    $XZ{tendency_X} -> [1] -> {label} -> [$r] -> {string} = ${$LOOKUP{$labelZ}}[$r];
    $XZ{tendency_X} -> [1] -> {label} -> [$r] -> {color} = 'white';
    }
}

if ($typeX eq 'quantit') {
$x=0;
 foreach $hash ( @@{$FORMAT{LATTICE}->{X}} ) {
  $XZ{tendency_Z}->[0]->{visible} = 1;
  $XZ{tendency_Z}->[1] = $hash;
  $XY{tendency_Y}->[0]->{visible} = 1;
  $XY{tendency_Y}->[1] = $hash;
  $x++;
 }
     for ($r=0;$r <= 10;$r++){
    $XZ{tendency_Z} -> [1] -> {label} -> [$r] -> {visible} = 1;
    $XZ{tendency_Z} -> [1] -> {label} -> [$r] -> {string} = $primX[$r+1];
    $XZ{tendency_Z} -> [1] -> {label} -> [$r] -> {color} = 'white';
    }


}

if ($typeY eq 'quantit') {
$z=0;
 foreach $hash ( @@{$FORMAT{LATTICE}->{Y}} ) {
  $XY{tendency_X}->[0]->{visible} = 1;
  $XY{tendency_X}->[1] = $hash;
  $YZ{tendency_Z}->[0]->{visible} = 1;
  $YZ{tendency_Z}->[1] = $hash;
  $z++;
 }
     for ($r=0;$r <= 10;$r++){
    $XY{tendency_X} -> [1] -> {label} -> [$r] -> {visible} = 1;
    $XY{tendency_X} -> [1] -> {label} -> [$r] -> {string} = $primY[$r+1];
    $XY{tendency_X} -> [1] -> {label} -> [$r] -> {color} = 'white';
    }


}

if ($typeZ eq 'quantit') {
$z=0;
 foreach $hash ( @@{$FORMAT{LATTICE}->{Z}} ) {
  $XZ{tendency_X}->[$z]->{visible} = 1;
  $XZ{tendency_X}->[$z+1] = $hash;
  $YZ{tendency_Y}->[$z]->{visible} = 1;
  $YZ{tendency_Y}->[$z+1] = $hash;
  $z++;
 }
     for ($r=0;$r <= 10;$r++){
    $XZ{tendency_X} -> [1] -> {label} -> [$r] -> {visible} = 1;
    $XZ{tendency_X} -> [1] -> {label} -> [$r] -> {string} = $primZ[$r+1];
    $XZ{tendency_X} -> [1] -> {label} -> [$r] -> {color} = 'white';
    }


}


}










@


1.1
log
@*** empty log message ***
@
text
@@


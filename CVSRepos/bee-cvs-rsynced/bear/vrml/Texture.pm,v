head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2004.03.16.23.18.45;	author vacula;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.22.11.04.47;	author vacula;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.04.08.35.30;	author vacula;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.10.13.24.58;	author vacula;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.13.14.36.12;	author vacula;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.05.12.59.32;	author vacula;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.30.13.30.26;	author vacula;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.27.14.47.54;	author vacula;	state Exp;
branches;
next	;


desc
@@


1.8
log
@minor changes in generating textures
@
text
@#------------------------------------------------------------------------------------
#	Generate and store textures -  package
#------------------------------------------------------------------------------------


package Texture;

use Exporter;
@@ISA = qw(Exporter);
@@EXPORT = qw(&Textures);

use Storable qw(dclone freeze);	#needed for creating independent copy of hash
use Digest::MD5 qw(md5_hex);	#creates unique string from definition

#---------------------------------------------------------------------------------------------------------------------------------------------

sub Textures {				## get hash with definition of label, return md5 string, which represent file with image of label
	my $label = shift;		## hash
	my $texdir = shift;		## path where are save textures

	my $md5string = md5_hex(freeze($label));

	if (! -e "$texdir/$md5string.png" ) {
		GenerateTexture( $label, $texdir, $md5string );
	}

	return ($md5string);
}

#---------------------------------------------------------------------------------------------------------------------------------------------

sub GenerateTexture {
use GD;
	my $label = shift;
	my $texdir = shift;
	my $file = shift;

	my $directory  = $Const::trueTypeFontPath;
	my $string     = $label->{string};
	my $fontname   = $label->{font};
	my $fontsize   = $label->{fontsize};
	my @@color      = @@{$label->{color}};
	my $font       = "$directory/$fontname"; 					##"$directory/luximb.ttf";
	my $heigth     = $fontsize + 6;
	my $str        = length($string)*$fontsize;

	$im = new GD::Image($str,$heigth);   	# create new image size $string x $heigth

	my $black = $im->colorAllocate(0,0,0);
	$im->transparent($black);			# set which color is transparent

	my $color = $im->colorAllocate(@@color); 

	# write string   
	#warn "rendering $label\n";
	$im->stringTTF( 
		$color,		# fgcolor 
		$font,		# fontname
		$fontsize,	# pointsize
		0.0,		# angle
		4,		# x coordinate to start drawing the string
		$fontsize+2,	# y coordinate to start drawing the string
		$string		# string
	);	

	#print $im->png; 

	open (GD ,">$texdir/$file.png");
	print GD $im->png; 
	close (GD);

}

#---------------------------------------------------------------------------------------------------------------------------------------------

1


__END__
@


1.7
log
@minor changes in format
@
text
@d12 2
d17 3
a19 6
sub Textures {
my $label = shift;	## string, which is display in texture
my $font  = shift;	## font of string
my $fontsize = shift;	## size of font
my $texdir = shift;	## path where is save texture
my @@color = @@_;		## color of string
d21 1
a21 1
my $md5string = &MD5($label,$fontsize,$font,@@color);
d23 3
a25 3
if (! -e "$texdir/$md5string.png" ) {
  &GenerateTexture($label,$font,$fontsize,$md5string,$texdir,@@color);
}
d27 1
a27 20
return ($md5string);
}

#---------------------------------------------------------------------------------------------------------------------------------------------

sub MD5 {
use Digest::MD5;
my $label = shift;
my $fontsize = shift;
my $font  = shift; 
my @@color = @@_;

my $md5 = Digest::MD5->new;
   $md5->add($label);
   $md5->add($color);
   $md5->add($font);
   $md5->add($fontsize);
my $digest = $md5->hexdigest;			## $digest = $md5->digest;  $digest = $md5->hexdigest; $digest = $md5->b64digest;

return ($digest);
d34 24
a57 26

use constant FONT_DIRECTORY => '/usr/X11R6/lib/X11/fonts/TTF';      	## /usr/X11R6/lib/X11/fonts/TTF    /home/vladis/test/fonts

#my ($label,$labelcolor,$file,$directory,$font,$fontname,$fontsize,$heigth,$string,$color);

my $label = shift;
my $fontname = shift;
my $fontsize = shift;
my $file = shift;
my $texdir = shift;
my @@color = @@_;
my $directory  =  FONT_DIRECTORY;
my $font       = "$directory/$fontname"; 					##"$directory/luximb.ttf";
my $heigth     = $fontsize + 6;
my $string     = length($label)*$fontsize;

$im = new GD::Image($string,$heigth);   	# create new image size $string x $heigth

my $black = $im->colorAllocate(0,0,0);
$im->transparent($black);			# set which color is transparent

my $color = $im->colorAllocate(@@color); 

# write string   
#warn "rendering $label\n";
$im->stringTTF( $color,		# fgcolor 
d63 2
a64 1
		$label);	# string
d66 1
a66 1
#print $im->png; 
d68 3
a70 3
open (GD ,">$texdir/$file.png");
print GD $im->png; 
close (GD);
@


1.6
log
@minor changes in structure
@
text
@a16 1
my $color = shift;	## color of string
d20 1
d22 1
a22 1
my $md5string = &MD5($label,$color,$font,$fontsize);
d24 2
a25 2
if (! -e "png/$md5string.png" ) {
  &GenerateTexture($label,$color,$font,$fontsize,$md5string,$texdir);
d36 1
a36 1
my $color = shift;
d38 1
a38 1
my $fontsize = shift;
d57 1
a57 1
my ($label,$labelcolor,$file,$directory,$font,$fontname,$fontsize,$heigth,$string,$color);
a59 1
my $labelcolor = shift;
d64 1
d70 1
a70 1
$im = new GD::Image($string,$heigth);   # create new image size $string x $heigth
a71 2
# create variable which represent individual color 
#$white = $im->colorAllocate(255,255,255);
d73 3
a75 7
if (     $labelcolor eq 'black') {$color = $im->colorAllocate(0,0,0);  }
  elsif ($labelcolor eq 'red')   {$color = $im->colorAllocate(255,0,0);}
  elsif ($labelcolor eq 'green') {$color = $im->colorAllocate(0,255,0);}
  elsif ($labelcolor eq 'blue')  {$color = $im->colorAllocate(0,0,255);}
  elsif ($labelcolor eq 'white') {$color = $im->colorAllocate(250,250,250);return $color};
  
$im->transparent($black);	# set which color is transparent
@


1.5
log
@added path to cache of textures
@
text
@d16 5
a20 5
my $label = shift;
my $color = shift;
my $font  = shift;
my $fontsize = shift;
my $texdir = shift;
@


1.4
log
@ID from label,color,font,fontsize
@
text
@a7 1

d20 1
d25 1
a25 1
  &GenerateTexture($label,$color,$font,$fontsize,$md5string);
d64 1
d95 1
a95 1
open (GD ,">png/$file.png");
@


1.3
log
@added cache textures
@
text
@d19 2
d22 1
a22 1
my $md5string = &MD5($label,$color);
d25 1
a25 1
  &GenerateTexture($label,$color,$md5string);
d36 3
a38 1
my $color = shift; 
d43 2
d57 1
a57 1
my ($label,$labelcolor,$file,$directory,$font,$heigth,$string,$color);
d59 9
a67 7
 $label = shift;
 $labelcolor = shift;
 $file = shift;
 $directory  =  FONT_DIRECTORY;
 $font 	     = "$directory/luximb.ttf"; 					##"$directory/luximb.ttf";
 $heigth     = 20;
 $string     = length($label)*14;
d86 1
a86 1
		14.0,		# pointsize
d89 1
a89 1
		16,		# y coordinate to start drawing the string
@


1.2
log
@added algorithm for generate UIN string from label and color
@
text
@d22 1
a22 1
if ( not ( &Cache($string) ) ) {
a41 9
}

#---------------------------------------------------------------------------------------------------------------------------------------------

sub Cache {
my $string = shift;


return (0);
@


1.1
log
@module for generate textures
@
text
@d8 1
a8 1
use GD;
d11 19
a29 1
@@EXPORT = qw(&GenerateTexture);
d31 21
d56 1
d60 2
d64 1
a69 1

d74 1
a74 1
$black = $im->colorAllocate(0,0,0);
d95 1
a95 1
open (GD ,">png/$label.png");
@


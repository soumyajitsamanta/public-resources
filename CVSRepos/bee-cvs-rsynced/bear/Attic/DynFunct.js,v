head	1.11;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2003.02.26.13.21.31;	author jiri_schmid;	state dead;
branches;
next	1.10;

1.10
date	2003.01.16.17.20.19;	author spanhel;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.03.11.22.03;	author michald;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.26.12.44.36;	author spanhel;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.26.08.08.29;	author michald;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.12.10.25.52;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.10.17.17.27;	author michald;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.07.16.32.35;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.01.14.56.11;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.30.10.02.21;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.56.46;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.56.46;	author michald;	state Exp;
branches;
next	;


desc
@@


1.11
log
@huge javascript optimalization, also files moved to directory js
@
text
@// $Id: DynFunct.js,v 1.10 2003/01/16 17:20:19 spanhel Exp $

var _metrics;
var _metricsS="-METRICS-";
var _noneS="-none-";

// during saving object is necessary select all item in SELECT object
// e.g. RowObj, ColObj, PageObj and Metrics, as only selected items 
// are saved
function setAll(list) {
   var i;
   var len;
   len = list.options.length;
   if (list.options[0].value==_noneS ) {
      list.options[0].selected=false;
   } else {
      list.options[0].selected=true;
   }
   for (i=1; i<len; i++) {
      list.options[i].selected=true;
   }
}

function resetAll(list) {
   var i;
   var len;
   len = list.options.length;
   for (i=0; i<len; i++) {
      list.options[i].selected=false;
   }
}

function upItems(fromList) {
// move up selected items in fromList

  var len;
  var pok;
  var i;
  len = fromList.options.length; // count of item in listbox

  if (len!=1) // for len==1 nothing do
  {
    if (!fromList.options[0].selected) //nothing for first selected item
    {
       for (i=1; i<len; i++) {
  	 if (fromList.options[i].selected)  //  i found relevant selected item
	 {
	   var aux;
	   aux = fromList.options[i-1].text;
	   fromList.options[i-1].text=fromList.options[i].text;
	   fromList.options[i-1].value=fromList.options[i].value;
	   fromList.options[i].text=aux;
  	   fromList.options[i].value=aux;
   	   fromList.options[i-1].selected=true;
   	   fromList.options[i].selected=false;
  	   i=len+1; // stop for cycle
	 }
       } // end for 
    }
  }

}

function downItems(fromList) {
// move down selected items in fromList
  var len;
  var pok;
  var i;
  len = fromList.options.length; // count of item in listbox
  if (len!=1) // for len==1 nothing do
  {
    if (!fromList.options[len-1].selected) //nothing do for last selected item
    {
       for (i=0; i<(len-1); i++) {
  	 if (fromList.options[i].selected)  //  i found relevant selected item
	 {
	   var aux;
	   aux = fromList.options[i+1].text;
	   fromList.options[i+1].text=fromList.options[i].text;
	   fromList.options[i+1].value=fromList.options[i].value;
	   fromList.options[i].text=aux;
  	   fromList.options[i].value=aux;
   	   fromList.options[i+1].selected=true;
   	   fromList.options[i].selected=false;
	   i=len+1; // stop for cycle
	 }
       } // end for 
    }
  }

}

function moveItems(fromList, toList) {
//move selected items from fromList to sTlist referenced by object
	var oForm = document.PromptForm;
	var i;
	var len;
	var selArray = new Array();

	// add to right-side
	len = fromList.options.length;
	for (i=0; i<len; i++)
	{
		if (fromList.options[i].selected && fromList.options[i].text!=_noneS)
		{
			if (toList.options.length==1)	//replace -none- with an item
			{
				if (toList.options[0].text==_noneS )
				{
					toList.options[0] = null;
				}
			}
			var option = new Option(fromList.options[i].text, fromList.options[i].value, false, false)
			toList.options[toList.length] = option;
			toList.options[toList.length-1].selected = false;
	    	option = null;
	    }
	}

	//put left-side seleted into a temp array
	for (i=len-1;i>=0;i--) 
	{
	    if (fromList.options[i].selected)
		{
			fromList.options[i].selected = false;
			selArray[selArray.length] = i;
		}
	}

	for (i=0; i<selArray.length; i++)
	{	
		fromList.options[selArray[i]] = null;      
	}

	if (fromList.options.length==0)	 //put -none- when no items
	{
		insert_none(fromList);
//		var option = new Option("-none-", "-none-", false, false)
//		fromList.options[fromList.length] = option;
//		fromList.options[fromList.length-1].selected = false;
//		option = null;
	}
	fromList.options[0].selected = true;
}

function tree2select(toList,tree) {
  if(GID!="-1") {
    var item = find_node(tree)
    if ((item[3]!="D") && (item[3]!="R")) {
      //Form ... Customer.email ... not only email
      var node_id="ndf";
      var nn = item[0].indexOf('.')	
      if (nn!=-1) node_id = item[0].substring(0,nn);      			
      var aux = find_item(tree,node_id);       
      var txt=item[2];
      if (aux!=-1) {
	      txt= aux[2]+"."+item[2];
	      if (toList.length==1 && toList.options[0].text==_noneS) {
        	toList.options[0].text = txt;
        	toList.options[0].value = item[2];
	      }
	      else {
        	var option = new Option(txt, item[2], false, false)
        	toList.options[toList.length] = option;
        	option = null;
	      }	
      }	      
    }  
  }
  _metrics =item[2];
}

function tree2selectM(toList,tree) {
   if(GID!="-1") {
     var item = find_node(tree)
     if (item[3]=="M") {
       if (toList.options[0].text==_noneS) {
     //  if (toList.length==1 && toList.options[0].text==_noneS) {
         toList.options[0].text = item[2];
         toList.options[0].value = item[2];
       }
       else {
         var option = new Option(item[2], item[2], false, false)
         toList.options[toList.length] = option;
         option = null;
       }
       	
       if (toList.length==2) { // put metrics into Colums object only for two and more metrics
    	 var option = new Option(_metricsS,_metricsS, false, false);
    	 if (document.grid.ColObj.length) {
           if (document.grid.ColObj.options[0].text==_noneS) document.grid.ColObj.options[0] = option;  
           else document.grid.ColObj.options[document.grid.ColObj.length] = option;     
           option = null;     
    	}
      }  
    }  
  }
}


function select2tree(toList) {  
  var aux = toList.selectedIndex;
  if (aux!=-1) {  // something is selected     
     if (toList.length==2) { // delete -METRICS- from PageObj or RowObj or ColObj
       del_mtrs(document.grid.PageObj); 
       del_mtrs(document.grid.ColObj); 
       del_mtrs(document.grid.RowObj); 
     }       
     toList.options[aux]=null;     // delete relevant item
     if (aux > 0) toList.selectedIndex=aux-1;
     else toList.selectedIndex=0;
     
     if (toList.length==0) insert_none(toList)  // empty select, insert -none-
  }
}


function insert_none(ll) {
   var option = new Option(_noneS, _noneS, false, false)
   ll.options[0] = option;  
   option = null;
} 

function del_mtrs(ll) {
  var cnt = ll.length
  for (var i=0; i<cnt; i++) {
    if (ll.options[i].text == _metricsS)  {
      ll.options[i]=null;     // delete relevant item
      return true;
    }  
  }
} 


@


1.10
log
@change edit.cgi - tree and object edit desided into two iframes
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.8 2002/11/26 12:44:36 spanhel Exp $
@


1.9
log
@hard connection to test project in *_ed.pl wa removed
@
text
@d1 234
a234 247
// $Id: DynFunct.js,v 1.8 2002/11/26 12:44:36 spanhel Exp $

var _metrics;
var _metricsS="-METRICS-";
var _noneS="-none-";

function setAll(list) {
   var i;
   var len;
   len = list.options.length;
   if (list.options[0].value==_noneS ) {
      list.options[0].selected=false;
   } else {
      list.options[0].selected=true;
   }
   for (i=1; i<len; i++) {
      list.options[i].selected=true;
   }
}

function resetAll(list) {
   var i;
   var len;
   len = list.options.length;
   for (i=0; i<len; i++) {
      list.options[i].selected=false;
   }
}

function upItems(fromList) {
// move up selected items in fromList

  var len;
  var pok;
  var i;
  len = fromList.options.length; // count of item in listbox

  if (len!=1) // for len==1 nothing do
  {
    if (!fromList.options[0].selected) //nothing for first selected item
    {
       for (i=1; i<len; i++) {
  	 if (fromList.options[i].selected)  //  i found relevant selected item
	 {
	   var aux;
	   aux = fromList.options[i-1].text;
	   fromList.options[i-1].text=fromList.options[i].text;
	   fromList.options[i-1].value=fromList.options[i].value;
	   fromList.options[i].text=aux;
  	   fromList.options[i].value=aux;
   	   fromList.options[i-1].selected=true;
   	   fromList.options[i].selected=false;
  	   i=len+1; // stop for cycle
	 }
       } // end for 
    }
  }

}

function downItems(fromList) {
// move down selected items in fromList
  var len;
  var pok;
  var i;
  len = fromList.options.length; // count of item in listbox
  if (len!=1) // for len==1 nothing do
  {
    if (!fromList.options[len-1].selected) //nothing do for last selected item
    {
       for (i=0; i<(len-1); i++) {
  	 if (fromList.options[i].selected)  //  i found relevant selected item
	 {
	   var aux;
	   aux = fromList.options[i+1].text;
	   fromList.options[i+1].text=fromList.options[i].text;
	   fromList.options[i+1].value=fromList.options[i].value;
	   fromList.options[i].text=aux;
  	   fromList.options[i].value=aux;
   	   fromList.options[i+1].selected=true;
   	   fromList.options[i].selected=false;
	   i=len+1; // stop for cycle
	 }
       } // end for 
    }
  }

}

function moveItems(fromList, toList) {
//move selected items from fromList to sTlist referenced by object
	var oForm = document.PromptForm;
	var i;
	var len;
	var selArray = new Array();

	// add to right-side
	len = fromList.options.length;
	for (i=0; i<len; i++)
	{
		if (fromList.options[i].selected && fromList.options[i].text!=_noneS)
		{
			if (toList.options.length==1)	//replace -none- with an item
			{
				if (toList.options[0].text==_noneS )
				{
					toList.options[0] = null;
				}
			}
			var option = new Option(fromList.options[i].text, fromList.options[i].value, false, false)
			toList.options[toList.length] = option;
			toList.options[toList.length-1].selected = false;
	    	option = null;
	    }
	}

	//put left-side seleted into a temp array
	for (i=len-1;i>=0;i--) 
	{
	    if (fromList.options[i].selected)
		{
			fromList.options[i].selected = false;
			selArray[selArray.length] = i;
		}
	}

	for (i=0; i<selArray.length; i++)
	{	
		fromList.options[selArray[i]] = null;      
	}

	if (fromList.options.length==0)	 //put -none- when no items
	{
		insert_none(fromList);
//		var option = new Option("-none-", "-none-", false, false)
//		fromList.options[fromList.length] = option;
//		fromList.options[fromList.length-1].selected = false;
//		option = null;
	}
	fromList.options[0].selected = true;
}

function tree2select(toList,tree) {

  if(GID!="-1") {
    var item = find_node(tree)
    if ((item[3]!="D") && (item[3]!="R")) {
      //Form ... Customer.email ... not only email
      var node_id="ndf";
      var nn = item[0].indexOf('.')	
      if (nn!=-1) node_id = item[0].substring(0,nn);      			
      var aux = find_item(tree,node_id);       
      var txt=item[2];
      if (aux!=-1) txt= aux[2]+"."+item[2];
      if (toList.length==1 && toList.options[0].text==_noneS) {
        toList.options[0].text = txt;
        toList.options[0].value = item[2];
      }
      else {
        var option = new Option(txt, item[2], false, false)
        toList.options[toList.length] = option;
        option = null;
      }	
    }  
  }
  _metrics =item[2];
}

function tree2selectM(toList,tree) {
   if(GID!="-1") {
     var item = find_node(tree)
     if (item[3]=="M") {
       if (toList.options[0].text==_noneS) {
     //  if (toList.length==1 && toList.options[0].text==_noneS) {
         toList.options[0].text = item[2];
         toList.options[0].value = item[2];
       }
       else {
         var option = new Option(item[2], item[2], false, false)
         toList.options[toList.length] = option;
         option = null;
       }
       	
       if (toList.length==2) { // put metrics into Colums object only for two and more metrics
    	 var option = new Option(_metricsS,_metricsS, false, false);
    	 if (document.grid.ColObj.length) {
           if (document.grid.ColObj.options[0].text==_noneS) document.grid.ColObj.options[0] = option;  
           else document.grid.ColObj.options[document.grid.ColObj.length] = option;     
           option = null;     
    	}
      }  
    }  
  }
}

function aaa(k) {
  alert(k);
}

function select2tree(toList) {  
  var aux = toList.selectedIndex;
  if (aux!=-1) {  // something is selected     
     if (toList.length==2) { // delete -METRICS- from PageObj or RowObj or ColObj
       del_mtrs(document.grid.PageObj); 
       del_mtrs(document.grid.ColObj); 
       del_mtrs(document.grid.RowObj); 
     }       
     toList.options[aux]=null;     // delete relevant item
     if (aux > 0) toList.selectedIndex=aux-1;
     else toList.selectedIndex=0;
     
     if (toList.length==0) insert_none(toList)  // empty select, insert -none-
  }
}


function insert_none(ll) {
   var option = new Option(_noneS, _noneS, false, false)
   ll.options[0] = option;  
   option = null;
} 

function del_mtrs(ll) {
  var cnt = ll.length
  for (var i=0; i<cnt; i++) {
    if (ll.options[i].text == _metricsS)  {
      ll.options[i]=null;     // delete relevant item
      return true;
    }  
  }
} 

function find_item(tt,n) {
// finds node id n in tree tt
  var k;
  var item;
  for (k=0;k<tt.length;k++) {
     item = tt[k].split("|");
     if (item[0]==n) return item;    
  }
  return -1;
}

// format_ed.pl - 
function action() {
  alert(document.format.style[0].checked);
}
@


1.8
log
@two types of format grid and graph
@
text
@d1 247
a247 247
// $Id: DynFunct.js,v 1.7 2002/11/26 08:08:29 michald Exp $

var _metrics;
var _metricsS="-METRICS-";
var _noneS="-none-";

function setAll(list) {
   var i;
   var len;
   len = list.options.length;
   if (list.options[0].value==_noneS ) {
      list.options[0].selected=false;
   } else {
      list.options[0].selected=true;
   }
   for (i=1; i<len; i++) {
      list.options[i].selected=true;
   }
}

function resetAll(list) {
   var i;
   var len;
   len = list.options.length;
   for (i=0; i<len; i++) {
      list.options[i].selected=false;
   }
}

function upItems(fromList) {
// move up selected items in fromList

  var len;
  var pok;
  var i;
  len = fromList.options.length; // count of item in listbox

  if (len!=1) // for len==1 nothing do
  {
    if (!fromList.options[0].selected) //nothing for first selected item
    {
       for (i=1; i<len; i++) {
  	 if (fromList.options[i].selected)  //  i found relevant selected item
	 {
	   var aux;
	   aux = fromList.options[i-1].text;
	   fromList.options[i-1].text=fromList.options[i].text;
	   fromList.options[i-1].value=fromList.options[i].value;
	   fromList.options[i].text=aux;
  	   fromList.options[i].value=aux;
   	   fromList.options[i-1].selected=true;
   	   fromList.options[i].selected=false;
  	   i=len+1; // stop for cycle
	 }
       } // end for 
    }
  }

}

function downItems(fromList) {
// move down selected items in fromList
  var len;
  var pok;
  var i;
  len = fromList.options.length; // count of item in listbox
  if (len!=1) // for len==1 nothing do
  {
    if (!fromList.options[len-1].selected) //nothing do for last selected item
    {
       for (i=0; i<(len-1); i++) {
  	 if (fromList.options[i].selected)  //  i found relevant selected item
	 {
	   var aux;
	   aux = fromList.options[i+1].text;
	   fromList.options[i+1].text=fromList.options[i].text;
	   fromList.options[i+1].value=fromList.options[i].value;
	   fromList.options[i].text=aux;
  	   fromList.options[i].value=aux;
   	   fromList.options[i+1].selected=true;
   	   fromList.options[i].selected=false;
	   i=len+1; // stop for cycle
	 }
       } // end for 
    }
  }

}

function moveItems(fromList, toList) {
//move selected items from fromList to sTlist referenced by object
	var oForm = document.PromptForm;
	var i;
	var len;
	var selArray = new Array();

	// add to right-side
	len = fromList.options.length;
	for (i=0; i<len; i++)
	{
		if (fromList.options[i].selected && fromList.options[i].text!=_noneS)
		{
			if (toList.options.length==1)	//replace -none- with an item
			{
				if (toList.options[0].text==_noneS )
				{
					toList.options[0] = null;
				}
			}
			var option = new Option(fromList.options[i].text, fromList.options[i].value, false, false)
			toList.options[toList.length] = option;
			toList.options[toList.length-1].selected = false;
	    	option = null;
	    }
	}

	//put left-side seleted into a temp array
	for (i=len-1;i>=0;i--) 
	{
	    if (fromList.options[i].selected)
		{
			fromList.options[i].selected = false;
			selArray[selArray.length] = i;
		}
	}

	for (i=0; i<selArray.length; i++)
	{	
		fromList.options[selArray[i]] = null;      
	}

	if (fromList.options.length==0)	 //put -none- when no items
	{
		insert_none(fromList);
//		var option = new Option("-none-", "-none-", false, false)
//		fromList.options[fromList.length] = option;
//		fromList.options[fromList.length-1].selected = false;
//		option = null;
	}
	fromList.options[0].selected = true;
}

function tree2select(toList,tree) {

  if(GID!="-1") {
    var item = find_node(tree)
    if ((item[3]!="D") && (item[3]!="R")) {
      //Form ... Customer.email ... not only email
      var node_id="ndf";
      var nn = item[0].indexOf('.')	
      if (nn!=-1) node_id = item[0].substring(0,nn);      			
      var aux = find_item(tree,node_id);       
      var txt=item[2];
      if (aux!=-1) txt= aux[2]+"."+item[2];
      if (toList.length==1 && toList.options[0].text==_noneS) {
        toList.options[0].text = txt;
        toList.options[0].value = item[2];
      }
      else {
        var option = new Option(txt, item[2], false, false)
        toList.options[toList.length] = option;
        option = null;
      }	
    }  
  }
  _metrics =item[2];
}

function tree2selectM(toList,tree) {
   if(GID!="-1") {
     var item = find_node(tree)
     if (item[3]=="M") {
       if (toList.options[0].text==_noneS) {
     //  if (toList.length==1 && toList.options[0].text==_noneS) {
         toList.options[0].text = item[2];
         toList.options[0].value = item[2];
       }
       else {
         var option = new Option(item[2], item[2], false, false)
         toList.options[toList.length] = option;
         option = null;
       }
       	
       if (toList.length==2) { // put metrics into Colums object only for two and more metrics
    	 var option = new Option(_metricsS,_metricsS, false, false);
    	 if (document.grid.ColObj.length) {
           if (document.grid.ColObj.options[0].text==_noneS) document.grid.ColObj.options[0] = option;  
           else document.grid.ColObj.options[document.grid.ColObj.length] = option;     
           option = null;     
    	}
      }  
    }  
  }
}

function aaa(k) {
  alert(k);
}

function select2tree(toList) {  
  var aux = toList.selectedIndex;
  if (aux!=-1) {  // something is selected     
     if (toList.length==2) { // delete -METRICS- from PageObj or RowObj or ColObj
       del_mtrs(document.grid.PageObj); 
       del_mtrs(document.grid.ColObj); 
       del_mtrs(document.grid.RowObj); 
     }       
     toList.options[aux]=null;     // delete relevant item
     if (aux > 0) toList.selectedIndex=aux-1;
     else toList.selectedIndex=0;
     
     if (toList.length==0) insert_none(toList)  // empty select, insert -none-
  }
}


function insert_none(ll) {
   var option = new Option(_noneS, _noneS, false, false)
   ll.options[0] = option;  
   option = null;
} 

function del_mtrs(ll) {
  var cnt = ll.length
  for (var i=0; i<cnt; i++) {
    if (ll.options[i].text == _metricsS)  {
      ll.options[i]=null;     // delete relevant item
      return true;
    }  
  }
} 

function find_item(tt,n) {
// finds node id n in tree tt
  var k;
  var item;
  for (k=0;k<tt.length;k++) {
     item = tt[k].split("|");
     if (item[0]==n) return item;    
  }
  return -1;
}

// format_ed.pl - 
function action() {
  alert(document.format.style[0].checked);
}
@


1.7
log
@name to ID translation
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.6 2002/11/12 10:25:52 spanhel Exp $
d242 5
@


1.6
log
@laoding saved metadata + adding and removing _METRICS_ (grid_ed.pl)
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.5 2002/11/10 17:17:27 michald Exp $
d4 3
d11 1
a11 1
   if (list.options[0].value=="-none-" ) {
d101 1
a101 1
		if (fromList.options[i].selected && fromList.options[i].text!="-none-")
d105 1
a105 1
				if (toList.options[0].text=="-none-" )
d155 1
a155 1
      if (toList.length==1 && toList.options[0].text=="-none-") {
d173 2
a174 2
       if (toList.options[0].text=="-none-") {
     //  if (toList.length==1 && toList.options[0].text=="-none-") {
d185 1
a185 1
    	 var option = new Option("_METRICS_","_METRICS_", false, false);
d187 1
a187 1
           if (document.grid.ColObj.options[0].text=="-none-") document.grid.ColObj.options[0] = option;  
d203 1
a203 1
     if (toList.length==2) { // delete _METRICS_ from PageObj or RowObj or ColObj
d218 1
a218 1
   var option = new Option("-none-", "-none-", false, false)
d226 1
a226 1
    if (ll.options[i].text == "_METRICS_")  {
@


1.5
log
@saving object metadata
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.4 2002/11/07 16:32:35 spanhel Exp $
d154 1
a154 1
        toList.options[0].value = txt;
d157 1
a157 1
        var option = new Option(txt, txt, false, false)
d170 2
a171 1
       if (toList.length==1 && toList.options[0].text=="-none-") {
d179 4
a182 3
       }	
       if (toList.length>1) { // put metrics into Colums object
    	 var option = new Option("-METRICS-","-METRICS-", false, false);
d189 1
a189 1
	}  
d193 3
d197 1
a197 1
function select2tree(toList) {
d199 7
a205 2
  if (aux!=-1) { // something is selected     
     toList.options[aux]=null;     
d208 2
a210 1
 if (toList.length==0) insert_none(toList)
d218 10
@


1.4
log
@additional parametrs - grid_ed.pl
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.3 2002/10/01 14:56:11 spanhel Exp $
d168 20
a187 20
    var item = find_node(tree)
    if (item[3]=="M") {
      if (toList.length==1 && toList.options[0].text=="-none-") {
        toList.options[0].text = item[2];
        toList.options[0].value = item[2];
      }
      else {
        var option = new Option(item[2], item[2], false, false)
        toList.options[toList.length] = option;
        option = null;
      }	
      if (toList.length==1) { // put metrics into Colums object
      var option = new Option(item[2],item[2], false, false);
      if (document.grid.ColObj.length) {
        if (document.grid.ColObj.options[0].text=="-none-") document.grid.ColObj.options[0] = option;  
        else document.grid.ColObj.options[document.grid.ColObj.length] = option;     
        option = null;     
     }
   }  
    }  
a188 2

  
@


1.3
log
@tree added global ID node
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.2 2002/09/30 10:02:21 michald Exp $
d141 1
d145 7
d153 2
a154 2
        toList.options[0].text = item[2];
        toList.options[0].value = item[2];
d157 1
a157 1
        var option = new Option(item[2], item[2], false, false)
d209 12
a220 1
} @


1.2
log
@client metadata connection, client tree presentation
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.1.1.1 2002/09/24 01:56:46 michald Exp $
a42 1
//	   alert(fromList.options[i].text);
d95 1
a95 1
	len = fromList.options.length;	
d98 1
a98 1
		if (fromList.options[i].selected && fromList.options[i].value!="-none-")
d102 1
a102 1
				if (toList.options[0].value=="-none-" )
d141 1
a141 1
  if (exist_id('id')) {
d159 22
a180 6
   tree2select();
   if (toList.length==1) { // put metrics into Colums object
     var option = new Option(_metrics,_metrics, false, false)
     document.grid.ColObj.options[document.grid.ColObj.length] = option;  
     option = null;
   }
d182 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $Id: DynFunct.js,v 1.2 2002/09/23 08:48:26 spanhel Exp $
d3 1
d29 1
a29 1
  
d34 1
d43 3
a45 2
	   aux = fromList.options[i-1].value;
	   fromList.options[i-1].text=fromList.options[i].value;
d56 1
d73 2
a74 2
	   aux = fromList.options[i+1].value;
	   fromList.options[i+1].text=fromList.options[i].value;
d85 1
d132 5
a136 4
		var option = new Option("-none-", "-none-", false, false)
		fromList.options[fromList.length] = option;
		fromList.options[fromList.length-1].selected = false;
		option = null;
d141 45
@


1.1.1.1
log
@Initial release of Bear ROLAP Portal
@
text
@@

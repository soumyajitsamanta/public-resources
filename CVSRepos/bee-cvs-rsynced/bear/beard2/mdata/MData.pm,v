head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2004.03.23.07.33.32;	author numberone;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.01.16.16.49;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
beard2/cached

funkcni metoda 'start <report_id>' (krome samotneho vraceni dotazu)

xml konfigurace prepsana na includovany .pm soubor

do MData.pm pripravena metoda get_report a sql_gen pro cached
@
text
@
package MData;

use Switch;
use etc::bear;

my %data;

# --------  init   --------------

# volano pri startu ./mdata.pl
# nacteni metadat, directed graphu..
sub init {
	my($self) = @@_;
}

# -------- mdata-ro --------------

sub read_call {
	my $self   = shift;
	my $method = shift;

	# zjisti pozadovanou odpoved
	if($method eq 'echo') {
		my($key) = @@_;
		return [ $data{$key} ];
	} elsif($method eq $Config::API::get_report) {
		my($report_id) = shift;
		return {
				'select' => [ "id","fakt","rok" ],
				'report' => $report_id,
				'where'  => "den = 0",
				'join'   => "mesice.id = prodej.id",
				'from'   => [
					{ 
						'select' => [ "mesic", ],
						'where'  => "den = 0",
						'join'   => "mesice.id = prodej.id",
						'from'	 => [
							{
								'select' => [ "den" ],
							}
						]
					},
					{ 
					'select' => [ "id","fakt" ],
							'where'  => "den = 0",
					'join'   => "mesice.id = prodej.id",
					},
				]
			};

	} elsif($method eq $Config::API::sql_gen) {
		my($tree,$md5,@@deps) = @@_;
		return [ \%Config::DW_db,  # TODO: placeholders in SELECT ?
				 [qw/c1 c2 c3/],
				 "CREATE TABLE ? (c1 INTEGER,c2 INTEGER,c3 INTEGER)",
				 "SELECT ... INTO $md5 FROM ".join(", ",@@deps) ];
	}
}

sub update {
	my($self,$set) = @@_;

	# aplikuj zmenu popsanou hashem $set

	my($key,$value) = @@$set;
	$data{$key} = $value;
}


# -------- mdata-rw --------------

sub write_call {
	my $self   = shift;
	my $method = shift;

	my $result; # hash s odpovedi
	my @@set;    # seznam zmen pro update()

	# vykonej pozadovanou funkci, pripadne napln @@set

	switch($method) {
		case 'set' {
			push @@set, [@@_];
			$result = [1]; # ok
		}

		# case '...' { ... }
	}

	return ($result,@@set);
}

1;
@


1.1
log
@
Added beard2 -- new bear daemon source tree.

mdata subsystem works, some docs, some tests, etc.

cached in progress
@
text
@d5 1
d14 1
a14 1
	my($self,$conf) = @@_;
a22 2
	my $result; # hash s odpovedi

d24 35
a58 6
	switch($method) {
		case 'echo' {
			my $key = shift;
			$result = $data{$key};
		}
		# case '...' { ... }
a59 2

	return [$result];
@


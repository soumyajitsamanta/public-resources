head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2004.03.23.07.33.25;	author numberone;	state dead;
branches;
next	1.1;

1.1
date	2004.03.01.16.16.48;	author numberone;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
beard2/cached

funkcni metoda 'start <report_id>' (krome samotneho vraceni dotazu)

xml konfigurace prepsana na includovany .pm soubor

do MData.pm pripravena metoda get_report a sql_gen pro cached
@
text
@#!/usr/bin/perl -w

BEGIN { chdir '..' if($0 =~ /^\.\/[^\/]+$/ or $0 !~ /\//); }

use DBI;
use DBD::SQLite;
use Getopt::Std;
use Data::Dumper;

use lib "lib";

use beard;

our($opt_f);
getopt("f:");

my $bear_conf = beard->read_conf($opt_f);
my $conf = $bear_conf->{cached};

my $dbh;
my $cachefile = $conf->{'cache-file'};
my $dbi_datasource = "dbi:SQLite:dbname=$cachefile";

unless(-e $cachefile) {
	warn "creating cache...\n";

	$dbh = DBI->connect($dbi_datasource,"","") or die;

	my $pool = $conf->{'table-pool'}->{pool};

	$dbh->do("BEGIN");
	foreach my $cols (sort {$a <=> $b} keys %$pool) {
		my $number = $pool->{$cols}->{number};
		print "creating pool of ".$number." tables with $cols cols\n";
		for(my $i=0;$i<$number;$i++) {
			my $sqldef = "c1";
			for(my $j=2;$j<=$cols;$j++) { $sqldef .= ",c$j" };
			my $table = "t".$cols."_".$i;
			$dbh->do("CREATE TABLE $table (".$sqldef.")");
		}
	}
	$dbh->do("COMMIT");

} else {
	$dbh = DBI->connect($dbi_datasource,"","") or die;

}

@


1.1
log
@
Added beard2 -- new bear daemon source tree.

mdata subsystem works, some docs, some tests, etc.

cached in progress
@
text
@@


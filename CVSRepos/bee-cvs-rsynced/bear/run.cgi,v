head	1.115;
access;
symbols
	start:1.1.1.1 vendor:1.1.1;
locks; strict;
comment	@# @;


1.115
date	2004.04.26.18.08.40;	author vasekd;	state Exp;
branches;
next	1.114;

1.114
date	2004.03.27.09.00.17;	author michald;	state Exp;
branches;
next	1.113;

1.113
date	2004.03.10.19.02.23;	author vasekd;	state Exp;
branches;
next	1.112;

1.112
date	2004.03.10.16.04.35;	author jiri_schmid;	state Exp;
branches;
next	1.111;

1.111
date	2004.02.25.16.05.02;	author jiri_schmid;	state Exp;
branches;
next	1.110;

1.110
date	2004.02.18.16.19.06;	author jiri_schmid;	state Exp;
branches;
next	1.109;

1.109
date	2004.02.16.14.55.19;	author jiri_schmid;	state Exp;
branches;
next	1.108;

1.108
date	2004.02.16.09.36.58;	author vacula;	state Exp;
branches;
next	1.107;

1.107
date	2004.02.13.17.09.33;	author jiri_schmid;	state Exp;
branches;
next	1.106;

1.106
date	2004.02.10.14.46.54;	author jiri_schmid;	state Exp;
branches;
next	1.105;

1.105
date	2004.01.29.13.20.34;	author jiri_schmid;	state Exp;
branches;
next	1.104;

1.104
date	2004.01.29.12.45.46;	author vacula;	state Exp;
branches;
next	1.103;

1.103
date	2004.01.23.14.58.54;	author vacula;	state Exp;
branches;
next	1.102;

1.102
date	2004.01.16.12.27.37;	author jiri_schmid;	state Exp;
branches;
next	1.101;

1.101
date	2004.01.12.13.50.25;	author jiri_schmid;	state Exp;
branches;
next	1.100;

1.100
date	2004.01.09.13.44.35;	author vasekd;	state Exp;
branches;
next	1.99;

1.99
date	2004.01.09.13.23.56;	author vasekd;	state Exp;
branches;
next	1.98;

1.98
date	2004.01.09.13.22.50;	author vasekd;	state Exp;
branches;
next	1.97;

1.97
date	2004.01.09.13.14.47;	author vasekd;	state Exp;
branches;
next	1.96;

1.96
date	2004.01.09.12.56.21;	author jiri_schmid;	state Exp;
branches;
next	1.95;

1.95
date	2004.01.09.12.42.49;	author jiri_schmid;	state Exp;
branches;
next	1.94;

1.94
date	2004.01.09.08.04.28;	author jiri_schmid;	state Exp;
branches;
next	1.93;

1.93
date	2004.01.07.16.39.02;	author jiri_schmid;	state Exp;
branches;
next	1.92;

1.92
date	2004.01.07.16.26.55;	author jiri_schmid;	state Exp;
branches;
next	1.91;

1.91
date	2004.01.07.12.01.52;	author jiri_schmid;	state Exp;
branches;
next	1.90;

1.90
date	2004.01.06.08.17.34;	author jiri_schmid;	state Exp;
branches;
next	1.89;

1.89
date	2003.12.18.15.17.22;	author jiri_schmid;	state Exp;
branches;
next	1.88;

1.88
date	2003.12.18.12.59.51;	author jiri_schmid;	state Exp;
branches;
next	1.87;

1.87
date	2003.12.16.15.49.02;	author jiri_schmid;	state Exp;
branches;
next	1.86;

1.86
date	2003.12.16.13.44.20;	author jiri_schmid;	state Exp;
branches;
next	1.85;

1.85
date	2003.12.15.16.34.26;	author jiri_schmid;	state Exp;
branches;
next	1.84;

1.84
date	2003.12.15.15.16.00;	author jiri_schmid;	state Exp;
branches;
next	1.83;

1.83
date	2003.12.12.16.48.12;	author jiri_schmid;	state Exp;
branches;
next	1.82;

1.82
date	2003.12.12.12.12.06;	author jiri_schmid;	state Exp;
branches;
next	1.81;

1.81
date	2003.12.10.15.54.26;	author jiri_schmid;	state Exp;
branches;
next	1.80;

1.80
date	2003.12.04.14.04.13;	author jiri_schmid;	state Exp;
branches;
next	1.79;

1.79
date	2003.12.04.12.15.13;	author jiri_schmid;	state Exp;
branches;
next	1.78;

1.78
date	2003.12.04.10.44.06;	author jiri_schmid;	state Exp;
branches;
next	1.77;

1.77
date	2003.11.28.17.31.44;	author jiri_schmid;	state Exp;
branches;
next	1.76;

1.76
date	2003.11.28.14.49.42;	author jiri_schmid;	state Exp;
branches;
next	1.75;

1.75
date	2003.11.28.13.03.04;	author jiri_schmid;	state Exp;
branches;
next	1.74;

1.74
date	2003.11.28.07.05.33;	author michald;	state Exp;
branches;
next	1.73;

1.73
date	2003.11.27.16.40.57;	author jiri_schmid;	state Exp;
branches;
next	1.72;

1.72
date	2003.11.27.08.52.38;	author jiri_schmid;	state Exp;
branches;
next	1.71;

1.71
date	2003.11.25.16.44.53;	author jiri_schmid;	state Exp;
branches;
next	1.70;

1.70
date	2003.11.25.12.10.28;	author jiri_schmid;	state Exp;
branches;
next	1.69;

1.69
date	2003.11.24.10.06.19;	author jiri_schmid;	state Exp;
branches;
next	1.68;

1.68
date	2003.11.21.12.01.44;	author jiri_schmid;	state Exp;
branches;
next	1.67;

1.67
date	2003.11.21.09.00.56;	author jiri_schmid;	state Exp;
branches;
next	1.66;

1.66
date	2003.11.20.16.34.03;	author jiri_schmid;	state Exp;
branches;
next	1.65;

1.65
date	2003.11.20.15.47.28;	author jiri_schmid;	state Exp;
branches;
next	1.64;

1.64
date	2003.11.13.16.27.46;	author jiri_schmid;	state Exp;
branches;
next	1.63;

1.63
date	2003.11.12.09.58.49;	author jiri_schmid;	state Exp;
branches;
next	1.62;

1.62
date	2003.11.12.09.12.24;	author vacula;	state Exp;
branches;
next	1.61;

1.61
date	2003.11.11.14.03.03;	author jiri_schmid;	state Exp;
branches;
next	1.60;

1.60
date	2003.11.06.18.42.37;	author vacula;	state Exp;
branches;
next	1.59;

1.59
date	2003.11.04.15.18.54;	author jiri_schmid;	state Exp;
branches;
next	1.58;

1.58
date	2003.11.04.10.30.43;	author vacula;	state Exp;
branches;
next	1.57;

1.57
date	2003.11.04.09.38.41;	author jiri_schmid;	state Exp;
branches;
next	1.56;

1.56
date	2003.11.04.04.45.13;	author michald;	state Exp;
branches;
next	1.55;

1.55
date	2003.10.31.12.47.54;	author jiri_schmid;	state Exp;
branches;
next	1.54;

1.54
date	2003.10.16.14.08.51;	author jiri_schmid;	state Exp;
branches;
next	1.53;

1.53
date	2003.10.07.05.47.58;	author michald;	state Exp;
branches;
next	1.52;

1.52
date	2003.10.04.08.14.34;	author michald;	state Exp;
branches;
next	1.51;

1.51
date	2003.10.02.08.05.29;	author vacula;	state Exp;
branches;
next	1.50;

1.50
date	2003.09.30.07.10.53;	author michald;	state Exp;
branches;
next	1.49;

1.49
date	2003.09.29.05.43.13;	author michald;	state Exp;
branches;
next	1.48;

1.48
date	2003.09.25.12.42.09;	author vacula;	state Exp;
branches;
next	1.47;

1.47
date	2003.09.23.17.58.33;	author vacula;	state Exp;
branches;
next	1.46;

1.46
date	2003.09.22.14.15.01;	author jiri_schmid;	state Exp;
branches;
next	1.45;

1.45
date	2003.09.22.11.01.27;	author vacula;	state Exp;
branches;
next	1.44;

1.44
date	2003.09.03.15.10.42;	author jiri_schmid;	state Exp;
branches;
next	1.43;

1.43
date	2003.08.18.05.50.52;	author michald;	state Exp;
branches;
next	1.42;

1.42
date	2003.08.04.12.07.38;	author jiri_schmid;	state Exp;
branches;
next	1.41;

1.41
date	2003.08.04.09.51.25;	author jiri_schmid;	state Exp;
branches;
next	1.40;

1.40
date	2003.07.24.10.37.48;	author jiri_schmid;	state Exp;
branches;
next	1.39;

1.39
date	2003.07.18.10.50.59;	author jiri_schmid;	state Exp;
branches;
next	1.38;

1.38
date	2003.07.17.03.04.16;	author michald;	state Exp;
branches;
next	1.37;

1.37
date	2003.07.15.13.45.48;	author vacula;	state Exp;
branches;
next	1.36;

1.36
date	2003.07.08.07.12.02;	author jiri_schmid;	state Exp;
branches;
next	1.35;

1.35
date	2003.07.07.14.17.10;	author jiri_schmid;	state Exp;
branches;
next	1.34;

1.34
date	2003.07.04.15.28.39;	author michald;	state Exp;
branches;
next	1.33;

1.33
date	2003.07.04.14.29.27;	author jiri_schmid;	state Exp;
branches;
next	1.32;

1.32
date	2003.07.04.06.19.13;	author michald;	state Exp;
branches;
next	1.31;

1.31
date	2003.07.03.09.40.30;	author jiri_schmid;	state Exp;
branches;
next	1.30;

1.30
date	2003.07.02.13.44.29;	author jiri_schmid;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.30.09.14.30;	author jiri_schmid;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.26.09.31.40;	author jiri_schmid;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.25.15.40.25;	author jiri_schmid;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.24.15.17.39;	author jiri_schmid;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.19.14.59.41;	author jiri_schmid;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.18.10.53.05;	author jiri_schmid;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.18.08.06.49;	author jiri_schmid;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.18.07.04.33;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.17.08.45.46;	author jiri_schmid;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.16.12.20.23;	author jiri_schmid;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.16.11.09.08;	author jiri_schmid;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.16.08.33.02;	author jiri_schmid;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.13.11.32.50;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.12.08.44.22;	author jiri_schmid;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.09.14.50.23;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.09.13.50.57;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.08.15.41;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.14.47.34;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.13.15.18.56;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.01.15.40.15;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.30.14.45.40;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.30.09.53.35;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.24.12.17.43;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.18.12.04.32;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.12.16.32.44;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.30.06.36.20;	author michald;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.16.17.20.19;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.03.11.22.03;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.01.56.46;	author michald;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.01.56.46;	author michald;	state Exp;
branches;
next	;


desc
@@


1.115
log
@new format of table
@
text
@#!/usr/bin/perl
# $Id: run.cgi,v 1.114 2004/03/27 09:00:17 michald Exp $

use strict;
my $run_mod_perl = defined(&Apache::RequestRec::BINMODE);	# are we running under mod_perl?
if ($run_mod_perl) { Apache::RequestRec::BINMODE(':utf8') } else { binmode(STDOUT,":utf8");  }

use CGI qw( :standard );
use CGI::Pretty;
require "const/Const.pm";
require "local/Local.pm";
require "local/Run.pm";

# ---- init SOAP ---------
#-------------------------
our $load = 1;
if ($load) {	# ensure require will be performed only once in case of mod_perl execution
	eval "use SOAP::Lite +autodispatch => 
		uri => 'Bear', 
		proxy => ['http://$Const::bearHost:$Const::bearPort/', 
		options => {compress_threshold => $Const::compressThreshold}]; 
		1"
	or ( &Local::ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
	undef $load;
}
my $q = new CGI;

# --- test SOAP connection ---
#-----------------------------
my $serverVerbName="SOAP Server http://$Const::bearHost:$Const::bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	&Local::ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

# --- determine user and his preferences ---
my $variables = {};
$variables->{user} = $q->remote_user();
$variables->{skin} = ($q->param('Skin')) ? $q->param('Skin') : ($q->param('skin')) ? $q->param('skin') : "";
$variables->{skinPath} = ($variables->{skin}) ? "skins/$variables->{skin}/" : "";
$variables->{imgType} = 'png';#&Local::getImageType("$Const::myPath$variables->{skinPath}img/");
$variables->{useLang} = $q->param('Lang') ? $q->param('Lang') : $q->param('lang') ? $q->param('lang') : $Const::defaultLanguage;
$variables->{useEnc} = $Const::languages->{ $variables->{useLang} }->{enc};
$variables->{id} = $q->param('Prev') ? $q->param('OID') : ($q->param('item_id')) ? $q->param('item_id') : undef; #previus "Prev" report requested set old id (oid) instad of active report id
$variables->{oid} = $q->param('OID') ? $q->param('OID') : $variables->{id};
$variables->{section} = $q->param('section') ? $q->param('section') : 0;	#return into proper section of code, (skip getdynamic and directly set)
$variables->{section} = 0 if ($q->param('Prev') || $q->param('Reset'));	#when called for reseting params of for setting params of parent report
$variables->{suffix} = 'html';
$variables->{mp} = $run_mod_perl;
$variables->{proj} = $q->param('Proj');

# --- load message dictionary ---
require "lang/$variables->{useLang}.utf";

if (SOAP->CheckAccess('R',$variables->{user},$q->param('Proj'),$variables->{id},'E') == 2) {
# --- params presented, modify report request ---
if (defined $q->param('Params')) {
	my @@params = split(/,/, $q->param('Params'));
	$variables->{id} = $q->param('Did') if $q->param('Did');
	if ($params[1] eq 'export') {
		$variables->{export} = $params[2];
		if ($params[2] =~ /xls|doc|ppt/) {
			$variables->{suffix} = 'xls';
		} elsif ($params[2] eq 'pdf') {
			$variables->{suffix} = 'pdf';
		} elsif ($params[2] eq 'txt') {
			$variables->{suffix} = 'txt';
		} elsif ($params[2] eq 'png') {
			$variables->{suffix} = 'png';
		} elsif ($params[2] eq 'xml') {
			$variables->{suffix} = 'xml';
		}
	} elsif ($params[1] =~ /down|up|pivot|self/) {
		$variables->{id} = SOAP->ModifyReport($variables->{id},$variables->{user},$q->param('Params'),$variables->{useLang});
	}
}

#-------- section 0 get DP --------------------------
my $dynamics;
if ($variables->{section} < 1) {
	$dynamics = SOAP->GetDynamicParamsInReport($variables->{id},$variables->{useLang},$variables->{user});	#find dynamic params
	$variables->{section} = ($dynamics && (exists $dynamics->{defined})) ? 1 : 5; # 5 skip param handling, no dynamic params
	$variables->{section} = 4 if ($q->param('Reset') eq 'Reset' || $q->param('Prev') eq 'Prev'); #prev - reset of prev (parent) report, go directly to ask for params
}

#------- section 1 try to set new params ------------
if ($variables->{section} < 2) {
	my $setParams = &Run::setParams(\$variables,\$q) if $q->param('Dynamic') eq 'Submit'; #send new params and recieve whole params definition or result of substitution
	if (exists $setParams->{success}) {
		if ($setParams->{success}) {
			$dynamics = $setParams->{dynamics};	
			$variables->{orig_id} = $variables->{id}; #input ID
			$variables->{oid} = $q->param('OID') ? $q->param('OID') : $variables->{orig_id}; # the previous report input ID (old id)
			$variables->{id} = $setParams->{id};	#report ID after subst, same as input ID when no substitution
			$variables->{section} = 3;
		} else {
			$dynamics = $setParams;
			$variables->{section} = 4; #create param question and after submit try directly to set params
		}
	} else {
		$dynamics = $setParams if $q->param('Dynamic');	#after submit get params from &Run::setParams
		$variables->{section} = 2; #continue
	}
}

#------- section 2 try to substitute report params --
if ($variables->{section} < 3) {
	my $subst = SOAP->SubstituteParamsInReport($dynamics,$variables->{user},$variables->{useLang},$variables->{id}) if $dynamics->{defined}; #params for actual report are defined
	if ($subst->{success}) {
		$dynamics = $subst->{dynamics};	
		$variables->{orig_id} = $variables->{id}; #input ID
		$variables->{oid} = $q->param('OID') ? $q->param('OID') : $variables->{orig_id}; # the previous report input ID (old id)
		$variables->{id} = $subst->{id};	#report ID after subst, same as input ID when no substitution
		$variables->{section} = 3;
	} else {
		$variables->{section} = 4; #create param question and after submit try directly to set params
	}

}

#------- section 3 ask for values of params --------
if ($variables->{section} <= 4) {
	if (exists $dynamics->{defined}) {	#there are dynamic params in report
		if ($dynamics->{defined} && $variables->{section} < 4) {	#all params are deffined, and no reset request, add reset button into report
			$variables->{button} = "<br />&nbsp;<img src='$variables->{skinPath}/reset.png' style='cursor:pointer' onclick=\"doSubmit('RST')\" title='".$Const::lang->{$variables->{useLang}}{'Run Reset'}."' alt='reset' /><input type='submit' style='display:none' value='Reset' name='Reset' id='RST' />";
			$variables->{section} = 5;
		} else {
			$variables->{section} = 1; #create param question and next time return to set params
			&ask($variables,$q,$dynamics);	#uknown values of some params
		}
	}
} else {
	$variables->{orig_id} = $variables->{id} if !exists $variables->{orig_id}; #orig_id is same as curent report (no modification applyed)
}

#------- section 4 create report -------------------
if ($variables->{section} > 4) {
	$variables->{file} = "$Const::myPath$Const::cacheReport/$variables->{id}-$variables->{useLang}.$variables->{suffix}";
	&buildReport(\$variables,\$q) if (!-e "$variables->{file}" && $variables->{id}); #build report if is not cached in disk-cache
}

#------- section 5 send proper report type ---------
if (-e "$variables->{file}" && $variables->{section} > 4) {#file exists and no new params defined
	open(REPORT, "$variables->{file}");
	binmode(REPORT, ":utf8");
	if ($variables->{export} eq 'xls') {
		print $q->header(-type=>"application/vnd.ms-excel",-attachment=>'report.xls')
	} elsif ($variables->{export} eq 'doc') {
		print $q->header(-type=>"application/vnd.ms-word",-attachment=>'report.doc')
	} elsif ($variables->{export} eq 'ppt') {
		print $q->header(-type=>"application/vnd.ms-powerpoint",-attachment=>'report.ppt')
	} elsif ($variables->{export} eq 'pdf') {
		print $q->header(-type=>"application/pdf",-attachment=>'report.pdf')
	} elsif ($variables->{export} eq 'png') {
		print $q->header(-type=>"image/png",-attachment=>'report.png')
	} elsif ($variables->{export} eq 'txt') {
		print $q->header(-type=>"text/plain",-attachment=>'report.txt')
	} elsif ($variables->{export} eq 'xml') {
		print $q->header(-type=>"text/xml",-attachment=>'report.xml')
	} else {
		print $q->header(-charset=>$variables->{useEnc})
	}

	my $wb = $q->user_agent()=~/MSIE/ ? 'msie' : 'mozilla'; #web browser
	my $rwb = $q->user_agent()=~/MSIE/ ? 'mozilla' : 'msie';#reverse web browser
	while (my $out = <REPORT> ) {	#change path to right browser type, when file cached with other type
		if ($out =~ /^<style>|^<input/) {
			$out =~ s/$rwb/$wb/g;
		}#$variables
		print $out;
	}
	close(REPORT);
} elsif ($variables->{section} > 4) {	# error, the report wasnt generated
	print $q->header(-charset=>$variables->{useEnc});
	print $q->start_html;
	print "<div class='error'>Nothing to display.</div>";
	print $q->end_html;
}
} else {
	print $q->header(-charset=>$variables->{useEnc});
	print $q->start_html(-class=>"dynamics", -style=>{-src=>"$variables->{skinPath}css.css"});
	&Local::accessForbidden("$Const::lang->{$variables->{useLang}}{'Forbidden Object'} $Const::lang->{$variables->{useLang}}{'Forbidden E'}");
	print $q->end_html;
}


#---------------------------------------------------

sub buildReport() {
	my ($variables,$q) = (shift,shift); # pointer
	my $ID = $$variables->{id};
	my $obj = SOAP->GetMetadata($ID);
	my $data = ($$variables->{export} =~/xml|txt/) ? SOAP->GetResultName($ID,$$variables->{useLang}) : SOAP->GetResultWeb($ID,$$variables->{useLang});

	my $style;my $fid; #fid = format id
	if (ref($obj->{'report'}{$ID}{'format_def'}) =~ /HASH/) {
		$style = $obj->{'report'}{$ID}{'format_def'};
		$fid = $style->{'orig_id'};
	} elsif ($obj->{'report'}{$ID}{'format_def'}) {
		$fid = $obj->{'report'}{$ID}{'format_def'};
		my $x = SOAP->GetMetadata($fid);
		my $subType = (keys %{$x})[0];
		$style = $x->{$subType}->{$fid};
	} else {
		$style->{type} = "grid";
		$style->{form} = "default";
		$style->{header} = "noneHeader";
	};

	my $styleHash;
	if ($$variables->{export}) {
		$styleHash = &Local::css2Html32($fid);
		$$variables->{html32} = $styleHash->{font};
	}
	if ($style->{type} eq "grid") {
		require "local/Run_grid.pm";
		if ($$variables->{export} eq 'pdf') {
			my $pdfFile = $$variables->{file};
			(my $xlsFile = $pdfFile) =~ s/^(.*)...$/$1xls/;	#check if exists xls (html) file
			if (! -e $xlsFile) {
				$$variables->{file} = $xlsFile;
				&Run_grid::exportToHTML($variables, $q, $style->{form}, $style->{header}, \$data, \$styleHash); #pointer, scalar, scalar, pointer
				$$variables->{file} = $pdfFile;
			}
			&Run::convertUTF8_2CodePage($xlsFile,$pdfFile,$$variables->{useLang});
			&Run::convert2PDF($pdfFile,$pdfFile,$$variables->{useLang});
		} elsif ($$variables->{export} eq 'txt') {
			require "local/Run_export.pm";
			&Run_export::export2Txt($variables, \$data);
		} elsif ($$variables->{export} eq 'xml') {
			require "local/Run_export.pm";
			&Run_export::export2XML($variables, \$data);
		} else {
			&Run_grid::exportToHTML($variables, $q, $style->{form}, $style->{header}, \$data, \$styleHash); #pointer, scalar, scalar, pointer
		}
	} elsif ($style->{type} eq "graph2d") {
		require "local/Run_graph2D.pm";
		if ($$variables->{export} eq 'pdf') {
			my $pdfFile = $$variables->{file};
			(my $xlsFile = $pdfFile) =~ s/^(.*)...$/$1xls/;	#check if exists xls (html) file
			if (! -e $xlsFile) {
				$$variables->{file} = $xlsFile;
				&Run_graph2D::exportToHTML($variables, $q, $obj, $style, \$data);
				$$variables->{file} = $pdfFile;
			}
			&Run::convertUTF8_2CodePage($xlsFile,$pdfFile,$$variables->{useLang});
			&Run::convert2PDF($$variables->{file},$$variables->{file},$$variables->{useLang});	
		} elsif ($$variables->{export} eq 'xls') {
			require "local/Run_grid.pm";
			&Run_grid::exportToHTML($variables, $q, 'default', 'noneHeader', \$data, \$styleHash); #pointer, scalar, scalar, pointer
		} elsif ($$variables->{export} eq 'txt') {
			require "local/Run_export.pm";
			&Run_export::export2Txt($variables, \$data);
		} elsif ($$variables->{export} eq 'xml') {
			require "local/Run_export.pm";
			&Run_export::export2XML($variables, \$data);
		} else {
			&Run_graph2D::exportToHTML($variables, $q, $obj, $style, \$data);
		}
	} elsif ($style->{type} eq "graph3d") { 
		require "vrml/Run_graph3D.pm";
		my $report = SOAP->Get3dReport($ID);		
		my ($mdata,$data3d) = SOAP->Get3dData($ID);	
		my $map3d = SOAP->Get3dMap($mdata,$$variables->{useLang});
		&Run_graph3D::exportToHTML($variables, $style, $report, $map3d, $data3d); 
	} else {
		print $style->{type};
	}
}

#---------------------------------------------------------

sub ask {
my ($variables,$q,$dynamics) = @@_;
print $q->header(-charset=>$variables->{useEnc});
print $q->start_html(
	-title=>"Dynamics",
	-lang=>$Const::languages->{$variables->{useLang}}{lang},	#return language specification in format: language-country (it differs from param Lang)
	-encoding=>$variables->{useEnc},
	-head=>meta({	-http_equiv => 'Content-Type', 
			-content => "text/html; charset=$variables->{useEnc}" }),
	-style=>{-src=>"$variables->{skinPath}css.css"},
	-name=>"dynamics",
	-class=>'dynamics',
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/right_menu.js'}],
	-id=>'dynamics',
);
print $q->startform(-action=>'', -name=>"DynamicParam");
print $q->hidden("Lang",$variables->{useLang});
print $q->hidden("skin",$variables->{skin});
print $q->hidden("Proj",$variables->{proj});
print $q->hidden("imgType",$variables->{imgType});

#print $q->hidden('item_id',$variables->{id});	#unbelievable bug, prints old item id!
print "<input type='hidden' name='item_id' value='$variables->{id}' />";

print "<input type='hidden' name='OID' value='$variables->{oid}' />";
print "<h3>$Const::lang->{$variables->{useLang}}{'Run Param'}</h3><hr size='1'/>";
my $reset = ($q->param('Reset') || $q->param('Prev')) ? 1 : 0;
my @@reports = &Run::createObjectObjects($dynamics->{object},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{object};
push @@reports,&Run::createOthersObjects($dynamics->{others},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{others};
print "<hr size='1'/>";
print <<END;

<table>
	<tr><td align="center">
		<table cellpading="5" cellspacing="5">
		<tr>
			<td>
				<img src="$variables->{skinPath}ok.png" class='cursor' onclick='doSubmit("DGO")' title="$Const::lang->{$variables->{useLang}}{'Run Submit'}" alt='apply' />
				<input type='submit' style='display:none' value="Submit" name='Dynamic' id='DGO' />
			</td>
			<td>
				<img src="$variables->{skinPath}reset.png" class='cursor' onclick='doSubmit("RST")' title="$Const::lang->{$variables->{useLang}}{'Run Reset'}" alt='reset' />
				<input type='submit' style='display:none' value="Reset" name='Reset' id='RST' />
			</td>
END
if ($variables->{oid} ne $variables->{id}) {
	if (exists $variables->{orig_id} || $q->param('OID')) {
		print "<td>";
		print "<img src='$variables->{skinPath}prev.png' style='cursor:pointer' onclick=\"doSubmit('PRV')\" title='".$Const::lang->{$variables->{useLang}}{'Run Prev'}."' alt='prev' />";
		print "<input type='submit' style='display:none' value='Prev' name='Prev' id='PRV' />";
		print "</td>";
	}
}
print <<END;
		</tr>
		</table>
	</td></tr>
</table>
END
my $join = join(",",@@reports);
print "<input type='hidden' name='section' value='$variables->{section}' />";
print "<input type='hidden' name='reports' value='$join' />";
	print $q->endform;
	print $q->end_html;
}

#---------------------------------------------------------
1
@


1.114
log
@patch for SOAP::Lite 0.60
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.113 2004/03/10 19:02:23 vasekd Exp $
d198 1
@


1.113
log
@added sub for css2html32
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.112 2004/03/10 16:04:35 jiri_schmid Exp $
d82 1
a82 1
	$variables->{section} = (exists $dynamics->{defined}) ? 1 : 5; # 5 skip param handling, no dynamic params
@


1.112
log
@xmlcss2html32
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.111 2004/02/25 16:05:02 jiri_schmid Exp $
d169 1
a169 1
		}
d210 1
a210 1
	if ($variables->{export}) {
d212 1
a212 1
		$variables->{html32} = $styleHash->{font};
@


1.111
log
@fixed rights logic and folder XML definition files are specific for each project now
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.110 2004/02/18 16:19:06 jiri_schmid Exp $
a56 1
my $styleHash;
a61 41
##################################################################################################################
########################### HAVE TO BE REPLACED WITH XML2CSS/HTML32 CONVERTOR !!! ################################
##################################################################################################################
		$styleHash = {
			'table' => 'CELLPADDING="2" CELLSPACING="0" BORDER="1" BGCOLOR="#52b752"',
			'td' => {
				'oe tr' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
				'oe td' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
				'eo td' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'eo tr' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'eo ttr' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'ee tr' => 'align="right" bgcolor="#70cc70" nowrap="1"',
				'oo td' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'oo tr' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'oo ttr' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'eo ttd' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'oo ttd' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'ee td' => 'align="right" bgcolor="#70cc70" nowrap="1"',
				'ee ttr' => 'align="right" bgcolor="#70cc70" nowrap="1"'
			},
			'font' => '<font size="10" face="Arial, sans-serif">',
			'th' => {
				'oe tr' => 'align="center" bgcolor="#d8d84b" nowrap="1"',
				'ch d' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ch r' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ch dv' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'oe t' => 'align="right" bgcolor="#52b752" nowrap="1"',
				'oe tt' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'eo td' => 'align="center" bgcolor="#a0e5a0" nowrap="1"',
				'eo tr' => 'align="center" bgcolor="#a0e5a0" nowrap="1"',
				'eo ttr' => 'align="center" bgcolor="#a0e5a0" nowrap="1"',
				'ee t' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ee tt' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ee tr' => 'align="center" bgcolor="#70cc70" nowrap="1"',
				'oo tr' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'oo ttr' => 'align="center" bgcolor="#f2f27b" nowrap="1"',
				'ee' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ee ttr' => 'align="right" bgcolor="#70cc70" nowrap="1"'
			}
		};
##################################################################################################################
a63 1
			$variables->{html32} = $styleHash->{font};
a65 1
			$variables->{html32} = $styleHash->{font};
a67 1
			$variables->{html32} = $styleHash->{font};
a69 1
			$variables->{html32} = $styleHash->{font};
a71 1
			$variables->{html32} = $styleHash->{font};
d139 1
a139 1
	&buildReport(\$variables,\$q,\$styleHash) if (!-e "$variables->{file}" && $variables->{id}); #build report if is not cached in disk-cache
d190 1
a190 1
	my ($variables,$q,$cssHash) = (shift,shift,shift); # pointer
d195 1
a195 1
	my $style;	
d199 2
a200 2
		my $id = $obj->{'report'}{$ID}{'format_def'};
		my $x = SOAP->GetMetadata($id);
d202 1
a202 1
		$style = $x->{$subType}->{$id};
d209 5
d221 1
a221 1
				&Run_grid::exportToHTML($variables, $q, $style->{form}, $style->{header}, \$data, $cssHash); #pointer, scalar, scalar, pointer
d233 1
a233 1
			&Run_grid::exportToHTML($variables, $q, $style->{form}, $style->{header}, \$data, $cssHash); #pointer, scalar, scalar, pointer
d249 1
a249 1
			&Run_grid::exportToHTML($variables, $q, 'default', 'noneHeader', \$data, $cssHash); #pointer, scalar, scalar, pointer
@


1.110
log
@rights implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.109 2004/02/16 14:55:19 jiri_schmid Exp $
d52 4
a55 1
if (SOAP->CheckAccess('R',$variables->{user},$q->param('Proj'))) {
a124 3
# --- load message dictionary ---
require "lang/$variables->{useLang}.utf";

d227 3
a229 3
	print $q->header(-charset=>$variables->{useEnc},-style=>{-src=>"$variables->{skinPath}css.css"});
	print $q->start_html;
	print "<table class='forbidden'><tr><td>Access forbidden</td></tr></table>";;
@


1.109
log
@security improvment for tabs
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.108 2004/02/16 09:36:58 vacula Exp $
d227 1
a227 1
	print $q->header(-charset=>$variables->{useEnc});
d229 1
a229 1
	print "<h3>access forbidden on page Run fo user: $variables->{user}";
@


1.108
log
@changes parameters in style graph3d
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.107 2004/02/13 17:09:33 jiri_schmid Exp $
d60 3
d100 1
@


1.107
log
@major tabs control implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.106 2004/02/10 14:46:54 jiri_schmid Exp $
a272 3
	} elsif ($style->{type} eq "graph3d") { 
		require "vrml/Run_graph3D.pm";
			&Run_graph3D::exportToHTML($obj->{'report'}{$ID}{'name'},$ID,$$variables->{useLang},"$Const::myPath$Const::cache3DReport","$Const::texture_dir"); 
d297 6
@


1.106
log
@mod perl fixies, functionality improvment
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.105 2004/01/29 13:20:34 jiri_schmid Exp $
d50 1
d52 1
d222 7
d325 1
@


1.105
log
@collected tab implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.104 2004/01/29 12:45:46 vacula Exp $
d170 1
a170 1
			&ask($variables,$q);	#uknown values of some params
d299 1
a299 1
my ($variables,$q) = @@_;
a358 1

@


1.104
log
@fix export to pdf in 2d graph
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.103 2004/01/23 14:58:54 vacula Exp $
d217 1
a217 1
	print "<div class='error'>Error, sorry.</div>";
@


1.103
log
@minor changes in parameters for 2d report
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.102 2004/01/16 12:27:37 jiri_schmid Exp $
d270 8
a277 1
			&Run_graph2D::exportToHTML($variables, $q, $obj, $style, \$data);
@


1.102
log
@export fix
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.101 2004/01/12 13:50:25 jiri_schmid Exp $
d270 1
a270 1
			&Run_graph2D::exportToHTML($variables, $q, $obj->{'report'}{$ID}{'name'},$ID, $style, "$Const::myPath/$Const::cache2DReport", \$data);
d282 1
a282 1
			&Run_graph2D::exportToHTML($variables, $q, $obj->{'report'}{$ID}{'name'},$ID, $style, "$Const::myPath/$Const::cache2DReport", \$data);
@


1.101
log
@dynamic param fixations
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.100 2004/01/09 13:44:35 vasekd Exp $
d55 1
a111 1
		$variables->{id} = $q->param('Did') if $q->param('Did');
@


1.100
log
@fix color
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.99 2004/01/09 13:23:56 vasekd Exp $
d58 1
a58 1
			'table' => 'CELLPADDING="2" CELLSPACING="0" BORDER="1" BGCOLOR="#5e5e5e"',
d79 1
d129 16
a144 2
	$dynamics = &Run::setParams(\$variables,\$q) if $q->param('Dynamic') eq 'Submit'; #send new params and recieve whole params definition
	$variables->{section} = 2;
d154 1
a154 1
		$variables->{id} = $subst->{id};	#report ID after subst, may be same as input ID
d157 1
a157 1
		$variables->{section} = 1; #create param question and next time return to set params
d318 1
a318 1
push @@reports,&Run::createFilterObjects($dynamics->{filter},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{filter};
@


1.99
log
@fix color
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.98 2004/01/09 13:22:50 vasekd Exp $
d62 2
d66 2
d81 2
d84 1
d87 1
@


1.98
log
@fix color
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.97 2004/01/09 13:14:47 vasekd Exp $
d75 1
a75 1
				'oe t' => 'align="right" bgcolor="#52b752" nowrap="1"'
@


1.97
log
@fix color
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.96 2004/01/09 12:56:21 jiri_schmid Exp $
d75 1
@


1.96
log
@export fix
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.95 2004/01/09 12:42:49 jiri_schmid Exp $
d67 2
a68 1
				'ee td' => 'align="right" bgcolor="#70cc70" nowrap="1"'
d80 2
a81 1
				'ee' => 'align="center" bgcolor="#52b752" nowrap="1"'
@


1.95
log
@dynamic param code imrpovment
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.94 2004/01/09 08:04:28 jiri_schmid Exp $
d147 2
@


1.94
log
@dynamic params fixation a code clearing
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.93 2004/01/07 16:39:02 jiri_schmid Exp $
d46 2
a47 1
$variables->{section} = $q->param('section') ? $q->param('secion') : 0;	#return into proper section of code
d117 1
a117 1
	&Run::setParams($variables->{user},$variables->{id},\$dynamics,$q) if $q->param('Dynamic') eq 'Submit';
d289 2
a290 2
&Run::createObjectObjects($dynamics->{object},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{object};
&Run::createFilterObjects($dynamics->{filter},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{filter};
d321 4
@


1.93
log
@micor commit
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.92 2004/01/07 16:26:55 jiri_schmid Exp $
a36 1
#-------------------------------------------
d44 1
a44 1
$variables->{id} = $q->param('Prev') ? $q->param('OID') : ($q->param('item_id')) ? $q->param('item_id') : undef;
d46 1
d49 3
a51 2
my $wb = $q->user_agent()=~/MSIE/ ? 'msie' : 'mozilla';
my ($styleHash,$reportModified);
a100 1

a101 1
$variables->{file} = "$Const::myPath$Const::cacheReport/$variables->{id}-$variables->{useLang}.$variables->{suffix}";
a103 1
#---------------------------------
d106 13
a118 49
my ($paramsDefined,$dynamics,$create);
$dynamics = SOAP->GetDynamicParamsInReport($variables->{id},$variables->{useLang},$variables->{user});	#find dynamic params
$create = (-e "$variables->{file}") ? 0 : 1;	#report already created and cached
$create = 2 if (exists $dynamics->{defined} && $variables->{id}); #report contains params
$create = 3 if ( ($q->param('ReSet') || $q->param('Prev')) && $variables->{id}); #new params request
if ($create) {
	if ($create > 1) {	#report contains dynamic params
		$paramsDefined = ($q->param('Dynamic')) ? &Run::setParams($variables->{user},$variables->{id},\$dynamics,$q) : $dynamics->{defined}; #new params set vs. check of previously defined values
		undef $paramsDefined if $create == 3;	#force setting of new values
		my $subst = SOAP->SubstituteParamsInReport($dynamics,$variables->{user},$variables->{useLang},$variables->{id}) if $paramsDefined; #params for actual report are defined
		if ($subst->{success}) {
			$paramsDefined = $subst->{paramsDefined};
			$dynamics = $subst->{dynamics};
			$variables->{orig_id} = $variables->{id};
			$variables->{oid} = $q->param('OID') ? $q->param('OID') : $variables->{orig_id};
			$variables->{id} = $subst->{id};
			$variables->{file} = "$Const::myPath$Const::cacheReport/$variables->{id}-$variables->{useLang}.$variables->{suffix}";
		};
		if ($paramsDefined) {	#all 1.level params are defined
			$variables->{button} = "<br />&nbsp;<img src='$variables->{skinPath}/reset.png' style='cursor:pointer' onclick=\"doSubmit('RST')\" title='".$Const::lang->{$variables->{useLang}}{'Run Reset'}."' alt='reset' /><input type='submit' style='display:none' value='Reset' name='ReSet' id='RST' />";
		} else {	#ask for values of params
			$paramsDefined = 2;	#
			print $q->header(-charset=>$variables->{useEnc});
			print $q->start_html(
				-title=>"Dynamics",
				-lang=>$Const::languages->{$variables->{useLang}}{lang},	#return language specification in format: language-country (it differs from param Lang)
				-encoding=>$variables->{useEnc},
				-head=>meta({	-http_equiv => 'Content-Type', 
						-content => "text/html; charset=$variables->{useEnc}" }),
				-style=>{-src=>"$variables->{skinPath}css.css"},
				-name=>"dynamics",
				-class=>'dynamics',
				-script=>[{-language=>'JAVASCRIPT', -src=>'js/right_menu.js'}],
				-id=>'dynamics',
			);
			print $q->startform(-action=>'', -name=>"DynamicParam");
			print $q->hidden("Lang",$variables->{useLang});
			print $q->hidden("skin",$variables->{skin});
			print $q->hidden("imgType",$variables->{imgType});
#			print $q->hidden('item_id',$variables->{id});	#unbelievable bug
			print "<input type='hidden' name='item_id' value='$variables->{id}' />";
			print "<input type='hidden' name='OID' value='$variables->{oid}' />";
			print "<h3>$Const::lang->{$variables->{useLang}}{'Run Param'}</h3><hr size='1'/>";
			my $reset = ($q->param('ReSet') || $q->param('Prev')) ? 1 : 0;
			&Run::createObjectObjects($dynamics->{object},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{object};
			&Run::createFilterObjects($dynamics->{filter},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{filter};
			print "<hr size='1'/>";
			$create = 0;
print <<END;
d120 11
a130 18
<table>
	<tr><td align="center">
		<table cellpading="5" cellspacing="5">
		<tr>
			<td>
				<img src="$variables->{skinPath}/ok.png" class='cursor' onclick='doSubmit("DGO")' title="$Const::lang->{$variables->{useLang}}{'Run Submit'}" alt='apply' />
				<input type='submit' style='display:none' value="Submit" name='Dynamic' id='DGO' />
			</td>
			<td>
				<img src="$variables->{skinPath}/reset.png" class='cursor' onclick='doSubmit("RST")' title="$Const::lang->{$variables->{useLang}}{'Run Reset'}" alt='reset' />
				<input type='submit' style='display:none' value="Reset" name='ReSet' id='RST' />
			</td>
END
	if (exists $variables->{orig_id} || $q->param('OID')) {
		print "<td>";
		print "<img src='$variables->{skinPath}/prev.png' style='cursor:pointer' onclick=\"doSubmit('PRV')\" title='".$Const::lang->{$variables->{useLang}}{'Run Prev'}."' alt='prev' />";
		print "<input type='submit' style='display:none' value='Prev' name='Prev' id='PRV' />";
		print "</td>";
d132 12
a143 10
print <<END;
		</tr>
		</table>
	</td></tr>
</table>
END
#			use Data::Dumper;
#			print "<pre>".Dumper($dynamics)."</pre>";
			print $q->endform;
			print $q->end_html;
a144 2
	} else {
		$paramsDefined = 1;
d146 7
a152 2
	&buildReport(\$variables,\$q,\$styleHash) if ($paramsDefined < 2 && !(-e "$variables->{file}"));
};
d154 2
a155 1
if (-e "$variables->{file}" && $paramsDefined < 2) {#file exist and no new params were defined
d176 3
a178 2
	my $rwb = $q->user_agent()=~/MSIE/ ? 'mozilla' : 'msie';
	while (my $out = <REPORT> ) {
d185 1
a185 1
} elsif ($paramsDefined < 2) {	#params werent defined, or the report wasnt generated
d188 1
d258 64
@


1.92
log
@added icons and improved controling dynamic params
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.91 2004/01/07 12:01:52 jiri_schmid Exp $
d46 1
a46 1
$variables->{oid} = $q->param('OID');
d122 1
a123 1
			$variables->{oid} = $q->param('OID') if $q->param('OID');
@


1.91
log
@dynamic param implementation - next step
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.90 2004/01/06 08:17:34 jiri_schmid Exp $
d45 2
a46 1
$variables->{id} = ($q->param('item_id')) ? $q->param('item_id') : undef;
d112 1
a112 1
$create = 3 if ($q->param('ReSet') && $variables->{id}); #new params request
d123 1
d127 1
a127 1
			$variables->{button} = "<input type='submit' value='Reset' name='ReSet' />";
d140 1
d149 1
d151 1
a151 1
			my $reset = $q->param('ReSet') ? 1 : 0;
d157 1
d160 1
a160 1
		<table class="buttons" cellpading="5" cellspacing="5">
d162 3
a164 2
			<td class="buttons">
				<input type='submit' value="$Const::lang->{$variables->{useLang}}{'Run Submit'}" name='Dynamic' />
d166 3
a168 2
			<td class="buttons">
				<input type='submit' value="$Const::lang->{$variables->{useLang}}{'Run Reset'}" name='ReSet' />
d170 8
@


1.90
log
@dynamic params implemented into grid
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.89 2003/12/18 15:17:22 jiri_schmid Exp $
d114 1
a114 1
		$paramsDefined = ($q->param('Dynamic')) ? &Run::setParams($variables->{user},$variables->{id},\$dynamics,$q) : $dynamics->{defined};
d116 1
a116 1
		my $subst = SOAP->SubstituteParamsInReport($dynamics,$variables->{user},$variables->{useLang},$variables->{id}) if $paramsDefined;
d123 1
a123 1
		}
a124 1
			#$variables->{id} = SOAP->ModifyReport($variables->{id},$variables->{user},"0|params|0",$variables->{useLang});
d144 2
a145 1
			print $q->hidden("item_id",$variables->{id});
d179 1
a179 1
if (-e "$variables->{file}" && $create) {
@


1.89
log
@visual improvment
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.88 2003/12/18 12:59:51 jiri_schmid Exp $
d43 1
a43 1
$variables->{useLang} = $q->param('Lang') ? $q->param('Lang') : $Const::defaultLanguage;
d49 1
a49 1
my $styleHash;
d96 1
d107 7
a113 4
my ($paramsDefined,$dynamics);
if (! -e "$variables->{file}" && $variables->{id}) {
	$dynamics = SOAP->GetDynamicParamsInReport($variables->{id},$variables->{useLang},$variables->{user});	#find dynamic params
	if (exists $dynamics->{defined}) {	#report contains dynamic params
d115 10
a124 2
		undef $paramsDefined if $q->param('ReSet');
		if ($paramsDefined) {	#all params are allready defined
d126 2
a127 14
			print $q->header(-charset=>$variables->{useEnc});
			print $q->start_html;
			print $q->startform(-action=>'', -name=>"DynamicParam");
			print $q->hidden("Lang",$variables->{useLang});
			print $q->hidden("skin",$variables->{skin});
			print $q->hidden("imgType",$variables->{imgType});
			print $q->hidden("item_id",$variables->{id});
			print "<input type='submit' value='Reset' name='ReSet' />";
			print $q->endform;
			use Data::Dumper;
			print "<pre>".Dumper($dynamics)."</pre>";
			print $q->end_html;
			$paramsDefined = 2; # !!! temporarily block creating of report
		} else {
d151 1
d176 1
a176 1
	&buildReport(\$variables,\$q,\$styleHash) if $paramsDefined < 2;	#
d179 1
a179 1
if (-e "$variables->{file}") {
@


1.88
log
@defining of dynamic params within use rules implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.87 2003/12/16 15:49:02 jiri_schmid Exp $
d137 2
a138 1
				-name=>"Dynamics",
d148 2
a149 2
			&Run::createObjectObjects($wb,$dynamics->{object},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{object};
			&Run::createFilterObjects($wb,$dynamics->{filter},$variables->{useLang},$variables->{skinPath},$reset) if exists $dynamics->{filter};
a150 1
			my $run = "Run Submit";
d152 1
a152 1
<table class="neutral">
d157 4
a160 1
				<input type='submit' value="$Const::lang->{$variables->{useLang}}{$run}" name='Dynamic' />
@


1.87
log
@first stage of reseting params implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.86 2003/12/16 13:44:20 jiri_schmid Exp $
d48 1
d110 1
a110 1
		$paramsDefined = ($q->param('Dynamic')) ? &Run::setParams($variables->{user},$variables->{id},$dynamics,$q) : $dynamics->{defined};
d146 3
a148 2
			&Run::createObjectObjects($dynamics->{object},$variables->{useLang},$variables->{skinPath},$q->param('ReSet')) if exists $dynamics->{object};
			&Run::createFilterObjects($dynamics->{filter},$variables->{useLang},$variables->{skinPath},$q->param('ReSet')) if exists $dynamics->{filter};
d164 2
a195 1
	my $wb = $q->user_agent()=~/MSIE/ ? 'msie' : 'mozilla';
@


1.86
log
@setting and checking values of params agains memory
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.85 2003/12/15 16:34:26 jiri_schmid Exp $
d6 1
a6 1
if ($run_mod_perl) { Apache::RequestRec::BINMODE(':utf8') } else { binmode(STDOUT,":utf8"); binmode(STDIN, ":utf8"); }
d110 1
d115 7
d145 2
a146 2
			&Run::createObjectObjects($dynamics->{object},$variables->{useLang},$variables->{skinPath}) if exists $dynamics->{object};
			&Run::createFilterObjects($dynamics->{filter},$variables->{useLang},$variables->{skinPath}) if exists $dynamics->{filter};
@


1.85
log
@just minor improvments
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.84 2003/12/15 15:16:00 jiri_schmid Exp $
d107 34
a140 30
	$dynamics = SOAP->GetDynamicParamsInReport($variables->{id},$variables->{useLang});	#find dynamic params
	#&Run::setParams($dynamics,$q) if $q->param('Dynamic');	
	if (&Run::checkParams($dynamics)) {	#are all params defined
		$paramsDefined = 1;
	} else {
		$paramsDefined = 2;
		print $q->header(-charset=>$variables->{useEnc});
		print $q->start_html(
			-title=>"Dynamics",
			-lang=>$Const::languages->{$variables->{useLang}}{lang},	#return language specification in format: language-country (it differs from param Lang)
			-encoding=>$variables->{useEnc},
			-head=>meta({	-http_equiv => 'Content-Type', 
					-content => "text/html; charset=$variables->{useEnc}" }),
			-style=>{-src=>"$variables->{skinPath}css.css"},
			-name=>"Dynamics",
			-id=>'dynamics',
		);
		print $q->startform(-action=>'', -name=>"DynamicParam");
		print $q->hidden("Lang",$variables->{useLang});
		print $q->hidden("skin",$variables->{skin});
		print $q->hidden("imgType",$variables->{imgType});
		print $q->hidden("item_id",$variables->{id});

	&Run::setParams($dynamics,$q) if $q->param('Dynamic');	

		print "<h3>$Const::lang->{$variables->{useLang}}{'Run Param'}</h3><hr size='1'/>";
		&Run::createObjectObjects($dynamics->{object},$variables->{useLang},$variables->{skinPath}) if exists $dynamics->{object};
		&Run::createFilterObjects($dynamics->{filter},$variables->{useLang},$variables->{skinPath}) if exists $dynamics->{filter};
		print "<hr size='1'/>";
		my $run = "Run Submit";
d154 5
a158 3
		print "";
		print $q->endform;
		print $q->end_html;
d193 1
a193 1
} elsif ($paramsDefined < 2) {	#all params are defined, but the report wasnt generated
@


1.84
log
@interface for setting of dynamic params implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.83 2003/12/12 16:48:12 jiri_schmid Exp $
d108 1
a108 1
	&Run::setParams($dynamics,$q) if $q->param('Dynamic');	
d124 8
a131 1
		print $q->startform(-action=>'', -name=>"DynamicParam", -onsubmit=>'');
d137 14
a150 1
		#print "<input type='submit' value='$Const::lang->{$variables->{useLang}}{$run}' name='Dynamic'>";
@


1.83
log
@continuing in implementation of dynamic params
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.82 2003/12/12 12:12:06 jiri_schmid Exp $
a9 2
use Encode;
use HTML::HTMLDoc;
d12 1
d105 5
a109 6
my $dynamics = SOAP->GetDynamicParamsInReport($variables->{id},$variables->{useLang});
my $paramsDefined;

if (exists $dynamics->{object} || exists $dynamics->{filter}) {	#dynamic params included in definition
	&setParams($q) if $q->param('Params');
	if (&checkParams($q,$dynamics)) {
d112 1
d124 9
a132 4
		use Data::Dumper;
		print "<pre>".Dumper($dynamics)."</pre>";
		&createObjectSelect($dynamics);
		#&createSubmit;
d134 2
a135 8
} else {	# no dynamic param
	$paramsDefined = 1;
}

if ($paramsDefined) {
	if (! -e "$variables->{file}" && $variables->{id}) {
		&buildReport(\$variables,\$q,\$styleHash);
	};
d137 17
a153 30
	if (-e "$variables->{file}") {
		open(REPORT, "$variables->{file}");
		binmode(REPORT, ":utf8");
		if ($variables->{export} eq 'xls') {
			print $q->header(-type=>"application/vnd.ms-excel",-attachment=>'report.xls')
		} elsif ($variables->{export} eq 'doc') {
			print $q->header(-type=>"application/vnd.ms-word",-attachment=>'report.doc')
		} elsif ($variables->{export} eq 'ppt') {
			print $q->header(-type=>"application/vnd.ms-powerpoint",-attachment=>'report.ppt')
		} elsif ($variables->{export} eq 'pdf') {
			print $q->header(-type=>"application/pdf",-attachment=>'report.pdf')
		} elsif ($variables->{export} eq 'png') {
			print $q->header(-type=>"image/png",-attachment=>'report.png')
		} elsif ($variables->{export} eq 'txt') {
			print $q->header(-type=>"text/plain",-attachment=>'report.txt')
		} elsif ($variables->{export} eq 'xml') {
			print $q->header(-type=>"text/xml",-attachment=>'report.xml')
		} else {
			print $q->header(-charset=>$variables->{useEnc})
		}
	
		my $wb = $q->user_agent()=~/MSIE/ ? 'msie' : 'mozilla';
		my $rwb = $q->user_agent()=~/MSIE/ ? 'mozilla' : 'msie';
		while (my $out = <REPORT> ) {
			if ($out =~ /^<style>|^<input/) {
				$out =~ s/$rwb/$wb/g;
			}
			print $out;
		}
		close(REPORT);
d155 1
a155 3
		print $q->header(-charset=>$variables->{useEnc});
		print $q->start_html;
		print $q->end_html;
d157 14
d172 1
d205 2
a206 2
			&convertUTF8_2CodePage($xlsFile,$pdfFile,$$variables->{useLang});
			&convert2PDF($pdfFile,$pdfFile,$$variables->{useLang});
d223 1
a223 1
			&convert2PDF($$variables->{file},$$variables->{file},$$variables->{useLang});	
a238 62
}

#---------------------------------------------------------
sub convert2PDF {
	my ($inFile,$outFile,$useLang,$codePage) = @@_;
	my $cp;
	my $htmldoc = new HTML::HTMLDoc();
	if ($codePage) {
		$cp = $codePage
	} else {
		if ($useLang eq 'cz') { $cp = "iso-8859-2" }
		else { $cp = "iso-8859-1" }
	}
	$htmldoc->set_charset($cp);
	$htmldoc->set_output_format("pdf14");
	$htmldoc->embed_fonts() if $cp ne 'iso-8859-1';
	$htmldoc->landscape();
	$htmldoc->set_fontsize("10");
	$htmldoc->set_input_file($inFile);
	my $pdf = $htmldoc->generate_pdf();
	$pdf->to_file($outFile);
}

#---------------------------------------------------------
sub convertUTF8_2CodePage {
	my ($inFile,$outFile,$useLang,$codePage) = @@_;
	my $cp;
	if (open(INF,$inFile) && open(OUTF,">$outFile")) {
		if ($useLang eq 'cz') {
			$cp = 'iso-8859-2';
		} else {
			$cp = $codePage ? $codePage : 'iso-8859-1';
		}
		binmode(INF,":utf8");
# ----- force binary file handling, this way is necceassry under mod perl -----------------------------
		binmode(OUTF,":raw");
		while (<INF>) {
#force conversion from perl internal structure into specified code page, beacause saving in binary mode
			print OUTF encode($cp,$_);
		}
		close OUTF;
#------------------------------------------------------------------------------------------------------
		close INF;
	}
}

#---------------------------------------------------------

sub createObjectSelect {
my $objects = shift;

}

#---------------------------------------------------------
sub setParams {
my $q = shift;
}

#---------------------------------------------------------
sub checkParams {
my $q = shift;
return 0
@


1.82
log
@found a fixed bug manipulating dynamic params in grid
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.81 2003/12/10 15:54:26 jiri_schmid Exp $
d105 1
a105 1
=block
d107 6
a112 34
print $q->header(-charset=>$variables->{useEnc});
print $q->start_html(
	-title=>"Run",
	-lang=>$Const::languages->{ $variables->{useLang} }->{lang},
	-encoding=>$variables->{useEnc},
	-head=>meta({ -http_equiv => 'Content-Type', -content => "text/html; charset=$variables->{useEnc}" }),
	-style=>{-src=>"$variables->{skinPath}css.css"},
);
use Data::Dumper;
print "<pre>".Dumper($dynamics)."</pre>";
print $q->end_html;
=cut

if (! -e "$variables->{file}" && $variables->{id}) {
	&buildReport(\$variables,\$q,\$styleHash);
};

if (-e "$variables->{file}") {
	open(REPORT, "$variables->{file}");
	binmode(REPORT, ":utf8");
	if ($variables->{export} eq 'xls') {
		print $q->header(-type=>"application/vnd.ms-excel",-attachment=>'report.xls')
	} elsif ($variables->{export} eq 'doc') {
		print $q->header(-type=>"application/vnd.ms-word",-attachment=>'report.doc')
	} elsif ($variables->{export} eq 'ppt') {
		print $q->header(-type=>"application/vnd.ms-powerpoint",-attachment=>'report.ppt')
	} elsif ($variables->{export} eq 'pdf') {
		print $q->header(-type=>"application/pdf",-attachment=>'report.pdf')
	} elsif ($variables->{export} eq 'png') {
		print $q->header(-type=>"image/png",-attachment=>'report.png')
	} elsif ($variables->{export} eq 'txt') {
		print $q->header(-type=>"text/plain",-attachment=>'report.txt')
	} elsif ($variables->{export} eq 'xml') {
		print $q->header(-type=>"text/xml",-attachment=>'report.xml')
d114 15
a128 1
		print $q->header(-charset=>$variables->{useEnc})
d130 29
d160 7
a166 5
	my $wb = $q->user_agent()=~/MSIE/ ? 'msie' : 'mozilla';
	my $rwb = $q->user_agent()=~/MSIE/ ? 'mozilla' : 'msie';
	while (my $out = <REPORT> ) {
		if ($out =~ /^<style>|^<input/) {
			$out =~ s/$rwb/$wb/g;
d168 5
a172 1
		print $out;
a173 5
	close(REPORT);
} else {
	print $q->header(-charset=>$variables->{useEnc});
	print $q->start_html;
	print $q->end_html;
a174 1

d275 1
a275 1
# ----- force binary file handling, this way is necceassry under mod perl ----------
d278 1
a278 1
			#force conversion from perl internal structure into specified code page, beacause saving in binary mode
d282 1
a282 1
#-------------------------------------------------------------------------------------------
d287 19
@


1.81
log
@code and functionality improvments for pivoting and modified reports page
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.80 2003/12/04 14:04:13 jiri_schmid Exp $
d106 1
a106 1
my $dynamics = SOAP->dynamicReport($variables->{id},$variables->{useLang});
@


1.80
log
@modificated reports filterinng contians variations within element (OR) and joins between elements themselve (AND)
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.79 2003/12/04 12:15:13 jiri_schmid Exp $
d96 1
a96 1
		$variables->{id} = SOAP->ModifyReport($variables->{id},$variables->{user},$q->param('Params'));
@


1.79
log
@img type changes tested and fixed
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.78 2003/12/04 10:44:06 jiri_schmid Exp $
a144 1
	my $cnt = 0;
@


1.78
log
@visaul changes and improvments
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.77 2003/11/28 17:31:44 jiri_schmid Exp $
d43 1
a43 1
$variables->{imgType} = &Local::getImageType("$Const::myPath$variables->{skinPath}img/");
@


1.77
log
@self drill implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.76 2003/11/28 14:49:42 jiri_schmid Exp $
d144 10
a153 1
	print <REPORT>;
@


1.76
log
@fixed right click menu bug
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.75 2003/11/28 13:03:04 jiri_schmid Exp $
d95 1
a95 1
	} elsif ($params[1] =~ /down|up|pivot/) {
@


1.75
log
@MD5 hashing implemented, sorting menus implemented etc...
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.74 2003/11/28 07:05:33 michald Exp $
d159 1
a159 1
	
@


1.74
log
@report/metric filter join
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.73 2003/11/27 16:40:57 jiri_schmid Exp $
d158 1
a158 1
	my $data = SOAP->GetResultName($ID,$$variables->{useLang});
@


1.73
log
@something like drill implemeted
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.72 2003/11/27 08:52:38 jiri_schmid Exp $
d41 1
a41 1
$variables->{skin} = (param('Skin')) ? param('Skin') : (param('skin')) ? param('skin') : "";
d46 1
a46 1
$variables->{id} = (param('item_id')) ? param('item_id') : undef;
d51 1
a51 1
	my @@params = split(/,/,$q->param('Params'));
d55 24
a78 24
	'table' => 'CELLPADDING="2" CELLSPACING="0" BORDER="1" BGCOLOR="#5e5e5e"',
	'td' => {
		'oe tr' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
		'oe td' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
		'eo ttr' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
		'ee tr' => 'align="right" bgcolor="#70cc70" nowrap="1"',
		'oo ttr' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
		'eo ttd' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
		'oo ttd' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
		'ee td' => 'align="right" bgcolor="#70cc70" nowrap="1"'
},
	'font' => '<font size="10" face="Arial, sans-serif">',
	'th' => {
		'oe tr' => 'align="center" bgcolor="#d8d84b" nowrap="1"',
		'ch d' => 'align="center" bgcolor="#52b752" nowrap="1"',
		'ch r' => 'align="center" bgcolor="#52b752" nowrap="1"',
		'oe tt' => 'align="center" bgcolor="#52b752" nowrap="1"',
		'eo ttr' => 'align="center" bgcolor="#a0e5a0" nowrap="1"',
		'ee tt' => 'align="center" bgcolor="#52b752" nowrap="1"',
		'ee tr' => 'align="center" bgcolor="#70cc70" nowrap="1"',
		'oo ttr' => 'align="center" bgcolor="#f2f27b" nowrap="1"',
		'ee' => 'align="center" bgcolor="#52b752" nowrap="1"'
}
};
d98 1
d120 3
a122 1
if (! -e "$variables->{file}" && $variables->{id}) {&buildReport(\$variables,\$q,\$styleHash)};
d222 17
a238 17
my ($inFile,$outFile,$useLang,$codePage) = @@_;
my $cp;
my $htmldoc = new HTML::HTMLDoc();
if ($codePage) {
	$cp = $codePage
} else {
	if ($useLang eq 'cz') { $cp = "iso-8859-2" }
	else { $cp = "iso-8859-1" }
}
$htmldoc->set_charset($cp);
$htmldoc->set_output_format("pdf14");
$htmldoc->embed_fonts() if $cp ne 'iso-8859-1';
$htmldoc->landscape();
$htmldoc->set_fontsize("10");
$htmldoc->set_input_file($inFile);
my $pdf = $htmldoc->generate_pdf();
$pdf->to_file($outFile);
d243 9
a251 9
my ($inFile,$outFile,$useLang,$codePage) = @@_;
my $cp;
if (open(INF,$inFile) && open(OUTF,">$outFile")) {
	if ($useLang eq 'cz') {
		$cp = 'iso-8859-2';
	} else {
		$cp = $codePage ? $codePage : 'iso-8859-1';
	}
	binmode(INF,":utf8");
d253 8
a260 4
	binmode(OUTF,":raw");
	while (<INF>) {
		#force conversion from perl internal structure into specified code page, beacause saving in binary mode
		print OUTF encode($cp,$_);
a261 4
	close OUTF;
#-------------------------------------------------------------------------------------------
	close INF;
}
@


1.72
log
@1.step for drilling implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.71 2003/11/25 16:44:53 jiri_schmid Exp $
d96 1
a96 1
		$variables->{id} = SOAP->ModifyReport($variables->{id},$q->param('Params'));
d143 4
@


1.71
log
@txt and xml export implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.70 2003/11/25 12:10:28 jiri_schmid Exp $
a47 1
$variables->{file} = "$Const::myPath$Const::cacheReport/$variables->{id}-$variables->{useLang}.";
d95 2
d99 1
a99 1
$variables->{file} .= $variables->{suffix};
@


1.70
log
@export rutines implemented for graph 2D
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.69 2003/11/24 10:06:19 jiri_schmid Exp $
d86 3
d92 3
d133 4
d178 6
d198 6
@


1.69
log
@exporting iso88592 (and others) into pdf under mod perl works now
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.68 2003/11/21 12:01:44 jiri_schmid Exp $
d86 3
d125 2
d153 1
a153 1
		$style->{header} = "none";
d166 2
a167 41
=utf8
			my $htmldoc = new HTML::HTMLDoc();
			$htmldoc->set_charset($$variables->{useEnc});
			$htmldoc->set_input_file($xlsFile);	#read xls as html32
			my $pdf = $htmldoc->generate_pdf();
			$pdf->to_file($pdfFile);		#write pdf
=cut
#=iso88592
			if (open(XLS,$xlsFile) && open(HTMLPDF,">$pdfFile")) {
				binmode(XLS,":utf8");
# ----- force binary file handling, this way is necceassry under mod perl ----------
				binmode(HTMLPDF,":raw");
				if ($$variables->{useLang} eq 'cz') {
					while (<XLS>) {
						#force conversion from perl internal structure into specified code page, beacause saving in binary mode
						print HTMLPDF encode('iso-8859-2',$_);
					}
				} else {
					while (<XLS>) {
						print HTMLPDF encode('iso-8859-1',$_);
					}
				}
				close HTMLPDF;
#-------------------------------------------------------------------------------------------
				close XLS;
				my $htmldoc = new HTML::HTMLDoc();
				if ($$variables->{useLang} eq 'cz') {
					#code page have to be same as codepage used when writing the binary HTML - PDF file
					$htmldoc->set_charset("iso-8859-2")
				} else {
					$htmldoc->set_charset("iso-8859-1")
				}
				$htmldoc->set_output_format("pdf14");
				$htmldoc->embed_fonts();
				$htmldoc->landscape();
				$htmldoc->set_fontsize("10");
				$htmldoc->set_input_file($pdfFile);
				my $pdf = $htmldoc->generate_pdf();
				$pdf->to_file($pdfFile);
			}
#=cut
d173 16
a188 3
		&Run_graph3D::exportToHTML($obj->{'report'}{$ID}{'name'},$ID,$$variables->{useLang},"$Const::myPath$Const::cache3DReport","$Const::texture_dir"); 
#		$ENV{HTTP_REFERER} =~ /^(.*)\/(.*)/;
#		print $q->header( -location=>"$1/vrml/graph.cgi?texdir=$Const::textureDir&id=$ID&lang=$$variables->{useLang}&wrldir=$Const::cache3DReport" );
d190 20
a209 3
	} elsif ($style->{type} eq "graph2d") { 
		require "local/Run_graph2D.pm";
		&Run_graph2D::exportToHTML($variables, $q, $obj->{'report'}{$ID}{'name'},$ID, $style, "$Const::myPath/$Const::cache2DReport", \$data);
d211 7
d219 8
a226 1
		print $style->{type};
d228 4
@


1.68
log
@mod perl export in iso8859-2 error
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.67 2003/11/21 09:00:56 jiri_schmid Exp $
d10 1
d169 1
a169 1
			if (open(XLS,$xlsFile) && open(PDF,">$pdfFile")) {
d171 7
a177 2
				if ($$variables->{mp}) {
					# who knows? !!!
d179 3
a181 4
					binmode(PDF,":encoding(iso-8859-2)")
				}
				while (<XLS>) {
					print PDF $_
d183 2
a185 1
				close PDF;
d187 6
a192 1
				$htmldoc->set_charset("iso-8859-2");
@


1.67
log
@pdf export works in czech now
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.66 2003/11/20 16:34:03 jiri_schmid Exp $
d48 1
d170 5
a174 1
				binmode(PDF,":encoding(iso-8859-2)");
@


1.66
log
@fixed naming of unlocalized objects
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.65 2003/11/20 15:47:28 jiri_schmid Exp $
d54 1
a54 1
	'table' => 'CELLPADDING="5px" CELLSPACING="1px" BORDER="4px" BGCOLOR="#5e5e5e"',
d56 8
a63 8
		'oe tr' => 'align="center" bgcolor="#d8d84b"',
		'oe td' => 'align="right" bgcolor="#d8d84b"',
		'eo ttr' => 'align="center" bgcolor="#a0e5a0"',
		'ee tr' => 'align="center" bgcolor="#70cc70"',
		'oo ttr' => 'align="center" bgcolor="#f2f27b"',
		'eo ttd' => 'align="center" bgcolor="#a0e5a0"',
		'oo ttd' => 'align="right" bgcolor="#f2f27b"',
		'ee td' => 'align="right" bgcolor="#70cc70"'
d65 1
a65 1
	'font' => '<font size="1px" face="Arial, sans-serif">',
d67 9
a75 9
		'oe tr' => 'align="center" bgcolor="#d8d84b"',
		'ch d' => 'align="center" bgcolor="#52b752"',
		'ch r' => 'align="center" bgcolor="#52b752"',
		'oe tt' => 'align="center" bgcolor="#52b752"',
		'eo ttr' => 'align="center" bgcolor="#a0e5a0"',
		'ee tt' => 'align="center" bgcolor="#52b752"',
		'ee tr' => 'align="center" bgcolor="#70cc70"',
		'oo ttr' => 'align="center" bgcolor="#f2f27b"',
		'ee' => 'align="center" bgcolor="#52b752"'
d78 1
a78 1
		if ($params[2] eq 'xls') {
d114 4
a123 1
	print $q->param('Params') if $q->param('Params');
d176 5
a180 1
				$htmldoc->set_charset("ISO-8859-2");
@


1.65
log
@export 2 xls and pdf works (pdf is not fine)
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.64 2003/11/13 16:27:46 jiri_schmid Exp $
d156 8
d178 1
@


1.64
log
@fixed bugs and dynamicparam finder implemeted
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.63 2003/11/12 09:58:49 jiri_schmid Exp $
d10 1
d43 1
a43 3
my $objPref={};
$objPref->{Beard} = SOAP->GetUserPref($variables->{user},'Beard');
$variables->{useLang} = $objPref->{'Beard'}->{'language'} ? $objPref->{'Beard'}->{'language'} : $Const::defaultLanguage;
d46 42
a87 1
$variables->{file} = "$Const::myPath$Const::cacheReport/$variables->{id}-$variables->{useLang}.html";
d107 2
a108 1
if (! -e "$variables->{file}" && $variables->{id}) {&buildReport(\$variables,\$q)};
d112 7
a118 1
	print $q->header(-charset=>$variables->{useEnc});
d120 1
d127 1
a127 1
	my ($variables,$q) = (shift,shift); # pointer
d132 1
a132 1
	my $style;
d148 25
a172 2
		&Run_grid::exportToHTML($variables, $q, $style->{form}, $style->{header}, \$data); #pointer, scalar, scalar, pointer

@


1.63
log
@report generating - labeling changes
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.62 2003/11/12 09:12:24 vacula Exp $
a11 1
#require "local/Run_lib.pm";
a51 3

#my $dynamics = SOAP->dynamicReport($variables->{id});

d53 1
a53 2
#foreach (keys %{$dynamics}) {
#	if ($_ eq 'filter') {
a54 1

a61 1
&Run_lib::DynamicParams4Filter($dynamics);
a63 1

d65 1
a65 2
#}}
=cut 
@


1.62
log
@changes in graph 3d
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.61 2003/11/11 14:03:03 jiri_schmid Exp $
d12 1
a12 1
#require "local/Report_lib.pm";
d56 1
d59 16
a74 5
#		&Run_lib::DynamicParams4Filter(\$dynamics)
#	}
#}
#	use Data::Dumper;
#	print Dumper($dynamics);
a76 2
#&buildReport(\$variables,\$q);	# !!! let recreate cache every time - for testing purposes only

@


1.61
log
@creating report - minor bugs fixed, seems to be working properly
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.60 2003/11/06 18:42:37 vacula Exp $
d102 4
a105 2
		$ENV{HTTP_REFERER} =~ /^(.*)\/(.*)/;
		print $q->header( -location=>"$1/vrml/graph.cgi?texdir=$Const::textureDir&id=$ID&lang=$$variables->{useLang}&wrldir=$Const::cache3DReport" );
@


1.60
log
@added name of report to 2d graph
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.59 2003/11/04 15:18:54 jiri_schmid Exp $
d12 1
d54 10
d74 1
@


1.59
log
@save as - modperl fixies, code improvments
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.58 2003/11/04 10:30:43 vacula Exp $
d95 1
a95 1
		&Run_graph2D::exportToHTML($variables, $q, $ID, $style, "$Const::myPath/$Const::cache2DReport", \$data);
@


1.58
log
@cache2dreport from
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.57 2003/11/04 09:38:41 jiri_schmid Exp $
d59 1
@


1.57
log
@back changes
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.56 2003/11/04 04:45:13 michald Exp $
d94 1
a94 1
		&Run_graph2D::exportToHTML($variables, $q, $ID, $style, $Const::cache2DReport, \$data);
@


1.56
log
@graph2D fix for mod_perl
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.55 2003/10/31 12:47:54 jiri_schmid Exp $
a58 1
	print $q->header(-charset=>$variables->{useEnc});
@


1.55
log
@mod perl rocks!
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.54 2003/10/16 14:08:51 jiri_schmid Exp $
d43 1
a43 1
     $objPref->{Beard} = SOAP->GetUserPref($variables->{user},'Beard');
d59 2
a60 1
	while (<REPORT>) {print}
a85 1

d87 1
a87 1
		&Run_grid::exportToHTML($variables,$q,$style->{form},$style->{header},\$data); #pointer, scalar, scalar, pointer
d92 1
d94 3
a96 2
		require "local/run_graph2D.pl";
		exportToHTML($ID, $variables->{file}, $variables->{useEnc}, $variables->{useLang}, $style, $Const::cache2Dreport, \$data);
d102 1
a102 1
1@


1.54
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.53 2003/10/07 05:47:58 michald Exp $
d5 2
a6 3
use utf8;
binmode(STDOUT, ":utf8");
binmode(STDIN, ":utf8");
d10 2
a11 16
our $q = new CGI;
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $Languages $DefaultLanguage $texture_dir $cacheReport $cache3Dreport $cache2Dreport $Format2Dreport $TTFFontPath);
require "const.def";
require "local/local_lib.pl";
our $ID;

local($") = ' '; # white-space
my $selSize=4;

# --- make SOAP connection ---
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => $compress_threshold}]; 
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
d13 17
a29 1
my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
d31 1
a31 1
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
d35 17
a51 8
my $user = $ENV{REMOTE_USER};
my $ObjPref={};
$ObjPref->{Beard} = SOAP->GetUserPref($user,'Beard');
our $use_lang = $ObjPref->{'Beard'}->{'language'} ? $ObjPref->{'Beard'}->{'language'} : $DefaultLanguage;
our $use_enc = $Languages->{$use_lang}->{enc};
require $Languages->{$use_lang}->{'src'};
our $skin = (param('Skin')) ? param('Skin') : (param('skin')) ? param('skin') : "";
our $skinPath = ($skin) ? "skins/$skin/" : "";
d53 2
a54 2
$ID = (param('item_id')) ? param('item_id') : undef;
our $file = "$ID"."-$use_lang".".html";
d56 2
a57 5
#if (! -e "./$cacheReport/$file" && $ID) {&buildReport($ID)};
&buildReport($ID);	# !!! let recreate cache every time - for testing purposes only

if (-e "./$cacheReport/$file") {
	open(REPORT, "./$cacheReport/$file");
d65 4
a68 4
	my $ID = shift;
	
	my $Obj = SOAP->GetMetadata($ID);
	my $data = SOAP->GetResultName($ID,lc($use_lang));
d71 4
a74 4
	if (ref($Obj->{'report'}{$ID}{'format_def'}) =~ /HASH/) {
		$style = $Obj->{'report'}{$ID}{'format_def'};
	} elsif ($Obj->{'report'}{$ID}{'format_def'}) {
		my $id = $Obj->{'report'}{$ID}{'format_def'};
d85 4
a88 2
		require "local/run_grid.pl";
		exportToHTML($ID, $style->{form}, $style->{header}, \$data); #(css,?no header)
d91 1
a91 2
		my $lang = lc($use_lang);
		print $q->header( -location=>"$1/vrml/graph.cgi?texdir=$texture_dir&id=$ID&lang=$lang&wrldir=$cache3Dreport" );
d94 1
a94 1
		exportToHTML($ID, $file, $use_enc, $use_lang, $style, $cache2Dreport, \$data);
d99 2
@


1.53
log
@loading RCache from DB
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.52 2003/10/04 08:14:34 michald Exp $
d14 1
a14 1
require "local_lib.pl";
d78 1
a78 1
		require "run_grid.pl";
d85 1
a85 1
		require "run_graph2D.pl";
@


1.52
log
@writing 2D graphs html into cache
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.51 2003/10/02 08:05:29 vacula Exp $
d69 2
a70 2
		my $subType = SOAP->GetObjectType($id);
		$style = $x->{$subType}{$id};
@


1.51
log
@changes in graph2D
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.50 2003/09/30 07:10:53 michald Exp $
d12 1
a12 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $Languages $DefaultLanguage $texture_dir $cache3Dreport $cache2Dreport);
d14 1
d46 1
a46 1
#if (! -e "./html/$file" && $ID) {&buildReport($ID)};
d49 2
a50 2
if (-e "./html/$file") {
	open(REPORT, "./html/$file");
@


1.50
log
@handling data by reference in exportToHTML
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.49 2003/09/29 05:43:13 michald Exp $
d85 1
a85 1
		exportToHTML($ID, $style, $cache2Dreport, \$data);
@


1.49
log
@new version of the metadata - multiple attribute PK implementation; improvement of the PrepareSQL
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.48 2003/09/25 12:42:09 vacula Exp $
d78 1
a78 1
		exportToHTML($ID,$style->{form},$style->{header},$data); #(css,?no header)
d85 1
a85 1
		exportToHTML($ID,$style,$cache2Dreport,$data);
@


1.48
log
@minor changes in parameters of format2d
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.47 2003/09/23 17:58:33 vacula Exp $
a5 2
#binmode(STDOUT, ":encoding(iso-8859-1)");
#binmode(STDIN, ":encoding(iso-8859-2)");
a44 1
our $data;
d46 1
a46 1
&buildReport($ID);	# let recreate cache every time - for testing purposes only
d60 1
a60 1
	$data = SOAP->GetResultName($ID,lc($use_lang));
d78 1
a78 1
		exportToHTML($style->{form},$style->{header}); #(css,?no header)
d84 1
a84 1
	        require "run_graph2D.pl";
@


1.47
log
@added calling for graphs2d
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.46 2003/09/22 14:15:01 jiri_schmid Exp $
d88 1
a88 1
		exportToHTML($ID,$style->{form},$cache2Dreport,$data);
@


1.46
log
@report menu improvments
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.45 2003/09/22 11:01:27 vacula Exp $
d14 1
a14 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $Languages $DefaultLanguage $texture_dir);
a56 1
print Dumper($data);
d85 4
a88 1
		print $q->header( -location=>"$1/vrml/graph.cgi?texdir=$texture_dir&id=$ID&lang=$lang" );
d90 1
a90 1
		print $style->{type}
@


1.45
log
@changed calling  3d reports
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.43 2003/08/18 05:50:52 michald Exp $
d41 2
@


1.44
log
@implementation of right clik menu
@
text
@a40 2
our $skin = (param('Skin')) ? param('Skin') : (param('skin')) ? param('skin') : "";
our $skinPath = ($skin) ? "skins/$skin/" : "";
d55 1
a55 1

a81 1
	    require "local_lib.pl";
d84 1
a84 3
		my $name = &LocalizedObj($Obj->{report}{$ID}{name},"$ID","$lang");
		my $form = $style->{form};
		print $q->header( -location=>"$1/vrml/work.cgi?texdir=$texture_dir&ID=$ID&name=$name&form=$form" );
@


1.43
log
@some ACL improvement
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.42 2003/08/04 12:07:38 jiri_schmid Exp $
d41 2
@


1.42
log
@graph3d-color inerface improvment, run.cgi bug fix
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.41 2003/08/04 09:51:25 jiri_schmid Exp $
d47 1
a47 1
&buildReport($ID);	# let recreate cache every time for testing purposes only
d61 1
a61 1
	my $Obj = GetMetadata($ID);
d69 1
a69 1
		my $x = GetMetadata($id);
@


1.41
log
@code improvment, bug fixies
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.40 2003/07/24 10:37:48 jiri_schmid Exp $
d70 2
a71 1
		$style = $x->{format}{$id};
@


1.40
log
@next tab implmented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.39 2003/07/18 10:50:59 jiri_schmid Exp $
a44 2
#print $q->header(-charset=>$use_enc);			## moved to subroutine buildReport

d75 2
a76 1
	}
a77 2
		print $q->header(-charset=>$use_enc);
		#require "edit/run_grid.pl";
@


1.39
log
@format3d implemented, format changed all dependencies fixed
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.38 2003/07/17 03:04:16 michald Exp $
d79 1
a79 1
	print $q->header(-charset=>$use_enc);
d83 1
a83 4
	} else {
	print $style->{type}
	}
	if ($style->{type} eq "vrml") { 
d90 2
a92 1

@


1.38
log
@fix of ObjInvolved func
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.37 2003/07/15 13:45:48 vacula Exp $
a77 1
	
d83 2
@


1.37
log
@added style->type vrml
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.36 2003/07/08 07:12:02 jiri_schmid Exp $
d36 1
a36 1
my $ObjPref;
d48 2
a49 2
if (! -e "./html/$file" && $ID) {&buildReport($ID)};
#&buildReport($ID);	# for testing purposes don't use the cache
@


1.36
log
@utf8 implementation in last stage
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.35 2003/07/07 14:17:10 jiri_schmid Exp $
d14 1
a14 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $Languages $DefaultLanguage);
d45 1
a45 1
print $q->header(-charset=>$use_enc);
d80 1
d84 8
@


1.35
log
@utf8 may work properly
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.34 2003/07/04 15:28:39 michald Exp $
d48 2
a49 2
#if (! -e "./html/$file" && $ID) {&buildReport($ID)};
&buildReport($ID);	# for testing purposes don't use the cache
@


1.34
log
@minor fixes
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.33 2003/07/04 14:29:27 jiri_schmid Exp $
d62 1
a63 1

d78 1
a78 1

@


1.33
log
@utf8 handling fixed
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.32 2003/07/04 06:19:13 michald Exp $
d54 1
a54 1
	while (<REPORT>) {print "$_";}
@


1.32
log
@some fixes for proper utf8 encoding, see README for details
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.29 2003/06/30 09:14:30 jiri_schmid Exp $
d53 1
d65 1
a65 1

@


1.31
log
@minor code change
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.30 2003/07/02 13:44:29 jiri_schmid Exp $
d5 6
d14 1
a14 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $Languages @@Languages $lang);
d38 1
a38 1
our $use_lang = $ObjPref->{'Beard'}->{'language'};
d48 3
a50 2
if (! -e "./html/$file" && $ID) {&buildReport()};
#&buildReport();
d60 2
a61 1
my $Obj = GetMetadata($ID);
d63 20
a82 1
$data = SOAP->GetResultName($ID,lc($use_lang));
a83 11
my $style;
if (ref($Obj->{'report'}{$ID}{'format_def'}) =~ /HASH/) {
	$style = $Obj->{'report'}{$ID}{'format_def'};
} elsif ($Obj->{'report'}{$ID}{'format_def'}) {
	my $id = $Obj->{'report'}{$ID}{'format_def'};
	my $x = GetMetadata($id);
	$style = $x->{format}{$id};
} else {
	$style->{type} = "grid";
	$style->{form} = "default";
	$style->{header} = "none";
a84 6

if ($style->{type} eq "grid") {
	#require "edit/run_grid.pl";
	require "run_grid.pl";
	exportToHTML($style->{form},$style->{header}); #(css,?no header)
}}
@


1.30
log
@header descriptions finally implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.29 2003/06/30 09:14:30 jiri_schmid Exp $
d42 2
a43 2
#if (! -e "./html/$file" && $ID) {&buildReport()};
&buildReport();
@


1.29
log
@mcache inherited into report
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.28 2003/06/26 09:31:40 jiri_schmid Exp $
d67 1
d73 1
a73 1
	exportToHTML($style->{form}); #(css,?no header)
@


1.28
log
@css report visual changes, code improvment
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.27 2003/06/25 15:40:25 jiri_schmid Exp $
d42 2
a43 2
if (! -e "./html/$file" && $ID) {&buildReport()};
#&buildReport();
a55 10
$data->{c}->{0}->{0} = "asd";
$data->{c}->{0}->{2} = "ass";
$data->{c}->{0}->{7} = "add";
$data->{c}->{1}->{0} = "ddd";
$data->{c}->{1}->{2} = "rrd";
$data->{c}->{2}->{8} = "dff";
$data->{c}->{2}->{5} = "aaa";
$data->{c}->{3}->{1} = "jkl";
$data->{c}->{3}->{10} = "opu";
$data->{c}->{4}->{4} = "ghh";
@


1.27
log
@code changes a fixies
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.26 2003/06/24 15:17:39 jiri_schmid Exp $
d42 2
a43 2
#if (! -e "./html/$file" && $ID) {&buildReport()};
&buildReport();
@


1.26
log
@metric mData change, minor code improvment
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.25 2003/06/19 14:59:41 jiri_schmid Exp $
d42 2
a43 2
if (! -e "./html/$file" && $ID) {&buildReport()};
#&buildReport();
d55 1
a55 1
$data = SOAP->GetResult($ID,lc($use_lang));
@


1.25
log
@huge improvment on format page
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.24 2003/06/18 10:53:05 jiri_schmid Exp $
a47 7
}

#---------------------------------------------------

sub print_form {
	my($cgi,$ID) = @@_;
	print SOAP->GetResult($ID);
@


1.24
log
@creating of result-grid extracted into separate file
@
text
@d2 1
a2 4
#-----------------------------------------------------
#  Folder Display
#-----------------------------------------------------
# $Id: run.cgi,v 1.23 2003/06/18 08:06:49 jiri_schmid Exp $
@


1.23
log
@minor but important code change
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.21 2003/06/17 08:45:46 jiri_schmid Exp $
a11 1

a12 3
require "local_lib.pl";

#our $ID=&SetParam('ID','id');
d36 1
a36 1
my $use_enc = $Languages->{$use_lang}->{enc};
d40 1
a40 1
my $file = "$ID"."-$use_lang".".html";
a52 2
print $q->end_html;

d61 1
a62 3

open(RT,">html/$file") || return eval "print '<pre>something wrrrrrong!</pre>'";

a63 23
my $style;
if (ref($Obj->{'report'}{$ID}{'format_def'}) =~ /HASH/) {
	$style = $Obj->{'report'}{$ID}{'format_def'};
} else {
	my $id = $Obj->{'report'}{$ID}{'format_def'};
	my $x = GetMetadata($id);
	$style = $x->{format}{$id};
};
my $css = ($style->{type} eq "grid") ? $style->{form} : "default";

print RT <<END;
<?xml version="1.0" encoding="$use_enc"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$Languages->{$use_lang}->{lang}" xml:lang="$Languages->{$use_lang}->{lang}">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=$use_enc" />
<title>Report Result</title>
<style>\@@import url("./CSS/$css.css");</style></head>
END

print RT "<input type='hidden' value='$ID' id='ID' name='id' />\n";
a64 1
our $use_lang;
d77 10
a86 80

exportToHTML();

close(RT);
}

#---------------------------------------------------
sub exportToHTML() {
print RT "<table>";
my($row,$col);
my(@@colBorder,@@rowBorder);
@@colBorder = initBorder('col');
@@rowBorder = initBorder('row');
my $groupCols = ($data->{row}[0]) ? @@{$data->{row}[0]} : 0;
my $groupRows = ($data->{col}[0]) ? @@{$data->{col}[0]} : 0;
for ($row = 0;$row < $groupRows; $row++) {
	print RT "<tr>";
	print RT printGroupedCell('&nbsp;','ee r',$groupCols,$groupRows) if ($row == 0 && $groupCols > 0);
	my $cssR;
	$col = 0;
	while ($col < @@{$data->{col}}) {
		my $count = 1;
		my $colIndex = $col;
		my $colspan = 0;
		while ($count) {
			if ($colBorder[$col]) {
				$count = 0;
			} else {
				if ($col < @@{$data->{col}}-1) {
					if ($data->{col}[$col][$row] ne $data->{col}[$col+1][$row]) { $colBorder[$col] = 2; $count = 0;}
				};
			}
			$colspan++;
			$col++;
		}
		$cssR = ($colBorder[$col-1] == 1) ? 'r' : 'd';	#border style fo col header
		print RT printHeaderCell($data->{col}[$colIndex][$row],"ee $cssR",$colspan);
	}
	print RT "</tr>";
}
my $cssHlp = 'e';
my $cnt = 0;						#row area color
for ($row = 0; $row < @@{$data->{row}}; $row++) {
	print RT "<TR>";
	my $cssB = '';					#border style
	$cnt++;
	if ($rowBorder[$row] == 1){
		$cssB = 't';
		$cssHlp = ($cssHlp eq 'e') ? 'o' : 'e';		#change row area color
		$cnt = 0;
	};
	my $cssC = (($cnt%2) == 0) ? $cssHlp."e" : $cssHlp."o";	#each row color depending on row area color
	for ($col = 0; $col < @@{$data->{row}[0]}; $col++) {
		if (!$rowBorder[$row]) {
			if ($data->{row}[$row-1][$col] ne $data->{row}[$row][$col]) { $rowBorder[$row] = $col+1; }
		};
		my $cssR = ($col == @@{$data->{row}[0]}-1) ? 'tr' : 't';	#border style for last col in row header
		if ($rowBorder[$row] && $col+1 >= $rowBorder[$row]) {
			my $count = 1;
			my $rowspan = 1;
			my $rowIndex = $row+1;
			while ($count) {
				if ($rowBorder[$rowIndex] || $rowIndex >= @@{$data->{row}}) {
					$count = 0;
				} else {
					if (!$rowBorder[$rowIndex] && $data->{row}[$rowIndex][$col] ne $data->{row}[$rowIndex-1][$col]) { $rowBorder[$rowIndex] = $col+1; last;}
					$rowspan++;
					$rowIndex++;
				}
			}
			print RT printHeaderCell($data->{row}[$row][$col],"$cssC $cssB$cssR",undef,$rowspan);
			};
	};
	for ($col = 0; $col < @@{$data->{col}}; $col++) {
		my $cssR = ($colBorder[$col] == 1) ? 'tr' : 'td';		#border style for cells
		print RT printCell($data->{c}{$row}{$col},"$cssC $cssB$cssR");
	}
	print RT "</TR>"
}
print RT "</table>";
d89 5
a93 54
#---------------------------------------------------
sub initBorder() {
my $what = shift;
my @@rtrn;

if ($what eq 'col') {
	my $cnt = (ref($data->{col})) ? @@{$data->{col}} : 1;
	for (my $i = 0; $i < $cnt-1; $i++) {
		if ($data->{col}[$i][0] eq $data->{col}[$i+1][0]) { push(@@rtrn,undef) }
		else { push(@@rtrn,1) }; 	# return something like nnn1nnn1nn..../ indicates the right solid border is necessary
	}
	push(@@rtrn,1);
} elsif ($what eq 'row') {
	push(@@rtrn,1);
	my $cnt = (ref($data->{row})) ? @@{$data->{row}} : 0;
	for (my $i = 1; $i < $cnt; $i++) {
		if ($data->{row}[$i][0] eq $data->{row}[$i-1][0]) { push(@@rtrn,undef) }
		else { push(@@rtrn,1) };		# returns something like 1nnn1nnn1nn..../ indicates the top sollid border is necessary
	}
}
return @@rtrn
}

#---------------------------------------------------
sub printHeaderCell (){
	my($content,$css,$cols,$rows,$html32) = @@_;
	my $printCols = ($cols > 1) ? " colspan='$cols'" : "";
	my $printRows = ($rows > 1) ? " rowspan='$rows'" : "";
	if ($html32) {
		return "<th $html32$printCols$printRows>$content</th>"
	} else {
		return "<th class='$css'$printCols$printRows>$content</th>"
	}
}
#---------------------------------------------------
sub printGroupedCell() {
	my($content,$css,$cols,$rows,$html32) = @@_;
	my $printCols = ($cols > 1) ? " colspan='$cols'" : "";
	my $printRows = ($rows > 1) ? " rowspan='$rows'" : "";
	if ($html32) {
		return "<td $html32$printCols$printRows>$content</td>"
	} else {
		return "<td class='$css'$printCols$printRows>$content</td>"
	}
}
#---------------------------------------------------
sub printCell() {
	my($content,$css,$html32) = @@_;
	if ($html32) {
		return "<td $html32>$content</td>"
	} else {
		return "<td class='$css'>$content</td>"
	}
}
@


1.22
log
@code improvment a bug fixies
@
text
@d49 2
a50 2
#if (! -e "./html/$file" && $ID) {&buildReport()};
&buildReport();
a63 1

@


1.21
log
@changed structure of format object
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.20 2003/06/16 12:20:23 jiri_schmid Exp $
d49 2
a50 1
if (! -e "./html/$file" && $ID) {&buildReport()};
d123 3
a125 1
for ($row = 0;$row < @@{$data->{col}[0]}; $row++) {
d127 1
a127 1
	print RT printGroupedCell('&nbsp;','ee r',$#{$data->{row}[0]}+1,$#{$data->{col}[0]}+1) if ($row == 0);
d198 1
a198 1
	my $cnt = @@{$data->{col}};
d206 1
a206 1
	my $cnt = @@{$data->{row}};
@


1.20
log
@minor styles changes
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.19 2003/06/16 11:09:08 jiri_schmid Exp $
d73 2
a74 2
if (ref($Obj->{'report'}->{$ID}->{'format_def'}) =~ /HASH/) {
	$style = $Obj->{'report'}->{$ID}->{'format_def'};
d80 1
a80 1
my $css = (exists($style->{css})) ? $style->{css}{type} : "default";
@


1.19
log
@css changes-visual imrpovments
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.18 2003/06/16 08:33:02 jiri_schmid Exp $
a49 2
#&buildReport();

d124 1
a124 1
	print RT printEmptyCell('&nbsp;','ee r',$#{$data->{row}[0]}+1,$#{$data->{col}[0]}+1) if ($row == 0);
d224 1
a224 1
sub printEmptyCell() {
@


1.18
log
@styles in report implemented
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.17 2003/06/13 11:32:50 jiri_schmid Exp $
a45 12
my $Obj = GetMetadata($ID);
my $style;
if (ref($Obj->{'report'}->{$ID}->{'format_def'}) =~ /HASH/) {
	$style = $Obj->{'report'}->{$ID}->{'format_def'};
} else {
	my $id = $Obj->{'report'}{$ID}{'format_def'};
	my $x = GetMetadata($id);
	$style = $x->{format}{$id};
};

my $css = (exists($style->{css})) ? $style->{css}{type} : "default";

a47 18
print <<END;
<?xml version="1.0" encoding="$use_enc"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$Languages->{$use_lang}->{lang}" xml:lang="$Languages->{$use_lang}->{lang}">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=$use_enc" />
<title>Report Result</title>
<style>\@@import url("./CSS/$css.css");</style>
</head>
END

#use Data::Dumper;
#print "<pre>".Dumper($style),"</pre>";

print "<input type='hidden' value='$ID' id='ID' name='id' />\n";

d71 26
a96 1
open(RT,">html/$file") || print "<!--something wrrrrrong?-->";
a117 1

d165 1
a165 1
		my $cssR = ($col == @@{$data->{row}[0]}-1) ? 'r' : '';	#border style for last col in row header
d183 1
a183 1
		my $cssR = ($colBorder[$col] == 1) ? 'r' : 'd';		#border style for cells
d191 1
@


1.17
log
@metric in report implemented, clearcache implemented, when part of report changed
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.16 2003/06/12 08:44:22 jiri_schmid Exp $
d43 15
d60 11
a70 37
print $q->start_html(
	-title=>"Report Result",
  	-lang=>$Languages->{$use_lang}->{lang},	#return language specification in format: language-country (it differs from param Lang)
	-encoding=>$use_enc,
	-head=>meta({	-http_equiv => 'Content-Type', 
		-content => "text/html; charset=$use_enc" }),
);

print <<END ;
<style>
BODY {font-family:Arial,sans-serif; background-color:#eeeeee; color:#000} 
TABLE {	position: absolute;
	left: 20px;
	top: 10px;
	font-family: Arial, sans-serif;
	font-size: 14px;
	color: #000000;
	border: 4px solid #20601b;
	border-collapse: collapse;
	padding: 1px; margin: 0;
	white-space: nowrap;
	empty-cells: show;}

TH {padding: 1px; margin: 0; text-align: center !important}
TR {padding: 1px; margin: 0;}
TD {padding: 1px; margin: 0;}

.t { border-top: 2px solid #055; padding: 1px; margin: 0;}	/*top*/
.r { border-right: 2px solid #055; padding: 1px; margin: 0;} 	/*right*/
.d { border-right: 1px dashed #055; padding: 1px; margin: 0;}	  /*right dash*/
.tr{ border-top: 2px solid #055; border-right: 2px solid #055; padding: 0; margin: 0;}	/*top right*/
.td{ border-top: 2px solid #055; border-right: 1px dashed #055; padding: 0; margin: 0;}	/*top right dash*/
.ee{ background-color: #9bd88f; padding: 1px; margin: 0; text-align:right;}	  /*color even even*/
.eo{ background-color: #b9f2b0; padding: 1px; margin: 0; text-align:right;}	  /*color even odd*/
.oe{ background-color: #78ce67; padding: 1px; margin: 0; text-align:right;}	  /*color odd even*/
.oo{ background-color: #95e585; padding: 1px; margin: 0; text-align:right;}	  /*color odd odd*/
</style>
d73 2
a74 2
$ID = (param('item_id')) ? param('item_id') : undef;
my $file = "$ID"."-$use_lang".".html";
a101 3

my $Obj = GetMetadata($ID);
my $hlp = GetMetadata($Obj->{'report'}->{$ID}->{'format_def'});
@


1.16
log
@create HTML report on artificial datas implemented
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.15 2003/06/09 14:50:23 jiri_schmid Exp $
d39 1
a39 1
my $use_lang = $ObjPref->{'Beard'}->{'language'};
d117 2
a118 1
$data = SOAP->GetResult($ID);
@


1.15
log
@minor visual IE/Mozilla imrpovmnet
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.14 2003/06/09 13:50:57 jiri_schmid Exp $
a50 1
	-style=>{-src=>"$StyleSheet"},
d55 5
a59 1
TABLE {	font-family: Arial, sans-serif;
d62 1
a62 1
	border: 2px solid #20601b;
d84 1
a84 1
$ID= (param('item_id')) ? param('item_id') : undef;
a87 2
print "<input type='hidden' value='$user' id='openByUser' />\n";
print "<script type='text/javascript'>var changed='$lang->{Result_changed}: ';</script>\n";
d90 2
a91 2
#if (! -e "./html/$file" && $ID) {&buildReport()};
&buildReport();
d109 1
a109 2
#------------------------

a111 2
#local(*STDOUT);
#open(STDOUT,">html/$file") || print "<!--something wrrrrrong?-->";
a113 3
print RT $q->Dump;
print RT $q->hidden('ID',$ID);
print RT "<input type='hidden' value='$user' id='savedByUser' />";
a115 10
use Data::Dumper;
#print RT '<pre>$Obj:'.Dumper($Obj)."</pre>";
#print RT '<pre>$hlp:'.Dumper($hlp)."</pre>";
if (exists($hlp->{'format'}->{$Obj->{'report'}->{$ID}->{'format'}}{"graph"})) {print "<pre>require: require enabling (uncommenting) when functional</pre>"};#require "vrml/work.pl"};

   if ($q->param('Action') eq 'Save') {

   }
 
#print_form($q,$ID);
d117 1
a117 2
$data->{ch} = [["Brno","Leden","Mleko","Full"],["Brno","Leden","Mleko","Half"],["Brno","Leden","Kakao","Full"],["Brno","Unor","Mleko","Full"],["Brno","Unor","Mleko","Half"],["Brno","Unor","Kakao","Full"],["Praha","Unor","Mleko","Full"],["Praha","Unor","Kakao","half"]];
$data->{rh} = [["mx",1,0,2],["mx",1,0,3],["mx",1,1,4],["mx",1,1,5],["mx",0,1,6],["mx",0,0,5],["n",1,1,1],["n",0,0,0],["n",0,1,2],["c",0,1,5],["c",0,1,4],["c",5,1,7]];
d120 1
a120 1
$data->{c}->{0}->{3} = "add";
d123 1
a123 1
$data->{c}->{2}->{4} = "dff";
d126 1
a126 1
$data->{c}->{3}->{2} = "opu";
a127 4
$data->{c}->{5}->{0} = "ert";
$data->{c}->{5}->{5} = "kls";
$data->{c}->{6}->{1} = "ett";
$data->{c}->{7}->{2} = "qwe";
d130 1
a130 1
#my $x = @@{$data->{ch}[0]};
a131 2
exportToHTML();
#print RT "<pre>".Dumper($data)."</pre>";
d143 1
a143 1
for ($row = 0;$row < @@{$data->{ch}[0]}; $row++) {
d145 1
a145 1
	print RT printEmptyCell('&nbsp;','ee r',$#{$data->{rh}[0]}+1,$#{$data->{ch}[0]}+1) if ($row == 0);
d148 1
a148 1
	while ($col < @@{$data->{ch}}) {
d156 2
a157 2
				if ($col < @@{$data->{ch}}-1) {
					if ($data->{ch}[$col][$row] ne $data->{ch}[$col+1][$row]) { $colBorder[$col] = 2; $count = 0;}
d164 1
a164 1
		print RT printHeaderCell($data->{ch}[$colIndex][$row],"ee $cssR",$colspan);
d168 3
a170 2
my $cssHlp = 'e';						#row area color
for ($row = 0; $row < @@{$data->{rh}}; $row++) {
d172 2
a173 1
	my $cssB = '';						#border style
d177 1
d179 2
a180 2
	my $cssC = (($row%2) == 0) ? $cssHlp."e" : $cssHlp."o";	#each row color depending on row area color
	for ($col = 0; $col < @@{$data->{rh}[0]}; $col++) {
d182 1
a182 1
			if ($data->{rh}[$row-1][$col] ne $data->{rh}[$row][$col]) { $rowBorder[$row] = $col+1; }
d184 1
a184 1
		my $cssR = ($col == @@{$data->{rh}[0]}-1) ? 'r' : '';	#border style for last col in row header
d190 1
a190 1
				if ($rowBorder[$rowIndex] || $rowIndex >= @@{$data->{rh}}) {
d193 1
a193 1
					if (!$rowBorder[$rowIndex] && $data->{rh}[$rowIndex][$col] ne $data->{rh}[$rowIndex-1][$col]) { $rowBorder[$rowIndex] = $col+1; last;}
d198 1
a198 1
			print RT printHeaderCell($data->{rh}[$row][$col],"$cssC $cssB$cssR",undef,$rowspan);
d201 1
a201 1
	for ($col = 0; $col < @@{$data->{ch}}; $col++) {
d215 1
a215 1
	my $cnt = @@{$data->{ch}};
d217 1
a217 1
		if ($data->{ch}[$i][0] eq $data->{ch}[$i+1][0]) { push(@@rtrn,undef) }
d223 1
a223 1
	my $cnt = @@{$data->{rh}};
d225 1
a225 1
		if ($data->{rh}[$i][0] eq $data->{rh}[$i-1][0]) { push(@@rtrn,undef) }
d232 1
d243 1
a243 1

d254 1
a254 2


a262 10










@


1.14
log
@report html exporter implemented, data object still missing
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.13 2003/06/03 08:15:41 jiri_schmid Exp $
d51 1
a51 1
	-style=>{-src=>"report/css.css"},
d53 27
@


1.13
log
@code improvment
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.12 2003/06/02 14:47:34 jiri_schmid Exp $
d51 1
a51 1
	-style=>{-src=>"$StyleSheet"},
d61 3
a63 1
if (! -e "./html/$file" && $ID) {&buildReport()};
d85 7
a91 6
local(*STDOUT);
open(STDOUT,">html/$file") || print "<!--something wrrrrrong?-->";

print $q->Dump;
print $q->hidden('ID',$ID);
print "<input type='hidden' value='$user' id='savedByUser' />";
d93 1
a93 1
my $hlp = GetMetadata($Obj->{'report'}->{$ID}->{'format'});
d95 2
a96 2
print '<pre>$Obj:'.Dumper($Obj)."</pre>";
print '<pre>$hlp:'.Dumper($hlp)."</pre>";
d103 1
a103 1
print_form($q,$ID);
d105 23
a127 1
close(STDOUT);
d131 133
@


1.12
log
@user prefernces handled with getuserpref only
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.11 2003/05/13 15:18:56 jiri_schmid Exp $
d37 2
a38 1
my $ObjPref->{Beard} = SOAP->GetUserPref($user,'Beard');
@


1.11
log
@new report page seems to be fullfunctional, javascript code huge improvment
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.10 2003/05/01 15:40:15 jiri_schmid Exp $
d37 1
a37 1
my $ObjPref = SOAP->LoadUserPref($user);
@


1.10
log
@code improvment
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.9 2003/04/30 14:45:40 jiri_schmid Exp $
a49 1
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/report.js'}],
a50 1
	-onload=>"checkCreator()",
@


1.9
log
@removing results implemented, minor code improvment
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.8 2003/04/30 09:53:35 jiri_schmid Exp $
d62 1
a62 3
if (! param('build') ||! -e "./html/$file") {
	if ($ID) {&buildReport()};
}
@


1.8
log
@tabs for results implemented
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.7 2003/03/24 12:17:43 jiri_schmid Exp $
a54 3
print "<input type='hidden' value='$user' id='openByUser' />";
print "<script type='text/javascript'>var changed='$lang->{Result_changed}: ';</script>";

d57 4
@


1.7
log
@IE5 bug fixed
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.6 2003/03/18 12:04:32 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName);
a16 1
our $User=$q->remote_user();
a21 7
print $q->header;

print $q->start_html(
   -title=>"Report Result",
   -style=>{-src=>$StyleSheet},
);

d36 34
a70 10
&do_work($q);
$ID= (param('item_id')) ? param('item_id') : &SetParam('ID','id');
print $q->hidden('ID',$ID);
my $Obj = GetMetadata($ID);
my $hlp = GetMetadata($Obj->{'report'}->{$ID}->{'format'});
use Data::Dumper;
print '<pre>$Obj:'.Dumper($Obj)."</pre>";
print '<pre>$hlp:'.Dumper($hlp)."</pre>";
if (exists($hlp->{'format'}->{$Obj->{'report'}->{$ID}->{'format'}}{"graph"})) {print "<pre>require: require enabling (uncommenting) when functional</pre>"};#require "vrml/work.pl"};
print_form($q,$ID);
a72 1

d83 1
a83 3
sub do_work {
   my($cgi) = @@_;
   print $cgi->Dump;
d85 14
a98 1
   if ($cgi->param('Action') eq 'Save') {
d101 4
@


1.6
log
@enabling of vrml in run.cgi
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.5 2003/03/12 16:32:44 jiri_schmid Exp $
d53 1
a53 1
if (exists($hlp->{'format'}->{$Obj->{'report'}->{$ID}->{'format'}}{"graph"})) {print "<pre>require: require enabling if data object filled</pre>"};#require "vrml/work.pl"};
@


1.5
log
@user prefernce - open result in: implemented
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.4 2003/01/30 06:36:20 michald Exp $
d48 6
@


1.4
log
@functionality for saving and retrieving attribute displays and metric groups in grid editor
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.3 2003/01/16 17:20:19 spanhel Exp $
d16 1
a16 1
our $ID=&SetParam('ID','id');
d18 1
d46 1
@


1.3
log
@change edit.cgi - tree and object edit desided into two iframes
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.1.1.1 2002/09/24 01:56:46 michald Exp $
d7 1
d10 3
a12 1
$q = new CGI;
d14 1
d16 2
a17 2
$ID=$q->param('ID');
$User=$q->remote_user();
d25 1
a25 1
   -title=>"Show Folders",
d29 15
d46 1
a46 1
print 'test';
d53 2
a54 1
	my($cgi) = @@_;
@


1.2
log
@hard connection to test project in *_ed.pl wa removed
@
text
@a6 1
use strict;
d9 1
a9 3
our $q = new CGI;
use vars qw($StyleSheet $bearHost $bearPort);

a10 1
require "local_lib.pl";
d12 2
a13 2
my $ID=&SetParam('ID','id');
my $User=$q->remote_user();
d21 1
a21 1
   -title=>"Run Report",
a24 14
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => 10000}]; 
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";

if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

d27 1
a27 6
my $res = SOAP->GetResult($ID);
if ($res) {
	print_form($q,$res);
} else {
	print '<STRONG>WARNING</STRONG>: Report Object to Run is not selected.';
}
d34 1
a34 6
	my $cgi = shift;
	my $res = shift;

	use Data::Dumper;
	print Dumper ($res);
	
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
# $Id: run.cgi,v 1.1 2002/09/16 15:00:20 michal Exp $
d7 1
d10 3
a12 1
$q = new CGI;
d14 1
d16 2
a17 2
$ID=$q->param('ID');
$User=$q->remote_user();
d25 1
a25 1
   -title=>"Show Folders",
d29 14
d45 6
a50 1
print 'test';
d57 6
a62 1
	my($cgi) = @@_;
@


1.1.1.1
log
@Initial release of Bear ROLAP Portal
@
text
@@

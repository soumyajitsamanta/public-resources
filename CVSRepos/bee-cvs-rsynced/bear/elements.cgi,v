head	1.30;
access;
symbols;
locks; strict;
comment	@# @;


1.30
date	2004.03.04.14.43.08;	author jiri_schmid;	state Exp;
branches;
next	1.29;

1.29
date	2004.02.24.14.25.25;	author jiri_schmid;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.12.13.42.03;	author michald;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.04.12.15.13;	author jiri_schmid;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.23.10.43.38;	author michald;	state Exp;
branches;
next	1.25;

1.25
date	2003.11.07.16.50.50;	author jiri_schmid;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.31.12.47.54;	author jiri_schmid;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.16.14.08.51;	author jiri_schmid;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.30.15.46.26;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.11.16.22.57;	author jiri_schmid;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.01.13.35.14;	author jiri_schmid;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.01.12.40.05;	author jiri_schmid;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.18.05.50.52;	author michald;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.12.14.09.45;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.11.13.50.25;	author jiri_schmid;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.11.12.30.57;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.07.08.02.10;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.06.15.22.29;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.06.09.36.31;	author michald;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.06.09.23.44;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.06.07.50.27;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.05.12.49.44;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.05.08.02.03;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.31.14.34.29;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.31.12.15.58;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.30.15.30.40;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.29.14.36.37;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.29.12.28.26;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.29.07.59.41;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.28.13.41.40;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.30
log
@fixing bugs and improving useability and performance
@
text
@#!/usr/bin/perl
#-----------------------------------------------------
#  Display elements object in IFRAME
#-----------------------------------------------------
# $Id: elements.cgi,v 1.29 2004/02/24 14:25:25 jiri_schmid Exp $

use strict;
my $run_mod_perl = defined(&Apache::RequestRec::BINMODE);	# are we running under mod_perl?
if ($run_mod_perl) { Apache::RequestRec::BINMODE(':utf8') } else { binmode STDOUT,':utf8' }

use CGI qw( :standard );
use CGI::Pretty;
require "const/Const.pm";
require "local/Local.pm";

# ---- init SOAP ---------
#-------------------------
our $load = 1;
if ($load) {	# ensure require will be performed only once in case of mod_perl execution
	eval "use SOAP::Lite +autodispatch => 
		uri => 'Bear', 
		proxy => ['http://$Const::bearHost:$Const::bearPort/', 
		options => {compress_threshold => $Const::compressThreshold}]; 
		1"
	or ( &Local::ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
	undef $load;
}
my $q = new CGI;

# --- test SOAP connection ---
#-----------------------------
my $serverVerbName="SOAP Server http://$Const::bearHost:$Const::bearPort/,opitons->compress:$Const::compressThreshold ";
if (! eval "SOAP::Lite->self->fault") {
	&Local::ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)


# --- determine user and his preferences ---
#-------------------------------------------
my $user = $q->remote_user();
my $use_lang = $q->param('Lang') ? $q->param('Lang') : $q->param('active_lang') ? $q->param('active_lang') : 'en'; #active lang defined in *_ed.pl
my $use_enc = $Const::languages->{$use_lang}->{enc};
my $skin = ($q->param('Skin')) ? $q->param('Skin') : ($q->param('skin')) ? $q->param('skin') : "";
my $skinPath = ($skin) ? "skins/$skin/" : "";
my $imgType = 'png';#&Local::getImageType("$Const::myPath${skinPath}img/");
my $ID = $q->param('itemId');

# --- load message dictionary ---
#---------------------------------
require "lang/$use_lang.utf";


# --- start of page ---
print $q->header(-charset=>$use_enc);
print $q->start_html(
	-title=>"Elements",
	-class=>'elements',
	-lang=>$Const::languages->{$use_lang}->{lang},
	-encoding=>$use_enc,
	-head=>meta({ -http_equiv => 'Content-Type', -content => "text/html; charset=$use_enc" }),
	-style=>{-src=>"${skinPath}css.css"},
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/dad_drag_only.js'},
		  {-language=>'JAVASCRIPT', -src=>'js/attr.js'},
		  {-language=>'JAVASCRIPT', -src=>'js/elements.js'}],
		-onload=>"init_var(3); hide_load(); return true;",
	-onclick=>"load_me()",
	-onresize=>'initOffset(3);'
);

#use Data::Dumper;
#print "<pre>".Dumper($q)."</pre>";

print startform(-action=>'', -name=>'elements', onsubmit=>'');
print <<END;
<span id='title' class='title'>
<img id='openClose' class='cursor' src='${skinPath}img/rightArr.$imgType' onclick='ocElements();' alt='OC' title="$Const::lang->{$use_lang}{'Elements oc'}"/>
<span id='contentTitle'>&nbsp;$Const::lang->{$use_lang}{'Elements'}&nbsp;</span><img id='single' src='${skinPath}img/single_attr.$imgType'/>
</span>
<div id='content'><br>
<input type='hidden' value='$ID' id='itemId' name='itemId'/>
<input type='hidden' value='$skin' id='skin' name='skin'/>
<input type='hidden' value='$ID' name='attrId'/>
<input type='hidden' value='$use_lang' id='activeLang' name='active_lang' />
<input type="hidden" id="imgType" value="$imgType"/>
<select multiple='multiple' style='width:100%; height:45%;' name='elementsId' id='elementsId' onchange='showElement(this)' onclick='showElement2(this)'>
END

my @@elements = $q->param('elementsId');# if $q->param('Action');	#field of subIDs of selected elements that constrain output of GetAttrElements
my $filter = '';
if ($q->param('reduce') || $q->param('except')) {
	$filter .= $q->param('attrId');
	$filter .= " NOT" if $q->param('except');
	$filter .= " IN (".join(',',@@elements).")";
}
my @@objX = SOAP->GetAttrElements($use_lang, $filter, 0, 'A', $ID, $q->param('fact'), 1001) if $ID;	# !!! limit has to be set from UI - implemet it pleas

for (0..$#objX) {
	print "<option value='$objX[$_][0]'>$objX[$_][1]</option>" if $objX[$_][1];
}
my $exceed = @@objX > 1000 ? "<tr><td class='exceed'>$Const::lang->{$use_lang}{'Elements exceed'}<br /><span class='limit'>$Const::lang->{$use_lang}{'Elements limit'}</span></td></tr>" : '';
print <<END;
</select>
<table class='join'>
	$exceed
	<tr>	<td class='high' onmouseover="useStyle(this,'low')" onmouseout="useStyle(this,'high')" onclick='showElement(this,true)' id='multiple' >
		<img id='multi' src='${skinPath}img/multi_attr.$imgType'/>
		&nbsp;$Const::lang->{$use_lang}{'Elements move'}</td>
	</tr>
	<tr>
		<td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$Const::lang->{$use_lang}{'Elements reduce info'}" onclick='setReduce()'>
		$Const::lang->{$use_lang}{'Elements reduce'}
		<input type='hidden' value='' name='reduce' id='reduce'/>
		</td>
	</tr>
	<tr>	<td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$Const::lang->{$use_lang}{'Elements except info'}" onclick='setExcept()'>
		$Const::lang->{$use_lang}{'Elements except'}
		<input type='hidden' value='' name='except' id='except'/>
		</td>
	</tr>
	<tr><td class='subhigh' style='text-align:left'>$Const::lang->{$use_lang}{'Elements fact'}<br/>
		<span class='nowrap'><img src='${skinPath}img/fact.$imgType' style='vertical-align:middle' /><input type='text' value='' style='width:88%' readonly='readonly' onclick='dropFact(this)' maxlength='30'/></span>
		<input type='hidden' name='fact' id='fact' value='' />
	</td></tr>
</table>
</div>
<input type='submit' name='Action' value="$Const::lang->{$use_lang}{'Save'}" id='submit' style='position:absolute; top:20px; left:10px; display:none'/>
<script type="text/javascript">
	changeTitle();
</script>
END
print &endform;
print &end_html;

1
@


1.29
log
@elements.cgi fixies
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.28 2004/01/12 13:42:03 michald Exp $
d86 1
a86 1
<select multiple='multiple' style='width:100%; height:50%;' name='elementsId' id='elementsId' onchange='showElement(this)' onclick='showElement2(this)'>
d96 1
a96 1
my @@objX = SOAP->GetAttrElements($use_lang, $filter, 0, 'A', $ID, $q->param('fact'), 1000) if $ID;	# !!! limit has to be set from UI - implemet it pleas
d101 1
a101 1

d105 1
@


1.28
log
@add limit to list of the elements
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.27 2003/12/04 12:15:13 jiri_schmid Exp $
d71 3
d105 4
a108 1
	<tr><td class='high' onmouseover="useStyle(this,'low')" onmouseout="useStyle(this,'high')" onclick='showElement(this,true)' id='multiple' ><img id='multi' src='${skinPath}img/multi_attr.$imgType'/>&nbsp;$Const::lang->{$use_lang}{'Elements move'}</td></tr>
@


1.27
log
@img type changes tested and fixed
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.26 2003/11/23 10:43:38 michald Exp $
d93 1
a93 1
my @@objX = SOAP->GetAttrElements($use_lang, $filter, 0, 'A', $ID, $q->param('fact')) if $ID;
@


1.26
log
@fix Save and Run
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.25 2003/11/07 16:50:50 jiri_schmid Exp $
d46 1
a46 1
my $imgType = &Local::getImageType("$Const::myPath${skinPath}img/");
@


1.25
log
@tuning
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.24 2003/10/31 12:47:54 jiri_schmid Exp $
d96 1
a96 1
	print "<option value='$objX[$_][0]'>$objX[$_][1]</option>";
@


1.24
log
@mod perl rocks!
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.23 2003/10/16 14:08:51 jiri_schmid Exp $
d128 1
a128 1
1@


1.23
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.22 2003/09/30 15:46:26 jiri_schmid Exp $
d8 2
a9 1
binmode(STDOUT, ':utf8');
d13 2
a14 2
our $q = new CGI;
use vars qw($Languages $lang $bearHost $bearPort $compress_threshold);
d16 36
a51 2
require "const.def";
require "local/local_lib.pl";
a52 7
my $use_lang = param('Lang') ? param('Lang') : param('active_lang') ? param('active_lang') : 'EN'; #active lang defined in *_ed.pl
require $Languages->{$use_lang}->{src};
my $use_enc = $Languages->{$use_lang}->{'enc'};
our $skin = (param('Skin')) ? param('Skin') : (param('skin')) ? param('skin') : "";
our $skinPath = ($skin) ? "skins/$skin/" : "";
our $imgType = getImageType("${skinPath}img/");
our $User=$q->remote_user();
d59 1
a59 1
	-lang=>$Languages->{$use_lang}->{lang},
a70 15
# --- make SOAP connection ---
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => $compress_threshold}],
	encoding => 'UTF-8';
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

a71 1
my $ID = param('itemId');
d74 2
a75 2
<img id='openClose' class='cursor' src='${skinPath}img/rightArr.$imgType' onclick='ocElements();' alt='OC' title="$lang->{'Elements oc'}"/>
<span id='contentTitle'>&nbsp;$lang->{'Elements'}&nbsp;</span><img id='single' src='${skinPath}img/single_attr.$imgType'/>
d86 1
a86 1
my @@elements = param('elementsId');# if param('Action');	#field of subIDs of selected elements that constrain output of GetAttrElements
d88 3
a90 3
if (param('reduce') || param('except')) {
	$filter .= param('attrId');
	$filter .= " NOT" if param('except');
d93 1
a93 1
my @@objX = SOAP->GetAttrElements($use_lang, $filter, 0, 'A', $ID, param('fact')) if $ID;
d102 1
a102 1
	<tr><td class='high' onmouseover="useStyle(this,'low')" onmouseout="useStyle(this,'high')" onclick='showElement(this,true)' id='multiple' ><img id='multi' src='${skinPath}img/multi_attr.$imgType'/>&nbsp;$lang->{'Elements move'}</td></tr>
d104 2
a105 2
		<td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$lang->{'Elements reduce info'}" onclick='setReduce()'>
		$lang->{'Elements reduce'}
d109 2
a110 2
	<tr>	<td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$lang->{'Elements except info'}" onclick='setExcept()'>
		$lang->{'Elements except'}
d114 1
a114 1
	<tr><td class='subhigh' style='text-align:left'>$lang->{'Elements fact'}<br/>
d120 1
a120 1
<input type='submit' name='Action' value="$lang->{'Save'}" id='submit' style='position:absolute; top:20px; left:10px; display:none'/>
d128 1
a128 14
#---------------------------------------

sub GetFiles {
	my ($td, $fExt)=@@_;	# directory, file ext
	my @@fList=();

	if (opendir(DIR, $td) ) {
		@@fList = grep { /^\w.*$fExt$/ && -f "$td/$_" } readdir(DIR);
		closedir DIR;
	}
	@@fList = sort @@fList;
	foreach (@@fList) { s/\.$fExt$// };
	@@fList
}
@


1.22
log
@elements handling changes, format2d colors changes
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.21 2003/09/11 16:22:57 jiri_schmid Exp $
d16 1
a16 1
require "local_lib.pl";
@


1.21
log
@minor code changes and visual improvments
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.20 2003/09/01 13:35:14 jiri_schmid Exp $
d76 1
a76 1
if (@@elements) {
d78 1
a78 1
	$filter .= " NOT" if param('not');
d91 11
a101 4
	<tr><td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$lang->{'Elements reduce info'}">$lang->{'Elements reduce'}</td></tr>
	<tr><td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$lang->{'Elements except info'}" onclick='setTrue()'>$lang->{'Elements except'}
		<input type='hidden' value='' name='not' id='not'/>
	</td></tr>
@


1.20
log
@finishing imlementation of skins
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.19 2003/09/01 12:40:05 jiri_schmid Exp $
d75 1
a75 1
my $filter;
d77 3
a79 3
	$filter = " IN (".join(',',@@elements).")";
	$filter = " NOT".$filter if param('not');
	$filter = param('attrId').$filter;
@


1.19
log
@skins implemented. mozilla skin - temporarily copy msie content
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.18 2003/08/18 05:50:52 michald Exp $
d70 1
@


1.18
log
@some ACL improvement
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.17 2003/08/12 14:09:45 jiri_schmid Exp $
d16 2
d21 3
a23 1

d34 1
a34 1
	-style=>{-src=>'css.css'},
d62 2
a63 2
<img id='openClose' class='cursor' src='img/rightArr.gif' onclick='ocElements();' alt='OC' title="$lang->{'Elements oc'}"/>
<span id='contentTitle'>&nbsp;$lang->{'Elements'}&nbsp;</span><img id='single' src='img/single_attr.gif'/>
d67 1
d89 1
a89 1
	<tr><td class='high' onmouseover="useStyle(this,'low')" onmouseout="useStyle(this,'high')" onclick='showElement(this,true)' id='multiple' ><img id='multi' src='img/multi_attr.gif'/>&nbsp;$lang->{'Elements move'}</td></tr>
d91 1
a91 1
	<tr><td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$lang->{'Elements except info'}" onclick='setTrue(	)'>$lang->{'Elements except'}
d95 1
a95 1
		<span class='nowrap'><img src='img/fact.gif' style='vertical-align:middle' /><input type='text' value='' style='width:88%' readonly='readonly' onclick='dropFact(this)' maxlength='30'/></span>
@


1.17
log
@left pane is colapsible now
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.16 2003/08/11 13:50:25 jiri_schmid Exp $
d67 2
a68 1
my @@elements = param('elementsId');# if param('Action');	#field of subIDs of selected elements that reduces output of GetAttrElements
d72 1
a72 1
	$filter = " NOT ($filter)" if param('not');
d76 5
a80 3
	for (0..$#objX) {
		print "<option value='$objX[$_][0]'>$objX[$_][1]</option>";
	}
d86 1
a86 2
	<tr><td class='high' onmouseover="useStyle(this,'low',1)" onmouseout="useStyle(this,'high',1)" title="$lang->{'Elements except info'}" onclick='setTrue(	)'>	
		$lang->{'Elements except'}
@


1.16
log
@admin page drag-drop implemented
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.15 2003/08/11 12:30:57 jiri_schmid Exp $
d59 1
a59 1
<span id='contentTitle'>&nbsp;$lang->{'Elements'}</span>&nbsp;<img id='single' src='img/single_attr.gif'/>
@


1.15
log
@admin page implementation started
@
text
@d3 1
a3 1
#  Display edit object in IFRAME
d5 1
a5 1
# $Id: elements.cgi,v 1.14 2003/08/07 08:02:10 jiri_schmid Exp $
@


1.14
log
@elements negation implemented
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.13 2003/08/06 15:22:29 jiri_schmid Exp $
d65 1
a65 1
<select multiple='multiple' style='width:100%; height:62%;' name='elementsId' id='elementsId' onchange='showElement(this)' onclick='showElement2(this)'>
@


1.13
log
@user ACL implementation started
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.12 2003/08/06 09:36:31 michald Exp $
d68 7
a74 4
my $attrID = param('attrId');				#ID of Attribute containing selected items
my $fact = param('fact');				#ID of fact that should be used to join attributes
	my @@objX = SOAP->GetAttrElements($use_lang, "$attrID IN (".join(',',@@elements).")", 0, 'A', $ID, $fact) if $ID;
#	my @@objX = SOAP->GetAttrElements($use_lang, undef, 0, 'A', $ID) if $ID;
d83 4
@


1.12
log
@filter call implementation to GetAttrElements
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.11 2003/08/06 09:23:44 jiri_schmid Exp $
d67 1
a67 1
my @@elements = param('elementsId') if param('Action');	#field of subIDs of selected elements that reduces output of GetAttrElements
@


1.11
log
@elements
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.10 2003/08/06 07:50:27 jiri_schmid Exp $
d70 2
a71 2
#	my @@objX = SOAP->GetAttrElements($use_lang, "$attrID IN (".join(',',@@elements).")", 0, 'A', $ID, $fact) if $ID;
	my @@objX = SOAP->GetAttrElements($use_lang, undef, 0, 'A', $ID) if $ID;
@


1.10
log
@elements
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.9 2003/08/05 12:49:44 jiri_schmid Exp $
d71 1
a71 1
	my @@objX = SOAP->GetAttrElements($use_lang, "$attrID IN (".join(',',@@elements).")", 0, 'A', $ID) if $ID;
@


1.9
log
@fact input field on right pane implemented
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.8 2003/08/05 08:02:03 jiri_schmid Exp $
d70 2
a71 1
	my @@objX = SOAP->GetAttrElements($use_lang, undef, 0, 'A', $ID) if $ID;
@


1.8
log
@bug fixies
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.7 2003/07/31 14:34:29 jiri_schmid Exp $
d59 1
a59 1
<span id='contentTitle'>&nbsp;$lang->{'Elements'}</span>&nbsp<img id='single' src='img/single_attr.gif'/>
d63 1
d65 1
a65 1
<select multiple='multiple' style='width:100%; height:74%;' name='elementsId' id='elementsId' onchange='showElement(this)' onclick='showElement2(this)'>
d67 3
a69 1
my @@elements = param('elementsId') if param('Action');
d77 1
d79 4
a82 1
	<tr><td class='high' onmouseover="useStyle(this,'low')" onmouseout="useStyle(this,'high')" onclick='showElement(this,true)' id='multiple' ><img id='multi' src='img/multi_attr.gif'/>&nbsp;$lang->{'Elements move'}</td></tr>
@


1.7
log
@right pane implementation aproaching final stage
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.6 2003/07/31 12:15:58 jiri_schmid Exp $
d58 1
a58 1
<img id='openClose' class='cursor' src='img/rightArr.gif' onclick='ocElements(this);' alt='OC' title="$lang->{'Elements oc'}"/>
@


1.6
log
@right pane stage 3
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.5 2003/07/30 15:30:40 jiri_schmid Exp $
d64 1
a64 1
<select multiple='multiple' style='width:100%; height:74%;' name='elementsId' onchange='showElement(this)' onclick='showElement2(this)'>
@


1.5
log
@right pane implementation stage 2
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.4 2003/07/29 14:36:37 jiri_schmid Exp $
d59 1
a59 1
<span id='contentTitle'>&nbsp;$lang->{'Elements'}</span>
d64 1
a64 1
<select multiple='multiple' style='width:100%; height:75%;' name='elementsId' onchange='showElement(this,event)'>
d73 4
a76 1
<table class='join'><tr><td class='high' onmouseover="useStyle(this,'low')" onmouseout="useStyle(this,'high')" title="$lang->{'Elements reduce info'}">$lang->{'Elements reduce'}</td></tr></table>
@


1.4
log
@code improvments
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.3 2003/07/29 12:28:26 jiri_schmid Exp $
d16 1
a16 1
my $use_lang = param('Lang'); #active lang defined in *_ed.pl
d32 2
a33 1
		  {-language=>'JAVASCRIPT', -src=>'js/attr.js'}],
d55 1
a55 1
my $ID = param('Elements');
d57 1
a57 1
<span id='title' style="position:absolute; top:3px; left:3px">
d63 2
d66 5
a70 4
print "<input type=\"hidden\" value=\"$use_lang\" id=\"activeLang\" name=\"active_lang\">\n";
my $objX = SOAP->GetAttrElements($use_lang, undef, 0, 'A', $ID) if param('Elements');
use Data::Dumper;
print "<pre>".Dumper($objX)."</pre>";
d72 2
d75 1
@


1.3
log
@right frame implemented
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.2 2003/07/29 07:59:41 jiri_schmid Exp $
d54 1
d56 6
a61 2
<img id='openClose' class='cursor' src='img/rightArr.gif' onclick='ocElements(this);' alt='OC' title="$lang->{'Elements oc'}"/><b id='bcontent'>&nbsp;$lang->{'Elements'}</b>
<div id='content'>
d64 1
a64 3

(my $ID = param('Elements')) =~ s/~.*$//;
my $objX = SOAP->GetDebug('Lookup',$ID) if param('Elements');
a65 1
print "<pre>".Dumper($ID)."</pre>";
d67 6
a73 1
print "</div>";
@


1.2
log
@minor interface and code improvments
@
text
@d5 1
a5 1
# $Id: elements.cgi,v 1.1 2003/07/28 13:41:40 jiri_schmid Exp $
d25 2
a26 2
	-title=>"Edit",
	-id=>'body',
d31 6
a36 2
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/dad.js'},
		  {-language=>'JAVASCRIPT', -src=>'js/attr.js'}],);
d52 8
d65 3
a67 1
print $q->end_html;
@


1.1
log
@added file for viewing attributes elements
@
text
@d5 1
a5 1
# $Id: format.cgi,v 1.24 2003/07/21 10:51:39 jiri_schmid Exp $
d13 1
a13 1
use vars qw($Languages $lang);
d33 20
a52 1
print "<pre>future content</pre>";
@


head	1.33;
access;
symbols;
locks; strict;
comment	@# @;


1.33
date	2004.02.13.17.09.40;	author jiri_schmid;	state Exp;
branches;
next	1.32;

1.32
date	2004.02.12.16.24.27;	author jiri_schmid;	state Exp;
branches;
next	1.31;

1.31
date	2004.02.11.12.22.23;	author michald;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.16.12.27.44;	author jiri_schmid;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.09.08.04.49;	author jiri_schmid;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.07.16.27.05;	author jiri_schmid;	state Exp;
branches;
next	1.27;

1.27
date	2004.01.06.08.17.38;	author jiri_schmid;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.10.12.23.12;	author jiri_schmid;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.10.09.31.28;	author jiri_schmid;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.10.08.48.26;	author jiri_schmid;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.09.15.58.46;	author jiri_schmid;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.08.15.46.48;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.04.14.04.34;	author jiri_schmid;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.03.16.02.08;	author jiri_schmid;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.03.12.03.42;	author jiri_schmid;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.02.16.22.53;	author jiri_schmid;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.28.13.03.23;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.28.07.06.10;	author michald;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.27.16.41.09;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.27.08.52.44;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.25.16.44.56;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.25.12.10.44;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.21.10.30.55;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.20.15.47.41;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.12.10.20.43;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.12.09.58.53;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.14.03.19;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.07.13.40.49;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.06.09.56.51;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.04.15.19.01;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.04.09.38.43;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.04.04.45.24;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.31.12.47.57;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.33
log
@major tabs control implemented
@
text
@#-----------------------------------------------------
#  Rendering of the Report in Grid format
#-----------------------------------------------------
# $Id: Run_grid.pm,v 1.32 2004/02/12 16:24:27 jiri_schmid Exp $

package Run_grid;

use strict;
#require "const/Const.pm"; # linked allready by run.cgi
#require "lang/$variables->{useLang}.utf"; # linked allready by run.cgi
require "local/Local.pm";

#---------------------------------------------------
sub exportToHTML() {
my ($variables, $q, $css, $header, $data, $cssHash) = (shift,shift,shift,shift,shift,shift);	# ptr to data hash

$header = ($header =~ /^innerCol$|^innerTable$|^innerRow$|^outerTable$|^noneHeader$/) ? $header : 'noneHeader';
my $hlp;

open(RT,">$$variables->{file}") || &Local::ErrorDie(" ERROR: can't write into report-disk-cache.");
binmode(RT,":utf8"); # do not remove !!!

my $use_lang = $$variables->{useLang};
my $use_enc = $$variables->{useEnc};

if (exists $$variables->{export}) {
	print RT &Local::customHTMLHead(0,0,$$variables->{useEnc},$Const::languages->{ $$variables->{useLang} }->{lang},'Report Result');
} else {
	print RT &Local::customHTMLHead(1,1,$$variables->{useEnc},$Const::languages->{ $$variables->{useLang} }->{lang},'Report Result','right_menu',"<style>\@@import url('./CSS/$css.css');\@@import url('$$variables->{skinPath}menu.css');</style>");
}
if (exists $$variables->{export}) {
	print RT "<body>"
} else {
my $all = "item_id=$$variables->{orig_id}&Lang=$$variables->{useLang}&Did=$$variables->{id}&Skin=$$variables->{skin}&Proj=$$variables->{proj}";
print RT "<body onload='init_menu()' onclick='hideAllMenus()'>";
if ($$variables->{button}) {
	print RT <<END;	#add params necessary when dynamic params in definition presented
<form method="post" action="" enctype="application/x-www-form-urlencoded" name="DynamicParam">
<input type="hidden" value="$$variables->{orig_id}" id="ID" name="item_id" />
<input type="hidden" value="$$variables->{oid}" id="OID" name="OID" />
<input type="hidden" value="$$variables->{proj}" name="Proj" />
<input type="hidden" value="$$variables->{id}" id="DID" name="did" />
<input type="hidden" value="$$variables->{useLang}" id="LANG" name="lang" />
<input type="hidden" value="$$variables->{imgType}" id="IMG" />
<input type="hidden" value="$all" id="ALL" />
<input type="hidden" value="$$variables->{skin}" id="SKIN" name="skin" />
$$variables->{button}
</form>
END
} else {
print RT "<input type='hidden' value='$$variables->{skin}' id='SKIN' name='skin' />";
}
print RT <<END;
<input type="hidden" value="$all" id="ALL" />
<div class="Menu" id="userMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:5;"  onmouseover="hideSubmenus()"></div>
<div class="Menu" id="userSubMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:6;"></div>
END
print RT "<iframe width=\"1\" height=\"1\" frameborder=\"0\" srolling=\"no\" src=\"\" style=\"display:none\" id=\"EXPRT\"></iframe>";
}
#create and print table
	print RT &descriptionTable('out', $data, $cssHash) if $header eq 'outerTable';
	print RT "$$cssHash->{html32}<table $$cssHash->{table}>";
	my($row,$col);
	my(@@colBorder,@@rowBorder);
	@@colBorder = &initBorder('col', $data);
	@@rowBorder = &initBorder('row', $data);
	my $lastCol = exists $$data->{row}[0] ? $#{$$data->{row}[0]} : 0;
	my $lastRow = exists $$data->{col}[0] ? $#{$$data->{col}[0]} : 0;
	my $groupCols = $lastCol + 1;
	my $groupRows = $lastRow + 1;
	my $headerCell = (exists $$data->{row}[0] && exists $$data->{col}[0]) ? 1 : 0; #run printing col header
	$headerCell++ if $header =~ /innerCol|innerTable|innerRow/; #run printing col header when description of some header is needed
	$headerCell++ if $header =~ /outerTable|none/ && exists $$data->{col}[0]; #run printing col header when col data are presented and no header desc is needed
	if ($headerCell) {
	for my $row (0..$lastRow) {
		print RT "<tr>";
		if ($header eq 'noneHeader' && $row == 0 && (exists $$data->{row}[0] || exists $$data->{c}{0})) {
			print RT &printHeaderCell($cssHash, '&nbsp;', "ch r", $groupCols, $groupRows);	
		} elsif ($header eq 'innerCol') {
			print RT &printHeaderCell($cssHash, "$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}", "ch r", $groupCols,undef, "c.$row", 'style="text-align:right !important;"');	
		} elsif ($header eq 'innerTable') {
			for (0..$lastCol) {
				if ($_ == $lastCol && $row == $lastRow) {
					my $tableCss = exists $$cssHash->{th} ? $$cssHash->{th}{'ch r'} : "style=\"margin:0; padding:0; border-spacing:0; border:0; white-space:nowrap\"";
					my $thCss = exists $$cssHash->{th} ? "cellpadding=0 cellspacing=0" : "class=\"ch r\" style=\"padding:0;\"";
					print RT "<th $thCss><table $tableCss><tr>";
					print RT &printHeaderCell($cssHash, "$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}", "ch", undef, undef, "r.$_");
					print RT &printHeaderCell($cssHash, "$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}", "ch", undef, undef, "c.$row");
					print RT "</tr></table></th>"
				} elsif ($_ == $lastCol) {
					print RT &printHeaderCell($cssHash, "$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}", "ch r", undef, undef, "c.$row", 'style="text-align:right !important"');
				} elsif ($row == $lastRow) {
					print RT &printHeaderCell($cssHash, "$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}", "ch dv", undef, undef, "r.$_");
				} else {
					print RT &printHeaderCell($cssHash, "&nbsp;", "ch dv");
				}
			}
		} elsif ($row == 0) {
			if ($header eq 'innerRow') {
				my $cssH = "d";
				for (0..$#{$$data->{row}[0]}) {
					$cssH = "r" if $_ == $#{$$data->{row}[0]};
					print RT &printHeaderCell($cssHash, "$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}", "ch $cssH", undef, $groupRows, "r.$_", 'style="vertical-align:bottom"');
				}
			} elsif ($header eq 'outerTable' && (exists $$data->{row}[0] || exists $$data->{c}{0})) {
				print RT &printHeaderCell($cssHash, '&nbsp;', "ch r", $groupCols, $groupRows);
			};
		};
		my $cssR;
		$col = 0;
		while ($col < @@{$$data->{col}}) {
			my $count = 1;
			my $colIndex = $col;
			my $colspan = 0;
			while ($count) {
				if ($colBorder[$col]) {
					$count = 0;
				} else {
					if ($col < @@{$$data->{col}}-1) {
						if ($$data->{col}[$col][$row] ne $$data->{col}[$col+1][$row]) { $colBorder[$col] = 2; $count = 0;}
					};
				}
				$colspan++;
				$col++;
			}
			$cssR = ($colBorder[$col-1] == 1) ? 'r' : 'd';	#border style fo col header
			print RT &printHeaderCell($cssHash, "$$data->{col}[$colIndex][$row]|$$data->{colHeader}->{$row}{id}", "ch $cssR", $colspan, undef, "c.$row.$colIndex");
		};
		print RT &printHeaderCell($cssHash, $$data->{colHeader}{0}{name}, "ch r") if ($#{$$data->{col}} == -1 && exists $$data->{c} && $#{$$data->{row}} > -1);
		print RT "</tr>";
	}
	};
	my $cssHlp = 'e';
	my $cnt = 0;						#row area color
	my $lastCol = (exists $$data->{row}[0]) ? $#{$$data->{row}[0]} : -1; 
	my $rowCells = ($#{$$data->{row}} > -1) ? (exists $$data->{c}) ? $#{$$data->{row}} : 0 : undef;
	foreach my $row (0..$rowCells) {
		print RT "<TR>";
		my $cssB = '';					#border style
		$cnt++;
		my $cssC;
		if ($rowBorder[$row] == 1){
			$cssB = 't';
			$cssHlp = ($cssHlp eq 'e') ? 'o' : 'e';		#set row area color
		};
		if (defined $rowCells) {
			for ($col = 0; $col < @@{$$data->{row}[0]}; $col++) {
				$cssC = (($cnt%2) == 1 && $lastCol == $col) ? $cssHlp."o" : $cssHlp."e";	#each row color depending on row area color
				if (!$rowBorder[$row]) {
					if ($$data->{row}[$row-1][$col] ne $$data->{row}[$row][$col]) { $rowBorder[$row] = $col+1; }
				};
				my $cssR = ($col == @@{$$data->{row}[0]}-1) ? 'tr' : 't';	#border style for last col in row header
				if ($rowBorder[$row] && $col+1 >= $rowBorder[$row]) {
					my $count = 1;
					my $rowspan = 1;
					my $rowIndex = $row+1;
					while ($count) {
						if ($rowBorder[$rowIndex] || $rowIndex >= @@{$$data->{row}}) {
							$count = 0;
						} else {
							if (!$rowBorder[$rowIndex] && $$data->{row}[$rowIndex][$col] ne $$data->{row}[$rowIndex-1][$col]) { $rowBorder[$rowIndex] = $col+1; last;}
							$rowspan++;
							$rowIndex++;
						}
					}
					$hlp = &printHeaderCell($cssHash, "$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}", "$cssC $cssB$cssR", undef, $rowspan, "r.$col.$row") if ($col == 1 && $row == 0);
					print RT &printHeaderCell($cssHash, "$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}", "$cssC $cssB$cssR", undef, $rowspan, "r.$col.$row"); 
				};
			}
		} else {
			$cssC = (($cnt%2) == 1 && $lastCol == $col) ? $cssHlp."e" : $cssHlp."o";
			my $cssR = 'tr';
			print RT &printHeaderCell($cssHash, $$data->{rowHeader}{0}{name}, "$cssC $cssB$cssR"); 
		}
		my $dataCells = ($#{$$data->{col}} > -1) ? (exists $$data->{c}) ? $#{$$data->{col}} : 0 : undef;
		foreach my $col (0..$dataCells) {
			my $cssR = ($colBorder[$col] == 1) ? 'tr' : 'td';		#border style for cells
			print RT &printCell($cssHash,$$data->{c}{$row}{$col},"$cssC $cssB$cssR");
		}
		print RT "</TR>"
	}

	print RT "</table>";
	print RT "</font>" if $$variables->{html32};
if (! exists $$variables->{export}) {
	my @@objectLinks;
	my @@links;
	my $links;
	foreach my $ID (keys %{$$data->{links}}) {
		undef @@links;
		foreach (keys %{$$data->{links}{$ID}{current}}) {
			push(@@links,"$$data->{links}{$ID}{current}{$_}/$_");
		}
		$links = join("|",@@links);
		push (@@objectLinks,"'current$ID':'$links'");
		undef @@links;
		foreach (keys %{$$data->{links}{$ID}{down}}) {
			push(@@links,"$$data->{links}{$ID}{down}{$_}/$_");
		}
		$links = join("|",@@links);
		push (@@objectLinks,"'down$ID':'$links'");
		undef @@links;
		foreach (keys %{$$data->{links}{$ID}{up}}) {
			push(@@links,"$$data->{links}{$ID}{up}{$_}/$_");
		}
		$links = join("|",@@links);
		push (@@objectLinks,"'up$ID':'$links'");
	}

	$links = join("|",@@{$Const::run->{gridExport}});
	push (@@objectLinks,"'export':'$links'");
	$links = join("|",@@{$Const::run->{sort}});
	push (@@objectLinks,"'sort':'$links'");
	foreach my $type ('rowHeader','colHeader') {
		my $ok = 0;
		undef @@links;
		do {
			if (exists $$data->{$type}{$ok}) {
				push (@@links, "$ok|$$data->{$type}{$ok}{name}");
				my $hlp = $ok;
				$hlp += 0.5;
				$ok++;
				push (@@links, "$hlp|MID");
			} else {
				undef $ok;
			}
		} while ($ok);
		$links = join("|",@@links);
		if ($type eq 'rowHeader') {
			push (@@objectLinks,"'pivotY':'$links'")
		} else {
			push (@@objectLinks,"'pivotX':'$links'")
		}
	}
	undef @@links;
	foreach (keys %{$Const::RLang->{ $$variables->{useLang} }}) {
		push (@@links,"'$_':'$Const::RLang->{ $$variables->{useLang} }{$_}'");
	}
	$links = join(",",@@links);
	my $objectLinks = join(",",@@objectLinks);
	print RT "<script type=\"text/javascript\">var objectLinks = {$objectLinks}; var lang = {$links};</script>";
};
# === PrepareSQL Dump ===
#use Data::Dumper;
#my $sql = Dumper(SOAP->PrepareSQL($$variables->{id}));
#$sql =~ s/([{}])/<b>$1<\/b>/g;
#print RT '<hr><h2>PrepareSQL:</h2><pre>'.$sql.'</pre>';
#print RT "<hr><h2>Data:</h2><pre>$css,$header</pre>";
#print RT '<hr><h2>Data:</h2><pre>'.Dumper($$data).'</pre>';
# === PrepareSQL Dump ===
	print RT $$q->end_html;
	close(RT);
}

#---------------------------------------------------
sub initBorder {
	my $what = shift;
	my $data = shift;
	my @@rtrn;

	if ($what eq 'col') {
		my $cnt = (ref($$data->{col})) ? @@{$$data->{col}} : 1;
		for (my $i = 0; $i < $cnt-1; $i++) {
			if ($$data->{col}[$i][0] eq $$data->{col}[$i+1][0]) { push(@@rtrn,undef) }
			else { push(@@rtrn,1) }; 	# return something like nnn1nnn1nn..../ indicates the right solid border is necessary
		}
		push(@@rtrn,1);
	} elsif ($what eq 'row') {
		push(@@rtrn,1);
		my $cnt = (ref($$data->{row})) ? @@{$$data->{row}} : 0;
		for (my $i = 1; $i < $cnt; $i++) {
			if ($$data->{row}[$i][0] eq $$data->{row}[$i-1][0]) { push(@@rtrn,undef) }
			else { push(@@rtrn,1) };		# returns something like 1nnn1nnn1nn..../ indicates the top sollid border is necessary
		}
	}
	return @@rtrn
}

#---------------------------------------------------
sub printHeaderCell {
	my($html32, $content, $css, $cols, $rows, $htmlId, $add) = @@_;
	my @@content = split(/\|/, $content);
	$content[1] =~s/^(.*\D.*)$/'$1'/ if $content[1] ne '*';	# use quota if $content[1] is not number
	my $menu;
	if (exists $$html32->{th}) {
		$css = $$html32->{th}{$css};
	} else {
		$menu = " oncontextmenu=\"return showMenu(this,'$content[2]')\"" if defined $content[2];
		$menu .= " onclick=\"MA(this)\"";
		$css = "class=\"$css\"";
	}
	$htmlId = "id=\"$htmlId|$content[1]\"" if defined $content[1] && $htmlId;
	my $printCols = ($cols > 1) ? " colspan=\"$cols\"" : '';
	my $printRows = ($rows > 1) ? " rowspan=\"$rows\"" : '';
	return "<th $htmlId $css$printCols$printRows$menu $add>$content[0]</th>"
}
#---------------------------------------------------
sub printCell {
	my($html32,$content,$css,$add) = @@_;
	$css = exists $$html32->{td} ? $$html32->{td}{$css} : "class=\"$css\"";
	#$css = " class=\"$css\"" if $css;
	return $content ? "<td $add$css>$content</td>" : "<td $add$css>&nbsp;</td>"
}

#---------------------------------------------------
sub descriptionTable {
	my ($type,$data,$cssHash) = (shift,shift,shift);
	my $table;
	$table = (exists $$cssHash->{table}) ? "<table $$cssHash->{table}>" : ($type eq 'out') ? "<table>" : "<table style=\"border:0; width:100%;\">";
	my $lastY = (exists $$data->{row}[0]) ? ($#{$$data->{row}[0]} > 0) ? $#{$$data->{row}[0]} : 0 : 0;
	my $lastX = (exists $$data->{col}[0]) ? ($#{$$data->{col}[0]} > 0) ? $#{$$data->{col}[0]} : 0 : 0;
	my $style = (exists $$cssHash->{th}) ? undef : "style=\"border-style:dotted; border-width:1px; vertical-align:bottom;\"";
	for my $x (0..$lastX) {
		$table .= "<tr>";
		for my $y (0..$lastY) {
			if ($y == $lastY && $x == $lastX) {
				$table .= &printHeaderCell($cssHash, $$data->{colHeader}->{$x}{name}."<br />".$$data->{rowHeader}->{$y}{name}, "ee", undef, undef, undef, $style)
			}
			elsif ($y == $lastY) {
				$table .= &printHeaderCell($cssHash, "$$data->{colHeader}->{$x}{name}|*|$$data->{colHeader}->{$x}{id}", "ee", undef, undef, "c.$x", $style)
			} elsif ($x == $lastX) {
				$table .= &printHeaderCell($cssHash, "$$data->{rowHeader}->{$y}{name}|*|$$data->{rowHeader}->{$y}{name}", "ee", undef, undef, "r.$y", $style)
			} else {
				$table .= &printHeaderCell($cssHash, '&nbsp;', "ee")
			}
		}
		$table .= "</tr>";
	}
	$table .= "</table>";
	$table .= "<br />" if $type eq 'out';
	return $table
}

#---------------------------------------------------
1
@


1.32
log
@prototype of tabs hidding implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.31 2004/02/11 12:22:23 michald Exp $
d34 4
a37 2
	print RT <<END;
<body onload="init_menu()" onclick="hideAllMenus()">
d41 1
d44 2
a46 1
<input type="hidden" value="$$variables->{imgType}" id="IMG" />
d49 6
@


1.31
log
@fix of wrong usage of non numeric attribute IDs for drilling
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.30 2004/01/16 12:27:44 jiri_schmid Exp $
d273 1
a273 1
	$content[1] =~s/^(.*\D.*)$/'$1'/;	# use quota if $content[1] is not number
@


1.30
log
@export fix
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.29 2004/01/09 08:04:49 jiri_schmid Exp $
d35 1
a35 1
<body onload="init_menu()" onclick='hideAllMenus()'>
d45 1
a45 1
<div class="Menu" id="userMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:5;"  onmouseover='hideSubmenus()'></div>
d48 1
a48 1
print RT "<iframe width='1' height='1' frameborder='0' srolling='no' src='' style='display:none' id='EXPRT'></iframe>";
d68 1
a68 1
			print RT &printHeaderCell($cssHash,'&nbsp;',"ch r",$groupCols,$groupRows);	
d70 1
a70 1
			print RT &printHeaderCell($cssHash,"$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}","ch r",$groupCols,undef,"c.$row","style='text-align:right !important;'");	
d74 2
a75 2
					my $tableCss = exists $$cssHash->{th} ? $$cssHash->{th}{'ch r'} : "style='margin:0; padding:0; border-spacing:0; border:0; white-space:nowrap'";
					my $thCss = exists $$cssHash->{th} ? "cellpadding=0 cellspacing=0" : "class='ch r' style='padding:0;'";
d77 2
a78 2
					print RT &printHeaderCell($cssHash,"$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}","ch",undef,undef,"r.$_");
					print RT &printHeaderCell($cssHash,"$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}","ch",undef,undef,"c.$row");
d81 1
a81 1
					print RT &printHeaderCell($cssHash,"$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}","ch r",undef,undef,"c.$row",'style="text-align:right !important"');
d83 1
a83 1
					print RT &printHeaderCell($cssHash,"$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}","ch dv",undef,undef,"r.$_");
d85 1
a85 1
					print RT &printHeaderCell($cssHash,"&nbsp;","ch dv");
d93 1
a93 1
					print RT &printHeaderCell($cssHash,"$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}","ch $cssH",undef,$groupRows,"r.$_","style='vertical-align:bottom'");
d96 1
a96 1
				print RT &printHeaderCell($cssHash,'&nbsp;',"ch r",$groupCols,$groupRows);
d117 1
a117 1
			print RT &printHeaderCell($cssHash,"$$data->{col}[$colIndex][$row]|$$data->{colHeader}->{$row}{id}","ch $cssR",$colspan,undef,"c.$row.$colIndex");
d119 1
a119 1
		print RT &printHeaderCell($cssHash,$$data->{colHeader}{0}{name},"ch r") if ($#{$$data->{col}} == -1 && exists $$data->{c} && $#{$$data->{row}} > -1);
d137 18
a154 17
		   for ($col = 0; $col < @@{$$data->{row}[0]}; $col++) {
			$cssC = (($cnt%2) == 1 && $lastCol == $col) ? $cssHlp."o" : $cssHlp."e";	#each row color depending on row area color
			if (!$rowBorder[$row]) {
				if ($$data->{row}[$row-1][$col] ne $$data->{row}[$row][$col]) { $rowBorder[$row] = $col+1; }
			};
			my $cssR = ($col == @@{$$data->{row}[0]}-1) ? 'tr' : 't';	#border style for last col in row header
			if ($rowBorder[$row] && $col+1 >= $rowBorder[$row]) {
				my $count = 1;
				my $rowspan = 1;
				my $rowIndex = $row+1;
				while ($count) {
					if ($rowBorder[$rowIndex] || $rowIndex >= @@{$$data->{row}}) {
						$count = 0;
					} else {
						if (!$rowBorder[$rowIndex] && $$data->{row}[$rowIndex][$col] ne $$data->{row}[$rowIndex-1][$col]) { $rowBorder[$rowIndex] = $col+1; last;}
						$rowspan++;
						$rowIndex++;
d156 2
a157 3
				}
				$hlp = &printHeaderCell($cssHash,"$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}","$cssC $cssB$cssR",undef,$rowspan,"r.$col.$row") if ($col == 1 && $row == 0);
				print RT &printHeaderCell($cssHash,"$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}","$cssC $cssB$cssR",undef,$rowspan,"r.$col.$row"); 
d159 1
a159 1
		    }
d163 1
a163 1
			print RT &printHeaderCell($cssHash,$$data->{rowHeader}{0}{name},"$cssC $cssB$cssR"); 
d231 1
a231 1
	print RT "<script type='text/javascript'>var objectLinks = {$objectLinks}; var lang = {$links};</script>";
d271 3
a273 2
	my($html32,$content,$css,$cols,$rows,$htmlId,$add) = @@_;
	my @@content = split(/\|/,$content);
d279 2
a280 2
		$menu .= " onclick='MA(this)'";
		$css = "class='$css'";
d282 3
a284 3
	$htmlId = " id='$htmlId|$content[1]'" if defined $content[1] && $htmlId;
	my $printCols = ($cols > 1) ? " colspan='$cols'" : "";
	my $printRows = ($rows > 1) ? " rowspan='$rows'" : "";
d290 2
a291 2
	$css = exists $$html32->{td} ? $$html32->{td}{$css} : "class='$css'";
	#$css = " class='$css'" if $css;
d299 1
a299 1
	$table = (exists $$cssHash->{table}) ? "<table $$cssHash->{table}>" : ($type eq 'out') ? "<table>" : "<table style='border:0; width:100%;'>";
d302 1
a302 1
	my $style = (exists $$cssHash->{th}) ? undef : "style='border-style:dotted; border-width:1px; vertical-align:bottom;'";
d307 1
a307 1
				$table .= &printHeaderCell($cssHash,$$data->{colHeader}->{$x}{name}."<br />".$$data->{rowHeader}->{$y}{name},"ee",undef,undef,undef,$style)
d310 1
a310 1
				$table .= &printHeaderCell($cssHash,"$$data->{colHeader}->{$x}{name}|*|$$data->{colHeader}->{$x}{id}","ee",undef,undef,"c.$x",$style)
d312 1
a312 1
				$table .= &printHeaderCell($cssHash,"$$data->{rowHeader}->{$y}{name}|*|$$data->{rowHeader}->{$y}{name}","ee",undef,undef,"r.$y",$style)
d314 1
a314 1
				$table .= &printHeaderCell($cssHash,'&nbsp;',"ee")
@


1.29
log
@dynamic params fixation a code clearing
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.28 2004/01/07 16:27:05 jiri_schmid Exp $
d39 1
a39 1
<input type="hidden" value="$$variables->{id}" id="DID" name="derivated_id" />
@


1.28
log
@added icons and improved controling dynamic params
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.27 2004/01/06 08:17:38 jiri_schmid Exp $
d38 1
a38 1
<input type="hidden" value="$$variables->{prev_id}" id="OID" name="OID" />
@


1.27
log
@dynamic params implemented into grid
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.26 2003/12/10 12:23:12 jiri_schmid Exp $
d38 1
@


1.26
log
@code a visual improvments, removing of derivated reports implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.25 2003/12/10 09:31:28 jiri_schmid Exp $
d36 3
a38 1
<input type="hidden" value="$$variables->{id}" id="ID" name="id" />
d42 2
@


1.25
log
@minor code improvments
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.24 2003/12/10 08:48:26 jiri_schmid Exp $
d76 1
a76 1
					print RT &printHeaderCell($cssHash,"$$data->{colHeader}->{$row}{name}|*|$$data->{colHeader}->{$row}{id}","ch r",undef,undef,"c.$row");
@


1.24
log
@all drills implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.23 2003/12/09 15:58:46 jiri_schmid Exp $
d72 1
a73 1
					print RT &printHeaderCell($cssHash,"$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}","ch",undef,undef,"r.$_");
@


1.23
log
@drill on all items implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.22 2003/12/08 15:46:48 jiri_schmid Exp $
d69 6
a74 2
					my $brk = (exists $$data->{colHeader}->{$row} && exists $$data->{rowHeader}->{$_}) ? "<br />" : "";
					print RT &printHeaderCell($cssHash,"$$data->{colHeader}->{$row}{name}$brk$$data->{rowHeader}->{$_}{name}","ch r");
d78 1
a78 1
					print RT &printHeaderCell($cssHash,"$$data->{rowHeader}->{$_}{name}|*|$$data->{rowHeader}->{$_}{id}","ch r",undef,undef,"r.$_");
d80 1
a80 1
					print RT &printHeaderCell($cssHash,"&nbsp;","ch r");
@


1.22
log
@drill up-down with all from header implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.21 2003/12/04 14:04:34 jiri_schmid Exp $
d52 4
a55 2
	my $groupCols = (exists $$data->{row}[0]) ? ($#{$$data->{row}[0]} > 0) ? @@{$$data->{row}[0]} : 1 : 1;
	my $groupRows = (exists $$data->{col}[0]) ? ($#{$$data->{col}[0]} > 0) ? @@{$$data->{col}[0]} : 1 : 1;
d60 1
a60 1
	for ($row = 0;$row < $groupRows; $row++) {
d66 13
d80 1
a80 3
			if  ($header eq 'innerTable') {
				print RT &printHeaderCell($cssHash,&descriptionTable('in', $data, $cssHash),"ch r",$groupCols,$groupRows);
			} elsif ($header eq 'innerRow') {
d297 1
a297 1
				$table .= &printHeaderCell($cssHash,$$data->{colHeader}->{$x}{name}."<br>".$$data->{rowHeader}->{$y}{name},"ee",undef,undef,undef,$style)
d300 1
a300 1
				$table .= &printHeaderCell($cssHash,$$data->{colHeader}->{$x}{name},"ee",undef,undef,undef,$style)
d302 1
a302 1
				$table .= &printHeaderCell($cssHash,$$data->{rowHeader}->{$y}{name},"ee",undef,undef,undef,$style)
@


1.21
log
@modificated reports filterinng contians variations within element (OR) and joins between elements themselve (AND)
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.20 2003/12/03 16:02:08 jiri_schmid Exp $
d63 1
a63 1
			print RT &printHeaderCell($cssHash,$$data->{colHeader}->{$row}{name},"ch r",$groupCols,undef,undef,"style='text-align:right !important;'");	
d71 1
a71 1
					print RT &printHeaderCell($cssHash,$$data->{rowHeader}->{$_}{name},"ch $cssH",undef,$groupRows,undef,"style='vertical-align:bottom'");
@


1.20
log
@implemented sorting in tree
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.19 2003/12/03 12:03:42 jiri_schmid Exp $
d269 1
a269 1
	return "<td $add$css>$content</td>"
@


1.19
log
@fixed generating header in grid, minor visual improvments
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.18 2003/12/02 16:22:53 jiri_schmid Exp $
a44 9

#print RT "PARAMETERS<br>";
#foreach ($$q->param()) {
#	printf RT "%s: %s<br>", $_, $$q->param($_);
#}
#foreach (keys $$variables) {
#	printf RT "%s", $_;
#}

d212 1
a212 1
use Data::Dumper;
@


1.18
log
@fixed some generating bugs when creating HTML output
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.17 2003/11/28 13:03:23 jiri_schmid Exp $
d39 1
d69 1
a69 1
		if ($header eq 'noneHeader' && $row == 0 && exists $$data->{row}[0]) {
d82 1
a82 1
			} elsif ($header eq 'outerTable' && exists $$data->{row}[0]) {
d221 1
a221 1
#use Data::Dumper;
d225 1
@


1.17
log
@MD5 hashing implemented, sorting menus implemented etc...
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.16 2003/11/28 07:06:10 michald Exp $
d122 1
a122 1
		if ($rowCells) {
@


1.16
log
@report/metric filter join
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.15 2003/11/27 16:41:09 jiri_schmid Exp $
d168 1
a168 1
			push(@@links,"$_/$$data->{links}{$ID}{current}{$_}");
d174 1
a174 1
			push(@@links,"$_/$$data->{links}{$ID}{down}{$_}");
d180 1
a180 1
			push(@@links,"$_/$$data->{links}{$ID}{up}{$_}");
@


1.15
log
@something like drill implemeted
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.14 2003/11/27 08:52:44 jiri_schmid Exp $
d34 7
a40 7
print RT <<END;
	<body onload="init_menu()" onclick='hideAllMenus()'>
	<input type="hidden" value="$$variables->{id}" id="ID" name="id" />
	<input type="hidden" value="$$variables->{useLang}" id="LANG" name="lang" />
	<input type="hidden" value="$$variables->{skin}" id="SKIN" name="skin" />
	<div class="Menu" id="userMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:5;"  onmouseover='hideSubmenus()'></div>
	<div class="Menu" id="userSubMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:6;"></div>
d44 9
@


1.14
log
@1.step for drilling implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.13 2003/11/25 16:44:56 jiri_schmid Exp $
d159 1
a159 1
			push(@@links,$_,$$data->{links}{$ID}{current}{$_});
d165 1
a165 1
			push(@@links,$_,$$data->{links}{$ID}{down}{$_});
d171 1
a171 1
			push(@@links,$_,$$data->{links}{$ID}{up}{$_});
@


1.13
log
@txt and xml export implemented
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.12 2003/11/25 12:10:44 jiri_schmid Exp $
d42 1
d62 1
a62 1
			print RT &printHeaderCell($cssHash,$$data->{colHeader}->{$row}{name},"ch r",$groupCols,undef,"style='text-align:right !important;'");	
d70 1
a70 1
					print RT &printHeaderCell($cssHash,$$data->{rowHeader}->{$_}{name},"ch $cssH",undef,$groupRows,"style='vertical-align:bottom'");
d94 1
a94 1
			print RT &printHeaderCell($cssHash,"$$data->{col}[$colIndex][$row]|$$data->{colHeader}->{$row}{id}","ch $cssR",$colspan,undef,"id='c.$colIndex.$row'");
d133 2
a134 2
				$hlp = &printHeaderCell($cssHash,"$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}","$cssC $cssB$cssR",undef,$rowspan,"id='r.$col.$row'") if ($col == 1 && $row == 0);
				print RT &printHeaderCell($cssHash,"$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}","$cssC $cssB$cssR",undef,$rowspan,"id='r.$col.$row'"); 
d246 2
a247 2
sub printHeaderCell (){
	my($html32,$content,$css,$cols,$rows,$add) = @@_;
d253 1
a253 1
		$menu = " oncontextmenu=\"return showMenu(this,'$content[1]')\"" if defined $content[1];
d255 1
a255 1
		$css = " class='$css'";
d257 1
d260 1
a260 1
	return "<th $css$printCols$printRows$menu $add>$content[0]</th>"
d263 1
a263 1
sub printCell() {
d282 1
a282 1
				$table .= &printHeaderCell($cssHash,$$data->{colHeader}->{$x}{name}."<br>".$$data->{rowHeader}->{$y}{name},"ee",undef,undef,$style)
d285 1
a285 1
				$table .= &printHeaderCell($cssHash,$$data->{colHeader}->{$x}{name},"ee",undef,undef,$style)
d287 1
a287 1
				$table .= &printHeaderCell($cssHash,$$data->{rowHeader}->{$y}{name},"ee",undef,undef,$style)
@


1.12
log
@export rutines implemented for graph 2D
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.11 2003/11/21 10:30:55 jiri_schmid Exp $
a215 1

@


1.11
log
@fixed pdf creating with involved description table
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.10 2003/11/20 15:47:41 jiri_schmid Exp $
d176 1
a176 1
	$links = join("|",@@{$Const::run->{export}});
@


1.10
log
@export 2 xls and pdf works (pdf is not fine)
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.9 2003/11/12 10:20:43 jiri_schmid Exp $
d72 1
a72 1
				print RT &printHeaderCell($cssHash,'&nbsp',"ch r",$groupCols,$groupRows);
d259 1
a259 1
	return "<th $add $css$printCols$printRows$menu>$content[0]</th>"
d272 2
a273 2
	my $table = "<table style='border:0; width:100%;'>" if $type eq 'in';
	$table = "<table>" if $type eq 'out';
d288 1
a288 1
				$table .= &printHeaderCell($cssHash,'&nbsp',"ee")
d294 1
@


1.9
log
@finally found and fixed problem of shifted column header in generated report
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.8 2003/11/12 09:58:53 jiri_schmid Exp $
d15 1
a15 1
my ($variables, $q, $css, $header, $data) = (shift,shift,shift,shift,shift);	# ptr to data hash
d26 8
a33 2
print RT &Local::customHTMLHead($$variables->{useEnc},$Const::languages->{ $$variables->{useLang} }->{lang},'Report Result','right_menu',"<style>\@@import url('./CSS/$css.css');\@@import url('$$variables->{skinPath}menu.css');</style>");

d35 6
a40 6
<body onload="init_menu()">

<input type="hidden" value="$$variables->{id}" id="ID" name="id" />
<input type="hidden" value="$$variables->{useLang}" id="LANG" name="lang" />
<div class="Menu" id="userMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:5;"  onmouseover='hideSubmenus()'></div>
<div class="Menu" id="userSubMenu" style="display:block; position:absolute; top:0px; left:0px; visibility:hidden; z-index:6;"></div>
d42 4
a45 2
	print RT &descriptionTable('out', $data) if $header eq 'outerTable';
	print RT "<table>";
d59 1
a59 1
			print RT &printHeaderCell('&nbsp;',"ch r",$groupCols,$groupRows);	
d61 1
a61 1
			print RT &printHeaderCell($$data->{colHeader}->{$row}{name},"ch r",$groupCols,undef,"style='text-align:right !important;'");	
d64 1
a64 1
				print RT &printHeaderCell(&descriptionTable('in', $data),"ch r",$groupCols,$groupRows);
d69 1
a69 1
					print RT &printHeaderCell($$data->{rowHeader}->{$_}{name},"ch $cssH",undef,$groupRows,"style='vertical-align:bottom'");
d72 1
a72 1
				print RT &printHeaderCell('&nbsp',"ch r",$groupCols,$groupRows);
d93 1
a93 1
			print RT &printHeaderCell("$$data->{col}[$colIndex][$row]|$$data->{colHeader}->{$row}{id}","ch $cssR",$colspan,undef,"id='c.$colIndex.$row'");
d95 1
a95 1
		print RT &printHeaderCell($$data->{colHeader}{0}{name},"ch r") if ($#{$$data->{col}} == -1 && exists $$data->{c} && $#{$$data->{row}} > -1);
d132 2
a133 2
				$hlp = &printHeaderCell("$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}","$cssC $cssB$cssR",undef,$rowspan,"id='r.$col.$row'") if ($col == 1 && $row == 0);
				print RT &printHeaderCell("$$data->{row}[$row][$col]|$$data->{rowHeader}->{$col}{id}","$cssC $cssB$cssR",undef,$rowspan,"id='r.$col.$row'"); 
d139 1
a139 1
			print RT &printHeaderCell($$data->{rowHeader}{0}{name},"$cssC $cssB$cssR"); 
d144 1
a144 1
			print RT &printCell($$data->{c}{$row}{$col},"$cssC $cssB$cssR");
d150 2
a151 1

d208 1
a208 1

d247 1
a247 1
	my($content,$css,$cols,$rows,$add) = @@_;
d249 8
a256 11
	my $menu = " oncontextmenu=\"return showMenu(this,'$content[1]')\"" if defined $content[1];
	$menu .= " onclick='MA(this)'";
	$css = " class='$css'" if $css;
	my $printCols = ($cols > 1) ? " colspan='$cols'" : "";
	my $printRows = ($rows > 1) ? " rowspan='$rows'" : "";
	return "<th $add$css$printCols$printRows$menu>$content[0]</th>"
}
#---------------------------------------------------
sub printGroupedCell() {
	my($content,$css,$cols,$rows,$add) = @@_;
	$css = " class='$css'" if $css;
d259 1
a259 1
	return "<td $add$css$printCols$printRows>$content</td>"
d263 3
a265 2
	my($content,$css,$add) = @@_;
	$css = " class='$css'" if $css;
d271 1
a271 2
	my $type = shift;
	my $data = shift;
d276 1
d281 1
a281 1
				$table .= &printHeaderCell($$data->{colHeader}->{$x}{name}."<br>".$$data->{rowHeader}->{$y}{name},"ee",undef,undef,"style='border-style:dotted; border-width:1px;'")
d284 1
a284 1
				$table .= &printHeaderCell($$data->{colHeader}->{$x}{name},"ee",undef,undef,"style='border-style:dotted; border-width:1px; vertical-align:bottom;'")
d286 1
a286 1
				$table .= &printHeaderCell($$data->{rowHeader}->{$y}{name},"ee",undef,undef,"style='border-style:dotted; border-width:1px; vertical-align:bottom'")
d288 1
a288 1
				$table .= &printHeaderCell('&nbsp',"ee")
@


1.8
log
@report generating - labeling changes
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.7 2003/11/11 14:03:19 jiri_schmid Exp $
d17 1
a17 1
$header = ($header =~ /^innerCol$|^innerTable$|^innerRow$|^outerTable$|^none$/) ? $header : 'none';
@


1.7
log
@creating report - minor bugs fixed, seems to be working properly
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.6 2003/11/07 13:40:49 jiri_schmid Exp $
d87 1
a87 1
		print RT &printHeaderCell("&nbsp","ch r") if ($#{$$data->{col}} == -1 && exists $$data->{c} && $#{$$data->{row}} > -1);
d131 1
a131 1
			print RT &printHeaderCell("&nbsp","$cssC $cssB$cssR"); 
@


1.6
log
@tested a fixed saving of all objects
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.5 2003/11/06 09:56:51 jiri_schmid Exp $
d17 1
a17 1
$header = $header ? $header : 'none';
d86 2
a87 1
		}
d94 2
a95 1
	for ($row = 0; $row < @@{$$data->{row}}; $row++) {
d104 2
a105 1
		for ($col = 0; $col < @@{$$data->{row}[0]}; $col++) {
d127 8
a134 2
		};
		for ($col = 0; $col < @@{$$data->{col}}; $col++) {
@


1.5
log
@ldm implemented over all projects
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.4 2003/11/04 15:19:01 jiri_schmid Exp $
d50 2
a51 2
		if ($header eq 'none' && $row == 0 && exists $$data->{row}[0]) {
			print RT &printHeaderCell('&nbsp',"ch r",$groupCols,$groupRows);	
@


1.4
log
@save as - modperl fixies, code improvments
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.3 2003/11/04 09:38:43 jiri_schmid Exp $
d193 1
a193 1
#my $sql = Dumper(SOAP->PrepareSQL($ID));
@


1.3
log
@back changes
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.2 2003/11/04 04:45:24 michald Exp $
d11 1
d26 2
a28 15
Content-Type: text/html; charset=UTF-8


<?xml version="1.0" encoding="$$variables->{useEnc}"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$Cosnt::languages->{ $$variables->{useLang} }->{lang}" xml:lang="$Cosnt::languages->{ $$variables->{useLang} }->{lang}">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=$$variables->{useEnc}" />
<title>Report Result</title>
<style>\@@import url("./CSS/$css.css");</style>
<style>\@@import url("$$variables->{skinPath}menu.css");</style>
<script type="text/javascript" src="js/right_menu.js"></script>
</head>
@


1.2
log
@graph2D fix for mod_perl
@
text
@d4 1
a4 1
# $Id: Run_grid.pm,v 1.1 2003/10/31 12:47:57 jiri_schmid Exp $
d20 1
a20 1
#binmode(RT,":utf8");
d24 1
a24 24
print RT $$q->start_html(
	-title=>"Tabs",
	-lang=>$Const::languages->{$use_lang}{lang},	#return language specification in format: language-country (it differs from param Lang)
	-encoding=>$use_enc,
	-style=>{-src=>["$$variables->{skinPath}menu.css", "./CSS/$css.css"]},
	-script=>{-language=>'JAVASCRIPT', -src=>'js/right_menu.js'},
	-onload=>"init_menu()",
	-head=>meta({-http_equiv => 'Content-Type', -content => "text/html; charset=$use_enc"}),
);

#print RT <<END;
#<?xml version="1.0" encoding="$$variables->{useEnc}"?>
#<!DOCTYPE html
#	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
#	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
#<html xmlns="http://www.w3.org/1999/xhtml" lang="$Cosnt::languages->{ $$variables->{useLang} }->{lang}" xml:lang="$Cosnt::languages->{ $$variables->{useLang} }->{lang}">
#<head>
#<meta http-equiv="Content-Type" content="text/html; charset=$$variables->{useEnc}" />
#<title>Report Result</title>
#<style>\@@import url("./CSS/$css.css");</style>
#<style>\@@import url("$$variables->{skinPath}menu.css");</style>
#<script type="text/javascript" src="js/right_menu.js"></script>
#</head>
#<body onload="init_menu()">
d26 17
d196 2
a197 2
	foreach (keys %{$Const::RLang}) {
		push (@@links,"'$_':'$Const::RLang->{$_}'");
@


1.1
log
@mod perl rocks!
@
text
@d4 1
a4 1
# $Id: run_grid.pl,v 1.1 2003/10/16 14:08:53 jiri_schmid Exp $
d14 1
a14 1
my ($variables,$q,$css,$header,$data) = (shift,shift,shift,shift,shift);	# ptr to data hash
d20 1
a20 1
binmode(RT,":utf8");
d22 26
a47 1
print RT "Content-Type: text/html; charset=UTF-8\n\n"; #important mime header for HTML files
a48 13
<?xml version="1.0" encoding="$$variables->{useEnc}"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$Cosnt::languages->{ $$variables->{useLang} }->{lang}" xml:lang="$Cosnt::languages->{ $$variables->{useLang} }->{lang}">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=$$variables->{useEnc}" />
<title>Report Result</title>
<style>\@@import url("./CSS/$css.css");</style>
<style>\@@import url("$$variables->{skinPath}menu.css");</style>
<script type="text/javascript" src="js/right_menu.js"></script>
</head>
<body onload="init_menu()">
d217 1
a217 1
	print RT "</body></html>";
@


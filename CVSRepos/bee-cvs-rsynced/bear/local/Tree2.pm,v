head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2004.03.09.16.11.57;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.04.14.43.16;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.02.13.01.03;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.23.12.09.29;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.04.10.44.36;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.16.20.27;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.16.02.09;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.27.08.52.44;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.25.10.07.42;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.05.10.44.57;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.31.12.47.57;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.11
log
@object tree creation improvment-fix
@
text
@#!/usr/bin/perl
#-----------------------------------------------------
# generate tree
#-----------------------------------------------------
# $Id: Tree2.pm,v 1.10 2004/03/04 14:43:16 jiri_schmid Exp $

package Tree2;

use strict;
our @@icons;
our @@folderIcons;
our $iconSrc;
our $itemType;
our $structure;
our $AAB = ' align="absbottom"'; #fixing of MSIE bug

#expected structure of HASH for proper generating tree:
#	$VAR -> {FOLDER_ID1} -> {'~name'} = 'Folder 1';
#	$VAR -> {FOLDER_ID1} -> {'~content'} = 'CONTENT_TYPE_1';
#	$VAR -> {FOLDER_ID1} -> {ITEM_ID1} -> {'name'} = 'Item 1';
#	$VAR -> {FOLDER_ID1} -> {ITEM_ID2} -> {'name'} = 'Item 2';
#	..................
#	$VAR -> {FOLDER_ID1} -> {FOLDER_ID10} -> {'~name'} = 'Folder 10';
#	$VAR -> {FOLDER_ID1} -> {FOLDER_ID10} -> {'~content'} = 'CONTENT_TYPE_10';
#	$VAR -> {FOLDER_ID1} -> {FOLDER_ID10} -> {ITEM_ID100} -> {'name'} = 'Item 100';
#	$VAR -> {FOLDER_ID1} -> {FOLDER_ID10} -> {ITEM_ID101} -> {'name'} = 'Item 101';
#	..................
#	$VAR -> {FOLDER_ID2} -> {'~name'} = 'Folder 2';
#	$VAR -> {FOLDER_ID1} -> {'~content'} = 'CONTENT_TYPE_2';
#	..................
# {HASH_NAME}->{~content} defines type of folder's content 
#	exactly: should match with icon of same name and eventualy of name "~contentFolder" spcified in hash iconSrc
#	eg: {HASH_NAME}->{~content} = 'TYPE'
#	relevant icon's hashes:
#	$iconSrc->{'TYPE'} = 'image0.(gif,png...)';	-- custom item icon
#	$iconSrc->{'TYPEClose'} = 'image1.(gif,png...)' -- custom folder icon
#	$iconSrc->{'TYPEOpen'} = 'image2.(gif,png...)'	-- custom folder icon
# {HASH_NAME}->{~name} defines Folder
# {HASH_NAME}->{name} defines folder's Item
# {name} or {~name} may content language 
# hashnames MUST BE UNIQUE !!! for proper work of javascript on client side

#-------------------------------------------------------
sub createTree {
my ($tree,$variables,$title,$user)=@@_;


@@icons = ();
@@folderIcons = ();
$iconSrc = {};
$itemType = {};
$structure = {};

my $imgType = $$variables->{imgType};
my $skinPath = $$variables->{skinPath};

$iconSrc={
#tree icons - neccessary
	plus=>"${skinPath}img/tree/plus.$imgType",
	plusBottom=>"${skinPath}img/tree/plusbottom.$imgType",
	minus=>"${skinPath}img/tree/minus.$imgType",
	minusBottom=>"${skinPath}img/tree/minusbottom.$imgType",
	line=>"${skinPath}img/tree/line.$imgType",
	base=>"${skinPath}img/tree/base.$imgType",
	join=>"${skinPath}img/tree/join.$imgType",
	joinBottom=>"${skinPath}img/tree/joinbottom.$imgType",
	empty=>"${skinPath}img/tree/empty.$imgType",
#folder icons
	folderClose=>"${skinPath}img/tree/folder.$imgType",	#default close folder icon
	folderOpen=>"${skinPath}img/tree/folderopen.$imgType",	#default open folder icon
	groupClose=>"${skinPath}img/tree/folder.$imgType",	#custom folder icon
	userClose=>"${skinPath}img/tree/folder.$imgType",	# -//- 
	roleClose=>"${skinPath}img/tree/folder.$imgType",	# -//-
#item icons
	item=>"",		#default item icon
	groups=>"${skinPath}img/group.$imgType",	#custom item icon
	users=>"${skinPath}img/single.$imgType",	# -//- 
	roles=>"${skinPath}img/role.$imgType",	# -//- 
};

$itemType={
	users=>'U',
	groups=>'G',
	roles=>'R',
};

#use Data::Dumper;
#print "<pre>".Dumper($tree)."</pre>";

foreach my $fid (keys %{$$tree}) {	#add item type for id-specific roles
	if ($$tree->{$fid}{'~content'} eq "roles") {
		foreach (keys %{$$tree->{$fid}}) {
			$itemType->{$_} = $itemType->{roles};
		}
	}
}


print "<div id='content' class='folder'><table><tr><td><span class='tree'><img src='${skinPath}img/tree/base.$imgType' style='vertical-align:bottom' alt='base'/>&nbsp;$title</span></td></tr></table>";
&processTree($tree);
print "</div>";

my @@object = ();
my ($type, $src);
foreach (keys %{$iconSrc}) { push(@@object,"\n$_:'$iconSrc->{$_}'") }
my $objectIcons = join(",",@@object);
my @@struct = ();
foreach my $id (keys %{$structure}) {
	push(@@struct,"\n$id:new Array(".join(",",@@{$structure->{$id}}).")");
}
undef $structure;
$structure = join(",",@@struct);

print "\n<script type='text/javascript'>var icons={$objectIcons};\nvar structure = {$structure};</script>";

}

#------------------------------------------
sub processTree {
my $tree = shift;
my @@root = sort { $$tree->{$a}{'~name'} cmp $$tree->{$b}{'~name'} } grep exists $$tree->{$_}{'~name'}, keys %{$$tree};
my $lastItem = $root[$#root];
foreach my $rootItem (@@root) {
	my $depth = 0;
	if (exists($$tree->{$rootItem}{'~name'})) {
		if ($lastItem eq $rootItem) {
			$icons[$depth] = $iconSrc->{empty};
			$folderIcons[$depth] = ($$tree->{$rootItem}{'~content'}) ? $iconSrc->{plusBottom} : $iconSrc->{join};
		} else {
			$icons[$depth] = $iconSrc->{line};
			$folderIcons[$depth] = ($$tree->{$rootItem}{'~content'}) ?  $iconSrc->{plus} : $iconSrc->{joinBottom};
		}
		&printFolder($$tree->{$rootItem},$rootItem,$depth,$$tree->{$rootItem}{'~content'},'zero_level');
		if ($$tree->{$rootItem}{'~content'}) {
			my $reType = delete $$tree->{$rootItem}{'~content'};
			print "<div id='segment$rootItem' style='display:none'>";
			$depth++;
			&createTreeSegment(\$$tree->{$rootItem},$depth,$reType,$rootItem) ;
			print "</div>";
		}
	}
}
}

#------------------------------------------
sub createTreeSegment {
my ($tree, $inDepth, $type, $parent) = @@_;		
my @@items = sort { $$tree->{$a}{'~name'} cmp $$tree->{$b}{'~name'} } grep exists $$tree->{$_}{'~name'}, keys %{$$tree};
push @@items, sort { $$tree->{$a}{name} cmp $$tree->{$b}{name} } grep exists $$tree->{$_}{name}, keys %{$$tree};
my $lastItem = $items[$#items];
my @@fixFolderIcons = @@folderIcons;
my @@fixIcons = @@icons;
foreach (@@items) {
	my $outDepth = $inDepth;
	if (exists $$tree->{$_}{name}) {
		$icons[$inDepth] = ($lastItem eq $_) ? $iconSrc->{join} : $iconSrc->{joinBottom};
		&printItem($$tree->{$_},$_,$type,$parent);
	} elsif (exists $$tree->{$_}{'~name'}) {
		if ($lastItem eq $_) {
			$icons[$outDepth] = $iconSrc->{empty};
			$folderIcons[$outDepth] = ($$tree->{$_}{'~content'}) ? $iconSrc->{plusBottom} : $iconSrc->{join};
		} else {
			$icons[$outDepth] = $iconSrc->{line};
			$folderIcons[$outDepth] = ($$tree->{$_}{'~content'}) ?  $iconSrc->{plus} : $iconSrc->{joinBottom};
		}
		$folderIcons[$inDepth-1] = $icons[$inDepth-1];
		&printFolder($$tree->{$_},$_,$inDepth,$$tree->{$_}{'~content'},$parent);
		if ($$tree->{$_}{'~content'}) {
			my $reType = delete $$tree->{$_}{'~content'};
			print "<div id='segment$_' style='display:none'>";
			$outDepth++;
			&createTreeSegment(\$$tree->{$_},$outDepth,$reType,$_);
			print "</div>";
		}
		@@folderIcons = @@fixFolderIcons;
		@@icons = @@fixIcons;
	}
}
return 
}

#------------------------------------------
sub printFolder {
my ($item, $id, $depth, $content, $parent) = @@_;
	print "<span>";	#keeps the row unbreakable
	my ($class, $onclick, $folderIcon);
	if ($content) {
		$onclick = "onclick='ocFolder(this)'";
		$folderIcon = $content."Close";
	} else {
		$class = "class='inactive'";
	}
	$folderIcon = (exists $iconSrc->{$folderIcon}) ? $iconSrc->{$folderIcon} : $iconSrc->{folderClose};
	for (0..($#folderIcons-1)) { print "<img$AAB src='$folderIcons[$_]' />" }
	print "<a href='javascript:{}'><span id='$id' $onclick><img$AAB id='icon$id' src='$folderIcons[$#folderIcons]'><img$AAB id='folderIcon$id' name=\"$content|$id\" src='$folderIcon'/><span id='view$id' $class title=\"".&Local::ClearStringView($item->{'~desc'})."\">&nbsp;$item->{'~name'}&nbsp;</span></span></a>";
	delete $item->{'~name'};
	delete $item->{'~desc'} if exists $item->{'~desc'};
	print "</span><br />";	#break for new row
	push (@@{$structure->{$parent}},"'$id'");
}

#------------------------------------------
sub printItem {
my ($item, $id, $type, $parent) = @@_;
	print "<span>";	#keeps the row unbreakable
	my $itemIcon = (exists $iconSrc->{$type}) ? $iconSrc->{$type} : $iconSrc->{item};
	for (0..$#icons) { print "<img$AAB src='$icons[$_]' />" }
	print "<a href='javascript:{}'><span id='$id' onclick='showMe(this)' ondblclick='jump(this)'><img$AAB name=\"$item->{name}|$itemType->{$type}\" id='icon$id' src='$itemIcon'/><span id='view$id' title=\"".&Local::ClearStringView($item->{desc})."\">&nbsp;$item->{name}&nbsp;</span></span></a>";
	print "</span><br />";	#break for new row
	push (@@{$structure->{$parent}},"'$id'");
	# emtpy anchor <a href='javascript:{}'> inhibits auto-selecting text on doubleclick on both Mozilla and IE browsers
}

1
@


1.10
log
@fixing bugs and improving useability and performance
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.9 2004/03/02 13:01:03 jiri_schmid Exp $
d121 1
a121 1
my @@root = sort { $$tree->{$a}{'~name'} cmp $$tree->{$b}{'~name'} } keys %{$$tree};
d148 2
a149 1
my @@items = sort { $$tree->{$a}{name} cmp $$tree->{$b}{name} } keys %{$$tree};
@


1.9
log
@changed id handling 4 access tree
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.8 2004/02/23 12:09:29 jiri_schmid Exp $
d103 1
a103 1
my @@object;
d107 1
a107 1
my @@struct;
d194 1
a194 1
	print "<a href='javascript:{}'><span id='$id' $onclick><img$AAB id='icon$id' src='$folderIcons[$#folderIcons]'><img$AAB id='folderIcon$id' name='$content|$id' src='$folderIcon'/><span id='view$id' $class title=\"$item->{'~desc'}\">&nbsp;$item->{'~name'}&nbsp;</span></span></a>";
d207 1
a207 1
	print "<a href='javascript:{}'><span id='$id' onclick='showMe(this)' ondblclick='jump(this)'><img$AAB name='$item->{name}|$itemType->{$type}' id='icon$id' src='$itemIcon'/><span id='view$id' title='$item->{desc}'>&nbsp;$item->{name}&nbsp;</span></span></a>";
@


1.8
log
@fixed access tree creation depending on ACL
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.7 2003/12/04 10:44:36 jiri_schmid Exp $
d14 1
a14 1
our @@structure;
d52 1
a52 1
@@structure = ();
d76 3
a78 3
	group=>"${skinPath}img/group.$imgType",	#custom item icon
	user=>"${skinPath}img/single.$imgType",	# -//- 
	role=>"${skinPath}img/role.$imgType",	# -//- 
d82 3
a84 3
	user=>'U',
	group=>'G',
	role=>'R',
d90 6
a95 2
foreach (keys %{$$tree->{roles}}) {
	$itemType->{$_} = $itemType->{role};
d98 1
d107 6
a112 1
my $structure = join(",",@@structure);
d114 1
a114 1
print "\n<script type='text/javascript'>var icons={$objectIcons};\nvar structure = new Array($structure);</script>";
d133 1
a133 1
		&printFolder($$tree->{$rootItem},$rootItem,$depth,$$tree->{$rootItem}{'~content'},0);
d198 1
a198 1
	push (@@structure,"\n'$parent|$id'");
d209 1
a209 1
	push (@@structure,"'$parent|$id'");
@


1.7
log
@visaul changes and improvments
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.6 2003/12/03 16:20:27 jiri_schmid Exp $
d45 1
a45 1
my ($tree,$variables,$title)= (shift,shift,shift);
d87 4
a90 1
foreach (SOAP->GetAdminProjects()) {	#!!! temporarily called function instad of SOAP->GetProjects() till access roles implemented
@


1.6
log
@fixed generating of admin tree
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.5 2003/12/03 16:02:09 jiri_schmid Exp $
d87 1
a87 1
foreach (SOAP->GetAdminProjects()) {
@


1.5
log
@implemented sorting in tree
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.4 2003/11/27 08:52:44 jiri_schmid Exp $
d87 1
a87 1
foreach (SOAP->GetAdminProjects() {
@


1.4
log
@1.step for drilling implemented
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.3 2003/11/25 10:07:42 michald Exp $
d108 1
a108 1
my @@root = sort(keys(%{$$tree}));
d135 1
a135 1
my @@items = sort(keys(%{$$tree}));
@


1.3
log
@Project ACL implementation
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.2 2003/11/05 10:44:57 jiri_schmid Exp $
d87 1
a87 1
foreach (SOAP->GetProjects($user)) {
@


1.2
log
@pointers everywhere, reapply of removed fix
@
text
@d5 1
a5 1
# $Id: Tree2.pm,v 1.1 2003/10/31 12:47:57 jiri_schmid Exp $
d87 1
a87 1
foreach (SOAP->GetProjects) {
@


1.1
log
@mod perl rocks!
@
text
@d5 1
a5 1
# $Id: tree.pl,v 1.1 2003/10/16 14:08:53 jiri_schmid Exp $
a46 2
my $imgType = \$$variables->{imgType};
my $skinPath = \$$variables->{skinPath};
d48 8
d59 9
a67 9
	plus=>"$${skinPath}img/tree/plus.$$imgType",
	plusBottom=>"$${skinPath}img/tree/plusbottom.$$imgType",
	minus=>"$${skinPath}img/tree/minus.$$imgType",
	minusBottom=>"$${skinPath}img/tree/minusbottom.$$imgType",
	line=>"$${skinPath}img/tree/line.$$imgType",
	base=>"$${skinPath}img/tree/base.$$imgType",
	join=>"$${skinPath}img/tree/join.$$imgType",
	joinBottom=>"$${skinPath}img/tree/joinbottom.$$imgType",
	empty=>"$${skinPath}img/tree/empty.$$imgType",
d69 5
a73 5
	folderClose=>"$${skinPath}img/tree/folder.$$imgType",	#default close folder icon
	folderOpen=>"$${skinPath}img/tree/folderopen.$$imgType",	#default open folder icon
	groupClose=>"$${skinPath}img/tree/folder.$$imgType",	#custom folder icon
	userClose=>"$${skinPath}img/tree/folder.$$imgType",	# -//- 
	roleClose=>"$${skinPath}img/tree/folder.$$imgType",	# -//-
d76 3
a78 3
	group=>"$${skinPath}img/group.$$imgType",	#custom item icon
	user=>"$${skinPath}img/single.$$imgType",	# -//- 
	role=>"$${skinPath}img/role.$$imgType",	# -//- 
d91 1
a91 1
print "<div id='content' class='folder'><table><tr><td><span class='tree'><img src='$${skinPath}img/tree/base.$$imgType' style='vertical-align:bottom' alt='base'/>&nbsp;$title</span></td></tr></table>";
@


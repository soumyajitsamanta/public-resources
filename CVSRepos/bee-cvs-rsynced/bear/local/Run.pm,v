head	1.15;
access;
symbols;
locks; strict;
comment	@# @;


1.15
date	2004.02.09.14.26.47;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.16.16.13.53;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.16.11.56.31;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.12.16.31.18;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.12.13.50.25;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.09.12.42.50;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.07.16.27.05;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.07.12.01.59;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.18.15.17.22;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.18.12.59.54;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.16.16.16.44;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.16.15.49.24;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.16.13.44.24;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.15.16.34.32;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.15.15.16.03;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.15
log
@object tree remembers opened directory till webbrowser restarts
@
text
@#!/usr/bin/perl
# $Id: Run.pm,v 1.14 2004/01/16 16:13:53 jiri_schmid Exp $

package Run;

use strict;
use HTML::HTMLDoc;
use Encode;

#---------------------------------------------------------

sub convert2PDF {
	my ($inFile,$outFile,$useLang,$codePage) = @@_;
	my $cp;
	my $htmldoc = new HTML::HTMLDoc();
	if ($codePage) {
		$cp = $codePage
	} else {
		if ($useLang eq 'cz') { $cp = "iso-8859-2" }
		else { $cp = "iso-8859-1" }
	}
	$htmldoc->set_charset($cp);
	$htmldoc->set_output_format("pdf14");
	$htmldoc->embed_fonts() if $cp ne 'iso-8859-1';
	$htmldoc->landscape();
	$htmldoc->set_fontsize("10");
	$htmldoc->set_input_file($inFile);
	my $pdf = $htmldoc->generate_pdf();
	$pdf->to_file($outFile);
}

#---------------------------------------------------------
sub convertUTF8_2CodePage {
	my ($inFile,$outFile,$useLang,$codePage) = @@_;
	my $cp;
	if (open(INF,$inFile) && open(OUTF,">$outFile")) {
		if ($useLang eq 'cz') {
			$cp = 'iso-8859-2';
		} else {
			$cp = $codePage ? $codePage : 'iso-8859-1';
		}
		binmode(INF,":utf8");
# ----- force binary file handling, this way is necceassry under mod perl -----------------------------
		binmode(OUTF,":raw");
		while (<INF>) {
#force conversion from perl internal structure into specified code page, beacause saving in binary mode
			print OUTF encode($cp,$_);
		}
		close OUTF;
#------------------------------------------------------------------------------------------------------
		close INF;
	}
}

#---------------------------------------------------------

sub createObjectObjects {
my ($objects,$lang,$skinPath,$force) = @@_;
my $cnt=1;
my $end;
my @@rtrn = ();
foreach my $id (keys %{$objects}) {
	push @@rtrn,$id;
	$objects->{$id}{view} += $force;
	print "<input type='hidden' name='view$id' value='$objects->{$id}{view}'>";
	if ($objects->{$id}{view} && $objects->{$id}{view} < 10) {
		if ($cnt == 1) {
			print "$Const::lang->{$lang}{'Run Object'}:\n<table><tr>";
			$end = "</tr></table><br />";
		}
		print "<td>";
		if ($objects->{$id}{type} eq 'object') {
			&createSelect($id,$objects->{$id},$lang,$skinPath);
		} else {
			&createError($objects->{$id}{name},$lang);
		}
		print "</td><td>&nbsp;</td>";
	print "</tr><tr>" if $cnt%4==0;
	$cnt++;
	}
}
print $end;
return @@rtrn
}

#---------------------------------------------------------

sub createOthersObjects {
my ($objects,$lang,$skinPath,$force) = @@_;
my $cnt=1;
my $end;
my @@rtrn = ();
foreach my $id (keys %{$objects}) {
	push @@rtrn,$id;
	$objects->{$id}{view} += $force;
	print "<input type='hidden' name='view$id' value='$objects->{$id}{view}'>";
	if ($objects->{$id}{view} && $objects->{$id}{view} < 10) {
		if ($cnt == 1) {
			print "$Const::lang->{$lang}{'Run Others'}:\n<table><tr>";
			$end = "</tr></table>";
		}
		print "<td>";
		if ($objects->{$id}{type} =~ /^element$|^object$/ ) {
			&createSelect($id,$objects->{$id},$lang,$skinPath);
		} elsif ($objects->{$id}{type} =~ /^date$|^common$/ && $objects->{$id}{subtype} eq 'list') {
			&createSelect($id,$objects->{$id},$lang,$skinPath);
		} elsif ($objects->{$id}{type} =~ /^date$|^common$/ && $objects->{$id}{subtype} eq 'constrain') {
			&createInput($id,$objects->{$id},$lang,$skinPath);
		} else {
			&createError($objects->{$id}{name},$lang);
		}
		print "</td><td>&nbsp;</td>";
	print "</tr><tr>" if $cnt%4==0;
	$cnt++;
	}
}
print $end;
return @@rtrn
}

#---------------------------------------------------------
sub createError {
my ($name,$lang) = @@_;
print <<END;
<table class='neutral_error'>
	<tr><td class='neutral_bold'>$name</td></tr>
	<tr><td><hr size='1' /></td></tr>
	<tr><td style='font-style:italic'>$Const::lang->{$lang}{'Run Error'}!&nbsp;</td></tr>
</table>
END
}

#---------------------------------------------------------
sub createSelect {
my ($id,$object,$lang,$skinPath) = @@_;
my ($multi, $size);
$size = ($object->{max} == 1 && $object->{min} == 1) ? 1 : 5;
$multi = " multiple='multiple'" if $size > 1;
print <<END;
<table class="$object->{prop}">
	<tr><td colspan='2' style='font-style:italic' class='nowrap'>$object->{ask}:</td></tr>
	<tr>	<td>
		<select name="$id" size="$size" $multi>
END
		my $cnt = 0;
		foreach my $alt (@@{$object->{alt}}) {
			my $id = exists $object->{ids} ? @@{$object->{ids}}[$cnt] : $alt;
			my $selected = (&checkAndModifyArray($id,$object)) ? " selected='selected'" : '';
			print "<option value='$id'$selected>$alt</option>";
			$cnt++;
		}
		print "</select></td>";
	print "<td style='text-align:center'><img style='vertical-align:bottom' src='${skinPath}img/help.png' onclick='javascript:alert(\"$object->{help}\")' title='$object->{help}' /></td>";
	print "</tr></table>";
}

#---------------------------------------------------------
sub checkAndModifyArray {
my ($id,$object) = @@_;
my $cnt;
for (0..$#{$object->{values}}) {
	if ($object->{values}[$_] eq $id) {
		$cnt = $_;
		last;
	}
}
splice @@{$object->{values}},$cnt,1 if defined $cnt;
return defined $cnt ? 1 : 0
}

#---------------------------------------------------------

sub createInput {
my ($id,$object,$lang,$skinPath) = @@_;
print <<END;
<table class="$object->{prop}">
	<tr><td colspan='2' class='nowrap' style='font-style:italic'>$object->{ask}:</td></tr>
	<tr>
		<td style='width:100%'><input style='width:100%' type='text' name="$id" /></td>
		<td><img style='vertical-align:bottom' src="${skinPath}img/help.png" title="$object->{help}" /></td>
	</tr>
</table>
END
}
#---------------------------------------------------------

sub setParams {
my ($varss,$q) = @@_; # rid = report id
my $params = $$q->param('reports');
my $rtrn;
if ($params) {
	foreach my $id (split /,/,$params) {
		my @@array = &Local::param_utf8($q,$id);	#force utf8 param handling
		$rtrn->{$id}{values} = [@@array] if $$q->param("view$id"); #prepare values to be send to beard
		$rtrn->{$id}{view} = $$q->param("view$id"); #were vieved have to bo set/reset
	}
}
$rtrn = SOAP->SetDynamicParams($$varss->{user},$$varss->{id},$$varss->{useLang},$rtrn);
return $rtrn
}

#---------------------------------------------------------

1
@


1.14
log
@bug fixies
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.13 2004/01/16 11:56:31 jiri_schmid Exp $
d142 2
a143 2
	<tr>	<td style='width:100%'>
		<select name="$id" size="$size" style='width:100%'$multi>
@


1.13
log
@dp page imrpovment, dp rules code fixies
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.12 2004/01/12 16:31:18 jiri_schmid Exp $
d148 1
a148 1
			my $selected = (&checkAndModifyArray($alt,$object)) ? " selected='selected'" : '';
@


1.12
log
@dynamic param managing rules implentation started
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.11 2004/01/12 13:50:25 jiri_schmid Exp $
d145 3
a147 1
		foreach my $alt (keys %{$object->{alt}}) {
d149 2
a150 1
			print "<option value='$alt'$selected>$object->{alt}{$alt}</option>";
@


1.11
log
@dynamic param fixations
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.10 2004/01/09 12:42:50 jiri_schmid Exp $
d71 1
a72 1
			print "<td>";
a73 1
			print "</td><td>&nbsp;</td>";
d75 3
a77 8
print <<END;
		<td>
		<table class='neutral'>
			<tr><td>$Const::lang->{$lang}{'Run Error'}</td></tr>
		</table>
		</td><td>&nbsp;</td>
END
	}
d102 1
a103 1
			print "<td>";
a104 1
			print "</td><td>&nbsp;</td>";
a105 1
			print "<td>";
a106 1
			print "</td><td>&nbsp;</td>";
a107 1
			print "<td>";
a108 1
			print "</td><td>&nbsp;</td>";
d110 1
a110 9
print <<END;
		<td>
		<table class='neutral'>
			<tr><td class='neutral_bold'>$objects->{$id}{name}</td></tr>
			<tr><td><hr size='1' /></td></tr>
			<tr><td style='font-style:italic'>$Const::lang->{$lang}{'Run Error'}!&nbsp;</td></tr>
		</table>
		</td><td>&nbsp;</td>
END
d112 1
d119 12
@


1.10
log
@dynamic param code imrpovment
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.9 2004/01/07 16:27:05 jiri_schmid Exp $
d94 1
a94 1
sub createFilterObjects {
d103 1
a103 1
	if ($objects->{$id}{view} && $objects->{$id}{view} < 5) {
d105 1
a105 1
			print "$Const::lang->{$lang}{'Run Filter'}:\n<table><tr>";
@


1.9
log
@added icons and improved controling dynamic params
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.8 2004/01/07 12:01:59 jiri_schmid Exp $
d61 1
d63 1
d89 1
d98 1
d100 1
d136 1
d191 8
a198 8
my ($user,$rid,$dynamic,$q) = @@_; # rid = report id
foreach my $type ('filter','object') {
	if (exists $$dynamic->{$type}) {
		foreach my $id (keys %{$$dynamic->{$type}}) {
			my @@array = &Local::param_utf8(\$q,$id);	#force utf8 param handling
			$$dynamic->{$type}{$id}{values} = [@@array] if @@array > 0 || $$dynamic->{$type}{$id}{view};
			$$dynamic->{$type}{$id}{view} = $q->param("view$id");
		}
d201 2
a202 2
$$dynamic = SOAP->SetDynamicParams($user,$rid,$$dynamic);
return $$dynamic->{defined}
@


1.8
log
@dynamic param implementation - next step
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.7 2003/12/18 15:17:22 jiri_schmid Exp $
d190 1
a190 1
			$$dynamic->{$type}{$id}{values} = [@@array];
@


1.7
log
@visual improvment
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.6 2003/12/18 12:59:54 jiri_schmid Exp $
d145 1
a145 1
		foreach my $alt (sort {$object->{alt}{$a} cmp $object->{alt}{$b}} keys %{$object->{alt}}) {
@


1.6
log
@defining of dynamic params within use rules implemented
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.5 2003/12/16 16:16:44 jiri_schmid Exp $
d58 1
a58 1
my ($wb,$objects,$lang,$skinPath,$force) = @@_;
d71 1
a71 1
			&createSelect($wb,$id,$objects->{$id},$lang,$skinPath);
d92 1
a92 1
my ($wb,$objects,$lang,$skinPath,$force) = @@_;
d105 1
a105 1
			&createSelect($wb,$id,$objects->{$id},$lang,$skinPath);
d109 1
a109 1
			&createSelect($wb,$id,$objects->{$id},$lang,$skinPath);
d113 1
a113 1
			&createInput($wb,$id,$objects->{$id},$lang,$skinPath);
d135 4
a138 12
my ($wb,$id,$object,$lang,$skinPath) = @@_;
my $style = $wb eq 'msie' ? "" : " style='width:100%'";
my $size = ($object->{max} == 1 && $object->{min} == 1) ? 1 : 4;
my ($colspan, $rowspan, $multi, $hlpspan);
if ($size > 1) {
	$multi = " multiple='multiple'";
	$colspan = " colspan='3'";
	$rowspan = " rowspan='3'";
	$hlpspan = " colspan='2'";
} else {
	$colspan = " colspan='2'";
}
d140 4
a143 6
<table class='neutral'>
	<tr><td$colspan class='neutral_bold'>$object->{name}</td></tr>
	<tr><td$colspan><hr size='1' /></td></tr>
	<tr><td$colspan style='font-style:italic'>$object->{ask}:</td></tr>
	<tr>	<td$rowspan>
		<select name="$id" size="$size"$style$multi>
d150 2
a151 2
	print "<td style='font-size:90%; text-align:right'>$Const::lang->{$lang}{'Run Min'}:</td><td style='font-size:90%; text-align:center'>$object->{min}</td></tr><tr><td style='font-size:90%; text-align:right'>$Const::lang->{$lang}{'Run Max'}:</td><td style='font-size:90%; text-align:center'>$object->{max}</td></tr><tr>" if $size > 1;
	print "<td$hlpspan style='text-align:center'><img style='vertical-align:bottom' src='${skinPath}img/help.png' title='$object->{help}' /></td></tr></table>";
d153 1
a154 1

d171 1
a171 2
my ($wb,$id,$object,$lang,$skinPath) = @@_;
my $style = $wb eq 'msie' ? "" : " style='width:100%'";
d173 2
a174 4
<table class='neutral'>
	<tr><td colspan='2' class='neutral_bold'>$object->{name}</td></tr>
	<tr><td colspan='2'><hr size='1' /></td></tr>
	<tr><td colspan='2' style='font-style:italic'>$object->{ask}:</td></tr>
d176 2
a177 2
		<td><input type='text' name="$id"$style/></td>
		<td><img style='vertical-align:bottom' src="${skinPath}img/help.png" title='$object->{help}' /></td>
@


1.5
log
@code change-improvment-fix
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.4 2003/12/16 15:49:24 jiri_schmid Exp $
d58 1
a58 2
my ($objects,$lang,$skinPath,$force) = @@_;
print "$Const::lang->{$lang}{'Run Object'}:";
d60 1
a60 1
print "<table><tr>";
d62 12
a73 6
	next if defined $objects->{$id}{values} && !$force;
	if ($objects->{$id}{type} eq 'object') {
		print "<td>";
		&createSelect($id,$objects->{$id},$lang,$skinPath);
		print "</td><td>&nbsp;</td>";
	} else {
d82 3
a84 2
print "</tr><tr>" if $cnt%4==0;
$cnt++;
d86 1
a86 1
print "</tr></table><br />";
d92 1
a92 2
my ($objects,$lang,$skinPath,$force) = @@_;
print "$Const::lang->{$lang}{'Run Filter'}:";
d94 1
a94 1
print "<table><tr>";
d96 20
a115 14
	next if defined $objects->{$id}{values} && !$force;
	if ($objects->{$id}{type} =~ /^element$|^object$/ ) {
		print "<td>";
		&createSelect($id,$objects->{$id},$lang,$skinPath);
		print "</td><td>&nbsp;</td>";
	} elsif ($objects->{$id}{type} =~ /^date$|^common$/ && $objects->{$id}{subtype} eq 'list') {
		print "<td>";
		&createSelect($id,$objects->{$id},$lang,$skinPath);
		print "</td><td>&nbsp;</td>";
	} elsif ($objects->{$id}{type} =~ /^date$|^common$/ && $objects->{$id}{subtype} eq 'constrain') {
		print "<td>";
		&createInput($id,$objects->{$id},$lang,$skinPath);
		print "</td><td>&nbsp;</td>";
	} else {
d125 3
a128 2
print "</tr><tr>" if $cnt%4==0;
$cnt++;
d130 1
a130 3
print "</tr></table>";
#use Data::Dumper;
#print "<pre>".Dumper($objects)."</pre>";
d135 4
a138 3
my ($id,$object,$lang,$skinPath) = @@_;
my $size = ($object->{max} - $object->{min}) == 0 ? 1 : 4;
my ($colspan, $rowspan, $multi);
d143 1
d153 1
a153 1
		<select name="$id" size="$size" style='width:100%'$multi>
d161 1
a161 1
	print "<td colspan='2' style='text-align:center'><img style='vertical-align:bottom' src='$skinPath/img/help.png' title='$object->{help}' /></td></tr></table>";
d181 2
a182 1
my ($id,$object,$lang,$skinPath) = @@_;
d189 2
a190 2
		<td><input type='text' name="$id" style='width:100%'/></td>
		<td><img style='vertical-align:bottom' src="$skinPath/img/help.png" title='$object->{help}' /></td>
a198 1
my $values;
d200 2
a201 2
	if (exists $dynamic->{$type}) {
		foreach my $id (keys %{$dynamic->{$type}}) {
d203 2
a204 7
			if (@@array > 0) {
				splice @@array,$dynamic->{$type}{$id}{max};	# cut exceeding items
				$values->{$id} = [@@array];
				$dynamic->{$type}{$id}{values} = [@@array];
			} else {
				undef $values->{$id};
			}
d208 2
a209 2
my $rtrn = SOAP->SetDynamicParams($user,$rid,$values);
return $rtrn
@


1.4
log
@first stage of reseting params implemented
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.3 2003/12/16 13:44:24 jiri_schmid Exp $
d162 1
a162 1
splice @@{$object->{array}},$cnt,1 if defined $cnt;
@


1.3
log
@setting and checking values of params agains memory
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.2 2003/12/15 16:34:32 jiri_schmid Exp $
d58 1
a58 1
my ($objects,$lang,$skinPath) = @@_;
d63 1
d86 1
a86 1
my ($objects,$lang,$skinPath) = @@_;
d91 1
d143 3
a145 2
		foreach my $alt (sort {$object->{alt}{$a} cmp$object->{alt}{$b}} keys %{$object->{alt}}) {
			print "<option value='$alt'>$object->{alt}{$alt}</option>";
d151 14
d167 1
d190 1
a190 1
			my @@array = $q->param($id);
d194 1
@


1.2
log
@just minor improvments
@
text
@d2 1
a2 1
# $Id: Run.pm,v 1.1 2003/12/15 15:16:03 jiri_schmid Exp $
a123 2
$object->{min} = 1 if $object->{min} < 1;
$object->{max} = 1 if $object->{max} < $object->{min};
d141 1
a141 1
		foreach my $alt (sort keys %{$object->{alt}}) {
d167 13
a179 10
my ($dynamic,$q) = @@_;
use Data::Dumper;
if (exists $dynamic->{filter}) {
	foreach my $id (keys %{$dynamic->{filter}}) {
		print "<pre>$id:".Dumper($q->param($id))."</pre>";
	}
}
if (exists $dynamic->{object}) {
	foreach my $id (keys %{$dynamic->{object}}) {
		print "<pre>$id:".Dumper($q->param($id))."</pre>";
d182 2
a183 7

}

#---------------------------------------------------------
sub checkParams {
my $dynamic = shift;
return (exists $dynamic->{object} || exists $dynamic->{filter}) ? 0 : 1
@


1.1
log
@interface for setting of dynamic params implemented
@
text
@d2 1
a2 1
# $Id: run.cgi,v 1.83 2003/12/12 16:48:12 jiri_schmid Exp $
d59 1
a59 1
print "<h4>$Const::lang->{$lang}{'Run Object'}:</h4>";
d79 1
a79 1
print "</tr></table>";
d86 1
a86 1
print "<h4>$Const::lang->{$lang}{'Run Filter'}:</h4>";
d169 13
a181 1
my $q = shift;
@


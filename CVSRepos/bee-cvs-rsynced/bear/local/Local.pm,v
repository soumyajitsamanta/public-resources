head	1.23;
access;
symbols;
locks; strict;
comment	@# @;


1.23
date	2004.04.26.18.08.53;	author vasekd;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.16.15.43.31;	author vacula;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.15.13.22.43;	author jiri_schmid;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.15.08.42.06;	author jiri_schmid;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.10.19.02.41;	author vasekd;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.04.14.43.16;	author jiri_schmid;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.18.16.19.17;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.16.14.55.23;	author jiri_schmid;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.13.17.09.40;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.16.15.49.24;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.25.22.12.10;	author michald;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.25.12.10.44;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.23.10.43.44;	author michald;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.20.16.34.14;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.20.15.47.41;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.18.14.38.40;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.14.11.45.36;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.09.19.13.37;	author vacula;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.07.13.40.49;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.05.10.44.57;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.04.15.19.01;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.31.13.45.59;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.31.12.47.57;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.23
log
@new format of table
@
text
@#-----------------------------------------------------
#  Bear Library
#-----------------------------------------------------
# $Id: Local.pm,v 1.22 2004/04/16 15:43:31 vacula Exp $

package Local;

use Encode;
use strict;

use Data::Dumper;

sub customHTMLHead {
my ($xml,$docType,$useEnc,$useLang,$title,$script,$add,@@rest) = @@_;
my $str = '';
$str .= "<?xml version='1.0' encoding='$useEnc'?>\n" if $xml;
$str .= "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>\n" if $docType;
$str .= "<html xmlns='http://www.w3.org/1999/xhtml' lang='$useLang' xml:lang='$useLang'>\n";
$str .= "<head>\n";
$str .= "<meta http-equiv='Content-Type' content='text/html; charset=$useEnc' />\n";
$str .= "<title>$title</title>\n";
$str .= "<script type='text/javascript' src='js/$script.js'></script>\n" if $script;
$str .= "$add\n" if $add;
$str .= "</head>\n";
return $str
}

#---------------------------------------------------
sub loadMetadata {
	my ($ID,$FullObj,$Obj) = (shift,shift,shift); # scalar, pointer, pointer
	if ($ID) {
		$$FullObj = SOAP->GetMetadata($ID);
		my $ObjT = (keys %{$$FullObj})[0];	#object type
		$$Obj = $$FullObj->{$ObjT}->{$ID};	#ptr to main part of data structure
		$$Obj->{description}=~s/\\n/\n/g;	#substitute NL
		my $ObjSubT = ( $$Obj->{subtype} ) ? $$Obj->{subtype} : 'main';	# object subtype 
		return ($ObjT,$ObjSubT);
	} else {
		return undef;
	}

}

#-------------------------------------------
sub createTabs {
my ($q,$ID,$ObjT,$ObjSubT,$localTab,$Obj,$lang,$variables,$localTabs,$fullObj,@@rest) = @@_;
	print $$q->startform(-action=>'', -name=>"$ObjT", -onsubmit=>'return reset_tree_name()');
	print $$q->hidden('ObjT',$ObjT);
	print $$q->hidden('all_params',$$variables->{allParams});
	print $$q->hidden('Proj',$$variables->{proj});
	my $name = &Local::LocalizedObj($$Obj->{name}, "Object ~$ID", lc($$variables->{useLang}), $$variables->{defaultLang});
	my $readOnly = ($ObjT =~ /^attr$|^fact$|^urole$/) ? "<td style='font-size:80%; font-weight:bold; vertical-align:bottom'>$$lang->{'Read Only'}</td>" : "";
	my $script = (defined $$variables->{script}) ? "<script src='js/$$variables->{script}' type='text/javascript'></script>" : "";
	if (exists $$variables->{hidden}) {
		foreach (keys %{$$variables->{hidden}}) {
		print "<input type='hidden' name='$_' id='$_' value='$$variables->{hidden}{$_}' />\n";
		}
	}
print <<END;
<input type="hidden" value="$localTab" id="source_tab" name="source_tab" />
<input type="hidden" value="$localTab" id="target_tab" name="target_tab" />
<input type="hidden" value="$$variables->{useLang}" id="activeLang" name="active_lang" />
<input type="hidden" value="$$variables->{skin}" id="skin" name="skin" />
<input type="hidden" value="$$variables->{imgType}" id="imgType" />
<input type="hidden" value="$ID" id="ITEM_ID" name="item_id" />
<table><tr>
	<td style='width:20px'><img src="$$variables->{skinPath}img/$$variables->{icon}.$$variables->{imgType}"></td>
	<td class="neutral_title">$$lang->{ $$variables->{langSegment} }</td>
	$readOnly	
	<td >- $name</td>
</tr></table>
$script
END
&generateTabs($variables,$lang,$localTab,$localTabs);
print "<script type='text/javascript'>var params = '$$variables->{allParams}';</script>";
print "<table class='local_tabline' cellspacing='0'><tr><td>\n";

if ($localTab eq 'rights') { #rights tab same 4 all objects
	&Rights::generateContent($variables,$lang,$Obj) 
} elsif ($ObjT =~ /^attr$|^fact$|^urole$/ && $localTab ne "def") { #description page - read only
	&Description2::generateContent($variables,$lang,$Obj,$localTab)
} elsif ($localTab eq 'desc' && $ObjT ne "report") { #description page, report has its own
	&Description::generateContent($variables,$lang,$Obj)
} elsif ($localTab eq 'def' and $ObjT ne 'format2d') { #manage most common page - main definition
	if ($ObjT eq 'filter') {
		&Filter::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'format') {
		&Format::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'format3d') {
		&Format3d::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'metric') {
		&Metric::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'grid') {
		&Grid::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'urole') {
		&Role::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'param') {
		&Param::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'graph3d') {
		&Graph3d::generateContent($variables,$lang,$Obj)
	} elsif ($ObjT eq 'report') {
		&Report::generateContent($variables,$lang,$Obj,$$q)
	}
} elsif ($ObjT eq 'param') {
	&Param_q::generateContent($variables,$lang,$Obj) if $localTab eq 'q';
} elsif ($ObjT eq 'format2d') {
	if ($ObjSubT eq 'map') {
		if ($localTab eq 'def') {
			&Format2d_map::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'layout') {
			&Format2d_map_layout::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'legend') {
			&Format2d_map_legend::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'objects') {
			&Format2d_map_objects::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'galery') {
			&Format2d_map_galery::generateContent($variables,$lang,$Obj)
		}
	}
	else {
		if ($localTab eq 'def') {
			&Format2d::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'objects') {
			&Format2d_objects::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'layout') {
			&Format2d_layout::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'ax_X') {
			&Format2d_ax_X::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'ax_Y') {
			&Format2d_ax_Y::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'legend') {
			&Format2d_legend::generateContent($variables,$lang,$Obj)
		} elsif ($localTab eq 'galery') {
			&Format2d_galery::generateContent($variables,$lang,$Obj)
		}
	}
} elsif ($ObjT eq 'graph3d') {
	if ($localTab eq 'color') {
		&Graph3d_color::generateContent($variables,$lang,$Obj)
	} elsif ($localTab eq 'shape') {
		&Graph3d_shape::generateContent($variables,$lang,$Obj)
	} elsif ($localTab =~ /^x$|^y$|^z$/) {
		&Graph3d_axis::generateContent($variables,$lang,$Obj)
	} elsif ($localTab =~ /^diameter$|^transparency$/) {
		&Graph3d_diam::generateContent($variables,$lang,$Obj)
	}
} elsif ($ObjT eq 'report') {							# R E P O R T
	if ($localTab eq 'desc') {
		&Report_main::generateContent($variables,$lang,$Obj,$$q)	
	} elsif ($localTab eq 'filter') {
		&Report_filter::generateContent($variables,$lang,$Obj,$fullObj)	
	} elsif ($localTab eq 'object') {
		&Report_object::generateContent($variables,$lang,$Obj,$$q,$fullObj)	
	} elsif ($localTab eq 'format') {
		&Report_format::generateContent($variables,$lang,$Obj,$fullObj)	
	} elsif ($localTab eq 'sql') {
		&Report_sql::generateContent($variables,$lang,$Obj,$$q)	
	}
};

print "</td></tr><tr><td>&nbsp;</td></tr></table>";
print $$q->endform;
}


#---------------------------------------------------
#This function returns forced flaged utf8 string
#matched to named CGI page parameter.
#From native CGI function param($name) expets
#well formed unflaged utf8 string.

sub param_utf8 {
my ($q,$name) = (shift,shift);
my @@rtrn = $$q->param($name);
for (0..$#rtrn) {
	Encode::_utf8_on($rtrn[$_]);
}
return @@rtrn == 1 ? $rtrn[0] : @@rtrn
}


#__________________________________________________________
#
sub getImageType {
my ($path) = shift;	# directory
my $rtrn;
	if (opendir IMG, $path) {
		foreach (readdir IMG) {
			if ($_ =~ /^\./) {
				next
			} else {
				($rtrn) = /\.(...)$/;
				last if $rtrn;
			}
		}
	close IMG;
	}
return $rtrn
}

#__________________________________________________________
#
sub getTime {
my @@time = localtime(time);
return sprintf "%d-%02d-%02d, %02d:%02d:%02d",($time[5] += 1900),($time[4]++),($time[3]++),$time[2],$time[1],$time[0];
}

#__________________________________________________________
#

sub SetParam {
	my ($q,$pName,$cName,$def,$cookie,$cookie_path,$cookie_exp) = @@_;
	my $v;
	$v=$q->param($pName);
	if (!defined $v) { 
		$v=$q->cookie($cName);
	};
	if ($def && !defined $v) { $v=$def };
	if ((defined $v)&&(defined $cookie)) {
		push (@@{$cookie}, $q->cookie(-name=>$cName, -value=>$v, -path=>$cookie_path, -expires=>$cookie_exp));
	}
	return $v
}

#__________________________________________________________
#

sub SQL2HTML {
# returns HTML formated text SQL with syntax highlighting

	my $sql=shift;

	$sql =~ s/\b(SELECT|FROM|WHERE|GROUP BY|ORDER BY)\b/<BR><STRONG>$1<\/STRONG>/gi;
	$sql =~ s/\b(AND|IN|OR|AS|JOIN|LIKE|LEFT|RIGHT|ON)\b/<STRONG>$1<\/STRONG>/gi;
	$sql =~ s/(=|\(|\))/<STRONG>$1<\/STRONG>/gi;
	$sql =~ s/\b(INNER|OUTER)\b/<BR>&nbsp;&nbsp;&nbsp;&nbsp;<STRONG>$1<\/STRONG>/gi;
	$sql =~ s/^(\s*<BR>\s*)*//;

	return $sql
}

#__________________________________________________________
#

sub ErrorDie {
	my $errS=shift;
	print "<FONT COLOR=\"#CC0000\"><STRONG>$errS</STRONG></FONT></html>";
	die
}
	
#---------------------------------------------------

sub TreeFileName {
	my $myPath = shift;
	my $pr=shift;	#project name
	my $User=shift;	#user name
	return "${myPath}html/$User-$pr.html"
}

#---------------------------------------
sub DirectStringView { #converts \\n and \" into webbroser text inputs fields viewable form \n and "
	my $string = shift;
	$string =~ s/\\n/\n/g;
	$string =~ s/\\"/"/g;
	return $string
}

#---------------------------------------
sub ScriptStringView { #converts \n and " into text/javascript usable form \\n and \\"
	my $string = shift;
	$string =~ s/\n/\\n/g;
	$string =~ s/"/\\"/g;
	return $string
}

#---------------------------------------
sub ClearStringView { #converts \n and " into webbrowseer tag's attribute useable form ' ' and named char "
	my $string = shift;
	$string =~ s/\\n/\ /g;
	$string =~ s/"/&quot;/g;
	return $string
}

#---------------------------------------
#copy of LocalizedObj in bearlib.pl

sub LocalizedObj {		# returns localized description
						# $descr = LocalizedObj($descrObj, "NA", 'cz', 'en', ...);

	my $descr=shift;	# description with possible locale
	my $alter=shift;	# alternate description for case specific locale is not defined
	my @@lang=@@_;		# locale(s)
	
	if ($descr) {
		if (ref($descr)=~/HASH/) {
			foreach (@@lang) {
				my $lng = lc($_);
				if (exists ($descr->{$lng})) {
					if (ref($descr->{$lng})=~/HASH/) {	# empty string is presented as empty hash
						return ''
					} else {
						return $descr->{$lng}
					}
				}
			}
		} else {
			return $descr
		}
	}
	return $alter

}

#---------------------------------------------------
#setLocalizedObj returns hash or single string
#depending on definition of language specification
#with no return flag (\r) a with substituted 
#new-line (\n ->> \\n)

sub setLocalizedObj {		#sets the object with or without localized names / descriptions

 my $localObj = shift;
 my $stringToSave = shift;
 my $lang = lc (shift);
$stringToSave =~ s/\r//g;	#converts \n and " into universal string form \\n and \" and removes carrier return flag
$stringToSave =~ s/\n/\\n/g;
#$stringToSave =~ s/"/\\"/g;

if ($lang) {						#if localized data is to save
	$localObj = undef if (ref($localObj)!~/HASH/);	#prepare/clear object for saving if no other localized datas presented
	$localObj->{$lang} = $stringToSave;
	return $localObj
} else {
	return $stringToSave;
}
}

#-----------------------------------------------------

sub generateTabs(){
my ($variables, $lang, $localTab, $localTabs) = @@_;
my $lastTab = ${$localTabs}[$#{$localTabs}];
my $hlp = "<td></td>";
print "<table class='local_tabs' cellspacing='0'><tr>\n";
foreach (@@{$localTabs}) {
	my $activeTab = ($localTab eq $_) ? "active" : "tabs";
	my $viewName = "$$variables->{langSegment} $_";
	$hlp = "" if ($_ eq $lastTab);
	print "<td class='$activeTab"."Corner'><img src='$$variables->{skinPath}img/leftCorner.$$variables->{imgType}'/></td><td class='$activeTab'><a href=\"javascript: viewLocalTab('$_')\" >$$lang->{$viewName}</a></td><td class='$activeTab"."Corner'><img src='$$variables->{skinPath}img/rightCorner.$$variables->{imgType}'/></td>$hlp\n";
};
print "</tr></table>";
}

#---------------------------------------------------
sub GetFiles {
	my ($td, $fExt)=@@_;	# directory, file ext
	my @@fList=();

	if (opendir(DIR, $td) ) {
		@@fList = grep { /^\w.*$fExt$/ && -f "$td/$_" } readdir(DIR);
		closedir DIR;
	}
	@@fList = sort @@fList;
	foreach (@@fList) { s/\.$fExt$// };
	@@fList
}

#---------------------------------------------------
sub getCookie{
my ($allCookies,$cookieName) = (shift,shift);
return ($allCookies =~ /$cookieName=([^;]*)/) ? $1 : undef
}

#---------------------------------------------------
sub accessForbidden {
my ($msg) = @@_;
	print "<table class='forbidden'><tr><td>$msg</td></tr></table>";
}
#---------------------------------------------------
sub css2Html32 {
	my ($ID) = @@_; #id of the xml object
	my $html;
	
	#print $ID;
	
	my $xml = SOAP->GetMetadata($ID);
	
	$xml=$xml->{'format'}{$ID}{'cssStyle'};
	$ID=''; #because export don't function yet :-(
	#use Data::Dumper;
	#open DATA, ">/var/www/html/bear/html/test.xml";
	#print DATA Dumper($xml);
	#close DATA;
	if ($ID) {
		
		
		#table
    $html = {
	'table' => 'CELLPADDING="'.$xml->{table}{margin}{horizontal}.'" CELLSPACING="'.$xml->{table}{padding}{horizontal}.'" BORDER="'.$xml->{table}{lines}{horizontal}{width}.'" BGCOLOR="'.$xml->{table}{bgcolor}.'"',
	'td' => {
		'oe tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddeven}).'" nowrap="1"',
		'oe td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddeven}).'" nowrap="1"',
		'eo td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{evenodd}).'" nowrap="1"',
		'eo tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{evenodd}).'" nowrap="1"',
		'eo ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{evenodd}).'" nowrap="1"',
		'ee tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{eveneven}).'" nowrap="1"',
		'oo td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddodd}).'" nowrap="1"',
		'oo tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddodd}).'" nowrap="1"',
		'oo ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddodd}).'" nowrap="1"',
		'eo ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{evenodd}).'" nowrap="1"',
		'oo ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddodd}).'" nowrap="1"',
		'ee td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{eveneven}).'" nowrap="1"',
		'ee ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{eveneven}).'" nowrap="1"',
		'ee ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{eveneven}).'" nowrap="1"',
		'oe ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddeven}).'" nowrap="1"',
	 	'oe ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{dc}{bgcolor}{oddeven}).'" nowrap="1"',
	 },
	'font'  => '<font size="'.$xml->{table}{font}{size}.'" face="'.$xml->{table}{font}{face}.'">',
	'th' => {
		'oe tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{oddeven}).'" nowrap="1"',
		'ch d' 	 => 'align="'.$xml->{ch}{m}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{ch}{m}{bgcolor}{even}).'" nowrap="1"',
		'ch r' 	 => 'align="'.$xml->{ch}{u}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{ch}{u}{bgcolor}{even}).'" nowrap="1"',
		'ch dv'  => 'align="'.$xml->{th}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{th}{bgcolor}).'" nowrap="1"',
		'oe t' 	 => 'align="'.$xml->{rh}{m}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{m}{bgcolor}{oddeven}).'" nowrap="1"',
		'oe tt'  => 'align="'.$xml->{rh}{u}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{u}{bgcolor}{oddeven}).'" nowrap="1"',
		'eo tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{evenodd}).'" nowrap="1"',
		'eo ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{evenodd}).'" nowrap="1"',
		'ee t'   =>	'align="'.$xml->{rh}{m}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{m}{bgcolor}{eveneven}).'" nowrap="1"',
		'ee tt'  => 'align="'.$xml->{rh}{u}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{u}{bgcolor}{eveneven}).'" nowrap="1"',
		'ee tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{eveneven}).'" nowrap="1"',
		'oo tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{oddodd}).'" nowrap="1"',
		'oo ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{oddodd}).'" nowrap="1"',
		'ee' 	   =>	'align="'.$xml->{th}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{th}{bgcolor}).'" nowrap="1"',
		'ee ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{eveneven}).'" nowrap="1"',
		'oe ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor=" '.&rgb2hexa($xml->{rh}{l}{bgcolor}{oddeven}).'" nowrap="1"',
	}
    };
	use Data::Dumper;
	open DATA, ">/var/www/html/bear/html/test.xml";
	print DATA Dumper($html);
	print DATA $xml->{rh}{l}{bgcolor}{eveneven};
	print DATA &rgb2hexa(split(',',$xml->{rh}{l}{bgcolor}{eveneven}));
	close DATA;
	
	} else {

		$html = {
			'table' => 'CELLPADDING="2" CELLSPACING="0" BORDER="1" BGCOLOR="#52b752"',
			'td' => {
				'oe tr' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
				'oe td' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
				'eo td' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'eo tr' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'eo ttr' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'ee tr' => 'align="right" bgcolor="#70cc70" nowrap="1"',
				'oo td' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'oo tr' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'oo ttr' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'eo ttd' => 'align="right" bgcolor="#a0e5a0" nowrap="1"',
				'oo ttd' => 'align="right" bgcolor="#f2f27b" nowrap="1"',
				'ee td' => 'align="right" bgcolor="#70cc70" nowrap="1"',
				'ee ttr' => 'align="right" bgcolor="#70cc70" nowrap="1"',
				'ee ttd' => 'align="right" bgcolor="#70cc70" nowrap="1"',
				'oe ttd' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
				'oe ttr' => 'align="right" bgcolor="#d8d84b" nowrap="1"',
			},
			'font' => '<font size="10" face="Arial, sans-serif">',
			'th' => {
				'oe tr' => 'align="center" bgcolor="#d8d84b" nowrap="1"',
				'ch d' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ch r' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ch dv' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'oe t' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'oe tt' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'eo tr' => 'align="center" bgcolor="#a0e5a0" nowrap="1"',
				'eo ttr' => 'align="center" bgcolor="#a0e5a0" nowrap="1"',
				'ee t' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ee tt' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ee tr' => 'align="center" bgcolor="#70cc70" nowrap="1"',
				'oo tr' => 'align="center" bgcolor="#f2f27b" nowrap="1"',
				'oo ttr' => 'align="center" bgcolor="#f2f27b" nowrap="1"',
				'ee' => 'align="center" bgcolor="#52b752" nowrap="1"',
				'ee ttr' => 'align="center" bgcolor="#70cc70" nowrap="1"',
				'oe ttr' => 'align="center" bgcolor="#d8d84b" nowrap="1"',
			}
		};
	}
	
	return $html;
}
#---------------------------------------------------
sub rgb2hexa {
	return unless @@_ == 3;
	my $color = '#';
	foreach my $cc (@@_) {
	  $color .= sprintf("%02x", $cc);
	}
	return $color;

}
#---------------------------------------------------

1
@


1.22
log
@changes for new interface
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.21 2004/04/15 13:22:43 jiri_schmid Exp $
d381 1
a381 1
	my ($ID) = @@_; #ID of the xml file
d383 11
a393 2

=blabla	
d395 1
a395 1
		$$FullObj = SOAP->GetMetadata($ID);
d399 1
a399 1
	'table' => 'CELLPADDING="'.$xml->{table}{margin}{horizontal}.'" CELLSPACING="'.$xml->{table}{padding}{horizontal}.'" BORDER="'.$xml->{table}{lines}{horizontal}{width}.'" BGCOLOR="'.$xml->{table}{bgcolor},'"';
d401 16
a416 16
		'oe tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddeven}.'" nowrap',
		'oe td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddeven}.'" nowrap',
		'eo td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{evenodd}.'" nowrap',
		'eo tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{evenodd}.'" nowrap',
		'eo ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{evenodd}.'" nowrap',
		'ee tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{eveneven}.'" nowrap',
		'oo td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddodd}.'" nowrap',
		'oo tr'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddodd}.'" nowrap',
		'oo ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddodd}.'" nowrap',
		'eo ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{evenodd}.'" nowrap',
		'oo ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddodd}.'" nowrap',
		'ee td'  => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{eveneven}.'" nowrap',
		'ee ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{eveneven}.'" nowrap',
		'ee ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{eveneven}.'" nowrap',
		'oe ttd' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddeven}.'" nowrap',
	 	'oe ttr' => 'align="'.$xml->{dc}{align}{horizontal}.'" bgcolor="'.$xml->{dc}{bgcolor}{oddeven}.'" nowrap',
d418 1
a418 1
	'font'  => '<font size="'.$xml->{table}{font}{size}.'" face="'.$xml->{table}{font}{face},'">';
d420 16
a435 16
		'oe tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{oddeven}.'" nowrap',
		'ch d' 	 => 'align="'.$xml->{ch}{m}{align}{horizontal}.'" bgcolor="'.$xml->{ch}{m}{bgcolor}{even}.'" nowrap',
		'ch r' 	 => 'align="'.$xml->{ch}{u}{align}{horizontal}.'" bgcolor="'.$xml->{ch}{u}{bgcolor}{even}.'" nowrap',
		'ch dv'  => 'align="'.$xml->{th}{align}{horizontal}.'" bgcolor="'.$xml->{th}{bgcolor}.'" nowrap',
		'oe t' 	 => 'align="'.$xml->{rh}{m}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{m}{bgcolor}{oddeven}.'" nowrap',
		'oe tt'  => 'align="'.$xml->{rh}{u}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{u}{bgcolor}{oddeven}.'" nowrap',
		'eo tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{evenodd}.'" nowrap',
		'eo ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{evenodd}.'" nowrap',
		'ee t'   =>	'align="'.$xml->{rh}{m}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{m}{bgcolor}{eveneven}.'" nowrap',
		'ee tt'  => 'align="'.$xml->{rh}{u}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{u}{bgcolor}{eveneven}.'" nowrap',
		'ee tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{eveneven}.'" nowrap',
		'oo tr'  => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{oddodd}.'" nowrap',
		'oo ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{oddodd}.'" nowrap',
		'ee' 	   =>	'align="'.$xml->{th}{align}{horizontal}.'" bgcolor="'.$xml->{th}{bgcolor}.'" nowrap',
		'ee ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{eveneven}.'" nowrap',
		'oe ttr' => 'align="'.$xml->{rh}{l}{align}{horizontal}.'" bgcolor="'.$xml->{rh}{l}{bgcolor}{oddeven}.'" nowrap',
d438 8
a446 2
	} else {
=cut		
d487 2
a488 1
#	}
d492 11
@


1.21
log
@implemented opening object on last used tab, if possible
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.20 2004/04/15 08:42:06 jiri_schmid Exp $
d11 2
d36 2
a37 1
		return $ObjT;
d41 1
d46 1
a46 1
my ($q,$ID,$ObjT,$localTab,$Obj,$lang,$variables,$localTabs,$fullObj,@@rest) = @@_;
a74 1

d84 1
a84 1
} elsif ($localTab eq 'def') { #manage most common page - main definition
a98 2
	} elsif ($ObjT eq 'format2d') {
		&Format2d::generateContent($variables,$lang,$Obj)
d107 29
a135 8
	if ($localTab eq 'colors') {
		&Format2d_color::generateContent($variables,$lang,$Obj)
	} elsif ($localTab eq 'layout') {
		&Format2d_layout::generateContent($variables,$lang,$Obj)
	} elsif ($localTab eq 'logo') {
		&Format2d_logo::generateContent($variables,$lang,$Obj)
	} elsif ($localTab eq 'map') {
		&Format2d_map::generateContent($variables,$lang,$Obj)
a171 2
use Encode;

@


1.20
log
@last used tab is active 4 viewing object, when possible
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.19 2004/03/10 19:02:41 vasekd Exp $
d75 3
a77 3
if ($localTab eq 'rights') {
	&Rights::generateContent($variables,$lang,$Obj)
} elsif ($ObjT =~ /^attr$|^fact$/ || $localTab eq 'urole') {
d79 1
a79 1
} elsif ($localTab eq $ObjT && $ObjT ne 'report') {
d81 14
a94 4
} elsif ($ObjT eq 'filter' && $localTab eq 'def') {
	&Filter::generateContent($variables,$lang,$Obj)
} elsif ($ObjT eq 'param') {
	if ($localTab eq 'def') {
d96 6
a101 2
	} elsif ($localTab eq 'q') {
		&Param_q::generateContent($variables,$lang,$Obj)
d103 2
a104 10
} elsif ($ObjT eq 'format' && $localTab eq 'def') {
	&Format::generateContent($variables,$lang,$Obj)
} elsif ($ObjT eq 'format3d' && $localTab eq 'def') {
	&Format3d::generateContent($variables,$lang,$Obj)
} elsif ($ObjT eq 'metric' && $localTab eq 'def') {
	&Metric::generateContent($variables,$lang,$Obj)
} elsif ($ObjT eq 'grid' && $localTab eq 'def') {
	&Grid::generateContent($variables,$lang,$Obj)
} elsif ($ObjT eq 'urole' && $localTab eq 'def') {
	&Role::generateContent($variables,$lang,$Obj)
d106 1
a106 3
	if ($localTab eq 'def') {
		&Format2d::generateContent($variables,$lang,$Obj)
	} elsif ($localTab eq 'colors') {
d116 1
a116 3
	if ($localTab eq 'def') {
		&Graph3d::generateContent($variables,$lang,$Obj)
	} elsif ($localTab eq 'color') {
d126 1
a126 1
	if ($localTab eq 'report') {
d128 1
a128 5
	}
	elsif ($localTab eq 'def') {
		&Report::generateContent($variables,$lang,$Obj,$$q)	
	}
	elsif ($localTab eq 'filter') {
d130 1
a130 2
	}
	elsif ($localTab eq 'object') {
d132 1
a132 2
	}
	elsif ($localTab eq 'format') {
d134 1
a134 2
	}
	elsif ($localTab eq 'sql') {
@


1.19
log
@added sub for css2html32
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.18 2004/03/04 14:43:16 jiri_schmid Exp $
d326 1
a326 1
my ($variables, $lang, $localTab, $localTabs) = (shift, shift, shift, shift);
@


1.18
log
@fixing bugs and improving useability and performance
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.17 2004/02/18 16:19:17 jiri_schmid Exp $
d365 96
@


1.17
log
@rights implemented
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.16 2004/02/16 14:55:23 jiri_schmid Exp $
d246 24
d310 1
a310 1
$stringToSave =~ s/\r//g;
d312 1
@


1.16
log
@security improvment for tabs
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.15 2004/02/13 17:09:40 jiri_schmid Exp $
d336 2
a337 2
my ($page,$user) = @@_;
	print "<h3>Access forbidden on $page page for user: $user</h3>";
@


1.15
log
@major tabs control implemented
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.14 2003/12/16 15:49:24 jiri_schmid Exp $
d46 1
@


1.14
log
@first stage of reseting params implemented
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.13 2003/11/25 22:12:10 michald Exp $
d333 6
@


1.13
log
@fix Save and Run again
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.12 2003/11/25 12:10:44 jiri_schmid Exp $
d8 1
d158 5
a162 4
return if !$name;
$name = $$q->param($name);
Encode::_utf8_on($name);
return $name
@


1.12
log
@export rutines implemented for graph 2D
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.11 2003/11/23 10:43:44 michald Exp $
d70 1
a142 1
print "<script type='text/javascript'>var params = '$$variables->{allParams}';</script>";
@


1.11
log
@fix Save and Run
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.10 2003/11/20 16:34:14 jiri_schmid Exp $
d69 1
a69 1
print "<script type='text/javascript'>var params = '$$variables->{allParams}';</script>";
d142 1
@


1.10
log
@fixed naming of unlocalized objects
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.9 2003/11/20 15:47:41 jiri_schmid Exp $
d69 1
a141 1
print "<script type='text/javascript'>var params = '$$variables->{allParams}';</script>";
@


1.9
log
@export 2 xls and pdf works (pdf is not fine)
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.8 2003/11/18 14:38:40 jiri_schmid Exp $
d45 1
a45 1
	my $name = &Local::LocalizedObj($$Obj->{name}, "Object #$ID", lc($$variables->{useLang}), $$variables->{defaultLang});
@


1.8
log
@auto save when changing tabs implemented
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.7 2003/11/14 11:45:36 jiri_schmid Exp $
d11 1
a11 1
my ($useEnc,$useLang,$title,$script,$add,@@rest) = @@_;
d13 2
a14 2
$str .= "<?xml version='1.0' encoding='$useEnc'?>\n";
$str .= "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>\n";
@


1.7
log
@question for dynamic param implemented
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.6 2003/11/09 19:13:37 vacula Exp $
a44 1
	print $$q->hidden('local_tab',$localTab);
d54 2
d59 1
a59 1
<input type='hidden' name='item_id' id='ITEM_ID' value="$ID"/>
@


1.6
log
@added graph 2d map
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.5 2003/11/07 13:40:49 jiri_schmid Exp $
d78 6
a83 2
} elsif ($ObjT eq 'param' && $localTab eq 'def') {
	&Param::generateContent($variables,$lang,$Obj)
@


1.5
log
@tested a fixed saving of all objects
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.4 2003/11/05 10:44:57 jiri_schmid Exp $
d99 2
@


1.4
log
@pointers everywhere, reapply of removed fix
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.3 2003/11/04 15:19:01 jiri_schmid Exp $
d47 1
a47 1
	my $readOnly = ($ObjT =~ /^attr$|^fact$|^role$/) ? "<td style='font-size:80%; font-weight:bold; vertical-align:bottom'>$$lang->{'Read Only'}</td>" : "";
d72 1
a72 1
} elsif ($ObjT =~ /^attr$|^fact$/) {
d93 1
a93 1
	} elsif ($localTab eq 'color') {
@


1.3
log
@save as - modperl fixies, code improvments
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.2 2003/10/31 13:45:59 jiri_schmid Exp $
d19 2
a20 2
$str .= "<script type='text/javascript' src='js/$script.js'></script>\n";
$str .= "$add\n";
d42 4
a45 4
	print $q->startform(-action=>'', -name=>"$ObjT", -onsubmit=>'return reset_tree_name()');
	print $q->hidden('ObjT',$ObjT);
	print $q->hidden('all_params',$$variables->{allParams});
	print $q->hidden('local_tab',$localTab);
d114 1
a114 1
		&Report_main::generateContent($variables,$lang,$Obj,$q)	
d117 1
a117 1
		&Report::generateContent($variables,$lang,$Obj,$q)	
d123 1
a123 1
		&Report_object::generateContent($variables,$lang,$Obj,$q,$fullObj)	
d129 1
a129 1
		&Report_sql::generateContent($variables,$lang,$Obj,$q)	
d135 1
a135 1
print $q->endform;
@


1.2
log
@debug read cookies through Local::getCookie and works from now
@
text
@d4 1
a4 1
# $Id: Local.pm,v 1.1 2003/10/31 12:47:57 jiri_schmid Exp $
d9 15
@


1.1
log
@mod perl rocks!
@
text
@d4 1
a4 1
# $Id: local_lib.pl,v 1.1 2003/10/16 14:08:53 jiri_schmid Exp $
d300 6
@


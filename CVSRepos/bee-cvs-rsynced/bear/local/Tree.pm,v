head	1.18;
access;
symbols;
locks; strict;
comment	@# @;


1.18
date	2004.04.16.16.42.14;	author vacula;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.15.08.42.06;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.10.15.14.44;	author jiri_schmid;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.09.16.11.57;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.05.11.47.15;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.05.11.37.09;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.04.14.43.16;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.25.16.05.08;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.18.16.19.17;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.13.17.09.40;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.11.14.37.53;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.10.09.31.28;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.09.10.44.04;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.04.10.44.36;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.03.16.02.08;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.22.18.38.37;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.05.10.44.57;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.31.12.47.57;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.18
log
@changes for new interface
@
text
@#-----------------------------------------------------
#  Bear Local - Tree Library
#-----------------------------------------------------
# $Id: Tree.pm,v 1.17 2004/04/15 08:42:06 jiri_schmid Exp $

package Tree;

use strict;
#require "Local.pm"; #required already by edit_tree.cgi
our (@@icons,@@folderIcons,$iconSrc,$AAB,$SDN,$objTr,@@scriptArray,$lastInFolders);
#----------------------------------------
sub DefHiearchy {
my ($skinPath, $imgType, $pn, $User, $file, $useLang, $globalPath, @@rest) = @@_;

#use Time::HiRes;
#my $stime = Time::HiRes::time();

@@icons = ();
@@folderIcons = ();
$iconSrc = {};

	$iconSrc={
		plus=>"${skinPath}img/tree/plus.png",
		plusBottom=>"${skinPath}img/tree/plusbottom.png",
		minus=>"${skinPath}img/tree/minus.png",
		minusBottom=>"${skinPath}img/tree/minusbottom.png",
		folder=>"${skinPath}img/tree/folder.png",
		folderOpen=>"${skinPath}img/tree/folderopen.png",
		line=>"${skinPath}img/tree/line.png",
		base=>"${skinPath}img/tree/base.png",
		join=>"${skinPath}img/tree/join.png",
		joinBottom=>"${skinPath}img/tree/joinbottom.png",
		empty=>"${skinPath}img/tree/empty.png",
		reload=>"${skinPath}img/tree/reload.png",
		attr_form=>"${skinPath}img/attr_form.png",
		attr=>"${skinPath}img/attr.png",
		folderClose=>"${skinPath}img/tree/folder.$imgType",	#default close folder icon

#		groupClose=>"${skinPath}img/tree/folder.$imgType",	#custom folder icon
#		userClose=>"${skinPath}img/tree/folder.$imgType",	# -//- 
#		roleClose=>"${skinPath}img/tree/folder.$imgType",	# -//-

#this part has to have approriate definiton in $objTr
		"attribute"=>"${skinPath}img/attr.png",
		"metric"=>"${skinPath}img/metric.png",
		"grid"=>"${skinPath}img/grid.png",
		"graph3d"=>"${skinPath}img/graph3d.png",
		"format3d"=>"${skinPath}img/format3d.png",
		"format2d"=>"${skinPath}img/format2d.png",
		"format2d_map"=>"${skinPath}img/format2d_map.png",
		"filter"=>"${skinPath}img/filter.png",
		"format"=>"${skinPath}img/format.png",
		"report"=>"${skinPath}img/report.png",
		"fact"=>"${skinPath}img/fact.png",
		"role"=>"${skinPath}img/role.png",
		"param"=>"${skinPath}img/param.png",
	};
	
	my $i=0;	#Tree id
	my $l=$i;	#dir level
	$AAB = "align='absbottom'";
	$SDN = "style='display:none'";
	my ($firstIcon, $secondIcon, @@hlp, $lastInField, $joinIcon);

	@@scriptArray = ();

	open(TREE, ">$globalPath/html/$file.html") || return;
	binmode(TREE, ":utf8");
	print TREE "<div id='content' class='folder'><table><tr><td><span class='tree'><img class='cursor' src='$iconSrc->{base}' onclick='closeCachedNodes()' style='vertical-align:bottom' alt='close tree'/>&nbsp;$pn<img src='$iconSrc->{reload}' style='vertical-align:bottom' onclick='refreshTree()' class='cursor' alt='reload'/></span></td></tr></table>";
	
	$objTr = { 	# hash for translation from directory type to object type, same in most common, have to be unique
		'metric'=>{'type'=>'metric', 'icon'=>'M'},
		'grid'=>{'type'=>'grid', 'icon'=>'G'},
		'format3d'=>{'type'=>'format3d', 'icon'=>'F3'},
		'format2d'=>{'type'=>'format2d', 'icon'=>'F2'},
		'format2d_map'=>{'type'=>'format2d_map', 'icon'=>'F2M'},
		'format'=>{'type'=>'format', 'icon'=>'Fo'},
		'graph3d'=>{'type'=>'graph3d', 'icon'=>'G3'},
		'filter'=>{'type'=>'filter', 'icon'=>'Fi'},
		'report'=>{'type'=>'report', 'icon'=>'R'},
		'fact'=>{'type'=>'fact', 'icon'=>'Fa'},
		'role'=>{'type'=>'urole', 'icon'=>'Ro'},
		'attribute'=>{'type'=>'attr', 'icon'=>'A'},
		'attr_form'=>{'type'=>'attr_form', 'icon'=>'Af'},
		'param'=>{'type'=>'param', 'icon'=>'P'}
	};

	my $m=SOAP->GetMetadataList($pn, 'folder', $User, $useLang);


	my @@folders = sort { $m->{$a}{'~order'} <=> $m->{$b}{'~order'} } keys %{$m} ;

	$lastInFolders = $folders[$#folders];    #get the name of last item in a field of folders, needed for setting first icon in tree - line/empty when closing tree structure
#use Data::Dumper;
#print TREE "<pre>".Dumper($m)."</pre>";

	my $subM;
	foreach my $activeFolderId (@@folders) {			#for each folder item generate childs in tree
		my $activeFolderType = $m->{$activeFolderId}->{'~content'};	#store folder type
		$objTr->{$activeFolderType}->{PFSID} = $activeFolderId if exists $objTr->{$activeFolderType}; #store PFSID = folder specific id 4 each project
		$firstIcon = $iconSrc->{line};
		$joinIcon = $iconSrc->{plus};
		$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderType}->{type}, $User, $useLang, $activeFolderId);#get child for handled folder
		&processTree($subM);
	}
	print "</div>";
	
	my @@object;

	foreach (keys %{$iconSrc}) { #store image links into javascript stucture
		if (exists $objTr->{$_} && exists $objTr->{$_}{PFSID}) {
			push(@@object,"\n$objTr->{$_}{PFSID}:'$iconSrc->{$_}'");
		} else {
			push(@@object,"\n$_:'$iconSrc->{$_}'");
		}
	}
	my $objectIcons = join(",",@@object);
	
	print TREE "\n<script type=\"text/javascript\">\nvar Tree0 = new Array (\n",join(",\n",@@scriptArray),");\nvar icons={$objectIcons};</script>\n";

	#printf TREE ("<DIV>creation time: %.5f s</DIV>", Time::HiRes::time()-$stime);

	close(TREE);
}

############################################ 	Recursive creation of tree folders    ##############################################
sub processTree {
my $tree = shift;
my @@root = sort { $tree->{$a}{'~name'} cmp $tree->{$b}{'~name'} } grep exists $tree->{$_}{'~name'}, keys %{$tree};
push @@root, sort { $tree->{$a}{name} cmp $tree->{$b}{name} } grep exists $tree->{$_}{name}, keys %{$tree};
my $lastItem = $root[$#root];
foreach my $rootItem (@@root) {
	my $depth = 0;
	if (exists($tree->{$rootItem}{'~name'})) {
		if ($lastItem eq $rootItem) {
			$icons[$depth] = $lastInFolders eq $rootItem ? $iconSrc->{empty} : $iconSrc->{line};	# modified 2 set first icon as line not empty
			if ($tree->{$rootItem}{'~content'}) {
				$folderIcons[$depth] = $lastInFolders eq $rootItem ? $iconSrc->{plusBottom} : $iconSrc->{plus};
			} else {
				$folderIcons[$depth] = $lastInFolders eq $rootItem ? $iconSrc->{join} : $iconSrc->{joinBottom};
			}
		} else {
			$icons[$depth] = $iconSrc->{line};
			$folderIcons[$depth] = ($tree->{$rootItem}{'~content'}) ? $iconSrc->{plus} : $iconSrc->{joinBottom};
		}
		&printFolder($tree->{$rootItem},$rootItem,$depth,$tree->{$rootItem}{'~content'},'zero_level');
		if ($tree->{$rootItem}{'~content'}) {
			my $reType = delete $tree->{$rootItem}{'~content'};
			print TREE "<div id='segment$rootItem' style='display:none'>";
			$depth++;
			&createTreeSegment(\$tree->{$rootItem},$depth,$reType,$rootItem) ;
			print TREE "</div>";
		}
	}
}
}

#------------------------------------------
sub createTreeSegment {
my ($tree, $inDepth, $type, $parent) = @@_;
my @@items = sort { $$tree->{$a}{'~name'} cmp $$tree->{$b}{'~name'} } grep exists $$tree->{$_}{'~name'}, keys %{$$tree};
push @@items, sort { $$tree->{$a}{name} cmp $$tree->{$b}{name} } grep exists $$tree->{$_}{name}, keys %{$$tree};
my $lastItem = $items[$#items];
my @@fixFolderIcons = @@folderIcons;
my @@fixIcons = @@icons;
foreach (@@items) {
	my $outDepth = $inDepth;
	if (exists $$tree->{$_}{name}) { #print non-folder item
		if (exists $$tree->{$_}{'~display'}) { #print item with display forms /very similar 2 folder printing
			if ($lastItem eq $_) {
				$icons[$outDepth] = $iconSrc->{empty};
				$folderIcons[$outDepth] = $iconSrc->{plusBottom};
			} else {
				$icons[$outDepth] = $iconSrc->{line};
				$folderIcons[$outDepth] = $iconSrc->{plus};
			}
			$folderIcons[$inDepth-1] = $icons[$inDepth-1];
			&printItemWithDisplays($$tree->{$_},$_,$type,$parent);
			@@folderIcons = @@fixFolderIcons;
			@@icons = @@fixIcons;
		} else {
			$icons[$inDepth] = ($lastItem eq $_) ? $iconSrc->{join} : $iconSrc->{joinBottom};
			&printItem($$tree->{$_},$_,$type,$parent);
		}
	} elsif (exists $$tree->{$_}{'~name'}) {
		if ($lastItem eq $_) {
			$icons[$outDepth] = $iconSrc->{empty};
			$folderIcons[$outDepth] = ($$tree->{$_}{'~content'}) ? $iconSrc->{plusBottom} : $iconSrc->{join};
		} else {
			$icons[$outDepth] = $iconSrc->{line};
			$folderIcons[$outDepth] = ($$tree->{$_}{'~content'}) ?  $iconSrc->{plus} : $iconSrc->{joinBottom};
		}
		$folderIcons[$inDepth-1] = $icons[$inDepth-1];
		&printFolder($$tree->{$_},$_,$inDepth,$$tree->{$_}{'~content'},$parent);
		if ($$tree->{$_}{'~content'}) {
			my $reType = delete $$tree->{$_}{'~content'};
			print TREE "<div id='segment$_' style='display:none'>";
			$outDepth++;
			&createTreeSegment(\$$tree->{$_},$outDepth,$reType,$_);
			print TREE "</div>";
		}
		@@folderIcons = @@fixFolderIcons;
		@@icons = @@fixIcons;
	}
}
return 1
}

#------------------------------------------
sub printFolder {
my ($item, $id, $depth, $content, $parent) = @@_;
	my $ssvn = &Local::ScriptStringView($item->{'~name'});
	my $csvd = &Local::ClearStringView($item->{'~desc'});
	print TREE "<span>";	#keeps the row unbreakable
	my ($class, $onclick, $folderIcon);
	if ($content) {
		$onclick = "onclick='ocFolder(this)'";
		$folderIcon = $content."Close";
	} else {
		$class = "class='inactive'";
	}
	$folderIcon = (exists $iconSrc->{$folderIcon}) ? $iconSrc->{$folderIcon} : $iconSrc->{folderClose};
	for (0..($#folderIcons-1)) { print TREE "<img $AAB src='$folderIcons[$_]' />" }
	print TREE "<a href='javascript:{}'><span id='$id' $onclick><img $AAB id='icon$id' src='$folderIcons[$#folderIcons]'><img $AAB id='folderIcon$id' name=\"$id|D\" src='$folderIcon'/><span id='view$id' $class title=\"$csvd\">$item->{'~name'}</span></span></a>";
	push (@@scriptArray,"\"$id|$parent|$ssvn|D\"");
	delete $item->{'~name'};
	delete $item->{'~desc'} if exists $item->{'~desc'};
	print TREE "</span><br />";	#break for new row
}

#------------------------------------------
sub printItem {
my ($item, $id, $type, $parent) = @@_;
	my $ssvn = &Local::ScriptStringView($item->{name});
	my $csvd = &Local::ClearStringView($item->{desc});
	print TREE "<span>";	#keeps the row unbreakable
	my $itemIcon = (exists $iconSrc->{$type}) ? $iconSrc->{$type} : $iconSrc->{item};
	for (0..$#icons) { print TREE "<img $AAB src='$icons[$_]' />" }
	print TREE "<a href='javascript:{}'><span id='$id' onclick='showMe(this)' ondblclick='jump(this)'><img $AAB name=\"$ssvn|$objTr->{$type}{icon}\" id='icon$id' src='$itemIcon'/><span id='view$id' title=\"$csvd\">&nbsp;$item->{name}&nbsp;</span></span></a>";
	print TREE "</span><br />";	#break for new row
	
	if ($objTr->{$type}->{type} eq "urole") {
		push @@scriptArray, "\"$id|$parent|$ssvn|$objTr->{$type}{icon}|$item->{rights}{allow}\"";
	} else {
		push @@scriptArray, "\"$id|$parent|$ssvn|$objTr->{$type}{icon}\"";
	}

	# emtpy anchor <a href='javascript:{}'> inhibits auto-selecting text on doubleclick on both Mozilla and IE browsers
}

#------------------------------------------
sub printItemWithDisplays {
my ($item, $id, $type, $parent) = @@_;
	my $ssvn = &Local::ScriptStringView($item->{name});
	my $csvd = &Local::ClearStringView($item->{desc});
	
	print TREE "<span>";	#keeps the row unbreakable
	my $itemIcon = (exists $iconSrc->{$type}) ? $iconSrc->{$type} : $iconSrc->{item};
	for (0..$#folderIcons-1) { print TREE "<img $AAB src='$folderIcons[$_]' />" }
	print TREE "<img id='Attr$id' onclick=\"ocAttr('$id')\" src='$folderIcons[$#folderIcons]' $AAB />";
	print TREE "<a href='javascript:{}'><span id='$id' onclick='showMe(this)' ondblclick='jump(this)'><img $AAB name=\"$ssvn|$objTr->{$type}{icon}\" id='icon$id' src='$itemIcon'/><span id='view$id' title=\"$csvd\">&nbsp;$item->{name}&nbsp;</span></span></a>";
	print TREE "</span><br />";	#break for new row
	
	if ($objTr->{$type}->{type} eq "urole") {
		push @@scriptArray, "\"$id|$parent|$ssvn|$objTr->{$type}{icon}|$item->{rights}{allow}\"";
	} else {
		push @@scriptArray, "\"$id|$parent|$ssvn|$objTr->{$type}{icon}\"";
	}
	print TREE "<div id='segment$id' style='display:none'>";
	my @@displays = sort {$item->{'~display'}{$a}{name} cmp  $item->{'~display'}{$b}{name}} keys %{$item->{'~display'}};
	my $lastDisplay = $displays[$#displays];
	my $newIconPos = @@icons;
	foreach (@@displays) {
		$icons[$newIconPos] = $lastDisplay eq $_ ? $iconSrc->{join} : $iconSrc->{joinBottom};
		&printItem($item->{'~display'}{$_},"$id~$_",'attr_form',$id); # ~ special id for display form
	}
	print TREE "</div>";
	# emtpy anchor <a href='javascript:{}'> inhibits auto-selecting text on doubleclick on both Mozilla and IE browsers
}

################################################################################################################################################################################

1
@


1.17
log
@last used tab is active 4 viewing object, when possible
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.16 2004/03/10 15:14:44 jiri_schmid Exp $
d50 1
d76 1
@


1.16
log
@object tree creation implemented as full recursive
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.15 2004/03/09 16:11:57 jiri_schmid Exp $
d15 3
d119 2
@


1.15
log
@object tree creation improvment-fix
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.14 2004/03/05 11:47:15 jiri_schmid Exp $
d79 1
d86 1
a86 1
	my @@folders = sort {$m->{$a}{'~order'} <=> $m->{$b}{'~order'} } keys %{$m} ;
d89 1
a89 1
use Data::Dumper;
d98 2
a99 160
		if ($activeFolderType eq 'attribute') {
			my $ssvn = &Local::ScriptStringView($m->{$activeFolderId}->{'~name'});
			my $csvd = &Local::ClearStringView($m->{$activeFolderId}->{'~desc'});
			push @@scriptArray, "\"$activeFolderId|$i|$ssvn|D\"";
			$i++;
			$joinIcon = $iconSrc->{plus};

			print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$joinIcon' $AAB/><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$iconSrc->{folder}' $AAB/><span id='view$activeFolderId' title=\"$csvd\">$m->{$activeFolderId}->{'~name'}</span></a></span><br />";
			print TREE "<div id='segment$activeFolderId' $SDN>";

			# Load Attributes
			$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderType}->{type}, $User, $useLang);	#full List is used due need for Attribute Displays information

#use Data::Dumper;
#print TREE "<pre>".Dumper($subM)."</pre>";

			my @@group = sort { $subM->{$a}{display}{name} cmp $subM->{$b}{display}{name} } keys %{$subM};
			my $lastInMainField = $group[$#group];
			$firstIcon = $iconSrc->{line};
			my $joinFolderIcon = $iconSrc->{plus};

			foreach my $group (@@group) {
				my $storedName = $subM->{$group}->{display}->{name};
				my $ssvn = &Local::ScriptStringView($storedName);
				my $csvd = &Local::ClearStringView($subM->{$group}->{display}->{description});
				delete ($subM->{$group}->{display});
				@@hlp = sort { $subM->{$group}{$a}{display}{name} cmp $subM->{$group}{$b}{display}{name} } keys %{$subM->{$group}};
				$lastInField = $hlp[$#hlp];
				my $previousItemId = $group;
				push @@scriptArray, "\"$group|$activeFolderId\"";
				$i++;

				my $insertIcon;

				if ($group eq '~group') {
					$insertIcon = '';
				} else {
				
					if ($lastInMainField eq $group) {
						$firstIcon = $iconSrc->{empty}; $joinFolderIcon = $iconSrc->{plusBottom};
					} else {
						$firstIcon = $iconSrc->{line}; $joinFolderIcon = $iconSrc->{plus}; 
					};
					$insertIcon = "<img src=\"$firstIcon\" $AAB />";
					print TREE "<span><img src='$iconSrc->{line}' $AAB /><span id='$group' onclick='ocFolder(this)'><img id='icon$group' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group' src='$iconSrc->{folder}' $AAB /><span id='view$group' title=\"$csvd\">$storedName</span></a></span></span><br />";
					print TREE "<div id='segment$group' $SDN>";
				};

				$secondIcon = $iconSrc->{line};
				$joinIcon = $iconSrc->{plus};
				foreach my $rule (@@hlp) {
					my $storedName = $subM->{$group}->{$rule}->{display}->{name};
					my $ssvn = &Local::ScriptStringView($storedName);
					my $csvd = &Local::ClearStringView($subM->{$group}->{$rule}->{display}->{description});
					delete ($subM->{$group}->{$rule}->{display});
					my @@rulesField = sort { $subM->{$group}{$rule}{$a}{name} cmp $subM->{$group}{$rule}{$b}{name} } keys %{$subM->{$group}{$rule}};
					my $lastInRulesField = $rulesField[$#rulesField];
					my $shortHash = $subM->{$group}->{$rule};

#			use Data::Dumper;
#			print TREE "<pre>".Dumper($shortHash)."</pre>";

					if ($rule eq '~role') {
						foreach (@@rulesField) {
							my $ssvn = &Local::ScriptStringView($shortHash->{$_}->{name});
							(my $csvd = $shortHash->{$_}->{description}) =~ s/^(.{77}).{3,}$/$1.../;#description has to be cutted explicitly as Attributes are not readed thru ShortList
							    $csvd = &Local::ClearStringView($csvd);
							push @@scriptArray, "\"$_|$previousItemId|$ssvn|A\"";
							$i++;
							if (exists $shortHash->{$_}->{display}) {
								if ($lastInRulesField eq $_) {
									$secondIcon = $iconSrc->{empty}; $joinIcon = $iconSrc->{plusBottom};
								} else {
									$secondIcon = $iconSrc->{line}; $joinIcon = $iconSrc->{plus};
								}
							} else {
								if ($lastInRulesField eq $_) {
									$secondIcon = $iconSrc->{empty}; $joinIcon = $iconSrc->{join};
								} else {
									$secondIcon = $iconSrc->{empty}; $joinIcon = $iconSrc->{joinBottom};
								}
							}

							print TREE "<span><img src='$iconSrc->{line}' $AAB />$insertIcon<img id='Attr$_' onclick=\"ocAttr('$_')\" src='$joinIcon' $AAB />";
							print TREE "<a href='javascript:{}'><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$iconSrc->{attr}' $AAB /><span id='view$_' title=\"$csvd\">&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br/>";
							my $ll=$_;
							print TREE "<div id='segment$_' $SDN>";
							my @@hlp = sort { $shortHash->{$ll}{display}{$a}{name} cmp $shortHash->{$ll}{display}{$b}{name} } keys %{$shortHash->{$ll}{display}};
							my $lastInSubField = $hlp[$#hlp];
							my $thirdIcon = $iconSrc->{joinBottom};
							foreach (@@hlp) {
								my $ssvn = &Local::ScriptStringView($shortHash->{$ll}->{display}->{$_}->{name});
								my $csvd = &Local::ClearStringView($shortHash->{$ll}->{display}->{$_}->{description});
								push @@scriptArray, "\"$ll~$_|$ll|$ssvn|Af\"";
								$thirdIcon = $iconSrc->{join} if ($lastInSubField eq $_);
								print TREE "<span><img src='$iconSrc->{line}' $AAB />$insertIcon<img src='$secondIcon' $AAB /><img src='$thirdIcon' $AAB />";
								print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$iconSrc->{attr_form}' $AAB /><span id='view$ll~$_' title=\"$csvd\">&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
								$i++;
							}
							print TREE "</div>";
						}
					} else {
						push @@scriptArray, "\"$group.$rule|$group|$rule|D\"";
						$i++;

						if ($lastInField eq $rule) {$secondIcon = $iconSrc->{empty}; $joinIcon = $iconSrc->{plusBottom}; $joinFolderIcon = $iconSrc->{plusBottom}; }				

						print TREE "<span><img src='$iconSrc->{line}' $AAB />$insertIcon<span id='$group.$rule' onclick='ocFolder(this)'><img id='icon$group.$rule' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group.$rule' src='$iconSrc->{folder}' $AAB /><span id='view$group.$rule' title=\"$csvd\">$storedName</span></a></span></span><br />";
						print TREE "<div id='segment$group.$rule' $SDN>";

						my $thirdIcon = $iconSrc->{line};
						$joinIcon = $iconSrc->{plus};

						foreach (@@rulesField) {
							my $ssvn = &Local::ScriptStringView($shortHash->{$_}{name});
							(my $csvd = $shortHash->{$_}->{description}) =~ s/^(.{77}).{3,}$/$1.../;
							    $csvd = &Local::ClearStringView($shortHash->{$_}{description});
							push @@scriptArray, "\"$_|$group.$rule|$ssvn|A\"";
							$i++;

							if (exists $shortHash->{$_}->{display}) {
								if ($lastInRulesField eq $_) {
									$thirdIcon = $iconSrc->{empty}; $joinIcon = $iconSrc->{plusBottom};
								} else {
									$thirdIcon = $iconSrc->{line}; $joinIcon = $iconSrc->{plus};
								}
							} else {
								$thirdIcon = $iconSrc->{empty};
								$joinIcon = ($lastInRulesField eq $_) ? $iconSrc->{join} : $iconSrc->{joinBottom};
							}

							print TREE "<span><img src='$iconSrc->{line}' $AAB /><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB /><img id='Attr$_' onclick=\"ocAttr('$_')\" src='$joinIcon' $AAB />";
							print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$iconSrc->{attr}' $AAB/><span id='view$_' title=\"$csvd\">&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br />";
							my $ll=$_;
							print TREE "<div id='segment$_' $SDN>";
							my @@hlp = sort { $shortHash->{$ll}{display}{$a}{name} cmp $shortHash->{$ll}{display}{$b}{name} } keys %{$shortHash->{$ll}{display}};
							my $lastInSubField = $hlp[$#hlp];
							my $fourthIcon = $iconSrc->{joinBottom};
							foreach (@@hlp) {
								my $ssvn = &Local::ScriptStringView($shortHash->{$ll}->{display}->{$_}->{name});
								my $csvd = &Local::ClearStringView($shortHash->{$ll}->{display}->{$_}->{description});
								push @@scriptArray, "\"$ll~$_|$ll|$ssvn|Af\"";
								$fourthIcon = $iconSrc->{join} if ($lastInSubField eq $_);
								print TREE "<span><img src='$iconSrc->{line}' $AAB /><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB /><img src='$thirdIcon' $AAB /><img src='$fourthIcon' $AAB />";
								print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$iconSrc->{attr_form}' $AAB /><span id='view$ll~$_' title=\"$csvd\">&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
								$i++;
							}
								print TREE "</div>";
						}
						print TREE "</div>";
					}
				}
				print TREE "</div>";
			};
			print TREE "</div>";
		} else {
		
			$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderType}->{type}, $User, $useLang, $activeFolderId);#get child for handled folder
			&processTree($subM);
		}
d104 3
a106 2
	foreach (keys %{$iconSrc}) {
		if (exists $objTr->{$_}) {
d119 1
a119 2
############################################ 	Recursive creation of tree for non-attributes folders	##############################################

a124 1

d130 5
a134 1
			$folderIcons[$depth] = ($tree->{$rootItem}{'~content'}) ? $iconSrc->{plusBottom} : $iconSrc->{join};
d137 1
a137 1
			$folderIcons[$depth] = ($tree->{$rootItem}{'~content'}) ?  $iconSrc->{plus} : $iconSrc->{joinBottom};
d161 17
a177 3
	if (exists $$tree->{$_}{name}) {
		$icons[$inDepth] = ($lastItem eq $_) ? $iconSrc->{join} : $iconSrc->{joinBottom};
		&printItem($$tree->{$_},$_,$type,$parent);
d199 1
a199 1
return 
d244 29
a272 1

@


1.14
log
@visual microfix
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.13 2004/03/05 11:37:09 jiri_schmid Exp $
d279 2
a280 1
my @@root = sort { $tree->{$a}{'~name'} cmp $tree->{$b}{'~name'} } keys %{$tree};
d307 3
a309 2
my ($tree, $inDepth, $type, $parent) = @@_;		
my @@items = sort { $$tree->{$a}{name} cmp $$tree->{$b}{name} } keys %{$$tree};
@


1.13
log
@recursive non-attr objects tree creation implemented, order attr added into folder def.
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.12 2004/03/04 14:43:16 jiri_schmid Exp $
d355 1
a355 1
	print TREE "<a href='javascript:{}'><span id='$id' $onclick><img $AAB id='icon$id' src='$folderIcons[$#folderIcons]'><img $AAB id='folderIcon$id' name=\"$id|D\" src='$folderIcon'/><span id='view$id' $class title=\"$csvd\">&nbsp;$item->{'~name'}&nbsp;</span></span></a>";
@


1.12
log
@fixing bugs and improving useability and performance
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.11 2004/02/25 16:05:08 jiri_schmid Exp $
d10 1
a10 1

d15 5
a19 1
	my $icons={
d34 6
d57 2
a58 2
	my $AAB = 'align="absbottom"';
	my $SDN = 'style="display:none"';
d61 1
a61 1
	my @@scriptArray = ();
d65 1
a65 1
	print TREE "<div id='content' class='folder'><table><tr><td><span class='tree'><img class='cursor' src='$icons->{base}' onclick='closeCachedNodes()' style='vertical-align:bottom' alt='close tree'/>&nbsp;$pn<img src='$icons->{reload}' style='vertical-align:bottom' onclick='refreshTree()' class='cursor' alt='reload'/></span></td></tr></table>";
d67 1
a67 1
	my $objTr = { 	# hash for translation from directory type to object type, same in most common, have to be unique
d85 1
a85 1
	my @@folders = sort keys %{$m} ;
d87 1
a87 1
	my $lastInFolders = $folders[$#folders];    #get the name of last item in a field of folders, needed for setting first icon in tree - line/empty when closing tree structure
d93 1
a93 1
		my $activeFolderType = $m->{$activeFolderId}->{type};	#store folder type
d95 5
a99 5
		$firstIcon = $icons->{line};
		$joinIcon = $icons->{plus};
		if ($m->{$activeFolderId}->{type} eq 'attribute') {
			my $ssvn = &Local::ScriptStringView($m->{$activeFolderId}->{name});
			my $csvd = &Local::ClearStringView($m->{$activeFolderId}->{description});
d102 1
a102 1
			$joinIcon = $icons->{plus};
d104 1
a104 1
			print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$joinIcon' $AAB/><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB/><span id='view$activeFolderId' title=\"$csvd\">$m->{$activeFolderId}->{name}</span></a></span><br />";
d115 2
a116 2
			$firstIcon = $icons->{line};
			my $joinFolderIcon = $icons->{plus};
d136 1
a136 1
						$firstIcon = $icons->{empty}; $joinFolderIcon = $icons->{plusBottom};
d138 1
a138 1
						$firstIcon = $icons->{line}; $joinFolderIcon = $icons->{plus}; 
d141 1
a141 1
					print TREE "<span><img src='$icons->{line}' $AAB /><span id='$group' onclick='ocFolder(this)'><img id='icon$group' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group' src='$icons->{folder}' $AAB /><span id='view$group' title=\"$csvd\">$storedName</span></a></span></span><br />";
d145 2
a146 2
				$secondIcon = $icons->{line};
				$joinIcon = $icons->{plus};
d168 1
a168 1
									$secondIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom};
d170 1
a170 1
									$secondIcon = $icons->{line}; $joinIcon = $icons->{plus};
d174 1
a174 1
									$secondIcon = $icons->{empty}; $joinIcon = $icons->{join};
d176 1
a176 1
									$secondIcon = $icons->{empty}; $joinIcon = $icons->{joinBottom};
d180 2
a181 2
							print TREE "<span><img src='$icons->{line}' $AAB />$insertIcon<img id='Attr$_' onclick=\"ocAttr('$_')\" src='$joinIcon' $AAB />";
							print TREE "<a href='javascript:{}'><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$icons->{attr}' $AAB /><span id='view$_' title=\"$csvd\">&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br/>";
d186 1
a186 1
							my $thirdIcon = $icons->{joinBottom};
d191 3
a193 3
								$thirdIcon = $icons->{join} if ($lastInSubField eq $_);
								print TREE "<span><img src='$icons->{line}' $AAB />$insertIcon<img src='$secondIcon' $AAB /><img src='$thirdIcon' $AAB />";
								print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$icons->{attr_form}' $AAB /><span id='view$ll~$_' title=\"$csvd\">&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
d202 1
a202 1
						if ($lastInField eq $rule) {$secondIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom}; $joinFolderIcon = $icons->{plusBottom}; }				
d204 1
a204 1
						print TREE "<span><img src='$icons->{line}' $AAB />$insertIcon<span id='$group.$rule' onclick='ocFolder(this)'><img id='icon$group.$rule' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group.$rule' src='$icons->{folder}' $AAB /><span id='view$group.$rule' title=\"$csvd\">$storedName</span></a></span></span><br />";
d207 2
a208 2
						my $thirdIcon = $icons->{line};
						$joinIcon = $icons->{plus};
d219 1
a219 1
									$thirdIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom};
d221 1
a221 1
									$thirdIcon = $icons->{line}; $joinIcon = $icons->{plus};
d224 2
a225 2
								$thirdIcon = $icons->{empty};
								$joinIcon = ($lastInRulesField eq $_) ? $icons->{join} : $icons->{joinBottom};
d228 2
a229 2
							print TREE "<span><img src='$icons->{line}' $AAB /><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB /><img id='Attr$_' onclick=\"ocAttr('$_')\" src='$joinIcon' $AAB />";
							print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$icons->{attr}' $AAB/><span id='view$_' title=\"$csvd\">&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br />";
d234 1
a234 1
							my $fourthIcon = $icons->{joinBottom};
d239 3
a241 3
								$fourthIcon = $icons->{join} if ($lastInSubField eq $_);
								print TREE "<span><img src='$icons->{line}' $AAB /><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB /><img src='$thirdIcon' $AAB /><img src='$fourthIcon' $AAB />";
								print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$icons->{attr_form}' $AAB /><span id='view$ll~$_' title=\"$csvd\">&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
d253 3
a255 43
			my $ssvn = &Local::ScriptStringView($m->{$activeFolderId}->{name});
			my $csvd = &Local::ClearStringView($m->{$activeFolderId}->{description});
			push @@scriptArray, "\"$activeFolderId|0|$ssvn|D\"";

			$i++;
			$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderType}->{type}, $User, $useLang);#get child for handled folder
			my @@hlp = sort { $subM->{$a}{name} cmp $subM->{$b}{name} } keys %{$subM};
			$lastInField = ($hlp[$#hlp]) ? ($hlp[$#hlp]) : undef;	#last child in handled folder or none

			if ($lastInFolders eq $activeFolderId) {			#set diferent tree navigation icons for last child in folder
				$firstIcon = $icons->{empty};
				$joinIcon = $icons->{plusBottom};
			}

			if ($lastInField) {	#set active folder if childs present
print TREE <<END;
<span id="$activeFolderId" onclick="ocFolder(this)"><img id="icon$activeFolderId" src="$joinIcon" $AAB /><a href="javascript:{}"><img id="folderIcon$activeFolderId" src="$icons->{folder}" $AAB /><span id="view$activeFolderId" title="$csvd">$m->{$activeFolderId}->{name}</span></a></span><br />
END
			} else {
				my $emptyJoinIcon = ($lastInFolders eq $activeFolderId) ? $icons->{join} : $icons->{joinBottom};	#set diferent navigation tree icons for empty folder
print TREE <<END;
<span id="$activeFolderId" onclick="ocFolder(this)"><img id="icon$activeFolderId" src="$emptyJoinIcon" $AAB /><a href="javascript:{}"><img id="folderIcon$activeFolderId" src="$icons->{folder}" $AAB /><span id="view$activeFolderId" title="$csvd">$m->{$activeFolderId}->{name}</span></a></span><br />
END
			}

			print TREE "<div id=\"segment$activeFolderId\" $SDN>";

			$secondIcon = $icons->{joinBottom}; #pre-expected "join" navigation icon (most cases)
			foreach (@@hlp) {
				my $ssvn = &Local::ScriptStringView($subM->{$_}->{name});
				my $csvd = &Local::ClearStringView($subM->{$_}->{description});
				if ($objTr->{$activeFolderType}->{type} eq "urole") {
					push @@scriptArray, "\"$_|$activeFolderId|$ssvn|$objTr->{$activeFolderType}->{icon}|$subM->{$_}->{rights}{allow}\"";
				} else {
					push @@scriptArray, "\"$_|$activeFolderId|$ssvn|$objTr->{$activeFolderType}->{icon}\"";
				}
				$secondIcon = $icons->{join} if ($lastInField eq $_); #set diferent navigation tree icons for last child
print TREE <<END;
<span><img src="$firstIcon" $AAB /><img src="$secondIcon" $AAB /><a href="javascript:{}" ><span id="$_" onclick="showMe(this)" ondblclick="jump(this)"><img id="icon$_" name="$subM->{$_}->{name}|$objTr->{$activeFolderType}->{icon}" src="$icons->{$m->{$activeFolderId}{type}}" $AAB /><span id="view$_" title="$csvd">&nbsp;$subM->{$_}->{name}&nbsp;</span></span></a></span><br />
END
				$i++;
			}					
			print TREE "</div>";
d261 1
a261 1
	foreach (keys %{$icons}) {
d263 1
a263 1
			push(@@object,"\n$objTr->{$_}{PFSID}:'$icons->{$_}'");
d265 1
a265 1
			push(@@object,"\n$_:'$icons->{$_}'");
d275 110
@


1.11
log
@fixed rights logic and folder XML definition files are specific for each project now
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.10 2004/02/18 16:19:17 jiri_schmid Exp $
d9 1
d51 1
a51 1
	my $scriptArray = ("\n<script type=\"text/javascript\">\nvar Tree0 = new Array;\n");
d78 1
a78 1
#use Data::Dumper;
d88 3
a90 2
			my $dtn = $m->{$activeFolderId}->{name};
			$scriptArray .= ("Tree0\[$i\]  = \"$activeFolderId|$i|$m->{$activeFolderId}->{name}|D|$m->{$activeFolderId}->{description}\";\n");
d94 1
a94 1
			print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$joinIcon' $AAB/><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB/><span id='view$activeFolderId' title='$m->{$activeFolderId}->{description}'>$m->{$activeFolderId}->{name}</span></a></span><br />";
d99 1
d109 3
a111 2
				my $displayName = $subM->{$group}->{display}->{name};
				my $displayDesc = $subM->{$group}->{display}->{description};
d116 1
a116 2

				$scriptArray .= ("Tree0\[$i\]  = \"$group|$activeFolderId|$subM->{$group}->{display}->{name}|D|\";\n");
d131 1
a131 1
					print TREE "<span><img src='$icons->{line}' $AAB /><span id='$group' onclick='ocFolder(this)'><img id='icon$group' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group' src='$icons->{folder}' $AAB /><span id='view$group' title='$displayDesc'>$displayName</span></a></span></span><br />";
d138 3
a140 3

					my $displayName = $subM->{$group}->{$rule}->{display}->{name};
					my $displayDesc = $subM->{$group}->{$rule}->{display}->{description};
d151 4
a154 2
							my $des=$shortHash->{$_}->{description}; $des=~s/^(.{77}).{3,}$/$1.../;	#description has to be cutted explicitly as Attributes are not readed thru ShortList
							$scriptArray .= ("Tree0\[$i\]  = \"$_|$previousItemId|$shortHash->{$_}->{name}|A|$des\";\n");
d171 1
a171 1
							print TREE "<a href='javascript:{}'><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$icons->{attr}' $AAB /><span id='view$_' title='$des'>&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br/>";
d178 3
a180 1
								$scriptArray .= ("Tree0\[$i\]  = \"$ll~$_|$ll|$shortHash->{$ll}->{display}->{$_}->{name}|Af|$shortHash->{$ll}->{display}->{$_}->{description}\";\n");
d183 1
a183 1
								print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$icons->{attr_form}' $AAB /><span id='view$ll~$_' title='$shortHash->{$ll}->{display}->{$_}->{description}'>&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
d189 1
a189 1
						$scriptArray .= ("Tree0\[$i\]  = \"$group.$rule|$group|$rule|D|\";\n");
d194 1
a194 1
						print TREE "<span><img src='$icons->{line}' $AAB />$insertIcon<span id='$group.$rule' onclick='ocFolder(this)'><img id='icon$group.$rule' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group.$rule' src='$icons->{folder}' $AAB /><span id='view$group.$rule' title='$displayDesc'>$displayName</span></a></span></span><br />";
d201 4
a204 2
							my $des=$shortHash->{$_}->{description}; $des=~s/^(.{77}).{3,}$/$1.../;	#description has to be cutted explicitly as Attributes are not readed thru ShortList
							$scriptArray .= ("Tree0\[$i\]  = \"$_|$group.$rule|$shortHash->{$_}->{name}|A|$des\";\n");
d219 1
a219 1
							print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$icons->{attr}' $AAB/><span id='view$_' title='$des'>&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br />";
d221 1
a221 1
								print TREE "<div id='segment$_' $SDN>";
d226 3
a228 1
								$scriptArray .= ("Tree0\[$i\]  = \"$ll~$_|$ll|$shortHash->{$ll}->{display}->{$_}->{name}|Af|$shortHash->{$ll}->{display}->{$_}->{description}\";\n");
d231 1
a231 1
								print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$icons->{attr_form}' $AAB /><span id='view$ll~$_' title='$shortHash->{$ll}->{display}->{$_}->{description}'>&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
d243 3
a245 2
			my $dtn = $m->{$activeFolderId}->{name};
			$scriptArray .= "Tree0\[$i\]='$activeFolderId|0|$m->{$activeFolderId}->{name}|D|$m->{$activeFolderId}->{description}';\n";
d258 3
a260 1
				print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$joinIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB /><span id='view$activeFolderId' title='$m->{$activeFolderId}->{description}'>$m->{$activeFolderId}->{name}</span></a></span><br />";
d263 3
a265 1
				print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$emptyJoinIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB /><span id='view$activeFolderId' title='$m->{$activeFolderId}->{description}'>$m->{$activeFolderId}->{name}</span></a></span><br />";
d268 1
a268 1
			print TREE "<div id='segment$activeFolderId' $SDN>";
d272 7
a278 1
				$scriptArray .= ($objTr->{$activeFolderType}->{type} eq "urole") ? "Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderType}->{icon}|$subM->{$_}->{description}|$subM->{$_}->{rights}{allow}';\n":"Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderType}->{icon}|$subM->{$_}->{description}';\n";
d280 3
a282 4

				print TREE "<span><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB />";
				print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$subM->{$_}->{name}|$objTr->{$activeFolderType}->{icon}' src='$icons->{$m->{$activeFolderId}{type}}' $AAB /><span id='view$_' title='$subM->{$_}->{description}'>&nbsp;$subM->{$_}->{name}&nbsp;</span></span></a></span><br />";

d293 1
a293 1
			push(@@object,"$objTr->{$_}{PFSID}:'$icons->{$_}'");
d295 1
a295 1
			push(@@object,"$_:'$icons->{$_}'");
d300 1
a300 2
	$scriptArray .= "var icons={$objectIcons};</script>\n";
	print TREE $scriptArray;
@


1.10
log
@rights implemented
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.9 2004/02/13 17:09:40 jiri_schmid Exp $
d27 15
a41 14
		"attr"=>"${skinPath}img/attr.png",
		"attr_form"=>"${skinPath}img/attr_form.png",
		"_METRICS_"=>"${skinPath}img/metric.png",
		"_GRIDS_"=>"${skinPath}img/grid.png",
		"_GRAPH3D_"=>"${skinPath}img/graph3d.png",
		"_FORMAT3D_"=>"${skinPath}img/format3d.png",
		"_FORMAT2D_"=>"${skinPath}img/format2d.png",
		"_FILTERS_"=>"${skinPath}img/filter.png",
		"_FORMATS_"=>"${skinPath}img/format.png",
		"_REPORTS_"=>"${skinPath}img/report.png",
		"_FACTS_"=>"${skinPath}img/fact.png",
		"_ATTRIBUTES_"=>"${skinPath}img/attr.png",
		"_ROLES_"=>"${skinPath}img/role.png",
		"_DPARAMS_"=>"${skinPath}img/param.png",
d56 13
a68 14
	my $m;
	my $objTr = { 	# hash for translation from Directory name, this strench method is connected with fixed directory structure and should be removed ASAP
		'_METRICS_'=>{'type'=>'metric', 'icon'=>'M'},
		'_GRIDS_'=>{'type'=>'grid', 'icon'=>'G'},
		'_FORMAT3D_'=>{'type'=>'format3d', 'icon'=>'F3'},
		'_FORMAT2D_'=>{'type'=>'format2d', 'icon'=>'F2'},
		'_FORMATS_'=>{'type'=>'format', 'icon'=>'Fo'},
		'_GRAPH3D_'=>{'type'=>'graph3d', 'icon'=>'G3'},
		'_FILTERS_'=>{'type'=>'filter', 'icon'=>'Fi'},
		'_REPORTS_'=>{'type'=>'report', 'icon'=>'R'},
		'_FACTS_'=>{'type'=>'fact', 'icon'=>'Fa'},
		'_ROLES_'=>{'type'=>'urole', 'icon'=>'Ro'},
		'_ATTRIBUTES_'=>{'type'=>'attr', 'icon'=>'A'},
		'_DPARAMS_'=>{'type'=>'param', 'icon'=>'P'}
d70 3
a72 2
	
	$m=SOAP->GetMetadataList($pn, 'folder', $User, $useLang);
d82 2
d86 1
a86 1
		if ($activeFolderId eq '_ATTRIBUTES_') {
d96 1
a96 1
			$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderId}->{type}, $User, $useLang);	#full List is used due need for Attribute Displays information
d236 1
a236 1
			$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderId}->{type}, $User, $useLang);#get child for handled folder
d256 1
a256 1
				$scriptArray .= ($objTr->{$activeFolderId}->{type} eq "urole") ? "Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}|$subM->{$_}->{description}|$subM->{$_}->{rights}{allow}';\n":"Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}|$subM->{$_}->{description}';\n";
d260 1
a260 1
				print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}' src='$icons->{$activeFolderId}' $AAB /><span id='view$_' title='$subM->{$_}->{description}'>&nbsp;$subM->{$_}->{name}&nbsp;</span></span></a></span><br />";
d270 7
a276 1
	foreach (keys %{$icons}) { push(@@object,"$_:'$icons->{$_}'") }
@


1.9
log
@major tabs control implemented
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.8 2003/12/11 14:37:53 jiri_schmid Exp $
d253 1
a253 1
				$scriptArray .= ($objTr->{$activeFolderId}->{type} eq "urole") ? "Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}|$subM->{$_}->{description}|$subM->{$_}->{rights}';\n":"Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}|$subM->{$_}->{description}';\n";
@


1.8
log
@refresh of tree implemented
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.7 2003/12/10 09:31:28 jiri_schmid Exp $
d53 1
a53 1
	print TREE "<div id='content' class='folder'><table><tr><td><span class='tree'><img src='$icons->{base}' style='vertical-align:bottom' alt='base'/>&nbsp;$pn<img src='$icons->{reload}' style='vertical-align:bottom' onclick='refreshTree()' class='cursor' alt='reload'/></span></td></tr></table>";
@


1.7
log
@minor code improvments
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.6 2003/12/09 10:44:04 jiri_schmid Exp $
d26 1
d53 1
a53 1
	print TREE "<div id='content' class='folder'><table><tr><td><span class='tree'><img src='$icons->{base}' style='vertical-align:bottom' alt='base'/>&nbsp;$pn</span></td></tr></table>";
@


1.6
log
@brackets for OR definition in generated filter added
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.5 2003/12/04 10:44:36 jiri_schmid Exp $
d72 1
a72 1
	my @@folders = sort { $m->{$a}{name} cmp $m->{$b}{name} } keys %{$m} ;
@


1.5
log
@visaul changes and improvments
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.4 2003/12/03 16:02:08 jiri_schmid Exp $
d15 25
a39 25
		plus=>"${skinPath}img/tree/plus.$imgType",
		plusBottom=>"${skinPath}img/tree/plusbottom.$imgType",
		minus=>"${skinPath}img/tree/minus.$imgType",
		minusBottom=>"${skinPath}img/tree/minusbottom.$imgType",
		folder=>"${skinPath}img/tree/folder.$imgType",
		folderOpen=>"${skinPath}img/tree/folderopen.$imgType",
		line=>"${skinPath}img/tree/line.$imgType",
		base=>"${skinPath}img/tree/base.$imgType",
		join=>"${skinPath}img/tree/join.$imgType",
		joinBottom=>"${skinPath}img/tree/joinbottom.$imgType",
		empty=>"${skinPath}img/tree/empty.$imgType",
		"attr"=>"${skinPath}img/attr.$imgType",
		"attr_form"=>"${skinPath}img/attr_form.$imgType",
		"_METRICS_"=>"${skinPath}img/metric.$imgType",
		"_GRIDS_"=>"${skinPath}img/grid.$imgType",
		"_GRAPH3D_"=>"${skinPath}img/graph3d.$imgType",
		"_FORMAT3D_"=>"${skinPath}img/format3d.$imgType",
		"_FORMAT2D_"=>"${skinPath}img/format2d.$imgType",
		"_FILTERS_"=>"${skinPath}img/filter.$imgType",
		"_FORMATS_"=>"${skinPath}img/format.$imgType",
		"_REPORTS_"=>"${skinPath}img/report.$imgType",
		"_FACTS_"=>"${skinPath}img/fact.$imgType",
		"_ATTRIBUTES_"=>"${skinPath}img/attr.$imgType",
		"_ROLES_"=>"${skinPath}img/role.$imgType",
		"_DPARAMS_"=>"${skinPath}img/param.$imgType",
@


1.4
log
@implemented sorting in tree
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.3 2003/11/22 18:38:37 michald Exp $
a22 1
		attr=>"${skinPath}img/tree/attr.$imgType",
d26 12
a37 11
		attr_form=>"${skinPath}img/tree/attr_form.$imgType",
		"_METRICS_"=>"${skinPath}img/tree/metric.$imgType",
		"_GRIDS_"=>"${skinPath}img/tree/grid.$imgType",
		"_GRAPH3D_"=>"${skinPath}img/tree/graph3d.$imgType",
		"_FORMAT3D_"=>"${skinPath}img/tree/format3d.$imgType",
		"_FORMAT2D_"=>"${skinPath}img/tree/format2d.$imgType",
		"_FILTERS_"=>"${skinPath}img/tree/filter.$imgType",
		"_FORMATS_"=>"${skinPath}img/tree/format.$imgType",
		"_REPORTS_"=>"${skinPath}img/tree/report.$imgType",
		"_FACTS_"=>"${skinPath}img/tree/fact.$imgType",
		"_ATTRIBUTES_"=>"${skinPath}img/tree/attr.$imgType",
@


1.3
log
@fix undefined call to decode in case attr descr is NULL
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.2 2003/11/05 10:44:57 jiri_schmid Exp $
d72 2
a73 1
	my @@folders = sort(keys(%{$m}));			#get list of folder items
d96 1
a96 1
			my @@group = sort(keys(%{$subM}));
a99 1
			my $joinSubFolder = 0;
a101 1

d105 1
a105 1
				@@hlp = sort(keys(%{$subM->{$group}}));
d117 1
d119 1
a119 1
						$firstIcon = $icons->{empty}; $joinSubFolder=1; $joinFolderIcon = $icons->{plusBottom};
d121 1
a121 1
						$firstIcon = $icons->{line}; $joinSubFolder = 0; $joinFolderIcon = $icons->{plus}; 
d135 1
a135 1
					my @@rulesField = sort(keys(%{$subM->{$group}->{$rule}}));
d165 1
a165 1
							my @@hlp = sort(keys(%{$shortHash->{$ll}->{display}}));
d181 1
a181 1
						if ($lastInField eq $rule) {$secondIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom}; $joinFolderIcon = $icons->{plusBottom}; $joinSubFolder=1;}				
d183 1
a183 1
						print TREE "<span><img src='$icons->{line}' $AAB /><img src='$icons->{line}' $AAB /><span id='$group.$rule' onclick='ocFolder(this)'><img id='icon$group.$rule' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group.$rule' src='$icons->{folder}' $AAB /><span id='view$group.$rule' title='$displayDesc'>$displayName</span></a></span></span><br />";
d209 1
a209 1
							my @@hlp = sort(keys(%{$shortHash->{$ll}->{display}}));
d233 1
a233 1
			my @@hlp = keys(%{$subM});
@


1.2
log
@pointers everywhere, reapply of removed fix
@
text
@d4 1
a4 1
# $Id: Tree.pm,v 1.1 2003/10/31 12:47:57 jiri_schmid Exp $
d77 3
a79 8
my $subM;
foreach my $activeFolderId (@@folders) {			#for each folder item generate childs in tree
	$firstIcon = $icons->{line};
	$joinIcon = $icons->{plus};
	if ($activeFolderId eq '_ATTRIBUTES_') {
		my $dtn = $m->{$activeFolderId}->{name};
		$scriptArray .= ("Tree0\[$i\]  = \"$activeFolderId|$i|$m->{$activeFolderId}->{name}|D|$m->{$activeFolderId}->{description}\";\n");
		$i++;
d81 5
d87 2
a88 2
		print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$joinIcon' $AAB/><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB/><span id='view$activeFolderId' title='$m->{$activeFolderId}->{description}'>$m->{$activeFolderId}->{name}</span></a></span><br />";
		print TREE "<div id='segment$activeFolderId' $SDN>";
d90 2
a91 2
		# Load Attributes
		$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderId}->{type}, $User, $useLang);	#full List is used due need for Attribute Displays information
d95 14
a108 43
	my @@group = sort(keys(%{$subM}));
	my $lastInMainField = $group[$#group];
	$firstIcon = $icons->{line};
	my $joinFolderIcon = $icons->{plus};
	my $joinSubFolder = 0;

	foreach my $group (@@group) {
		
		my $displayName = $subM->{$group}->{display}->{name};
		my $displayDesc = $subM->{$group}->{display}->{description};
		delete ($subM->{$group}->{display});
		@@hlp = sort(keys(%{$subM->{$group}}));
		$lastInField = $hlp[$#hlp];
		my $previousItemId = $group;

		$scriptArray .= ("Tree0\[$i\]  = \"$group|$activeFolderId|$subM->{$group}->{display}->{name}|D|\";\n");
		$i++;
		
		my $insertIcon;
		
		if ($group eq '~group') {
			$insertIcon = '';
		} else {
			if ($lastInMainField eq $group) {
				$firstIcon = $icons->{empty}; $joinSubFolder=1; $joinFolderIcon = $icons->{plusBottom};
			} else {
				$firstIcon = $icons->{line}; $joinSubFolder = 0; $joinFolderIcon = $icons->{plus}; 
			};
			$insertIcon = "<img src=\"$firstIcon\" $AAB />";
			print TREE "<span><img src='$icons->{line}' $AAB /><span id='$group' onclick='ocFolder(this)'><img id='icon$group' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group' src='$icons->{folder}' $AAB /><span id='view$group' title='$displayDesc'>$displayName</span></a></span></span><br />";
			print TREE "<div id='segment$group' $SDN>";
		};
		
		$secondIcon = $icons->{line};
		$joinIcon = $icons->{plus};
		foreach my $rule (@@hlp) {
	
			my $displayName = $subM->{$group}->{$rule}->{display}->{name};
			my $displayDesc = $subM->{$group}->{$rule}->{display}->{description};
			delete ($subM->{$group}->{$rule}->{display});
			my @@rulesField = sort(keys(%{$subM->{$group}->{$rule}}));
			my $lastInRulesField = $rulesField[$#rulesField];
			my $shortHash = $subM->{$group}->{$rule};
d110 1
a110 7
#			use Data::Dumper;
#			print TREE "<pre>".Dumper($shortHash)."</pre>";
			
			if ($rule eq '~role') {
				foreach (@@rulesField) {
				my $des=$shortHash->{$_}->{description}; $des=~s/^(.{77}).{3,}$/$1.../;	#description has to be cutted explicitly as Attributes are not readed thru ShortList
				$scriptArray .= ("Tree0\[$i\]  = \"$_|$previousItemId|$shortHash->{$_}->{name}|A|$des\";\n");
d112 5
a116 6
				if (exists $shortHash->{$_}->{display}) {
					if ($lastInRulesField eq $_) {
						$secondIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom};
					} else {
						$secondIcon = $icons->{line}; $joinIcon = $icons->{plus};
					}
d118 2
a119 2
					if ($lastInRulesField eq $_) {
						$secondIcon = $icons->{empty}; $joinIcon = $icons->{join};
d121 18
a138 21
						$secondIcon = $icons->{empty}; $joinIcon = $icons->{joinBottom};
					}
				}
				
				print TREE "<span><img src='$icons->{line}' $AAB />$insertIcon<img id='Attr$_' onclick=\"ocAttr('$_')\" src='$joinIcon' $AAB />";
				print TREE "<a href='javascript:{}'><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$icons->{attr}' $AAB /><span id='view$_' title='$des'>&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br/>";
				my $ll=$_;
				print TREE "<div id='segment$_' $SDN>";
				my @@hlp = sort(keys(%{$shortHash->{$ll}->{display}}));
				my $lastInSubField = $hlp[$#hlp];
				my $thirdIcon = $icons->{joinBottom};
				foreach (@@hlp) {
					$scriptArray .= ("Tree0\[$i\]  = \"$ll~$_|$ll|$shortHash->{$ll}->{display}->{$_}->{name}|Af|$shortHash->{$ll}->{display}->{$_}->{description}\";\n");
					$thirdIcon = $icons->{join} if ($lastInSubField eq $_);
					print TREE "<span><img src='$icons->{line}' $AAB />$insertIcon<img src='$secondIcon' $AAB /><img src='$thirdIcon' $AAB />";
					print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$icons->{attr_form}' $AAB /><span id='view$ll~$_' title='$shortHash->{$ll}->{display}->{$_}->{description}'>&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
					$i++;
				}
				print TREE "</div>";
				}
			} else {
d141 36
a176 19
				$scriptArray .= ("Tree0\[$i\]  = \"$group.$rule|$group|$rule|D|\";\n");
				$i++;
				
				if ($lastInField eq $rule) {$secondIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom}; $joinFolderIcon = $icons->{plusBottom}; $joinSubFolder=1;}				
				
				print TREE "<span><img src='$icons->{line}' $AAB /><img src='$icons->{line}' $AAB /><span id='$group.$rule' onclick='ocFolder(this)'><img id='icon$group.$rule' src='$joinFolderIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$group.$rule' src='$icons->{folder}' $AAB /><span id='view$group.$rule' title='$displayDesc'>$displayName</span></a></span></span><br />";
				print TREE "<div id='segment$group.$rule' $SDN>";
				
				my $thirdIcon = $icons->{line};
				$joinIcon = $icons->{plus};
				
				foreach (@@rulesField) {
				my $des=$shortHash->{$_}->{description}; $des=~s/^(.{77}).{3,}$/$1.../;	#description has to be cutted explicitly as Attributes are not readed thru ShortList
				$scriptArray .= ("Tree0\[$i\]  = \"$_|$group.$rule|$shortHash->{$_}->{name}|A|$des\";\n");
				$i++;
				
				if (exists $shortHash->{$_}->{display}) {
					if ($lastInRulesField eq $_) {
						$thirdIcon = $icons->{empty}; $joinIcon = $icons->{plusBottom};
d178 44
a221 1
						$thirdIcon = $icons->{line}; $joinIcon = $icons->{plus};
a222 20
				} else {
					$thirdIcon = $icons->{empty};
					$joinIcon = ($lastInRulesField eq $_) ? $icons->{join} : $icons->{joinBottom};
				}
			
				print TREE "<span><img src='$icons->{line}' $AAB /><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB /><img id='Attr$_' onclick=\"ocAttr('$_')\" src='$joinIcon' $AAB />";
				print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$shortHash->{$_}->{name}|A' src='$icons->{attr}' $AAB/><span id='view$_' title='$des'>&nbsp;$shortHash->{$_}->{name}&nbsp;</span></span></a></span><br />";
				my $ll=$_;
					print TREE "<div id='segment$_' $SDN>";
				my @@hlp = sort(keys(%{$shortHash->{$ll}->{display}}));
				my $lastInSubField = $hlp[$#hlp];
				my $fourthIcon = $icons->{joinBottom};
				foreach (@@hlp) {
					$scriptArray .= ("Tree0\[$i\]  = \"$ll~$_|$ll|$shortHash->{$ll}->{display}->{$_}->{name}|Af|$shortHash->{$ll}->{display}->{$_}->{description}\";\n");
					$fourthIcon = $icons->{join} if ($lastInSubField eq $_);
					print TREE "<span><img src='$icons->{line}' $AAB /><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB /><img src='$thirdIcon' $AAB /><img src='$fourthIcon' $AAB />";
					print TREE "<a href='javascript:{}'><span id='$ll~$_' onclick='showMe(this)'><img id='icon$ll~$_' name='$_|Af' src='$icons->{attr_form}' $AAB /><span id='view$ll~$_' title='$shortHash->{$ll}->{display}->{$_}->{description}'>&nbsp;$shortHash->{$ll}->{display}->{$_}->{name}&nbsp;</span></span></a></span><br />";
					$i++;
				}
					print TREE "</div>";
d225 14
d240 6
a246 23
			print TREE "</div>";
	};
	print TREE "</div>";
	} else {
		my $dtn = $m->{$activeFolderId}->{name};
		$scriptArray .= "Tree0\[$i\]='$activeFolderId|0|$m->{$activeFolderId}->{name}|D|$m->{$activeFolderId}->{description}';\n";

		$i++;
		$subM=SOAP->GetMetadataList($pn, $objTr->{$activeFolderId}->{type}, $User, $useLang);#get child for handled folder
		my @@hlp = keys(%{$subM});
		$lastInField = ($hlp[$#hlp]) ? ($hlp[$#hlp]) : undef;	#last child in handled folder or none

		if ($lastInFolders eq $activeFolderId) {			#set diferent tree navigation icons for last child in folder
			$firstIcon = $icons->{empty};
			$joinIcon = $icons->{plusBottom};
		}

		if ($lastInField) {	#set active folder if childs present
			print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$joinIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB /><span id='view$activeFolderId' title='$m->{$activeFolderId}->{description}'>$m->{$activeFolderId}->{name}</span></a></span><br />";
		} else {
			my $emptyJoinIcon = ($lastInFolders eq $activeFolderId) ? $icons->{join} : $icons->{joinBottom};	#set diferent navigation tree icons for empty folder
			print TREE "<span id='$activeFolderId' onclick='ocFolder(this)'><img id='icon$activeFolderId' src='$emptyJoinIcon' $AAB /><a href='javascript:{}'><img id='folderIcon$activeFolderId' src='$icons->{folder}' $AAB /><span id='view$activeFolderId' title='$m->{$activeFolderId}->{description}'>$m->{$activeFolderId}->{name}</span></a></span><br />";
		}
d248 1
a248 1
		print TREE "<div id='segment$activeFolderId' $SDN>";
d250 4
a253 4
		$secondIcon = $icons->{joinBottom}; #pre-expected "join" navigation icon (most cases)
		foreach (@@hlp) {
			$scriptArray .= ($objTr->{$activeFolderId}->{type} eq "urole") ? "Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}|$subM->{$_}->{description}|$subM->{$_}->{rights}';\n":"Tree0\[$i\]='$_|$activeFolderId|$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}|$subM->{$_}->{description}';\n";
			$secondIcon = $icons->{join} if ($lastInField eq $_); #set diferent navigation tree icons for last child
d255 2
a256 2
			print TREE "<span><img src='$firstIcon' $AAB /><img src='$secondIcon' $AAB />";
			print TREE "<a href='javascript:{}' ><span id='$_' onclick='showMe(this)' ondblclick='jump(this)'><img id='icon$_' name='$subM->{$_}->{name}|$objTr->{$activeFolderId}->{icon}' src='$icons->{$activeFolderId}' $AAB /><span id='view$_' title='$subM->{$_}->{description}'>&nbsp;$subM->{$_}->{name}&nbsp;</span></span></a></span><br />";
d258 4
a261 3
			$i++;
		}					
		print TREE "</div>";
a262 1
}
@


1.1
log
@mod perl rocks!
@
text
@d4 1
a4 1
# $Id: tree_lib.pl,v 1.1 2003/10/16 14:08:53 jiri_schmid Exp $
d138 3
a140 1
			
d150 2
@


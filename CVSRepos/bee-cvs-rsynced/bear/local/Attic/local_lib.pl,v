head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.10.31.12.47.57;	author jiri_schmid;	state dead;
branches;
next	1.1;

1.1
date	2003.10.16.14.08.53;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.2
log
@mod perl rocks!
@
text
@#-----------------------------------------------------
#  Bear Library
#-----------------------------------------------------
# $Id: local_lib.pl,v 1.1 2003/10/16 14:08:53 jiri_schmid Exp $

use strict;

#-------------------------------------------
sub createTabs {
my ($ID,$Obj,$ObjT,$lang,$variables,$localTab,$localTabs,@@rest) = @@_;
	print startform(-action=>'', -name=>"$$ObjT", -onsubmit=>'return reset_tree_name()');
	print hidden('ObjT',$$ObjT);
	print hidden('all_params',$$variables->{allParams});
	print hidden('local_tab',$$localTab);
	my $name = LocalizedObj($$Obj->{name}, "Object #$$ID", lc($$variables->{useLang}), $$variables->{defaultLang});
	my $readOnly = ($$ObjT =~ /^attr$|^fact$|^role$/) ? "<td style='font-size:80%; font-weight:bold; vertical-align:bottom'>$$lang->{'Read Only'}</td>" : "";
	my $script = (defined $$variables->{script}) ? "<script src='js/$$variables->{script}' type='text/javascript'></script>" : "";
	if (exists $$variables->{hidden}) {
		foreach (keys %{$$variables->{hidden}}) {
		print "<input type='hidden' name='$_' id='$_' value='$$variables->{hidden}{$_}' />\n";
		}
	}
print <<END;
<input type="hidden" value="$$variables->{useLang}" id="activeLang" name="active_lang" />
<input type="hidden" value="$$variables->{skin}" id="skin" name="skin" />
<input type="hidden" value="$$variables->{imgType}" id="imgType" />
<input type='hidden' name='item_id' id='ITEM_ID' value="$$ID"/>
<table><tr>
	<td style='width:20px'><img src="$$variables->{skinPath}img/$$variables->{icon}.$$variables->{imgType}"></td>
	<td class="neutral_title">$$lang->{ $$variables->{langSegment} }</td>
	$readOnly	
	<td >- $name</td>
</tr></table>
$script
END
&generateTabs($variables,$lang,$localTab,$localTabs);
print "<table class='local_tabline' cellspacing='0'><tr><td>\n";
&generateContent($variables,$lang,$Obj);
print "</td></tr><tr><td>&nbsp;</td></tr></table>";
print "<script type='text/javascript'>var params = '$$variables->{allParams}';</script>";
print &endform;
}


#---------------------------------------------------
#This function returns forced flaged utf8 string
#matched to named CGI page parameter.
#From native CGI function param($name) expets
#well formed unflaged utf8 string.

use Encode;

sub param_utf8 {
my $name = shift;
return if !$name;
$name = param($name);
Encode::_utf8_on($name);
return $name
}


#__________________________________________________________
#
sub getImageType {
my ($path)= shift;	# directory
if (opendir IMG, $path) {
	foreach (readdir IMG) {
		if ($_ =~ /^\./) {
			next
		} else {
			my ($rtrn) = /\.(...)$/;
			if ($rtrn) {
				closedir IMG;
				return $rtrn
				}
		}
	}
}
return "ndf"
}

#__________________________________________________________
#
sub getTime {
my @@time = localtime(time);
return sprintf "%d-%02d-%02d, %02d:%02d:%02d",($time[5] += 1900),($time[4]++),($time[3]++),$time[2],$time[1],$time[0];
}

#__________________________________________________________
#

sub SetParam {
	my ($q,$cookie,$pName,$cName,$def,$cookie_path,$cookie_exp) = @@_;
	my $v;
	$v=param($pName);
	if (!defined $v) { 
		$v=cookie($cName);
	};
	if ($def && !defined $v) { $v=$def };
	if (defined $v) {
		push (@@{$cookie}, $q->cookie(-name=>$cName, -value=>$v, -path=>$cookie_path, -expires=>$cookie_exp));
	}
	return $v
}

#__________________________________________________________
#

sub SQL2HTML {
# returns HTML formated text SQL with syntax highlighting

	my $sql=shift;

	$sql =~ s/\b(SELECT|FROM|WHERE|GROUP BY|ORDER BY)\b/<BR><STRONG>$1<\/STRONG>/gi;
	$sql =~ s/\b(AND|IN|OR|AS|JOIN|LIKE|LEFT|RIGHT|ON)\b/<STRONG>$1<\/STRONG>/gi;
	$sql =~ s/(=|\(|\))/<STRONG>$1<\/STRONG>/gi;
	$sql =~ s/\b(INNER|OUTER)\b/<BR>&nbsp;&nbsp;&nbsp;&nbsp;<STRONG>$1<\/STRONG>/gi;
	$sql =~ s/^(\s*<BR>\s*)*//;

	return $sql
}

#__________________________________________________________
#

sub ErrorDie {
	my $errS=shift;
	print "<FONT COLOR=\"#CC0000\"><STRONG>$errS</STRONG></FONT></html>";
	die
}
	
#---------------------------------------------------

sub TreeFileName {
	my $pr=shift;	#project name
	my $User=shift;	#user name
	return ("./html/$User-$pr.html")
}

#---------------------------------------
#copy of LocalizedObj in bearlib.pl

sub LocalizedObj {		# returns localized description
						# $descr = LocalizedObj($descrObj, "NA", 'cz', 'en', ...);

	my $descr=shift;	# description with possible locale
	my $alter=shift;	# alternate description for case specific locale is not defined
	my @@lang=@@_;		# locale(s)
	
	if ($descr) {
		if (ref($descr)=~/HASH/) {
			foreach (@@lang) {
				my $lng = lc($_);
				if (exists ($descr->{$lng})) {
					if (ref($descr->{$lng})=~/HASH/) {	# empty string is presented as empty hash
						return ''
					} else {
						return $descr->{$lng}
					}
				}
			}
		} else {
			return $descr
		}
	}
	return $alter

}

#---------------------------------------------------
#setLocalizedObj returns hash or single string
#depending on definition of language specification
#with no return flag (\r) a with substituted 
#new-line (\n ->> \\n)

sub setLocalizedObj {		#sets the object with or without localized names / descriptions

 my $localObj = shift;
 my $stringToSave = shift;
 my $lang = lc (shift);
$stringToSave =~ s/\r//g;
$stringToSave =~ s/\n/\\n/g;

if ($lang) {						#if localized data is to save
	$localObj = undef if (ref($localObj)!~/HASH/);	#prepare/clear object for saving if no other localized datas presented
	$localObj->{$lang} = $stringToSave;
	return $localObj
} else {
	return $stringToSave;
}
}

#-----------------------------------------------------

sub generateTabs(){
my ($variables, $lang, $localTab, $localTabs) = (shift, shift, shift, shift);
my $lastTab = ${$localTabs}[$#{$localTabs}];
my $hlp = "<td></td>";
print "<table class='local_tabs' cellspacing='0'><tr>\n";
foreach (@@{$localTabs}) {
	my $activeTab = ($$localTab eq $_) ? "active" : "tabs";
	my $viewName = "$$variables->{langSegment} $_";
	$hlp = "" if ($_ eq $lastTab);
	print "<td class='$activeTab"."Corner'><img src='$$variables->{skinPath}img/leftCorner.$$variables->{imgType}'/></td><td class='$activeTab'><a href=\"javascript: viewLocalTab('$_')\" >$$lang->{$viewName}</a></td><td class='$activeTab"."Corner'><img src='$$variables->{skinPath}img/rightCorner.$$variables->{imgType}'/></td>$hlp\n";
};
print "</tr></table>";
}

#---------------------------------------------------
sub GetFiles {
	my ($td, $fExt)=@@_;	# directory, file ext
	my @@fList=();

	if (opendir(DIR, $td) ) {
		@@fList = grep { /^\w.*$fExt$/ && -f "$td/$_" } readdir(DIR);
		closedir DIR;
	}
	@@fList = sort @@fList;
	foreach (@@fList) { s/\.$fExt$// };
	@@fList
}

1
@


1.1
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d4 1
a4 1
# $Id: local_lib.pl,v 1.90 2003/10/04 08:14:34 michald Exp $
@


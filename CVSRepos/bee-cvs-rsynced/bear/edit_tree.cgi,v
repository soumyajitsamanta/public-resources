head	1.56;
access;
symbols;
locks; strict;
comment	@# @;


1.56
date	2004.04.15.08.41.56;	author jiri_schmid;	state Exp;
branches;
next	1.55;

1.55
date	2004.03.05.11.37.04;	author jiri_schmid;	state Exp;
branches;
next	1.54;

1.54
date	2004.02.20.12.41.02;	author jiri_schmid;	state Exp;
branches;
next	1.53;

1.53
date	2004.02.18.16.19.06;	author jiri_schmid;	state Exp;
branches;
next	1.52;

1.52
date	2004.02.16.14.55.19;	author jiri_schmid;	state Exp;
branches;
next	1.51;

1.51
date	2004.02.10.14.46.54;	author jiri_schmid;	state Exp;
branches;
next	1.50;

1.50
date	2003.12.11.14.37.50;	author jiri_schmid;	state Exp;
branches;
next	1.49;

1.49
date	2003.12.04.12.15.13;	author jiri_schmid;	state Exp;
branches;
next	1.48;

1.48
date	2003.12.04.10.44.06;	author jiri_schmid;	state Exp;
branches;
next	1.47;

1.47
date	2003.10.31.12.47.54;	author jiri_schmid;	state Exp;
branches;
next	1.46;

1.46
date	2003.10.16.14.08.51;	author jiri_schmid;	state Exp;
branches;
next	1.45;

1.45
date	2003.09.23.13.09.16;	author jiri_schmid;	state Exp;
branches;
next	1.44;

1.44
date	2003.09.23.13.06.41;	author jiri_schmid;	state Exp;
branches;
next	1.43;

1.43
date	2003.09.01.13.35.13;	author jiri_schmid;	state Exp;
branches;
next	1.42;

1.42
date	2003.09.01.12.40.05;	author jiri_schmid;	state Exp;
branches;
next	1.41;

1.41
date	2003.08.25.15.09.09;	author jiri_schmid;	state Exp;
branches;
next	1.40;

1.40
date	2003.08.19.13.05.55;	author jiri_schmid;	state Exp;
branches;
next	1.39;

1.39
date	2003.08.14.12.43.47;	author jiri_schmid;	state Exp;
branches;
next	1.38;

1.38
date	2003.08.12.14.09.45;	author jiri_schmid;	state Exp;
branches;
next	1.37;

1.37
date	2003.07.29.12.28.26;	author jiri_schmid;	state Exp;
branches;
next	1.36;

1.36
date	2003.07.08.08.24.43;	author jiri_schmid;	state Exp;
branches;
next	1.35;

1.35
date	2003.07.08.07.12.02;	author jiri_schmid;	state Exp;
branches;
next	1.34;

1.34
date	2003.07.04.14.29.27;	author jiri_schmid;	state Exp;
branches;
next	1.33;

1.33
date	2003.05.30.12.39.20;	author jiri_schmid;	state Exp;
branches;
next	1.32;

1.32
date	2003.05.30.09.13.25;	author jiri_schmid;	state Exp;
branches;
next	1.31;

1.31
date	2003.05.21.11.39.42;	author jiri_schmid;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.13.15.18.56;	author jiri_schmid;	state Exp;
branches;
next	1.29;

1.29
date	2003.05.05.06.41.42;	author michald;	state Exp;
branches;
next	1.28;

1.28
date	2003.04.30.09.53.35;	author jiri_schmid;	state Exp;
branches;
next	1.27;

1.27
date	2003.04.28.07.39.37;	author jiri_schmid;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.25.11.27.20;	author jiri_schmid;	state Exp;
branches;
next	1.25;

1.25
date	2003.04.24.11.28.52;	author jiri_schmid;	state Exp;
branches;
next	1.24;

1.24
date	2003.04.23.15.09.53;	author jiri_schmid;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.23.14.38.57;	author jiri_schmid;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.22.08.03.49;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.04.18.13.22.10;	author jiri_schmid;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.16.12.17.08;	author jiri_schmid;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.25.15.37.35;	author jiri_schmid;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.14.09.23.43;	author jiri_schmid;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.12.16.32.44;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.11.16.17.06;	author jiri_schmid;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.10.16.13.56;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.07.16.18.35;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.06.14.48.58;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.05.15.08.21;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.04.15.35.52;	author spanhel;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.26.14.48.07;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.26.13.21.32;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.25.16.46.02;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.19.16.06.48;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.19.13.11.13;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.17.16.16.53;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.17.09.58.18;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.06.12.57.51;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.23.16.43.02;	author spanhel;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.18.12.23.06;	author michald;	state Exp;
branches;
next	;


desc
@@


1.56
log
@last used tab is active 4 viewing object, when possible
@
text
@#!/usr/bin/perl
#-----------------------------------------------------
#  Display tree in IFRAME
#-----------------------------------------------------
# $Id: edit_tree.cgi,v 1.55 2004/03/05 11:37:04 jiri_schmid Exp $

#use Time::HiRes;
#my $stime = Time::HiRes::time();

use strict;
my $run_mod_perl = defined(&Apache::RequestRec::BINMODE);	# are we running under mod_perl?
if ($run_mod_perl) { Apache::RequestRec::BINMODE(':utf8') } else { binmode STDOUT,':utf8' }

use CGI qw( :standard );
use CGI::Pretty;
require "const/Const.pm";
require "local/Tree.pm";
require "local/Local.pm";

my $q = new CGI;
# --- determine user and his preferences ---
#-------------------------------------------
my $use_lang = $q->param('Lang');
my $use_enc = $Const::languages->{$use_lang}->{enc};
my $skin = (param('Skin')) ? param('Skin') : (param('skin')) ? param('skin') : "";
my $user = $q->remote_user();
my $skinPath = ($skin) ? "skins/$skin/" : "";
my $imgType = 'png';#&Local::getImageType("$Const::myPath${skinPath}img/");

print $q->header(-charset=>$use_enc);

print $q->start_html(
   -title=>"Show Folders",
	-lang=>$Const::languages->{$use_lang}->{lang},
	-encoding=>$use_enc,
	-head=>meta({	-http_equiv => 'Content-Type', 
			-content => "text/html; charset=$use_enc"}),
	-style=>{-src=>"${skinPath}css.css"},
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/attr.js'},
		{-language=>'JAVASCRIPT', -src=>'js/tree2.js'},
		{-language=>'JAVASCRIPT', -src=>'js/dad_drag_only.js'}],
	-onload=>"init_var(), hide_load(), openHierarchy();",
	-class=>"list"
);
my $decide;
my $ID = $q->param('item_id'); #valued only if new item was created, necessary for opening tree where new item was created
my $all_params = "\"&".$ENV{QUERY_STRING};
$all_params =~ s/&item.*$//;
$all_params .= "\"";
my $use_cook = "\"".$q->param('Cook')."\"";
my $projectName = $q->param('Proj');

if ($q->param('Force') eq 'refresh') {
	unlink(&Local::TreeFileName($Const::myPath,$projectName,$user));
	$all_params =~ s/&Force=[^&]*//;
}


print <<END ;   # openNodes ... list of nodes which are currently open
<span class='nowrap'><img id='openClose' class='cursor' style='position:fixed; top:5px; right: 3px' src='${skinPath}img/leftArr.$imgType' onclick='ocTree();' alt='OC'/></span>
<input type="hidden" id="active_id" name="id" value="$ID"/>
<input type="hidden" id="passive_id" value=""/>
<input type="hidden" id="skin" value="$skin"/>
<input type="hidden" id="imgType" value="$imgType"/>
<script type="text/javascript">
	var start = new Date;
	var openNodes = new Array();
	var use_cookie = $use_cook;
	var use_param = $all_params;
	var mg="$Const::MetricsIdent->{name}";
	var mg_type="$Const::MetricsIdent->{nick}";
	var editType = "";
</script>

END


my $file = $user."-".$projectName;

our $load = 1;
if (! -e "$Const::myPath/html/$file.html") {
	# ---- init SOAP ---------
	#-------------------------
	if ($load) {	# ensure require will be performed only once in case of mod_perl execution
		eval "use SOAP::Lite +autodispatch => 
			uri => 'Bear', 
			proxy => ['http://$Const::bearHost:$Const::bearPort/', 
			options => {compress_threshold => $Const::compressThreshold}]; 
			1"
		or ( &Local::ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
		undef $load;
	}

	# --- test SOAP connection ---
	#-----------------------------
	my $serverVerbName="SOAP Server http://$Const::bearHost:$Const::bearPort/";
	if (! eval "SOAP::Lite->self->fault") {
		&Local::ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
	}
	#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
	if (SOAP->CheckAccess('E',$user,$q->param('Proj'))) {
		&build_tree($skinPath, $imgType, $projectName, $user, $file, $use_lang, $Const::myPath );
	} else {
		$decide = 1;
	}
};

if (open(TREE, "$Const::myPath/html/$file.html")) {
	binmode(TREE, ":utf8");
	my $wb = $q->user_agent()=~/MSIE/ ? 'msie' : 'mozilla';
	my $rwb = $q->user_agent()=~/MSIE/ ? 'mozilla' : 'msie';
	while (my $out = <TREE> ) {
		if ($out =~ /^<div/ && $out =~ /skins\/$rwb/) {
			$out =~ s/$rwb/$wb/g;
		}
		print $out;
	}
	close(TREE);
} else {
	if ($decide) {
		&Local::accessForbidden('access forbidden');
	} else {
		print "<ul><li>user: $user</li><li>project: $projectName</li></ul>"
	}
}
print "<script type='text/javascript'> BreakRemove('".$q->param('Break')."');</script>" if $q->param('Break') && !$q->param('Force');
print "<script type='text/javascript'> alert(msg_text('".$q->param('Msg')."'));</script>" if $q->param('Msg') && !$q->param('Force');

#print '<script type="text/javascript"> var end = new Date;document.writeln("<div>parse time: ");document.write((end.getTime()-start.getTime())/1000);document.write(" s</div>");</script>';
#printf "<DIV>send time: %.5f s</DIV>", Time::HiRes::time()-$stime;

print $q->end_html;

#---------------------------

sub build_tree() { &Tree::DefHiearchy(@@_) }

1
@


1.55
log
@recursive non-attr objects tree creation implemented, order attr added into folder def.
@
text
@d5 4
a8 1
# $Id: edit_tree.cgi,v 1.54 2004/02/20 12:41:02 jiri_schmid Exp $
d66 1
a66 1
<!--
a72 1
//-->
d129 3
@


1.54
log
@rights for edit page finished
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.53 2004/02/18 16:19:06 jiri_schmid Exp $
d39 1
a39 1
	-onload=>"init_var(); hide_load(); openHierarchy();",
@


1.53
log
@rights implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.52 2004/02/16 14:55:19 jiri_schmid Exp $
d124 2
a125 1
print "<script type='text/javascript'> BreakRemove('".$q->param('Break')."');</script>" if $q->param('Break');
@


1.52
log
@security improvment for tabs
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.51 2004/02/10 14:46:54 jiri_schmid Exp $
d119 1
a119 1
		&Local::accessForbidden('Edit',$user);
@


1.51
log
@mod perl fixies, functionality improvment
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.50 2003/12/11 14:37:50 jiri_schmid Exp $
d28 1
d42 1
a42 1

d99 5
a103 2
	
	&build_tree($skinPath, $imgType, $projectName, $user, $file, $use_lang, $Const::myPath );
d118 5
a122 1
	print "<ul><li>user: $user</li><li>project: $projectName</li></ul>"
d125 1
@


1.50
log
@refresh of tree implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.49 2003/12/04 12:15:13 jiri_schmid Exp $
d116 1
@


1.49
log
@img type changes tested and fixed
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.48 2003/12/04 10:44:06 jiri_schmid Exp $
d49 7
a55 1
	print <<END ;   # openNodes ... list of nodes which are currently open
d74 1
d101 2
a102 5
my $fail;
open(TREE, "$Const::myPath/html/$file.html") || eval "$fail = 1";
if ($fail) {
	print "<ul><li>user: $user</li><li>project: $projectName</li></ul>"
} else {
d113 2
@


1.48
log
@visaul changes and improvments
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.47 2003/10/31 12:47:54 jiri_schmid Exp $
d25 1
a25 1
my $imgType = &Local::getImageType("$Const::myPath${skinPath}img/");
@


1.47
log
@mod perl rocks!
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.46 2003/10/16 14:08:51 jiri_schmid Exp $
d100 8
a107 1
	while (<TREE>) {print "$_";}
d116 1
a116 1
1@


1.46
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.45 2003/09/23 13:09:16 jiri_schmid Exp $
d8 2
a9 1
binmode(STDOUT, ':utf8');
d13 7
a19 8
our $q = new CGI;

require "const.def";
our($StyleSheet,$bearHost,$bearPort,$Languages,$MetricsIdent,$ObjectAttr);	#import from const.def

require "local/local_lib.pl";
require "local/tree_lib.pl";

d21 1
a21 1
my $use_enc = $Languages->{$use_lang}->{'enc'};
d23 3
a25 4
my $User=$q->remote_user();

our $skinPath = ($skin) ? "skins/$skin/" : "";
our $imgType = getImageType("${skinPath}img/");
d30 1
a30 1
	-lang=>$Languages->{$use_lang}->{lang},
d48 1
a48 2
#&do_work($q);
#print $q->hidden('ID',$ID);
d60 2
a61 2
	var mg="$MetricsIdent";
	var mg_type="$ObjectAttr->{$MetricsIdent}->{nick}";
d65 1
d68 1
a68 9
my $file = $User."-".$projectName;
#&build_tree();
if (! -e "./html/$file.html") {&build_tree();};

open(TREE, "./html/$file.html") || print "<ul><li>user: $User</li><li>project: $projectName</li></ul>";
binmode(TREE, ":utf8");
while (<TREE>) {print "$_";}
close(TREE);
print $q->end_html;
d70 13
a82 14
#---------------------------

sub build_tree() {
#print '<p>ACT:'.param('Action').', ID:'.$ID.', COOK:'.$q->cookie('id').', PAR:'.param('ID').':</p>';

	eval "use SOAP::Lite +autodispatch => 
		uri => 'Bear', 
		proxy => ['http://$bearHost:$bearPort/', 
		options => {compress_threshold => 10000}],
		encoding => 'UTF-8';	
		1"
	or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

	my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
d84 3
d88 1
a88 1
		ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
d91 11
a101 3
	#set the ID of editable item
	#&DefHiearchy(\$lang, $skinPath, $imgType, $projectName, $User, 0, ".*", $file, lc($use_lang));
	&DefHiearchy($skinPath, $imgType, $projectName, $User, $file, lc($use_lang));
d103 3
d107 1
d109 1
a109 1
1
@


1.45
log
@bee demo changes
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.44 2003/09/23 13:06:41 jiri_schmid Exp $
a12 1
use vars qw($StyleSheet $bearHost $bearPort $Languages $MetricsIdent $ObjectAttr);
d15 5
a19 1
require "local_lib.pl";
a21 1
require $Languages->{$use_lang}->{src};
d23 2
a26 1
my $User=$q->remote_user();
a28 1

d99 2
a100 1
	&DefHiearchy($projectName, $User, 0, ".*", $file, lc($use_lang));
@


1.44
log
@bee demo changes
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.43 2003/09/01 13:35:13 jiri_schmid Exp $
d68 2
a69 2
&build_tree();
#if (! -e "./html/$file.html") {&build_tree();};
@


1.43
log
@finishing imlementation of skins
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.42 2003/09/01 12:40:05 jiri_schmid Exp $
d68 2
a69 1
if (! -e "./html/$file.html") {&build_tree();};
@


1.42
log
@skins implemented. mozilla skin - temporarily copy msie content
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.41 2003/08/25 15:09:09 jiri_schmid Exp $
d50 1
a50 1
<span class='nowrap'><img id='openClose' class='cursor' style='position:fixed; top:5px; right: 3px' src='${skinPath}img/leftArr.gif' onclick='ocTree();' alt='OC'/></span>
d54 1
@


1.41
log
@object acl, owner, modifier, datetime creation and modification implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.40 2003/08/19 13:05:55 jiri_schmid Exp $
d20 3
a22 2


d33 1
a33 1
	-style=>{-src=>'css.css'},
d50 1
a50 1
<span class='nowrap'><img id='openClose' class='cursor' style='position:fixed; top:5px; right: 3px' src='img/leftArr.gif' onclick='ocTree();' alt='OC'/></span>
d53 1
@


1.40
log
@formats2d implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.39 2003/08/14 12:43:47 jiri_schmid Exp $
d49 1
a49 1
<span class='nowrap'><img id='openClose' class='cursor' style='position:absolute; top:5px; right: 3px' src='img/leftArr.gif' onclick='ocTree();' alt='OC'/></span>
@


1.39
log
@huge code, minor functionality and design improvment on main tree
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.38 2003/08/12 14:09:45 jiri_schmid Exp $
d32 1
a32 1
	-style=>{-src=>$StyleSheet},
d37 1
a37 1
	-class=>"tree"
a64 1

@


1.38
log
@left pane is colapsible now
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.37 2003/07/29 12:28:26 jiri_schmid Exp $
a71 1

@


1.37
log
@right frame implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.36 2003/07/08 08:24:43 jiri_schmid Exp $
d49 1
@


1.36
log
@binmode for STDIN changes
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.35 2003/07/08 07:12:02 jiri_schmid Exp $
d36 1
a36 1
	-onload=>"init_var('tree_iframe'); hide_load(); openHierarchy();",
@


1.35
log
@utf8 implementation in last stage
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.34 2003/07/04 14:29:27 jiri_schmid Exp $
a8 1
binmode(STDIN, ':utf8');
@


1.34
log
@utf8 handling fixed
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.33 2003/05/30 12:39:20 jiri_schmid Exp $
d8 3
@


1.33
log
@fixed bug with user prefernces
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.32 2003/05/30 09:13:25 jiri_schmid Exp $
d66 1
a91 1
	
@


1.32
log
@minor fixies and code improvment
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.31 2003/05/21 11:39:42 jiri_schmid Exp $
d92 1
a92 1
	&DefHiearchy($projectName, $User, 0, ".*", $file);
@


1.31
log
@visual and code improvment
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.30 2003/05/13 15:18:56 jiri_schmid Exp $
d91 1
a92 1

@


1.30
log
@new report page seems to be fullfunctional, javascript code huge improvment
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.29 2003/05/05 06:41:42 michald Exp $
d34 2
a35 1
	-onload=>"init_var('tree_iframe'); hide_load(); openHierarchy();"
@


1.29
log
@implementation of full localized metadata
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.28 2003/04/30 09:53:35 jiri_schmid Exp $
d50 3
a52 3
  var openNodes = new Array();
  var use_cookie = $use_cook;
  var use_param = $all_params;
d55 1
d64 1
a64 1
open(TREE, "./html/$file.html") || print "something wrong?";
a89 1

@


1.28
log
@tabs for results implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.27 2003/04/28 07:39:37 jiri_schmid Exp $
d70 1
d74 15
a88 17
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => 10000}],
	encoding => 'UTF-8';	
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";

if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
#set the ID of editable item

&DefHiearchy($projectName,0,".*",$file);
d90 1
@


1.27
log
@bug erasing cached files fixed
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.26 2003/04/25 11:27:20 jiri_schmid Exp $
d34 1
a34 1
	-onload=>"init_var('tree_iframe'); hide_load(); openHierarchy(); return true;"
@


1.26
log
@switching among projects implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.25 2003/04/24 11:28:52 jiri_schmid Exp $
a58 5
#if ( (! -e "./html/tree.html") || (! -e "./html/array.html")) {&build_tree();};

#open(ARRAY, "./html/array.html") || print "something wrong?";
#while (<ARRAY>) {print "$_";}
#close(ARRAY);
@


1.25
log
@IE bug fixed, code improvment
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.24 2003/04/23 15:09:53 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $Languages $MetricsIdent $ObjectAttr $ProjectName);
d42 1
d64 1
d66 1
a66 1
if (! -e "./html/tree.html") {&build_tree();};
d68 1
a68 1
open(TREE, "./html/tree.html") || print "something wrong?";
d94 1
a94 1
&DefHiearchy($ProjectName,0,".*");
@


1.24
log
@the tree is generated now on server side in html directory as tree.html
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.23 2003/04/23 14:38:57 jiri_schmid Exp $
d34 1
a34 1
	-onload=>"init_var('tree_iframe'); hide_load(); return true;"
d45 2
a46 2
<input type="hidden" id="active_id" name="id" value="$ID">
<input type="hidden" id="passive_id" value="">
d93 1
@


1.23
log
@the tree is generated now on server side in html directory as tree.html
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.22 2003/04/22 08:03:49 jiri_schmid Exp $
a46 3
<FORM name="act_it"> 
  <input id="act_it" type="hidden" name="act_it" value="ndf" title="">
</FORM>
@


1.22
log
@reset button fullfunctional on all pages
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.21 2003/04/18 13:22:10 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $Languages $MetricsIdent $ObjectAttr);
d61 6
d95 1
a95 5
local (*STDOUT); #local remaping of STDOUT
open(STDOUT, ">./html/tree.html") || die; #STDOUT temporarily redirected into file till close of STDOUT

&DefHiearchy("StoreDemo",0,".*");
&ListHiearchy("StoreDemo",0, "ed");
a96 1
close(STDOUT); # the end of temporarily redirection of STDOUT
@


1.21
log
@added disk-cache html/ for generated tree/tree.html and loading alert
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.20 2003/04/16 12:17:08 jiri_schmid Exp $
d61 2
a62 7
if (-e "./html/tree.html"){
	open(TREE, "./html/tree.html");
	while (<TREE>) {print "$_";}
	close(TREE);
}
else { 
build_tree();
a65 1
}
@


1.20
log
@code improvment, minor fixies
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.19 2003/03/25 15:37:35 jiri_schmid Exp $
d19 1
d34 1
a34 1
	-onload=>"init_var('tree_iframe');return true;"
a36 18
#print '<p>ACT:'.param('Action').', ID:'.$ID.', COOK:'.$q->cookie('id').', PAR:'.param('ID').':</p>';

eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => 10000}],
	encoding => 'UTF-8';	
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";

if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

#set the ID of editable item
d61 37
d101 2
a102 1
print $q->end_html;
a105 1

@


1.19
log
@syntax checker for metrics imrpoved, loading user pref file when file missing fixed/imrpoved
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.18 2003/03/14 09:23:43 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $Languages);
d72 2
@


1.18
log
@solved problem with CZ chars, by forced 8bit operating XML-UTF8 files, removed unused images
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.17 2003/03/12 16:32:44 jiri_schmid Exp $
a51 4

#load user prefernces and set if the cookies have to be used
#my $ObjPref = SOAP->LoadUserPref();
#my $use_cookie = "\"".$ObjPref->{'Beard'}->{'cookie'}."\"";
@


1.17
log
@user prefernce - open result in: implemented
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.16 2003/03/11 16:17:06 jiri_schmid Exp $
d41 2
a42 1
	options => {compress_threshold => 10000}]; 
@


1.16
log
@fixed wrong calling of index.cgi, some unused variables removed
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.15 2003/03/10 16:13:56 jiri_schmid Exp $
d57 5
a61 3
my $ID = $q->param('item_id');
$use_lang = "\"&Lang=".$use_lang."\"";
my $use_cook = "\"".$q->param('Cookie')."\"";
d74 1
a74 1
  var use_param = $use_lang;
@


1.15
log
@charset fixed
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.14 2003/03/07 16:18:35 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $MyName $Languages);
@


1.14
log
@weekend commit, language not fixed :(
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.13 2003/03/06 14:48:58 jiri_schmid Exp $
d16 1
a18 4
#my $ID=&SetParam('ID','id');
#undef ($ID) if ($ID eq -1);
#my $FID=&SetParam('FID','fid');
#undef ($FID) if ($FID eq -1);
d21 1
a21 1
print $q->header;
d26 8
a33 6
	-encoding=>$Languages->{$use_lang}->{enc},
   -style=>{-src=>$StyleSheet},
   -script=>[{-language=>'JAVASCRIPT', -src=>'js/attr.js'},
   	     {-language=>'JAVASCRIPT', -src=>'js/tree2.js'},
	     {-language=>'JAVASCRIPT', -src=>'js/dad_drag_only.js'}],
   -onload=>"init_var('tree_iframe');return true;"
d58 1
a58 1
$use_lang = "\"&Lang=".$q->param('Lang')."\"";
@


1.13
log
@loading and saving user preferneces under its name functional, preferences affects edit.cgi, tabs.cgi and prefer.cgi for now
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.12 2003/03/05 15:08:21 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $MyName);
d15 2
d28 2
d59 1
a59 1
my $use_lang = "\"&Lang=".$q->param('Lang')."\"";
@


1.12
log
@user preferences - cookie property succesfully implemented (not implemented into tabs.cgi)
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.11 2003/03/04 15:35:52 spanhel Exp $
d50 2
a51 2
my $ObjPref = SOAP->LoadUserPref();
my $use_cookie = "\"".$ObjPref->{'Beard'}->{'cookie'}."\"";
d55 2
a56 1

d68 2
a69 1
  var use_cookie = $use_cookie;
@


1.11
log
@JavaScript lang localization
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.10 2003/02/26 14:48:07 jiri_schmid Exp $
d49 5
d55 1
d67 1
@


1.10
log
@when file dad.js was optimized file dad_drag_only.js arised to be used by edit.cgi a edit_tree.obj only
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.9 2003/02/26 13:21:32 jiri_schmid Exp $
d27 2
a28 1
   -script=>[{-language=>'JAVASCRIPT', -src=>'js/tree2.js'},
@


1.9
log
@huge javascript optimalization, also files moved to directory js
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.8 2003/02/25 16:46:02 jiri_schmid Exp $
d28 1
a28 1
	     {-language=>'JAVASCRIPT', -src=>'js/dad.js'}],
d55 1
a55 1
  <input id="act_it" type="hidden" name="act_it" value="ndf" title=\"\"/>
@


1.8
log
@removed unused functions from attr.js, language fixies in tabs.cgi and linked files
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.7 2003/02/19 16:06:48 jiri_schmid Exp $
d27 2
a28 3
   -script=>[{-language=>'JAVASCRIPT', -src=>'tree2.js'},
             {-language=>'JAVASCRIPT', -src=>'attr.js'},
	     {-language=>'JAVASCRIPT', -src=>'dad.js'}],
@


1.7
log
@activating of new items fullfunctional, deleting also
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.6 2003/02/19 13:11:13 jiri_schmid Exp $
a60 2
  var URL = new Array;
  URL[0]  = "edit_obj.cgi"; // for all objects
@


1.6
log
@opening the new item after its creating almost fullfunctional
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.5 2003/02/17 16:16:53 jiri_schmid Exp $
d16 4
a19 4
my $ID=&SetParam('ID','id');
undef ($ID) if ($ID eq -1);
my $FID=&SetParam('FID','fid');
undef ($FID) if ($FID eq -1);
d49 1
a49 1
my $hlp = $q->param('iID');
a50 1

d53 2
a54 1
<input type="hidden" id="active_id" name="id" value="$hlp">
@


1.5
log
@finally deleting of tree items is woking properly
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.4 2003/02/17 09:58:18 jiri_schmid Exp $
d49 2
d52 1
a52 2
&do_work($q);
print $q->hidden('ID',$ID);
d54 1
a70 24


#------------------------

sub ListHiearchyX {
	my $pn=shift;
	my $i=shift;
	print <<END
<script type="text/javascript">
<!--        
	var id_exst = get_cookie("id");
	alert(id_exst);
	if (id_exst=="ndf") createTree(Tree$i,"<B>$pn</B>",0,0,openNodes);	   
	else {
		GID = id_exst;
		createTree(Tree$i,"<B>$pn</B>",0,id_exst,openNodes);	   
	}  	
//-->
</script>
END
}

#------------------------

@


1.4
log
@added directory for javascript files, deleting items from tree controled by javascipt - tabs.js/check_drop()
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.3 2003/02/06 12:57:51 jiri_schmid Exp $
d54 1
a54 1
  <input id="act_it" type="hidden" name="act_it" value="ndf" />
d80 1
@


1.3
log
@some visual and control improvments
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.2 2003/01/23 16:43:02 spanhel Exp $
a72 4


#------------------------

a92 166

#------------------------

sub do_work {
	my($cgi) = @@_;
	my $Project='StoreDemo';
	my $Action=$cgi->param('Action');
	if ($Action eq 'NewGrid') { NewObject("$Project/Grids/",'New Grid','grid') }
	elsif ($Action eq 'NewMetric') { NewObject("$Project/Metrics/",'New Metric','metric') }
	elsif ($Action eq 'NewReport') { NewObject("$Project/Reports/",'New Report','report') }
	elsif ($Action eq 'NewFilter') { NewObject("$Project/Filters/",'New Filter','filter') }
	elsif ($Action eq 'NewFormat') { NewObject("$Project/Formats/",'New Format','format') }		
	
	elsif ($Action eq 'Drop') { ConfirmDrop($cgi,$ID) }
	elsif ($Action eq 'Copy') { Copy($cgi,$FID,$Project) }
	
	elsif ($Action eq 'Confirm') { 
		if ($cgi->param('OrigAction') eq 'Drop') { SOAP->DropMData($Project,$ID) }
	}
}

#---------------------------------------------------
sub Copy {
        my $cgi=shift;
	my $fid=shift;	#object id
	return if (!$fid);
	my $pr=	SOAP->GetProjectName($fid); #project name
	my $obj = SOAP->GetMetadata($fid);
	my $objT=(keys %{$obj})[0];	#object type
	my $name=$obj->{$objT}->{$fid}->{name};
	my $new_id;
	if ($objT eq 'format') {$new_id = NewObject("$pr/Formats/",$name.'(Copy)','format')};
	if ($objT eq 'report') {$new_id = NewObject("$pr/Reports/",$name.'(Copy)','report')};
	if ($objT eq 'filter') {$new_id = NewObject("$pr/Filters/",$name.'(Copy)','filter')};
	if ($objT eq 'metric') {$new_id = NewObject("$pr/Metrics/",$name.'(Copy)','metric')};	
	if ($objT eq 'grid') {$new_id = NewObject("$pr/Grids/",$name.'(Copy)','grid')};	
	CopyObj($fid, $new_id);
}
#---------------------------------------------------

sub ConfirmDrop {
	my $cgi=shift;
	my $id=shift;	#object id
	return if (!$id);
	my $pr=	SOAP->GetProjectName($id); #project name
	my $obj = SOAP->GetMetadata($id);
	my $objT=(keys %{$obj})[0];	#object type
	my $name=$obj->{$objT}->{$ID}->{name};
	my $desc=$obj->{$objT}->{$ID}->{description};
	print	$cgi->table({-border=>0},
	                    Tr(
			    [
			       td([h3("Delete $objT object from project \"$pr\"?")])			     
			    ]  
			    )			   
			   ),
		$cgi->table({-border=>0},
	                    Tr(
			    [
			       td({-class=>'main'},[h4("Name: \"$name\"")]),
			       td({-class=>'main'},[h4("Description: \"$desc\"")]),			      
			    ]  
			    )			   
			   ),	   
	        $cgi->start_form(-action=>$MyName),
		$cgi->hidden('ID',$id),
		$cgi->hidden('OrigAction',$cgi->param('Action')),
		$cgi->submit(-name=>'Action', -value=>'Confirm'),
		$cgi->submit('Cancel'),
		
		$cgi->end_form();
	exit
}

#---------------------------------------------------

sub NewObject {
	my $fp=shift;	# path to save
	my $fn=shift;	# new object name
	my $ft=shift;	# new object type
	
	my $fnn=$fn;
	my $fni=0;
	my $mc=100;		# max attempts to find unique name
	my $id=SOAP->NewID();
	my $nob;		# new object

	while ($mc) {
		$nob->{$ft}->{$id}->{name} = $fnn;	#object name
		my $r=SOAP->SaveMData($nob,0,$fp);	#don't rewrite
		if ($r==-1) {	# filename exists, increment suffix and try again
			$fni++;
			$fnn=$fn.'_'.$fni;
		} elsif (!$r) {	# fail
                     print <<END ;
		     <span class="error">ERROR: Saving Object [$fn] into metadata failed.</span>
		     <form action="">
		     <p><input type="submit" value="Continue"></p>
		     </form></body></html>
END
              	     die
		} else {	#success
			$ID=$id;	# set global ID
			last
		}
		$mc--;
	};
	
	if (!$mc) {	# fail
          print <<END ;
	  <span class="error">ERROR: Max count of attempts to find unique Object Name was reached.</span>
	  <form action="">
	  <p><input type="submit" value="Continue"></p>
	  </form></body></html>
END
	  die
	}
	return $id;	
}

#--------------------------------------------------------------
sub CopyObj {
	my $old= shift; # object id already exists
	my $new = shift; # object id of new
	my $obj_o = SOAP->GetMetadata($old);
 	my $obj_n = SOAP->GetMetadata($new);

	my $type_o = (keys %{$obj_o})[0];		#object type
	my $data_o = $obj_o->{$type_o}->{$old};	#ptr to main part of data structure
	my $type_n = (keys %{$obj_n})[0];		#object type
	my $data_n = $obj_n->{$type_n}->{$new};	#ptr to main part of data structure
	$data_n->{description}=$data_o->{description};
        my $pok;
	if ($type_n eq 'format') {
		my $graph=$data_o->{graph}->{type};
		my $css=$data_o->{grid}->{css};
   		if ($css ne '') {
			$data_n->{grid}->{css} = $data_o->{grid}->{css};
		}  
		if ($graph ne '') {
			$data_n->{graph}->{type}=$data_o->{graph}->{type};
		}	
	}	
	if ($type_n eq 'filter') {
   		$data_n->{expr}=$data_o->{expr};
	}	
	if ($type_n eq 'metric') {
   		$data_n->{expr}=$data_o->{expr};
		$data_n->{filter}=$data_o->{filter};
		$data_n->{aggr}=$data_o->{aggr};
	}
	if ($type_n eq 'report') {
		$data_n->{filter}=$data_o->{filter};
		$data_n->{format}=$data_o->{format};
		$data_n->{grid}=$data_o->{grid};		
	}
	if ($type_n eq 'grid') {	
		$data_n->{row} = $data_o->{row};
		$data_n->{col} = $data_o->{col};
		$data_n->{page} =$data_o->{page};
		$data_n->{metric} =$data_o->{metric};	# nemely by metriky byt vnoreny do row|col|page ?	
	}	
	my $r=SOAP->SaveMData($obj_n,1);		
#	use Data::Dumper;
#        print "<PRE>A".Dumper($obj_n)."</PRE>";
}
@


1.2
log
@added object metric in grid_ed.pl
@
text
@d5 1
a5 1
# $Id: edit_tree.cgi,v 1.1 2003/01/18 12:23:06 michald Exp $
a62 1

@


1.1
log
@edit_obj with drag/drop functionality
@
text
@d3 1
a3 1
#  Folder Display
d5 1
a5 1
# $Id: fold.cgi,v 1.19 2002/11/26 12:44:36 spanhel Exp $
@


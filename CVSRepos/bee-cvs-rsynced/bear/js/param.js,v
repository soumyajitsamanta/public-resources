head	1.12;
access;
symbols;
locks; strict;
comment	@# @;


1.12
date	2004.01.16.11.56.31;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.15.15.16.03;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.18.14.38.40;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.14.11.45.36;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.13.16.27.51;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.09.13.53.24;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.03.12.13.49;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.03.10.53.09;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.03.09.37.56;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.03.09.09.58;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.02.15.33.34;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.02.14.44.54;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.12
log
@dp page imrpovment, dp rules code fixies
@
text
@// $Id: param.js,v 1.11 2003/12/15 15:16:03 jiri_schmid Exp $

function getSelected(EID) {
var rtrn = new Array();
for (i=0;i<EID.length;i++){
	if (EID.options[i].selected) {
		 rtrn.push(i);
	}
}
return rtrn
}

function moveUp(ID) {//moves all selected option elements by one down
var EID = document.getElementById(ID)
if (EID) {
	var pole = getSelected(EID);
	for (i=0; i<pole.length;i++){
		if (pole[i] > 0) {
			if (browsertype == 2) {
				var id = EID.options[pole[i]].value; //else use pole[i]-1 !
				var txt = EID.options[pole[i]].text;
				EID.remove(pole[i]);
				EID.add(new Option(txt,id,false,true),EID.options[pole[i]-1]);
			} else {	
				var id = EID.options[pole[i]-1].value;
				var txt = EID.options[pole[i]-1].text;
				EID.options[pole[i]-1].value = EID.options[pole[i]].value;
				EID.options[pole[i]-1].text = EID.options[pole[i]].text;
				EID.options[pole[i]].value = id;
				EID.options[pole[i]].text = txt;
				EID.options[pole[i]-1].selected = true;
				EID.options[pole[i]].selected = false;
			}
			object_changed();
		}
	}
}
return false
}

function moveDown(ID) {	//moves all selected option elements by one up
var EID = document.getElementById(ID)
if (EID) {
	var pole = getSelected(EID);
	for (i=pole.length-1; i > -1;i--){
		if (pole[i]+1 < EID.length) {
			if (browsertype == 2) {
				var id = EID.options[pole[i]].value;
				var text = EID.options[pole[i]].text;
				EID.remove(pole[i]);
				EID.add(new Option(text,id,false,true),EID.options[pole[i]+1]);
			} else {	
				var id = EID.options[pole[i]+1].value;
				var txt = EID.options[pole[i]+1].text;
				EID.options[pole[i]+1].value = EID.options[pole[i]].value;
				EID.options[pole[i]+1].text = EID.options[pole[i]].text;
				EID.options[pole[i]].value = id;
				EID.options[pole[i]].text = txt;
				EID.options[pole[i]+1].selected = true;
				EID.options[pole[i]].selected = false;
			}
		}
		object_changed();
	}
}
return false
}

function input2Select(from,to,unique) {
from = document.getElementById(from);
to = document.getElementById(to);
if (unique) {
	for (i=0; i<to.length; i++) {
		if (to.options[i].value == from.value) return;
	}
}
if (from && to) {
	if (to.disabled) { return };
	to.options[to.length]= new Option(from.value,from.value,false,false)
	from.value="";
}
object_changed();
}

function select2Input(from,to,remove) {
from = document.getElementById(from);
to = document.getElementById(to);
if (from && to) {
	if (from.disabled || from.selectedIndex < 0) { return };
	to.value = from.options[from.selectedIndex].value;
if (remove) {
	from.remove(from.selectedIndex);
}
object_changed();
}
}

function fillObjects(id) {
var EID = document.getElementById(id);
EID.length = 0;
for (i in objects) {
	var node = getObjectOrAtrrform(objects[i]);
	if (node) {
		EID.options[i]= new Option(node[2],node[0],false,false);
	}
}
return(true);
}

function setAttrName() {
var ID = document.getElementById('paramAttr_id');
if (ID.value) {
	var node = getObjectOrAtrrform(ID.value);
	document.getElementById('paramAttr').value = node[2];
}
}

function doLoadJob(){
var typ = getActiveType(); 
switch (typ) {
	case "object"	:fillObjects('paramObjects');
			 break;
	case "element"	:setAttrName();
			 break;
	case "common"	:break;
	case "date"	:break;
}
return(true);
}

function doSaveJob(){
var typ = getActiveType(); 
switch (typ) {
	case "object"	:selectSelect("paramObjects");
			 break;
	case "element"	:selectSelect("paramElements");
			 break;
	case "common"	:selectSelect("paramCommons");
			 break;
	case "date"	:selectSelect("paramDates");
			 break;
}
return(true);
}

function selectSelect(ID) {
var EID = document.getElementById(ID);
	for (i=0; i<EID.length; i++) {
		if (EID.options[i]) {
			EID.options[i].selected = true
		}
	}
}

function setThis(EID) {
var Input = EID.firstChild;
Input.checked = true;
Input.click();
object_changed();
}

function showThis(EID) {
if (document.getElementById("DIV"+show)) {
	document.getElementById("DIV"+show).style.display = 'none';
}
document.getElementById("DIV"+EID.value).style.display = 'block';
show = EID.value;
}

function checkParam(EID) {
var activeAttr = parent.frames["elements_iframe"].document.getElementById('itemId').value;
var currentAttr = document.getElementById("paramAttr_id");
if (activeAttr == currentAttr.value) {
	return true
} else if (currentAttr.value == "") {
	var attr = String(parent.frames["elements_iframe"].document.getElementById('contentTitle').innerHTML);
	attr = attr.replace(/^&nbsp;/g,"");
	attr = attr.replace(/,\s/,"~");
	currentAttr.value = activeAttr;
	document.getElementById("paramAttr").value = attr;
} else {
	var attr = parent.frames["elements_iframe"].document.getElementById('contentTitle').innerHTML;
	attr = attr.replace(/&nbsp;/g,"");
	attr = attr.replace(/,\s/,"~");
	document.getElementById("paramAttr").value = attr;
	document.getElementById("paramElements").length = 0;
	currentAttr.value = activeAttr;
}
}

function clearElements(force) {
var clearIt = (dragLocator.id == document.getElementById("paramAttr_id").value) ? false : true;
if (force || clearIt) {
	document.getElementById("paramElements").length = 0;
}
return true
}

function getActiveType() {
for (i = 0; i < document.param.type.length; i++) {
	if (document.param.type.item(i).checked) { return document.param.type.item(i).value}
}
}

function dropSelect(EID){
if (divID.style.visibility == "hidden") return;
var element;
if (String(dragLocator.id).match(/^element$|^elements$/)) {
	 checkParam(EID);
	 element = true;
} else {
	element = false;
}
var insert = dragLocator.name.match(/^[^\|]*/);
for (i=0; i<EID.length; i++) {
	if (element) {
		if (EID.options[i].text == insert) { return }
	} else {
		if (EID.options[i].value == insert) { return }
	}
}
if (check_input_area(EID)) {
	object_changed();
	if (element) {
		var multiElement = String(insert[0]).split("\t");
		for (var i = 0; i <multiElement.length; i++) {
			EID.options[EID.length]= new Option(multiElement[i],multiElement[i],false,false)
		}
	} else {
			EID.options[EID.length]= new Option(insert,dragLocator.id,false,false)
	}
}
}

@


1.11
log
@interface for setting of dynamic params implemented
@
text
@d1 67
a67 1
// $Id: param.js,v 1.10 2003/11/18 14:38:40 jiri_schmid Exp $
@


1.10
log
@auto save when changing tabs implemented
@
text
@d1 1
a1 1
// $Id: param.js,v 1.9 2003/11/14 11:45:36 jiri_schmid Exp $
d13 2
a14 4
	if (to.length < document.param.max.value) {
		to.options[to.length]= new Option(from.value,from.value,false,false)
		from.value="";
	}
d159 1
a159 1
		var multiElement = String(insert[0]).split(",");
@


1.9
log
@question for dynamic param implemented
@
text
@d1 1
a1 1
// $Id: param.js,v 1.8 2003/11/13 16:27:51 jiri_schmid Exp $
d84 1
a84 1
	for (i=0; i<document.param.max.value; i++) {
@


1.8
log
@fixed bugs and dynamicparam finder implemeted
@
text
@d1 1
a1 1
// $Id: param.js,v 1.7 2003/10/09 13:53:24 jiri_schmid Exp $
d161 4
a164 1
		EID.options[EID.length]= new Option(insert,insert,false,false)
@


1.7
log
@many EN language fixies
@
text
@d1 1
a1 1
// $Id: param.js,v 1.6 2003/10/03 12:13:49 jiri_schmid Exp $
d160 3
a162 4
	if (EID.length < document.param.max.value) {
		if (element) {
			EID.options[EID.length]= new Option(insert,insert,false,false)
		} else {
a163 1
		}
@


1.6
log
@security commit
@
text
@d1 1
a1 1
// $Id: param.js,v 1.85 2003/10/03 10:53:09 jiri_schmid Exp $
d25 1
a25 1
	if (from.disabled) { return };
a26 1
}
d32 1
d142 1
d144 1
a144 2
if (dragLocator.id == "element") {
	 if (divID.style.visibility == "hidden") return;
a147 1
	if (dragLocator.id == "elements") { return }
@


1.5
log
@control improvments on param and format2d-color page
@
text
@d1 1
a1 1
//$id  $
@


1.4
log
@param - common impleneted
@
text
@d12 1
d25 1
@


1.3
log
@param - date implemented
@
text
@d1 1
a1 1
//$id
d72 2
a73 1
	case "common"	:break;
@


1.2
log
@VAU :-) param - objects implemented, bug in elements fixed
@
text
@d1 31
a43 1

d73 2
a74 1
	case "date"	:break;
d91 2
a92 1
Input.onclick();
@


1.1
log
@parameters - elements implemented
@
text
@d1 13
d17 1
a17 1
	var node = getAttrOrAtrrform(ID.value);
d25 2
a26 1
	case "object"	:break;
d38 3
a40 5
	case "object"	:break;
	case "element"	:var EID = document.getElementById("paramElements");
			 for (i=0; i<document.param.max.value; i++) {
			 	if (EID.options[i]) { EID.options[i].selected = true }
			 }
d48 9
d107 1
d111 1
d113 2
a114 1
	return
d118 5
a122 1
	if (EID.options[i].text == insert) { return }
d127 5
a131 1
		EID.options[EID.length]= new Option(insert,insert,false,false)
@


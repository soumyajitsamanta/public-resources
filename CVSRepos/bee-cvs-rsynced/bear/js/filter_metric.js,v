head	1.27;
access;
symbols;
locks; strict;
comment	@# @;


1.27
date	2004.03.21.07.01.21;	author michald;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.18.15.34.50;	author jiri_schmid;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.16.15.49.15;	author jiri_schmid;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.16.15.29.12;	author jiri_schmid;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.23.09.15.10;	author jiri_schmid;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.09.12.21.44;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.11.22.18.38.37;	author michald;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.20.09.42.51;	author michald;	state Exp;
branches;
next	1.19;

1.19
date	2003.11.04.15.19.01;	author jiri_schmid;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.16.14.08.53;	author jiri_schmid;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.02.14.44.54;	author jiri_schmid;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.18.14.10.50;	author jiri_schmid;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.04.14.29.33;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.25.15.40.29;	author jiri_schmid;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.25.09.14.50;	author jiri_schmid;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.24.15.17.43;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.04.11.22.37;	author jiri_schmid;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.27.14.12.13;	author jiri_schmid;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.23.15.03.44;	author jiri_schmid;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.13.15.19.00;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.08.15.35.52;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.06.15.07.08;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.06.10.38.20;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.05.15.16.34;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.22.15.29.25;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.11.15.25.26;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.11.14.02.28;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.27
log
@slight modification of the Metric Filter Intersection MD presentation
@
text
@// $Id: filter_metric.js,v 1.26 2004/03/18 15:34:50 jiri_schmid Exp $

function check_content(isin){
var original = isin;
isin = String(isin).replace(/(\[|\]|\)|\()/g,"\\$1");
if (isin.match(/~/)){
	var nodeParent = findItemByName(isin.match(/^[^~]*/));
	if (nodeParent) {
		var MPole = top.frames['body'].frames['tree_iframe'].Tree0;
		var rgxp = new RegExp(nodeParent[0]+"\\|"+isin.match(/[^~]*$/)+"\\|");
		for (I in MPole)
	 		if (I>=0)	//IE unbelieveble bug treatment
				{if (MPole[I].match(rgxp)) {var hlpX = MPole[I].split("|"); return hlpX[0]};
			} else continue;//IE unbelieveble bug treatment
	}
}
var node = findItemByName(isin);
if (node) return node[0]
return false //substitution of name by id failed
}

function findItemByName(nodeName) {
var MPole = top.frames['body'].frames['tree_iframe'].Tree0;
var rgxp = new RegExp("\\|"+nodeName+"\\|");
for (I in MPole)
	if (I>=0){	//IE unbelieveble bug treatment
		if (MPole[I].match(rgxp)) {return MPole[I].split("|");}
	} else continue;//IE unbelieveble bug treatment
return null
}

function check_filter_syntax(str){
var pole = str.split("");
var exprt = str;
var round_bracket = 0;
var square_bracket = 0;
var from = 0; 
var too = 0;
 function returner(I) { return (pole[I]+msg_text("position")+I) };
 function whitespace(i) {while (String(pole[i]).match(/\s/)) i++; return pole[i];}	
 function follow_LRB(i){var test = whitespace(i); if (test) {if (test.match(/[\[(\d]/)) {return false;} else return true;} else return false;}
 function follow_RRB(i){var test = whitespace(i); if (test) {if (test.match(/[\w\)\]=<>]/)) {return false;} else return true;} else return false;}
 function follow_RSB(i){var test = whitespace(i); if (test) {if (test.match(/[\w\)=<>]/)) {return false;} else return true;} else return false;}
 function readWord(i){ do {i++;} while (pole[i] && String(pole[i]).match(/\w/)); return i; }
 function checkWord(word){ /*if (word.match(/AND|OR|NOT/)) {return false;} else*/ return false; }
 function matchRight(i){
	var ok = true;
	while (ok) {
		if (pole[i]) {
			if (pole[i] == "]") { square_bracket--;	}
			if (pole[i] == "[") { square_bracket++;	};
			if (square_bracket == 0) {return i};
			i++;
		} else return i;
	}
 };
 function re_place(what,by) {
	what = String(what).replace(/(\[|\]|\)|\()/g,"\\$1");
	var rgxp = new RegExp(what); exprt = String(exprt).replace(rgxp,by);
	}
var i = 0;
while (i < pole.length) {
	switch (pole[i]) {
		/*case "(": {round_bracket++; i++; if (follow_LRB(i)) return returner(i); break;}
		case ")": {round_bracket--; i++; if (follow_RRB(i)) return returner(i); break;}*/
		case "[": {square_bracket++; i++; from = i; i = matchRight(i); too = i; break}
		case "]": {i++; if (follow_RSB(i)) return returner(i); break}
		default : {
			/*if (String(pole[i]).match(/\d|\s|>|<|=/)) {i++; continue};
			var oD = i; var Do = readWord(i);
			if (checkWord(str.substring(oD,Do))) {return returner(i);}
			else {if (String(pole[Do]).match(/[\(]/)) {round_bracket++} else return returner(Do);};
			i=Do;*/
			i++;
			}
		break;
		};
	if (from >= 0 && too > 0) {
		var what = str.substring(from,too);
		var cntntID = check_content(what);
		if (cntntID) { 
			re_place(what,cntntID);
			from = 0;
			too = 0;
		} else {
			return what;
		}
	}
}
if (round_bracket == 0 && square_bracket == 0) {} else return msg_text("bracket error");
document.getElementById("object_filter_id").value = exprt.replace(/\s{2,}/g," "); //names replaced by id
return 0;
}

function check_metric_syntax(str){
var pole = str.split("");
var exprt = str;
var round_bracket = 0;
var square_bracket = 0;
var from = 0; 
var too = 0;
 function returner(I) { return (pole[I]+msg_text("position")+I) };
 function whitespace(i) {while (String(pole[i]).match(/\s/)) i++; return pole[i];}
 function followLRB(i) {var test = whitespace(i); if (test) {if (test.match(/[\(\[\w]/)) return false;} else return false; return true;}
 function followRRB(i) {var test = whitespace(i); if (test) {if (test.match(/[\)\]\+\*\/\-]/)) return false;} else return false; return true;}
 function permit(i) {var test = whitespace(i); if (test) {if (test.match(/[\(\[\w]/)) return false;} else return true; return true;}
 function defauld(i){ var test = whitespace(i); if (test) {if (test.match(/[\+\-\*\/]/)) {return true;}} else return true; return false;}
 function readWord(i){ do { i++; } while (pole[i] && String(pole[i]).match(/\w/)); return i; }
 function checkWord(word){ if (word.match(/SUM|AVG|COUNT|MAX|MIN/)) {return false;} else return true; }
 function matchRight(i){
	var ok = true;
	while (ok) {
		if (pole[i]) {
			if (pole[i] == "]") { square_bracket--;	}
			if (pole[i] == "[") { square_bracket++;	};
			if (square_bracket == 0) {return i};
			i++;
		} else return i;
	}
 }
 function re_place(what,by) {
	what = String(what).replace(/(\[|\]|\)|\()/g,"\\$1");
	var rgxp = new RegExp(what);
	exprt = String(exprt).replace(rgxp,by);
	}
var i = 0;
while (i<pole.length) {
	switch (pole[i]) {
		case "[": {square_bracket++; i++; from = i; i = matchRight(i); too = i; i++; break}
		/*case "(": {round_bracket++; i++; if (followLRB(i)) return returner(i); break;}
		case ")": {round_bracket--; i++; if (followRRB(i)) return returner(i); break;}
		case "+": {i++; if (permit(i)) return returner(i); break;}
		case "-": {i++; if (permit(i)) return returner(i); break;}
		case "/": {i++; if (permit(i)) return returner(i); break;}
		case "*": {i++; if (permit(i)) return returner(i); break;}*/
		default:{
/*			if (String(pole[i]).match(/\s/)) {i++; continue};
			var oD = i; var Do = readWord(i);
			if (checkWord(str.substring(oD,Do))) {return returner(i);}
			else {if (String(pole[Do]).match(/[\(]/)) {round_bracket++} else return returner(Do);};
			i=Do; i++;*/
			i++
		}
		break;
		}
	if (from >= 0 && too > 0) {
		var what = str.substring(from,too);
		var cntntID = check_content(what);
		if (cntntID) {
			re_place(what,cntntID);
			from = 0;
			too = 0;
		} else { 
			return what
		}
	}
};
if (round_bracket == 0 && square_bracket == 0) {} else return msg_text("bracket error");
document.metric.expr_id.value = exprt.replace(/\s{2,}/g," "); //names replaced by id
return 0;
}

function subst_ID_expr(param){
var MPole = top.frames['body'].frames['tree_iframe'].Tree0;
var ided_str = String(document.getElementById(param+"_id").value);
var subst_str = ided_str;
var poleID = ided_str.match(/[^\[]*\]/g);
for (i in poleID)
	if (i>=0) {	//IE unbelieveble bug treatment
	poleID[i] = String(poleID[i]).replace(/.$/,"");
	  if (String(poleID[i]).match(/~/)) {
		var nodeParent = findItemById(String(poleID[i]).match(/^[^~]*/));
		var nodeChild = findItemById(poleID[i],true);
		var rgxp = new RegExp("\\["+poleID[i]+"\\]");
		if (nodeParent && nodeChild) { subst_str = subst_str.replace(rgxp,"["+nodeParent[2]+"~"+nodeChild[2]+"]");}
	  } else {
		var node = findItemById(poleID[i]);
		var rgxp = new RegExp("\\["+poleID[i]+"\\]");
		if (node) {subst_str = subst_str.replace(rgxp,"["+node[2]+"]");}
	  };
	} else continue;//IE unbelieveble bug treatment
document.getElementById(param).value = subst_str;
}

function metric_checker(){
var str = document.getElementById("object_metric").value;
var pass = check_metric_syntax(str);
pass = 0;	// !!! temporary bypas of the filter syntax check, it should be checked by yapp
if (pass==0) { return true}
else {var hlp = msg_text("syntax error")+pass; alert(hlp); return false;};
}


function filter_checker(){
var str = document.getElementById("object_filter").value;
var pass = check_filter_syntax(str);
pass = 0;	// !!! temporary bypas of the filter syntax check, it should be checked by yapp
if (pass==0) { return true}
else {var hlp = msg_text("syntax error")+pass; alert(hlp); return false;};
}

function nexts(CID,ID){ //click on element by id CID and do something with ID
EID = document.getElementById(CID);
EID.click();
object_changed();
}

function doSwitch(SID,CID,ID) { //disable or enable html element on metric page within filter rules
switch (CID) {
	case 'report' :if (SID.checked) {
				var HID = document.getElementById('intersectmetric');
				if (HID.checked) { doChange('intersecttype',1) };
			} else {
				doChange('intersecttype',0);
			}
			break;
	case 'metric' :if (SID.checked) {
				var HID = document.getElementById('intersectreport');
				if (HID.checked) { doChange('intersecttype',1) }
				doChange(ID,1); 
			} else {
				doChange(ID,0);
				doChange('intersecttype',0);
				clearItem('metric_filter');
			}
			break;
}
}

function doChange(ID,ED) {//switch element 2 enabled or disabled by EnableDisable state
var EID = document.getElementById(ID);
if (ED) {	//enable
	EID.disabled = false
} else {	//disable
	EID.disabled = true
}
}

function NEXT(EID,ID){ //use <span onclick=next..><input... >TEXT</span> to set (click) on input ;-) and to enable/disable html element assigned by ID
EID = EID.firstChild;
EID.click();
object_changed();
var HEID = document.getElementById(ID);
if (EID.value == 'specific') {
	HEID.disabled = false;
} else {
	HEID.disabled = true;
}
}

function next(EID){ //use <span onclick=next..><input... >TEXT</span> to set (click) on input ;-)
EID = EID.firstChild;
EID.click();
object_changed();
}

function multiple(){
var EID = document.getElementById("metric_attributes");
for (i=0; i<EID.length; i++) {	EID.options[i].selected = true }
return(true);
}

function fillSelect(id) {
var EID = document.getElementById(id);
EID.length = 0;
var poleID = String(document.getElementById(id+'_id').value).split("|");
for (i=0; i<poleID.length; i++) {
	if (poleID[i] == "") {continue};
	var node = findItemById(poleID[i]);
	if (node) {
		EID.options[i]= new Option(node[2],node[0],false,false);
	}
}
return(true);
}
@


1.26
log
@hash name change
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.25 2004/03/16 15:49:15 jiri_schmid Exp $
d210 2
a211 2
	case 'reports' :if (SID.checked) {
				var HID = document.getElementById('intersectmetrics');
d217 2
a218 2
	case 'metrics' :if (SID.checked) {
				var HID = document.getElementById('intersectreports');
@


1.25
log
@micro fix
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.24 2004/03/16 15:29:12 jiri_schmid Exp $
d212 1
a212 1
				if (HID.checked) { doChange('intersectnon_rel',1) };
d214 1
a214 1
				doChange('intersectnon_rel',0);
d219 1
a219 1
				if (HID.checked) { doChange('intersectnon_rel',1) }
d223 1
a223 1
				doChange('intersectnon_rel',0);
a226 1
	case 'non_rel' : break;
@


1.24
log
@filter and aggregation level handling rules on metric page changed
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.23 2004/01/23 09:15:10 jiri_schmid Exp $
d224 1
@


1.23
log
@filter,metric syntax checker fix
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.22 2004/01/09 12:21:44 jiri_schmid Exp $
d202 50
a251 1
function next(EID){
@


1.22
log
@metric checker was disabled
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.21 2003/11/22 18:38:37 michald Exp $
d19 1
a19 1
return original //substitution of name by id failed
d78 12
a89 8
	if (from >= 0 && too > 0) 
		{var what = str.substring(from,too);
		 var cntntID = check_content(what);
		 if (what == cntntID) return what;
		 re_place(what,cntntID);
		 from = 0;
		 too = 0;};
	};
d146 11
a156 7
	if (from >= 0 && too > 0) 
		{var what = str.substring(from,too);
		 var cntntID = check_content(what);
		 if (what == cntntID) return what;
		 re_place(what,cntntID);
		 from = 0;
		 too = 0;}
@


1.21
log
@fix undefined call to decode in case attr descr is NULL
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.20 2003/11/20 09:42:51 michald Exp $
d126 1
a126 1
		case "(": {round_bracket++; i++; if (followLRB(i)) return returner(i); break;}
d131 1
a131 1
		case "*": {i++; if (permit(i)) return returner(i); break;}
d133 1
a133 1
			if (String(pole[i]).match(/\s/)) {i++; continue};
d137 2
a138 1
			i=Do; i++;
@


1.20
log
@fix of LDM, cleanup of some obsolete files
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.19 2003/11/04 15:19:01 jiri_schmid Exp $
d179 1
@


1.19
log
@save as - modperl fixies, code improvments
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.18 2003/10/16 14:08:53 jiri_schmid Exp $
d187 1
@


1.18
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.17 2003/10/02 14:44:54 jiri_schmid Exp $
d179 1
a179 1
if (pass==0) { return reset_tree_name();}
@


1.17
log
@parameters - elements implemented
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.16 2003/09/18 14:10:50 jiri_schmid Exp $
d87 1
a87 1
document.object.expr_id.value = exprt.replace(/\s{2,}/g," "); //names replaced by id
@


1.16
log
@tabs imlemented almost everywhere
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.15 2003/07/04 14:29:33 jiri_schmid Exp $
a195 10

function emptySelect(id){
var EID = document.getElementById(id);
var all = true;
for (i=0; i<EID.length; i++) {
	if (EID.options[i].selected)  { EID.remove(i); i--; all=false;}
	}
if (all) {EID.length = 0}
object_changed();
return(true);}
@


1.15
log
@utf8 handling fixed
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.14 2003/06/25 15:40:29 jiri_schmid Exp $
d187 1
a187 1
if (pass==0) { return reset_tree_name();}
@


1.14
log
@code changes a fixies
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.13 2003/06/25 09:14:50 jiri_schmid Exp $
d68 2
a69 2
		/*default : {
			if (String(pole[i]).match(/\d|\s|>|<|=/)) {i++; continue};
d73 3
a75 2
			i=Do; i++;
			}*/
@


1.13
log
@multiple aggregations in metric implemented
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.12 2003/06/24 15:17:43 jiri_schmid Exp $
d64 2
a65 2
		case "(": {round_bracket++; i++; if (follow_LRB(i)) return returner(i); break;}
		case ")": {round_bracket--; i++; if (follow_RRB(i)) return returner(i); break;}
d68 1
a68 1
		default : {
d74 1
a74 1
			}
@


1.12
log
@metric mData change, minor code improvment
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.11 2003/06/04 11:22:37 jiri_schmid Exp $
d194 30
@


1.11
log
@bug fixies
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.10 2003/05/27 14:12:13 jiri_schmid Exp $
d188 6
@


1.10
log
@implemented setLocalizedObj & LocalizedObj on client side
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.9 2003/05/23 15:03:44 jiri_schmid Exp $
d42 2
a43 2
 function follow_RRB(i){var test = whitespace(i); if (test) {if (test.match(/[\)\]=<>]/)) {return false;} else return true;} else return false;}
 function follow_RSB(i){var test = whitespace(i); if (test) {if (test.match(/[\)=<>]/)) {return false;} else return true;} else return false;}
@


1.9
log
@rules and groups for attributes implemented, metric & filter checker remaked
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.8 2003/05/13 15:19:00 jiri_schmid Exp $
d44 2
a45 2
 function readWord(i){ while (String(pole[i]).match(/\w/)) i++; return i; }
 function checkWord(word){ if (word.match(/AND|OR|NOT/)) {return false;} else return true; }
d103 1
a103 1
 function readWord(i){ while (String(pole[i]).match(/\w/)) i++; return i; }
@


1.8
log
@new report page seems to be fullfunctional, javascript code huge improvment
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.7 2003/05/08 15:35:52 jiri_schmid Exp $
d5 1
a5 2
isin = String(isin).replace(/\[/g,"\\[");
isin = String(isin).replace(/\]/g,"\\]");
d25 1
a25 1
for (I in MPole) 
d42 15
a56 3
 function follow_RRB(i){var test = whitespace(i); if (test) {if (test.match(/[^(\d]/)) {return false;} else return true;} else return false;}
 function follow_LSB(i){var test = whitespace(i); if (test) {if (test.match(/[<=>(\[]/)) {return true;} else return false;} else return false;}
 function follow_RSB(i){var test = whitespace(i); if (test) {if (test.match(/[<=>)\]]/)) {return false;} else return true;} else return false;}
d58 1
a58 2
 	what = String(what).replace(/\[/g,"\\[");
	what = String(what).replace(/\]/g,"\\]");
d61 2
a62 2
for (i in pole) 
	if (i>=0) {	//IE unbelieveble bug treatment
d66 9
a74 3
		case "[": {i++; if (square_bracket == 0) from = i; square_bracket++; if (follow_LSB(i)) return returner(i); break;}
		case "]": {square_bracket--; if (square_bracket == 0) too = i; i++; if (follow_RSB(i)) return returner(i); break;}
		default : {i++; if (String(pole[i]).match(/\s/)) continue; break}
d76 2
a77 2
		}
	if (from > 0 && too > 0) 
d83 2
a84 2
		 too = 0;}
	} else continue;//IE unbelieveble bug treatment
d99 3
a101 2
 function wrong(i){ var test = whitespace(i); if (test) {if (test.match(/[\+\-\*\/\]\)]/)) return true;} else return true; return false;}
 function right(i){ var test = whitespace(i); if (test) {if (test.match(/[^\+\-\*\/\]\)]/)) return true;} else return false; return false;}
d103 13
d117 3
a119 3
 	what = String(what).replace(/\[/g,"\\[");
	what = String(what).replace(/\]/g,"\\]");
	var rgxp = new RegExp(what); exprt = String(exprt).replace(rgxp,by);
d121 2
a122 2
for (i in pole) 
	if (i>=0) {	//IE unbelieveble bug treatment
d124 14
a137 9
		case "(": {round_bracket++; i++; if (wrong(i)) return returner(i); break;}
		case ")": {round_bracket--; i++; if (right(i)) return returner(i); break;}
		case "[": {i++; if (square_bracket == 0) from = i; square_bracket++; if (wrong(i)) return returner(i); break;}
		case "]": {square_bracket--; if (square_bracket == 0) too = i; i++; if (right(i)) return returner(i); break;}
		case "+": {i++; if (wrong(i)) return returner(i); break;}
		case "-": {i++; if (wrong(i)) return returner(i); break;}
		case "/": {i++; if (wrong(i)) return returner(i); break;}
		case "*": {i++; if (wrong(i)) return returner(i); break;}
		default: {if (String(pole[i]).match(/\s/)) {continue} else {i++; if (defauld(i)) return returner(i); break;}}
d140 1
a140 1
	if (from > 0 && too > 0) 
d147 1
a147 1
	} else continue;//IE unbelieveble bug treatment
@


1.7
log
@report huge improvment
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.6 2003/05/06 15:07:08 jiri_schmid Exp $
d70 1
a70 1
document.filter.expr_id.value = exprt.replace(/\s{2,}/g," "); //names replaced by id
d141 1
a141 1
var str = document.getElementById("metric_metric").value;
d149 1
a149 1
var str = document.getElementById("filter_filter").value;
@


1.6
log
@bug fixies, code improvment
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.5 2003/05/06 10:38:20 jiri_schmid Exp $
d119 1
a119 1
var MPole = parent.frames['tree_iframe'].Tree0;
@


1.5
log
@code improvment
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.4 2003/05/05 15:16:34 jiri_schmid Exp $
d143 1
a143 1
if (pass==0) { reset_tree_name(); return true;}
d151 1
a151 1
if (pass==0) { reset_tree_name(); return true;}
@


1.4
log
@huge code improvment on client side when substituting from/to ID, minor language dependeces fixies
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.3 2003/04/22 15:29:25 jiri_schmid Exp $
d128 1
a128 1
		var nodeChild = findItemById(poleID[i]);
@


1.3
log
@fixed a modified saving a loadin joined items A~Af
@
text
@d1 1
a1 1
// $Id: filter_metric.js,v 1.2 2003/04/11 15:25:26 jiri_schmid Exp $
d4 1
a4 1
var MPole = parent.frames['tree_iframe'].Tree0; //contains arrays of strings
d7 9
a15 7
if (isin.match(/~/)) 
	{var rgxP = new RegExp("[\|]"+isin.match(/^[^~]*/)+"[\|]");
	 for (I in MPole)
	 	if (I>=0)	//IE unbelieveble bug treatment
			{if (MPole[I].match(rgxP)) {var hlpX = MPole[I].split("|"); return hlpX[0]+isin.match(/~.*$/); break;};
		} else continue;//IE unbelieveble bug treatment
		
d17 9
a25 1
var rgxp = new RegExp("[\|]"+isin+"[\|]");
d27 2
a28 2
	if (I>=0)	//IE unbelieveble bug treatment
		{if (MPole[I].match(rgxp)) {var hlpX = MPole[I].split("|");  return (hlpX[0]);}
d30 1
d127 8
a134 18
	  	var rgxp = new RegExp("^"+String(poleID[i]).match(/^[^~]*/)+"\\|");
		for (I in MPole) {
			if (MPole[I].match(rgxp)) 
				{
				var hlprgxp = new RegExp("\\["+poleID[i]+"\\]");
				var hlp = String(MPole[I]).split("|");
				subst_str = subst_str.replace(hlprgxp,"["+hlp[2]+String(poleID[i]).match(/~.*$/)+"]");}
			}
	  }
	  else {
		var rgxp = new RegExp("^"+poleID[i]+"\\|");
		for (I in MPole) {
			if (MPole[I].match(rgxp)) 
				{
				var hlprgxp = new RegExp("\\["+poleID[i]+"\\]");
				var hlp = String(MPole[I]).split("|");
				subst_str = subst_str.replace(hlprgxp,"["+hlp[2]+"]");}
			}
@


1.2
log
@substitution of id on grid when loading fixed for Mozilla and IE
@
text
@d1 1
a1 1
// $Id: 2003/04/10 14:21:35 jiri_schmid Exp $
d7 2
a8 3
if (isin.match(/\./)) 
	{var bckp = isin;
	 var rgxP = new RegExp("[\|]"+isin.match(/^[^\.]*/)+"[\|]");
d11 1
a11 1
			{if (MPole[I].match(rgxP)) {var hlpX = MPole[I].split("|"); isin = hlpX[0]+isin.match(/\..*$/); break;};
d18 1
a18 1
		{if (MPole[I].match(rgxp)) {var hlpX = MPole[I].split("|"); return (hlpX[0]);}
a19 1
return (bckp) ? bckp : isin.replace(/\\/g,"");
d114 12
a125 1
		poleID[i] = String(poleID[i]).replace(/.$/,"");
d134 1
@


1.1
log
@filter.js & metric.js optimalized and split in filter_metric.js
@
text
@d1 2
@


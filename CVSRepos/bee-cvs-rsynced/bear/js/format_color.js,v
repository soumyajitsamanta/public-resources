head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2004.05.06.03.22.02;	author vasekd;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.26.18.08.53;	author vasekd;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.13.14.43.23;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.03.10.53.09;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.01.11.32.12;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.01.09.19.09;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.30.15.46.41;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.26.11.16.31;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.8
log
@fixed many bugs in difinition of new format
@
text
@// $Id: format_color.js,v 1.7 2004/04/26 18:08:53 vasekd Exp $

var timer, TargeT, Bin, TargetSelected, InputOfTarget, CellSelected;

function fillDatasItems() {
var selectobj = document.getElementById('datasItems');
selectobj.length = 0;
for (i=0; i<7; i++) {
	var hlp = document.getElementById('data'+(i+1)).value;
	selectobj.options[i]= new Option(hlp,hlp,false,true);
	}
}

function setSelfColor(EID) {
if (TargeT) {
	TargeT.value = EID.title;
	document.getElementById("color"+TargeT.id).style.backgroundColor = "rgb("+EID.title+")";
	TargeT.onclick();
	object_changed(); 
} else {
	var hlp = document.getElementById("takeColor");
	hlp.value = EID.title;
	setColor(hlp);
}
}

function setBin(EID) {Bin = EID}

function emptyBin(EID) {
if (Bin) {
	Bin.value = '';
	document.getElementById("color"+Bin.id).style.backgroundColor = "";
	object_changed();
	//TargeT = null;
	}
}

function setSelf(EID) {
	TargeT = EID;
	Bin=EID;
	setColor(EID);
}
//------for format of a grid only-----------


function setSelfF(EID) {
	parent.TargetSelected = EID;
	parent.ImageSelected = EID;
	parent.InputOfTarget = parent.document.getElementById(EID.id);
	}

function reloadColorF(EID,NameCell) {
	parent.TargetSelected = EID;
	parent.InputOfTarget = parent.document.getElementById(EID.id);
	parent.NameCell = NameCell; //set name of change element
}

function setColorF() {
var rgb = String(InputOfTarget.value).split(/,/);
var colors = ['red','green','blue'];
for (i in colors) { document.getElementById(colors[i]).value = (rgb[i]) ? rgb[i] : 255; }
changeColorF();
}

function changeColorF() {
	var colorElement = document.getElementById('color');
	var clr16 = getColor();
	colorElement.style.backgroundColor = clr16;
	colorElement.title = getColor(1); //necessary
	
	if (TargetSelected) {
		addColorF(colorElement);
	}
}

function setFormat(EID,property,val) {
	if (!val){
	var val = EID.value;
	}
	var valHelp;
	if (String(val).match(/px/)){
		//alert(val);
		valHelp = String(val).replace(/px/,"");
		//alert(val);
	}else{valHelp = val;}
	
	parent.InputOfTarget = parent.document.getElementById(EID.id);
	parent.InputOfTarget.value = valHelp;
	
	if(String(parent.TargetSelected.id).match(/_vertical/)){
		property = String(property).replace(/border/,"borderRight");
		setCellParent(property,val);	
	}else if(String(parent.TargetSelected.id).match(/_horizontal/)){
		property = String(property).replace(/border/,"borderTop");
		setCellParent(property,val);	
	}else{
		setCellParent(property,val);
	}
}	

function setCellParent(property,val) {
	CellElements=parent.NameCell.split(/,/);
	for(i=0; i<CellElements.length; i++){
		var Cell = parent.gridIframe.document.getElementById(CellElements[i]);
		Cell.style[property] = val;
	}	
	parent.object_changed();
}

function setCell(property,val) {
var	CellElements=NameCell.split(/,/);
	for(var i=0; i<CellElements.length; i++){
		var Cell = gridIframe.document.getElementById(CellElements[i]);
		Cell.style[property] = val;
	}	
	object_changed();
}

function addColorF(EID) {
if (TargetSelected) {
	InputOfTarget.value = EID.title;
	
	if (String(TargetSelected.id).match(/_bgcolor/)){
		setCell('backgroundColor','rgb('+EID.title+')');
	}else if(String(TargetSelected.id).match(/_font/)){
		setCell('color','rgb('+EID.title+')');
	}else if(String(TargetSelected.id).match(/_vertical/)){ 
		setCell('borderRightColor','rgb('+EID.title+')');	
	}else{
		setCell('borderTopColor','rgb('+EID.title+')');	
	}
	object_changed();
}
}

function setSelfColorF(EID) {
if (TargetSelected) {
	InputOfTarget.value = EID.title;
	setColorF();
	object_changed(); 
} else {
	var hlp = document.getElementById("takeColor");
	hlp.value = EID.title;
	setColor(hlp);
}
}

function plusF(color){
var EID = document.getElementById(color);
EID.value = Number(EID.value) + 5;
dec2hex(EID.value);
changeColorF();
}

function minusF(color){
var EID = document.getElementById(color);
EID.value = Number(EID.value) - 5;
changeColorF();
}

//------end for format of a grid only-----------

function addSelf(EID) {
if (TargeT) {
	TargeT.value = EID.title;
	object_changed(); 
}}

function addColor(EID) {
if (TargeT) {
	TargeT.value = EID.title;
	object_changed();
	document.getElementById("color"+TargeT.id).style.backgroundColor = getColor();
}
}

function reloadColor(EID) {
var add = String(EID.id).replace(/^color/,"");
var NID = document.getElementById(add);
NID.onclick();
TargeT = NID;
}

function setColor(EID) {
var rgb = String(EID.value).split(/,/);
var colors = ['red','green','blue'];
for (i in colors) { document.getElementById(colors[i]).value = (rgb[i]) ? rgb[i] : 255; }
changeColor();
}

function changeColor() {
var colorElement = document.getElementById('color');
var clr16 = getColor();
colorElement.style.backgroundColor = clr16;
colorElement.title = getColor(1); //necessary
}

function startIncrease(colorSegment) {
if (timer) stopTimer();
timer = window.setInterval("plus('"+colorSegment+"')",150);
return true
}

function startDecrease(colorSegment) {
if (timer) stopTimer();
timer = window.setInterval("minus('"+colorSegment+"')",150);
return true
}

function stopTimer() {
if (timer) {
	window.clearInterval(timer);
	timer = null;
}
return true
}

function getColor(typ) {	//return hex num
var rtrn = (typ) ? new Array : '#';
var colors = ['red','green','blue'];
for (i in colors) {
	var segment = document.getElementById(colors[i]).value;
	if (isNaN(segment))  {	//no input convertible to number
		document.getElementById(colors[i]).value = 127;
		segment = (typ) ? 127 : '7F';
	} else {
		segment = Number(segment);
		if (segment > 255) {		//color overload
			document.getElementById(colors[i]).value = 255;
			segment = (typ) ? 255 : 'FF';
		} else if (segment < 0) {	//color underload
			document.getElementById(colors[i]).value = 0;
			segment = (typ) ? 0 : '00';
		} else {			//change color to hex number but as a string
			if (typ) { }
			else {
			segment = dec2hex(segment);
			if (String(segment).length == 1) segment = '0'+segment;	//the segment is not 2 char string
			}
		}
	}
	if (typ) {
		rtrn.push(segment);
	} else {
		rtrn += segment;
	}
}
return (typ) ? rtrn.join(",") : rtrn
}

function plus(color){
var EID = document.getElementById(color);
EID.value = Number(EID.value) + 5;
dec2hex(EID.value);
changeColor();
}

function minus(color){
var EID = document.getElementById(color);
EID.value = Number(EID.value) - 5;
changeColor();
}

function dec2hex(numero) { //numero
var expnt = 0;
var original = numero;
while ( (numero / 16) >= 1 ) { expnt++; numero /= 16; }
numero = original;
var rtrn = '';
for (i=expnt; i>-1; i--) {
	var num = (numero > 15) ? Math.floor(numero / Math.pow(16,i)) : numero;
	numero -= num*Math.pow(16,i);
	switch (num) {
		case 15 : rtrn += 'F'; break;
		case 14 : rtrn += 'E'; break;
		case 13 : rtrn += 'D'; break;
		case 12 : rtrn += 'C'; break;
		case 11 : rtrn += 'B'; break;
		case 10 : rtrn += 'A'; break;
		default : rtrn += num; break;
	}
}
return rtrn
}

function hex2dec(stringo) { //stringo accepts hexanumber as unflagged string (ex. FF, no 0xFF)
var pole = stringo.split("");
var rtrn = 0;
for (i=0; i<pole.length; i++) {
	var ii = pole.length-i-1;
	switch (pole[ii]) {
		case 'a' || 'A' : rtrn += Math.pow(16,i)*10; break;
		case 'b' || 'B' : rtrn += Math.pow(16,i)*12; break;
		case 'c' || 'C' : rtrn += Math.pow(16,i)*12; break;
		case 'd' || 'D' : rtrn += Math.pow(16,i)*13; break;
		case 'e' || 'E' : rtrn += Math.pow(16,i)*14; break;
		case 'f' || 'F' : rtrn += Math.pow(16,i)*15; break;
		default: rtrn += Math.pow(16,i)*Number(pole[ii]);
	}
}
return rtrn
}
@


1.7
log
@new format of table
@
text
@d1 1
a1 1
// $Id: format_color.js,v 1.6 2003/10/13 14:43:23 jiri_schmid Exp $
d76 2
a77 1
function setFormat(EID,property) {
d79 1
d103 3
a105 7
	//alert(CellElements.length);
	for(var i=0; i<CellElements.length; i++){
		//don't function in IE. I don't know why :-(
		//alert(i);
		var Cell = parent.gridIframe.document.getElementsByName(CellElements[i]);
		//alert(parent.gridIframe.document.getElementById(Cell[0].id).style[property]);
		parent.gridIframe.document.getElementById(Cell[0].id).style[property] = val;
d111 1
a111 1
	CellElements=NameCell.split(/,/);
d113 2
a114 3
		var Cell = gridIframe.document.getElementsByName(CellElements[i]);
		//alert(Cell);
		gridIframe.document.getElementById(Cell[0].id).style[property] = val;
@


1.6
log
@description tab defined under two files, bug fixies
@
text
@d1 1
a1 1
// $Id: format_color.js,v 1.86 2003/10/09 13:53:24 jiri_schmid Exp $
d3 1
a3 1
var timer, TargeT, Bin;
d43 122
@


1.5
log
@control improvments on param and format2d-color page
@
text
@d1 2
@


1.4
log
@some visual improvments of format2d - colors
@
text
@d16 1
d18 4
d32 1
@


1.3
log
@visual re-fix
@
text
@d22 7
a28 1
function emptyBin(EID) {if (Bin) Bin.value = ''}
d30 5
a34 1
function setSelf(EID) {TargeT = EID; Bin=EID;}
d53 1
a53 1
NID.ondblclick();
@


1.2
log
@elements handling changes, format2d colors changes
@
text
@d12 7
@


1.1
log
@format2d color tab implemented
@
text
@d3 10
d43 1
a43 1
for (i in colors) { document.getElementById(colors[i]).value = rgb[i]; }
@


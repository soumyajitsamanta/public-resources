head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2004.03.04.14.43.16;	author jiri_schmid;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.20.12.41.12;	author jiri_schmid;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.04.12.52.53;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.05.15.47.57;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.16.14.37.53;	author jiri_schmid;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.15.10.46.12;	author jiri_schmid;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.28.09.26.16;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.26.15.35.45;	author jiri_schmid;	state Exp;
branches;
next	;


desc
@@


1.8
log
@fixing bugs and improving useability and performance
@
text
@// $Id: rights.js,v 1.7 2004/02/20 12:41:12 jiri_schmid Exp $
function checkCouple(EID){
var name = (EID.name.match(/^A/)) ? EID.name.replace(/./,"D") : EID.name.replace(/./,"A");
var pole = document.getElementsByName(name);
if (pole.length == 1) {
		pole.item(0).checked = false;
	}
object_changed();
}


function selfRemove(EID){
EID = EID.parentNode;
var table = EID.parentNode;
table.deleteRow(EID.rowIndex);
object_changed();
}

function setAll(name) {
for (var i=0;i<roles.length;i++) {
	set("include"+roles[i],'checked','checked');
}
}


function removeRights() { 
document.getElementById('prava').value = 1;
document.getElementById('Remove').value = 1;
document.getElementById('save').click();
show_load();
}


function setPreviusPage() {
if (deniedQuit('treeInfQ')) {
	document.getElementById('prava').value = 0;
	parent.frames["tree_iframe"].editType = parent.frames["tree_iframe"].oldType;
	object_cleared();
	show_load();
	return true
}
return false
}

function setRightsPage() {
parent.frames["tree_iframe"].oldType = parent.frames["tree_iframe"].editType;
parent.frames["tree_iframe"].editType = 'Ro';
show_load();
}

function dropRights(EID,Typ) {
var rgxp = new RegExp(Typ+dragLocator.id);
if (EID.innerHTML.match(rgxp)) return;
var even = (EID.rows.length%2 == 1) ? 'even' : '';
var newRow = EID.insertRow(EID.rows.length);
newRow.className = even;
var role = String(dragLocator.name).match(/^[^\|]*/);
var checkCntn;
var hlp;
var node = findItemById(dragLocator.id);
var rghtStr = String(node[4]);
if (Typ == 'A') {	//drop into allow table
	rgxp = new RegExp('D'+dragLocator.id); //oposite rights
	hlp = document.getElementById('denyRights'); //get EID of deny table
	checkCntn = (hlp.innerHTML.match(rgxp)) ? new Array(false,role,'-','-','-','-','-') : new Array(false,role,'R','W','E','D','C'); // oposite right is presented, do not set any rights
} else {
	rgxp = new RegExp('A'+dragLocator.id);	//droped role
	hlp = document.getElementById('allowRights'); //get EID of allow table
	if (hlp.innerHTML.match(rgxp)) {
		checkCntn = new Array(false,role,'-','-','-','-','-')
	} else {	//reverse rights for deny list
		checkCntn = new Array(false,role); // oposite right is presented, do not set any rights
		var help = new Array ('R','W','E','D','C');
		for (var i in help) {
			rgxp = new RegExp(help[i]);
			if (rghtStr.match(rgxp)) {
				checkCntn.push('-');
			} else {
				checkCntn.push('');
			}
		}
	}
}

var content = new Array(false,role,'R','W','E','D','C');
for (var i=0; i<6; i++) {
	newCell = newRow.insertCell(i);
	switch (i) {
		case 0: newCell.onclick = function() { selfRemove(this) };
			newCell.className = 'cursor';
			var path = (document.getElementById('skin').value) ? "skins/"+document.getElementById('skin').value+"/" : "";
			newCell.innerHTML = "<img src='"+path+"img/drop.png' />";
			break;
		case 1:	var check = (rghtStr.match(/C/)) ? "checked='checked'" : "";
			newCell.innerHTML = content[i]+"<input type='hidden' name='"+Typ+dragLocator.id+"' value='"+node[5]+"'/><input type='checkbox' style='display:none' name='"+Typ+dragLocator.id+"C' "+check+"/>";
			break;
		default:newCell.style.textAlign = 'center';
			rgxp = new RegExp(checkCntn[i]); //check for proper rights
			var check = (rghtStr.match(rgxp)) ? "checked='checked'" : "";
			newCell.innerHTML = "<input type='checkbox' onclick='checkCouple(this)' name='"+Typ+dragLocator.id+content[i]+"' "+check+"/>";
			break;
	}
}

object_changed();
}

function removeRights(what) { 
document.getElementById('prava').value = 1;
document.getElementById('Remove').value = what;
document.getElementById('save').click();
show_load();
}
@


1.7
log
@rights for edit page finished
@
text
@d1 1
a1 1
// $Id: rights.js,v 1.6 2003/12/04 12:52:53 jiri_schmid Exp $
d61 1
d76 1
a76 1
			if (String(node[5]).match(rgxp)) {
d94 1
a94 1
		case 1:	var check = (String(node[5]).match(/C/)) ? "checked='checked'" : "";
d99 1
a99 1
			var check = (String(node[5]).match(rgxp)) ? "checked='checked'" : "";
@


1.6
log
@img type changes implemented into javascript
@
text
@d1 1
a1 1
// $Id: rights.js,v 1.5 2003/11/05 15:47:57 jiri_schmid Exp $
d60 5
a64 4
if (Typ == 'A') {
	rgxp = new RegExp('D'+dragLocator.id);
	hlp = document.getElementById('denyRights');
	checkCntn = (hlp.innerHTML.match(rgxp)) ? new Array(false,role,'x','x','x','x') : new Array(false,role,'R...','.W..','..E.','...D');
d66 16
a81 3
	rgxp = new RegExp('A'+dragLocator.id);
	hlp = document.getElementById('allowRights');
	checkCntn = (hlp.innerHTML.match(rgxp)) ? new Array(false,role,'x','x','x','x') : new Array(false,role,'-...','.-..','..-.','...-');
d84 1
a84 2
var content = new Array(false,role,'R','W','E','D');
var node = findItemById(dragLocator.id);
a89 1
			//var imgType = document.getElementById('imgType').value;
a90 1
			//newCell.innerHTML = "<img src='"+path+"img/drop."+imgType+"' />";
d93 2
a94 1
		case 1:	newCell.innerHTML = content[i]+"<input type='hidden' name='"+Typ+dragLocator.id+"' value='"+node[5]+"'/>";
d97 1
a97 1
			rgxp = new RegExp(checkCntn[i]);
d100 1
a100 1
			break
d103 1
@


1.5
log
@minor javascript improvments and fixies
@
text
@d1 1
a1 1
// $Id: rights.js,v 1.4 2003/09/16 14:37:53 jiri_schmid Exp $
d77 1
a77 1
			var imgType = document.getElementById('imgType').value;
d79 2
a80 1
			newCell.innerHTML = "<img src='"+path+"img/drop."+imgType+"' />";
@


1.4
log
@rights page user improvments, unbelieveble IE bug fixed
@
text
@d1 1
a1 1
// $Id: rights.js,v 1.3 2003/09/15 10:46:12 jiri_schmid Exp $
d58 12
a69 1
var checkCntn = (Typ == 'A') ? new Array(false,role,'R...','.W..','..E.','...D') : new Array(false,role,'-...','.-..','..-.','...-') ;
@


1.3
log
@acl changes implemented
@
text
@d1 10
a10 1
// $Id: rights.js,v 1.2 2003/08/28 09:26:16 jiri_schmid Exp $
d27 1
a27 1
document.getElementById('Rights').value = 1;
d36 1
a36 1
	document.getElementById('Rights').value = 0;
d58 1
d65 1
d73 1
a73 1
			rgxp = new RegExp(content[i]);
d75 1
a75 1
			newCell.innerHTML = "<input type='checkbox' name='"+Typ+dragLocator.id+content[i]+"' "+check+"/>";
d83 1
a83 1
document.getElementById('Rights').value = 1;
@


1.2
log
@tabs.cgi speed improvmnet, visual improvment on trees, rights and some other minor improvments
@
text
@d1 8
a8 1
// $Id: rights.js,v 1.1 2003/08/26 15:35:45 jiri_schmid Exp $
d42 2
a43 2
function dropRights(EID) {
var rgxp = new RegExp("include"+dragLocator.id);
d49 2
a50 1
var content = new Array(dragLocator.id,role,'R','W','E','D');
d54 4
a57 2
		case 0:	newCell.style.textAlign = 'center';
			newCell.innerHTML = "<input type='checkbox' id='include"+content[i]+"' name='include"+content[i]+"'/>";
d59 1
a59 1
		case 1:	newCell.innerHTML = content[i]+"<input type='hidden' name='"+dragLocator.id+"' value='"+allRoles[dragLocator.id]+"'/>";
d63 2
a64 2
			var check = (allRoles[dragLocator.id].match(rgxp)) ? "checked='checked'" : "";
			newCell.innerHTML = "<input type='checkbox' name='"+dragLocator.id+content[i]+"' id='"+dragLocator.id+content[i]+"' "+check+"/>";
d71 1
a71 1
function removeRights() { 
d73 1
a73 1
document.getElementById('Remove').value = 1;
@


1.1
log
@rights improvment, create delete duplicate rule implemented
@
text
@d1 1
a1 1
// $Id:  $
d9 9
d19 8
a26 3
document.getElementById('Rights').value = 0;
parent.frames["tree_iframe"].editType = parent.frames["tree_iframe"].oldType;
show_load();
d35 24
a58 2
function dropRights() {
return
@


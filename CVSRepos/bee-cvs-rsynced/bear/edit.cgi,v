head	1.116;
access;
symbols;
locks; strict;
comment	@# @;


1.116
date	2004.05.06.03.21.58;	author vasekd;	state Exp;
branches;
next	1.115;

1.115
date	2004.04.30.13.11.57;	author vasekd;	state Exp;
branches;
next	1.114;

1.114
date	2004.04.28.12.41.11;	author vasekd;	state Exp;
branches;
next	1.113;

1.113
date	2004.04.26.18.08.40;	author vasekd;	state Exp;
branches;
next	1.112;

1.112
date	2004.04.23.13.04.25;	author vacula;	state Exp;
branches;
next	1.111;

1.111
date	2004.04.20.14.25.30;	author vacula;	state Exp;
branches;
next	1.110;

1.110
date	2004.04.16.16.10.36;	author vacula;	state Exp;
branches;
next	1.109;

1.109
date	2004.04.09.07.04.07;	author michald;	state Exp;
branches;
next	1.108;

1.108
date	2004.02.24.10.21.34;	author jiri_schmid;	state Exp;
branches;
next	1.107;

1.107
date	2004.02.20.12.41.02;	author jiri_schmid;	state Exp;
branches;
next	1.106;

1.106
date	2004.02.18.16.19.06;	author jiri_schmid;	state Exp;
branches;
next	1.105;

1.105
date	2004.02.16.14.55.19;	author jiri_schmid;	state Exp;
branches;
next	1.104;

1.104
date	2004.02.13.17.09.33;	author jiri_schmid;	state Exp;
branches;
next	1.103;

1.103
date	2004.02.10.16.17.45;	author jiri_schmid;	state Exp;
branches;
next	1.102;

1.102
date	2004.02.10.14.46.54;	author jiri_schmid;	state Exp;
branches;
next	1.101;

1.101
date	2003.12.04.14.30.09;	author jiri_schmid;	state Exp;
branches;
next	1.100;

1.100
date	2003.11.27.16.40.57;	author jiri_schmid;	state Exp;
branches;
next	1.99;

1.99
date	2003.11.20.16.34.03;	author jiri_schmid;	state Exp;
branches;
next	1.98;

1.98
date	2003.11.07.16.50.50;	author jiri_schmid;	state Exp;
branches;
next	1.97;

1.97
date	2003.11.07.13.40.43;	author jiri_schmid;	state Exp;
branches;
next	1.96;

1.96
date	2003.11.05.10.44.47;	author jiri_schmid;	state Exp;
branches;
next	1.95;

1.95
date	2003.10.31.12.47.54;	author jiri_schmid;	state Exp;
branches;
next	1.94;

1.94
date	2003.10.16.14.08.51;	author jiri_schmid;	state Exp;
branches;
next	1.93;

1.93
date	2003.10.13.14.43.16;	author jiri_schmid;	state Exp;
branches;
next	1.92;

1.92
date	2003.10.01.15.29.37;	author jiri_schmid;	state Exp;
branches;
next	1.91;

1.91
date	2003.09.15.13.04.03;	author jiri_schmid;	state Exp;
branches;
next	1.90;

1.90
date	2003.09.01.12.40.05;	author jiri_schmid;	state Exp;
branches;
next	1.89;

1.89
date	2003.08.26.15.35.41;	author jiri_schmid;	state Exp;
branches;
next	1.88;

1.88
date	2003.08.25.15.09.09;	author jiri_schmid;	state Exp;
branches;
next	1.87;

1.87
date	2003.08.19.13.05.55;	author jiri_schmid;	state Exp;
branches;
next	1.86;

1.86
date	2003.08.12.14.09.45;	author jiri_schmid;	state Exp;
branches;
next	1.85;

1.85
date	2003.08.11.13.50.25;	author jiri_schmid;	state Exp;
branches;
next	1.84;

1.84
date	2003.08.01.15.24.41;	author jiri_schmid;	state Exp;
branches;
next	1.83;

1.83
date	2003.08.01.15.18.27;	author jiri_schmid;	state Exp;
branches;
next	1.82;

1.82
date	2003.07.31.12.15.58;	author jiri_schmid;	state Exp;
branches;
next	1.81;

1.81
date	2003.07.29.12.28.26;	author jiri_schmid;	state Exp;
branches;
next	1.80;

1.80
date	2003.07.18.10.50.59;	author jiri_schmid;	state Exp;
branches;
next	1.79;

1.79
date	2003.07.11.16.00.49;	author jiri_schmid;	state Exp;
branches;
next	1.78;

1.78
date	2003.07.08.07.12.02;	author jiri_schmid;	state Exp;
branches;
next	1.77;

1.77
date	2003.07.07.14.17.10;	author jiri_schmid;	state Exp;
branches;
next	1.76;

1.76
date	2003.07.04.14.29.27;	author jiri_schmid;	state Exp;
branches;
next	1.75;

1.75
date	2003.05.30.09.13.25;	author jiri_schmid;	state Exp;
branches;
next	1.74;

1.74
date	2003.05.29.08.18.59;	author jiri_schmid;	state Exp;
branches;
next	1.73;

1.73
date	2003.05.28.15.44.11;	author jiri_schmid;	state Exp;
branches;
next	1.72;

1.72
date	2003.05.28.15.18.32;	author jiri_schmid;	state Exp;
branches;
next	1.71;

1.71
date	2003.05.28.07.34.14;	author jiri_schmid;	state Exp;
branches;
next	1.70;

1.70
date	2003.05.27.14.12.05;	author jiri_schmid;	state Exp;
branches;
next	1.69;

1.69
date	2003.05.26.15.01.23;	author jiri_schmid;	state Exp;
branches;
next	1.68;

1.68
date	2003.05.21.11.39.42;	author jiri_schmid;	state Exp;
branches;
next	1.67;

1.67
date	2003.05.19.14.18.21;	author jiri_schmid;	state Exp;
branches;
next	1.66;

1.66
date	2003.05.16.11.28.22;	author jiri_schmid;	state Exp;
branches;
next	1.65;

1.65
date	2003.05.15.13.47.32;	author jiri_schmid;	state Exp;
branches;
next	1.64;

1.64
date	2003.05.15.12.01.27;	author jiri_schmid;	state Exp;
branches;
next	1.63;

1.63
date	2003.05.13.15.18.56;	author jiri_schmid;	state Exp;
branches;
next	1.62;

1.62
date	2003.05.07.14.44.57;	author jiri_schmid;	state Exp;
branches;
next	1.61;

1.61
date	2003.05.07.13.11.47;	author jiri_schmid;	state Exp;
branches;
next	1.60;

1.60
date	2003.05.05.06.41.42;	author michald;	state Exp;
branches;
next	1.59;

1.59
date	2003.05.01.12.17.12;	author michald;	state Exp;
branches;
next	1.58;

1.58
date	2003.04.30.14.45.39;	author jiri_schmid;	state Exp;
branches;
next	1.57;

1.57
date	2003.04.28.07.39.37;	author jiri_schmid;	state Exp;
branches;
next	1.56;

1.56
date	2003.04.25.14.30.54;	author jiri_schmid;	state Exp;
branches;
next	1.55;

1.55
date	2003.04.25.11.27.19;	author jiri_schmid;	state Exp;
branches;
next	1.54;

1.54
date	2003.04.23.15.09.53;	author jiri_schmid;	state Exp;
branches;
next	1.53;

1.53
date	2003.04.23.14.38.57;	author jiri_schmid;	state Exp;
branches;
next	1.52;

1.52
date	2003.04.18.13.22.10;	author jiri_schmid;	state Exp;
branches;
next	1.51;

1.51
date	2003.04.16.11.18.05;	author jiri_schmid;	state Exp;
branches;
next	1.50;

1.50
date	2003.04.14.15.11.47;	author jiri_schmid;	state Exp;
branches;
next	1.49;

1.49
date	2003.04.14.11.05.53;	author jiri_schmid;	state Exp;
branches;
next	1.48;

1.48
date	2003.03.25.15.37.34;	author jiri_schmid;	state Exp;
branches;
next	1.47;

1.47
date	2003.03.24.12.17.43;	author jiri_schmid;	state Exp;
branches;
next	1.46;

1.46
date	2003.03.14.09.23.43;	author jiri_schmid;	state Exp;
branches;
next	1.45;

1.45
date	2003.03.12.16.32.43;	author jiri_schmid;	state Exp;
branches;
next	1.44;

1.44
date	2003.03.11.16.17.05;	author jiri_schmid;	state Exp;
branches;
next	1.43;

1.43
date	2003.03.11.10.01.29;	author jiri_schmid;	state Exp;
branches;
next	1.42;

1.42
date	2003.03.10.16.13.54;	author jiri_schmid;	state Exp;
branches;
next	1.41;

1.41
date	2003.03.10.10.28.36;	author jiri_schmid;	state Exp;
branches;
next	1.40;

1.40
date	2003.03.07.16.18.34;	author jiri_schmid;	state Exp;
branches;
next	1.39;

1.39
date	2003.03.06.15.52.13;	author jiri_schmid;	state Exp;
branches;
next	1.38;

1.38
date	2003.03.06.14.48.56;	author jiri_schmid;	state Exp;
branches;
next	1.37;

1.37
date	2003.03.04.15.35.51;	author spanhel;	state Exp;
branches;
next	1.36;

1.36
date	2003.03.04.10.19.13;	author spanhel;	state Exp;
branches;
next	1.35;

1.35
date	2003.03.03.16.43.56;	author jiri_schmid;	state Exp;
branches;
next	1.34;

1.34
date	2003.02.26.14.48.06;	author jiri_schmid;	state Exp;
branches;
next	1.33;

1.33
date	2003.02.26.13.21.32;	author jiri_schmid;	state Exp;
branches;
next	1.32;

1.32
date	2003.02.25.09.18.00;	author jiri_schmid;	state Exp;
branches;
next	1.31;

1.31
date	2003.02.24.15.31.09;	author jiri_schmid;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.21.13.33.41;	author jiri_schmid;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.19.16.06.47;	author jiri_schmid;	state Exp;
branches;
next	1.28;

1.28
date	2003.02.19.13.11.12;	author jiri_schmid;	state Exp;
branches;
next	1.27;

1.27
date	2003.02.17.16.16.53;	author jiri_schmid;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.17.09.58.18;	author jiri_schmid;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.06.12.57.51;	author jiri_schmid;	state Exp;
branches;
next	1.24;

1.24
date	2003.01.30.12.50.41;	author jiri_schmid;	state Exp;
branches;
next	1.23;

1.23
date	2003.01.30.06.36.20;	author michald;	state Exp;
branches;
next	1.22;

1.22
date	2003.01.27.10.12.06;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.26.14.16.27;	author michald;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.24.16.34.22;	author jiri_schmid;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.23.16.43.01;	author spanhel;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.23.09.47.23;	author spanhel;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.20.18.23.45;	author spanhel;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.16.17.20.19;	author spanhel;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.26.12.44.36;	author spanhel;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.26.08.08.29;	author michald;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.22.16.15.40;	author spanhel;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.12.10.25.53;	author spanhel;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.10.17.17.27;	author michald;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.08.07.15.01;	author michald;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.07.16.32.35;	author spanhel;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.04.05.53.53;	author michald;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.02.09.17.01;	author michald;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.01.13.20.43;	author spanhel;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.01.11.49.38;	author spanhel;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.25.15.05.20;	author spanhel;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.25.14.03.18;	author spanhel;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.23.11.17.36;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.05.17.35.13;	author michald;	state Exp;
branches;
next	;


desc
@@


1.116
log
@fixed many bugs in difinition of new format
@
text
@#!/usr/bin/perl
#-----------------------------------------------------
#  Edit Object Form
#-----------------------------------------------------
# $Id: edit.cgi,v 1.115 2004/04/30 13:11:57 vasekd Exp $

use strict;
my $run_mod_perl = defined(&Apache::RequestRec::BINMODE);	# are we running under mod_perl?
if ($run_mod_perl) { Apache::RequestRec::BINMODE(':utf8') } else { binmode STDOUT,':utf8' }

use CGI qw( :standard );
use CGI::Pretty;
use XML::Simple;
require "const/Const.pm";
require "local/Local.pm";

# ---- init SOAP ---------
#-------------------------
our $load = 1;
if ($load) {	# ensure require will be performed only once in case of mod_perl execution
	eval "use SOAP::Lite +autodispatch => 
		uri => 'Bear', 
		proxy => ['http://$Const::bearHost:$Const::bearPort/', 
		options => {compress_threshold => $Const::compressThreshold}]; 
		1"
	or ( &Local::ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
	undef $load;
}
my $q = new CGI;

# --- test SOAP connection ---
#-----------------------------
my $serverVerbName="SOAP Server http://$Const::bearHost:$Const::bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	&Local::ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

# --- determine user and his preferences ---
#-------------------------------------------
my $use_lang = ($q->param('Lang')) ? $q->param('Lang') : "en";
my $use_enc = $Const::languages->{$use_lang}->{enc};
my $all_params = "Lang=".$q->param('Lang')."&Cook=".$q->param('Cook')."&Open=".$q->param('Open')."&Proj=".$q->param('Proj')."&Skin=".$q->param('Skin');
my $projectName = $q->param('Proj');
my $width = $q->param('Width');
$width = 10 if $width<10;
$width = 50 if $width>50;
my $ID = $q->param('item_id');
my $thirdLeft = 100-$width;
my $dropWidth = $thirdLeft-$width;
my $user = $q->remote_user() ? $q->remote_user() : 'anonymous';
my $skin = $q->param('Skin');
my ($skinPath,$style);
if ($skin) {
	$skinPath = "skins/$skin/";
	$style = "skins/$skin/css.css";
} else {
	$style = "css.css";
}

# --- load message dictionary ---
#---------------------------------
require "lang/$use_lang.utf";


# --- start of page ---
print $q->header(-charset=>$use_enc);

print $q->start_html(
	-title=>"Edit",
	-lang=>$Const::languages->{$use_lang}{lang},	#return language specification in format: language-country (it differs from param Lang)
	-encoding=>$use_enc,
	-head=>meta({	-http_equiv => 'Content-Type', 
			-content => "text/html; charset=$use_enc" }),
	-style=>{ -src=>"$style" },
	-name=>"Edit",
	-id=>'edit',
	-onload=>'closeRightPane()'
);


my $wrkRtrn = &do_work($q,$use_lang,$user) if $q->param('Action');
my $decide = $q->param('Action') =~ /Confirm|Copy/ ? $wrkRtrn: "item_id=$wrkRtrn";	#when deleting item check dependecy of objects
my @@hlp;
foreach (keys %{$Const::Msg->{$use_lang}}) { push (@@hlp,"$_:'$Const::Msg->{$use_lang}{$_}'") }
my $hlp = join(",",@@hlp);

print <<END;
<script type="text/javascript">var loading=1;var langJS = {$hlp}; var dragObject = {name:"",id:"",icon:"",mg:"",typ:""};var savedAs;</script>
<input type="hidden" value="0" id="changed" />
<input type="hidden" value="$width" id="width" />
<div id="maindiv" class='dragObject' style='visibility:hidden;'><img id="mainimg" src="img/transparentpixel.png" alt="T"></div>
<div class="loading" id="loading"><img src="img/bear_tiny.png">$Const::lang->{$use_lang}->{'Loading'}</div>
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:0px; width:$width%; height: 100%" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&$decide" ></IFRAME>
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:$width%; width:$dropWidth%; height: 100%" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?$all_params" ></IFRAME>
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:$thirdLeft%; width:$width%; height: 100%" name="elements_iframe" id="elements_iframe" src="elements.cgi?$all_params" ></IFRAME>
<script type="text/javascript">
function closeRightPane() {
	if (self.frames['elements_iframe']) {
		if (self.frames['elements_iframe'].document.getElementById('openClose')) {
		self.frames['elements_iframe'].document.getElementById('openClose').onclick(); 
}	}	}
</script>
END
print $q->end_html;

#-----------------------------------------------------

sub do_work {
	my ($cgi,$use_lang,$user) = (shift, shift, shift);
	my $Action=$cgi->param('Action');
	if ($Action eq 'NewGrid') {return &NewObject($cgi->param('Proj'),"/Grids/",$Const::lang->{$use_lang}->{'New Grid'},'grid','main',$user) }
	elsif ($Action eq 'NewGraph3d') {return &NewObject($cgi->param('Proj'),"/Graphs3d/",$Const::lang->{$use_lang}->{'New Graph3d'},'graph3d','main',$user) }
	elsif ($Action eq 'NewFormat3d') {return &NewObject($cgi->param('Proj'),"/Formats3d/",$Const::lang->{$use_lang}->{'New Format3d'},'format3d','main',$user) }
	elsif ($Action eq 'NewFormat2d') {return &NewObject($cgi->param('Proj'),"/Formats2d/",$Const::lang->{$use_lang}->{'New Format2d'},'format2d','main',$user) }
	elsif ($Action eq 'NewFormat2d_map') {return &NewObject($cgi->param('Proj'),"/Formats2d/",$Const::lang->{$use_lang}->{'New Format2d_map'},'format2d','map',$user) }
	elsif ($Action eq 'NewMetric') {return &NewObject($cgi->param('Proj'),"/Metrics/",$Const::lang->{$use_lang}->{'New Metric'},'metric','main',$user) }
	elsif ($Action eq 'NewReport') {return &NewObject($cgi->param('Proj'),"/Reports/",$Const::lang->{$use_lang}->{'New Report'},'report','main',$user) }
	elsif ($Action eq 'NewFilter') {return &NewObject($cgi->param('Proj'),"/Filters/",$Const::lang->{$use_lang}->{'New Filter'},'filter','main',$user) }
	elsif ($Action eq 'NewFormat') {return &NewObject($cgi->param('Proj'),"/Formats/",$Const::lang->{$use_lang}->{'New Format'},'format','main',$user) }
	elsif ($Action eq 'NewParam') {return &NewObject($cgi->param('Proj'),"/Params/",$Const::lang->{$use_lang}->{'New Param'},'param','main',$user) }
	elsif ($Action eq 'Copy') { return &Copy($cgi->param('Item'),$cgi->param('Proj'),$use_lang,$user) }	
	elsif ($Action eq 'Confirm') { return &Drop($cgi->param('Item'),$cgi->param('Proj'),$user) }
}

#---------------------------------------------------

sub Drop {
	my ($itemId,$pr,$user) = (shift,shift,shift); #project name
	if (SOAP->CheckAccess('E',$user,$pr,$itemId,'W') == 2) { #user has to have rights to write to object to erase it
		my $type = SOAP->GetObjectType($itemId);
		return "Msg=Forbidden" if $type =~ /^urole$|^fact$|^attr$/;
		unlink(&Local::TreeFileName($Const::myPath,$pr,$user));
		my @@depend = SOAP->DropMData($pr,$itemId);
		return "Break=".join("~",@@depend);
	} else {
		return "Msg=Rights"
	}
}

#---------------------------------------------------

sub Copy {
	my ($fid,$pr,$use_lang,$user) = (shift,shift,shift,shift);
	return "Msg=IdMiss" if (!$fid);
	if (SOAP->CheckAccess('E',$user,$pr,$fid,'D') == 2) {	#user has to have rights to access page and rights to duplicate object
		my $obj = SOAP->GetMetadata($fid);
		my $objT=(keys %{$obj})[0];	#object type
		my $name=&Local::LocalizedObj($obj->{$objT}->{$fid}->{name}, "Object ~$fid", $use_lang, $Const::defaultLanguage);
		my $new_id;
	
		if ($objT eq 'format') {$new_id = NewObject($pr,"/Formats/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format','main',$user)}
		elsif ($objT eq 'report') {$new_id = NewObject($pr,"/Reports/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'report','main',$user)}
		elsif ($objT eq 'filter') {$new_id = NewObject($pr,"/Filters/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'filter','main',$user)}
		elsif ($objT eq 'metric') {$new_id = NewObject($pr,"/Metrics/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'metric','main',$user)}
		elsif ($objT eq 'grid') {$new_id = NewObject($pr,"/Grids/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'grid','main',$user)}
		elsif ($objT eq 'graph3d') {$new_id = NewObject($pr,"/Graphs3d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'graph3d','main',$user)}
		elsif ($objT eq 'format3d') {$new_id = NewObject($pr,"/Formats3d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format3d','main',$user)}
		elsif ($objT eq 'format2d') {$new_id = NewObject($pr,"/Formats2d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format2d','main',$user)}
		elsif ($objT eq 'format2d_map') {$new_id = NewObject($pr,"/Formats2d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format2d_map','map',$user)}
		elsif ($objT eq 'param') {$new_id = NewObject($pr,"/Params/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'param','main',$user)}
		else { return } #non-duplicateable object
	
		if ($new_id) { 	#copy the old objet $obj into new one $obj_n and save
			unlink(&Local::TreeFileName($Const::myPath,$pr, $user));
 			my $obj_n = SOAP->GetMetadata($new_id);
			my $newName = $obj_n->{$objT}->{$new_id}->{name};
			$obj_n->{$objT}{$new_id} = $obj->{$objT}->{$fid};
			$obj_n->{$objT}{$new_id}->{name} = $newName;
			$obj_n->{$objT}{$new_id}{meta}{creator} = $user;
			$obj_n->{$objT}{$new_id}{meta}{created} = &Local::getTime;
			delete $obj_n->{$objT}{$new_id}{modifier} if exists $obj_n->{$objT}{$new_id}{modifier};
			delete $obj_n->{$objT}{$new_id}{modified} if exists $obj_n->{$objT}{$new_id}{modified};
			my $r=SOAP->SaveMData($obj_n,1);		
		};
	} else {
		return "Msg=Rights"
	}
}
#---------------------------------------------------

sub NewObject {
	my $pr=shift;	# project name
	my $fp=shift;	# path to save, relative to $pr
	my $fn=shift;	# new object name
	my $ft=shift;	# new object type
	my $fst=shift;	# new object subtype
	my $user=shift;
	
	unlink(&Local::TreeFileName($Const::myPath,$pr, $user));
	
	my $fnn=$fn;
	my $fni=0;
	my $mc=100;		# max attempts to find unique name
	my $id=SOAP->NewID();
	my $nob;		# new object
	while ($mc) {
		$nob->{$ft}{$id}{name} = &Local::setLocalizedObj(undef,"$fnn ~$id",'');	#object name
		$nob->{$ft}{$id}{meta}{creator} = $user;
		$nob->{$ft}{$id}{meta}{created} = &Local::getTime;
		$nob->{$ft}{$id}{acl} = "${pr}_all";
		$nob->{$ft}{$id}{subtype} = $fst if $fst ne 'main';
		if ( $ft eq 'format2d') { 	# set default parameters for graphs
			$nob = setDefault2d($nob,$ft,$id,$fst);
		}elsif ($ft eq 'format'){ 	# set default parameters for format
			$nob = setDefaultFormat($nob,$ft,$id);
		}
	
		my $r=SOAP->SaveMData($nob,0,$pr.$fp);	#don't rewrite
		if ($r==-1) {	# filename exists, increment suffix and try again
			$fni++;
			$fnn=$fn.'_'.$fni;
		} elsif (!$r) {	# fail
			print <<END ;
<span class="error">ERROR: Saving Object [$fn] into metadata failed.</span>
<form action="">
<p><input type="submit" value="Continue"></p>
</form></body></html>
END
			die
		} else {	#success
			last
		}
		$mc--;
	};
	
	if (!$mc) {	# fail
		print <<END ;
<span class="error">ERROR: Max count of attempts to find unique Object Name was reached.</span>
<form action="">
<p><input type="submit" value="Continue"></p>
</form></body></html>
END
		die
	}
	return $id
}

#--------------------------------------------------------------

sub setDefault2d {
	my $obj=shift;		# new object name
	my $type=shift;		# new object type
	my $oid=shift;		# new object id
	my $subtype=shift;	# new object subtype
	
			if ( $subtype eq 'main') {
				my $newXML = new XML::Simple();
				my $parameters = $newXML->XMLin("$Const::myPath$Const::graph2Dformats/$Const::graph2DdefaultFormat"); # set default xml file 
				$obj->{$type}{$oid}{type} = $parameters->{type};
				$obj->{$type}{$oid}{form} = $parameters->{form};
				$obj->{$type}{$oid}{base} = $parameters->{base};
				$obj->{$type}{$oid}{layout} = $parameters->{layout};
				$obj->{$type}{$oid}{ax_X} = $parameters->{ax_X};
				$obj->{$type}{$oid}{ax_Y} = $parameters->{ax_Y};
				$obj->{$type}{$oid}{legend} = $parameters->{legend};
				$obj->{$type}{$oid}{entities} = $parameters->{entities};
			}
			elsif ( $subtype eq 'map' ) {
				my $newXML = new XML::Simple();
				my $parameters = $newXML->XMLin("$Const::myPath$Const::graph2Dformats_map/$Const::graph2DdefaultFormat_map"); # set default xml file 
				$obj->{$type}{$oid}{type} = $parameters->{type};
				$obj->{$type}{$oid}{form} = $parameters->{form};
				$obj->{$type}{$oid}{base} = $parameters->{base};
				$obj->{$type}{$oid}{layout} = $parameters->{layout};
				$obj->{$type}{$oid}{legend} = $parameters->{legend};
				$obj->{$type}{$oid}{entities} = $parameters->{entities};
			}
	return $obj;
}

#--------------------------------------------------------------
sub setDefaultFormat {
	my $obj=shift;		# new object name
	my $type=shift;		# new object type
	my $oid=shift;		# new object id
	#my $subtype=shift;	# new object subtype
	$obj->{$type}{$oid}{type} = 'grid';
	$obj->{$type}{$oid}{form} = $oid;
	$obj->{$type}{$oid}{header} = 'noneHeader';	

$obj->{$type}{$oid}{'cssStyle'} ={
 		"table" =>{
 			"align" =>{
 				"horizontal" => 'center',
 			},
			"lines" =>{
				"face" => "solid",
				"width" => "3",
				"color" => "102,102,102"
			},
			"font" =>{
				"face" => "serif",
				"size" => "10",
				"color" => "0,25,25",
				"format" => ""
			}
		},
		"dc" =>{
			"oddodd" =>{
					"bgcolor" => "242,242,123",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "right"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				"oddeven" =>{
					"bgcolor" => "216,216,75",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "right"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				"evenodd" =>{
					"bgcolor" => "160,229,160",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "right"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				"eveneven" =>{
					"bgcolor" => "112,204,112",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "right"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
			},
			
			"lines" =>{
				"horizontal" =>{
					"face" => "solid",
					"width" => "1",
					"color" => "102,102,102"
					},
				"vertical" =>{
					"face" => "dashed",
					"width" => "1",
					"color" => "102,102,102"
				}
			}
		},
		
		"rh" =>{
			"u" =>{
				"oddeven" =>{
					"align" =>{
						"horizontal" => "center"
					},
					"bgcolor" => "112,204,112",
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" => "0,25,25",
						"format" => ""
					}
				},
				"lines" =>{
					"horizontal" =>{
						"face" => "solid",
						"width" => "2",
						"color" => "102,102,102"
					},
					"vertical" =>{
						"face" => "solid",
						"width" => "2",
						"color" => "102,102,102"
					}
				}
 			},
			
			"l" =>{
				"oddodd" =>{
					"bgcolor" => "242,242,123",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "center"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				"oddeven" =>{
					"bgcolor" => "216,216,75",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "center"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				"evenodd" =>{
					"bgcolor" => "160,229,160",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "center"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				"eveneven" =>{
					"bgcolor" => "112,204,112",
					"padding" =>{
						"horizontal" => "0"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"align" =>{
						"horizontal" => "center"
					},
					"font" =>{
						"face" => "serif",
						"size" => "10",
						"color" =>"0,25,25",
						"format" => ""
					}
				},
				
				"lines" =>{
					"horizontal" =>{
						"face" => "solid",
						"width" => "1",
						"color" => "102,102,102"
					},
					"vertical" =>{
						"face" => "solid",
						"width" => "1",
						"color" => "102,102,102"
					}
				}
			}
		},
		"ch" =>{
			"u" =>{
				"even" =>{
					"align" => {
						"horizontal" => "center"
					},
					"padding" =>{
						"horizontal" => "1"
					},
					"margin" =>{
						"horizontal" => "0"
					},
					"bgcolor" => "0,0,125",
					"font" =>{
							"face" => "serif",
							"size" => "10",
							"color" => "204,204,204",
							"format" => ""
					}
				},
				"lines" =>{
					"vertical" =>{
						"face" => "solid",
						"width" => "1",
						"color" => "102,102,102"
					}
				}
 			},
			"l" =>{
				"lines" =>{
					"vertical" =>{
						"face" => "solid",
						"width" => "1",
						"color" => "102,102,102"
					}
				}
 			},
			"m" =>{
				"even" =>{
					"padding" =>{
						"horizontal" => "1"
					},
					"margin" =>{
						"horizontal" => "0"
					}
				},
				"lines" =>{
					"vertical" =>{
						"face" => "solid",
						"width" => "1",
						"color" => "102,102,102"
					}
				}
 			}
		},
		
		"th" =>{
			"align" =>{
					"horizontal" => "center"
			},
			"bgcolor" => "112,204,112",
			"lines" =>{
				"horizontal" =>{
					"face" => "dotted",
						"width" => "1",
						"color" => "102,102,102"
					},
				"vertical" =>{
					"face" => "dotted",
						"width" => "1",
						"color" => "102,102,102"
					},
				},
			"font" =>{
				"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
			}
 		},
		"set" =>{
			"bgcolor" => "255,0,0",
			"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
			}
		}
	};
return $obj;
}

#--------------------------------------------------------------
1
@


1.115
log
@fixed default format
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.114 2004/04/28 12:41:11 vasekd Exp $
d300 71
a370 2
			"align" =>{
				"horizontal" => "right"
d372 1
a383 12
			},
			"bgcolor" =>{
				"oddodd" => "242,242,123",
				"oddeven" => "216,216,75",
				"evenodd" => "160,229,160",
				"eveneven" => "112,204,112"
			},			
			"font" =>{
				"face" => "serif",
				"size" => "10",
				"color" => "0,25,25",
				"format" => ""
d385 1
a385 1
 		},
d389 11
a399 8
				"align" =>{
					"horizontal" => "center"
				},
				"bgcolor" =>{
						"oddodd" => "112,204,112",
						"oddeven" => "112,204,112",
						"evenodd" => "112,204,112",
						"eveneven" => "112,204,112"
d411 1
a411 7
					},
				},
				"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
d414 1
d416 71
a486 8
				"align" =>{
					"horizontal" => "center"
				},
				"bgcolor" =>{
						"oddodd" => "242,242,123",
						"oddeven" => "216,216,75",
						"evenodd" => "160,229,160",
						"eveneven" => "112,204,112"
d488 1
d499 1
a499 7
					},
				},
				"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
d501 1
a501 30
 			},
			"m" =>{
				"align" =>{
					"horizontal" => "center"
				},
				"bgcolor" =>{
						"oddodd" => "112,204,112",
						"oddeven" => "112,204,112",
						"evenodd" => "112,204,112",
						"eveneven" => "112,204,112"
				},
				"lines" =>{
					"horizontal" =>{
						"face" => "solid",
						"width" => "2",
						"color" => "102,102,102"
					},
					"vertical" =>{
						"face" => "dotted",
						"width" => "1",
						"color" => "102,102,102"
					},
				},
				"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
				}
 			}
d505 17
a521 6
				"align" =>{
					"horizontal" => "center"
				},
				"bgcolor" =>{
						"odd" => "112,204,112",
						"even" => "0,0,125"
a523 5
					"horizontal" =>{
						"face" => "solid",
						"width" => "2",
						"color" => "102,102,102"
					},
d528 1
a528 7
					},
				},
				"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "204,204,204",
					"format" => ""
a531 7
				"align" =>{
					"horizontal" => "center"
				},
				"bgcolor" =>{
						"odd" => "112,204,112",
						"even" => "112,204,112"
				},
d533 1
a533 1
					"horizontal" =>{
d537 1
a537 12
					},
					"vertical" =>{
						"face" => "dashed",
						"width" => "1",
						"color" => "102,102,102"
					},
				},
				"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
d541 7
a547 6
				"align" =>{
					"horizontal" => "center"
				},
				"bgcolor" =>{
						"odd" => "112,204,112",
						"even" => "112,204,112"
a549 5
					"horizontal" =>{
						"face" => "solid",
						"width" => "1",
						"color" => "102,102,102"
					},
d554 1
a554 7
					},
				},
				"font" =>{
					"face" => "serif",
					"size" => "10",
					"color" => "0,25,25",
					"format" => ""
d558 1
@


1.114
log
@fixed: create new format
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.113 2004/04/26 18:08:40 vasekd Exp $
d278 4
a281 1
	
@


1.113
log
@new format of table
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.112 2004/04/23 13:04:25 vacula Exp $
d205 2
@


1.112
log
@renamed objects to entities
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.111 2004/04/20 14:25:30 vacula Exp $
d271 261
d533 1
@


1.111
log
@default format for graphs moved to subroutine
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.110 2004/04/16 16:10:36 vacula Exp $
d255 1
a255 1
				$obj->{$type}{$oid}{objects} = $parameters->{objects};
d265 1
a265 1
				$obj->{$type}{$oid}{objects} = $parameters->{objects};
@


1.110
log
@changes for new interface
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.109 2004/04/09 07:04:07 michald Exp $
a202 1

d204 1
a204 22
			if ( $fst eq 'main') {
				my $newXML = new XML::Simple();
				my $parameters = $newXML->XMLin("$Const::myPath$Const::graph2Dformats/$Const::graph2DdefaultFormat"); # set default xml file 
				$nob->{$ft}{$id}{type} = $parameters->{type};
				$nob->{$ft}{$id}{form} = $parameters->{form};
				$nob->{$ft}{$id}{base} = $parameters->{base};
				$nob->{$ft}{$id}{layout} = $parameters->{layout};
				$nob->{$ft}{$id}{ax_X} = $parameters->{ax_X};
				$nob->{$ft}{$id}{ax_Y} = $parameters->{ax_Y};
				$nob->{$ft}{$id}{legend} = $parameters->{legend};
				$nob->{$ft}{$id}{objects} = $parameters->{objects};
			}
			elsif ( $fst eq 'map' ) {
				my $newXML = new XML::Simple();
				my $parameters = $newXML->XMLin("$Const::myPath$Const::graph2Dformats_map/$Const::graph2DdefaultFormat_map"); # set default xml file 
				$nob->{$ft}{$id}{type} = $parameters->{type};
				$nob->{$ft}{$id}{form} = $parameters->{form};
				$nob->{$ft}{$id}{base} = $parameters->{base};
				$nob->{$ft}{$id}{layout} = $parameters->{layout};
				$nob->{$ft}{$id}{legend} = $parameters->{legend};
				$nob->{$ft}{$id}{objects} = $parameters->{objects};
			}
d239 33
@


1.109
log
@Directed Graph visualization for debugging purposes implemented - need to install GraphViz (look at README)
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.108 2004/02/24 10:21:34 jiri_schmid Exp $
d13 1
d112 10
a121 9
	if ($Action eq 'NewGrid') {return &NewObject($cgi->param('Proj'),"/Grids/",$Const::lang->{$use_lang}->{'New Grid'},'grid',$user) }
	elsif ($Action eq 'NewGraph3d') {return &NewObject($cgi->param('Proj'),"/Graphs3d/",$Const::lang->{$use_lang}->{'New Graph3d'},'graph3d',$user) }
	elsif ($Action eq 'NewFormat3d') {return &NewObject($cgi->param('Proj'),"/Formats3d/",$Const::lang->{$use_lang}->{'New Format3d'},'format3d',$user) }
	elsif ($Action eq 'NewFormat2d') {return &NewObject($cgi->param('Proj'),"/Formats2d/",$Const::lang->{$use_lang}->{'New Format2d'},'format2d',$user) }
	elsif ($Action eq 'NewMetric') {return &NewObject($cgi->param('Proj'),"/Metrics/",$Const::lang->{$use_lang}->{'New Metric'},'metric',$user) }
	elsif ($Action eq 'NewReport') {return &NewObject($cgi->param('Proj'),"/Reports/",$Const::lang->{$use_lang}->{'New Report'},'report',$user) }
	elsif ($Action eq 'NewFilter') {return &NewObject($cgi->param('Proj'),"/Filters/",$Const::lang->{$use_lang}->{'New Filter'},'filter',$user) }
	elsif ($Action eq 'NewFormat') {return &NewObject($cgi->param('Proj'),"/Formats/",$Const::lang->{$use_lang}->{'New Format'},'format',$user) }
	elsif ($Action eq 'NewParam') {return &NewObject($cgi->param('Proj'),"/Params/",$Const::lang->{$use_lang}->{'New Param'},'param',$user) }
d152 10
a161 9
		if ($objT eq 'format') {$new_id = NewObject($pr,"/Formats/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format',$user)}
		elsif ($objT eq 'report') {$new_id = NewObject($pr,"/Reports/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'report',$user)}
		elsif ($objT eq 'filter') {$new_id = NewObject($pr,"/Filters/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'filter',$user)}
		elsif ($objT eq 'metric') {$new_id = NewObject($pr,"/Metrics/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'metric',$user)}
		elsif ($objT eq 'grid') {$new_id = NewObject($pr,"/Grids/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'grid',$user)}
		elsif ($objT eq 'graph3d') {$new_id = NewObject($pr,"/Graphs3d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'graph3d',$user)}
		elsif ($objT eq 'format3d') {$new_id = NewObject($pr,"/Formats3d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format3d',$user)}
		elsif ($objT eq 'format2d') {$new_id = NewObject($pr,"/Formats2d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format2d',$user)}
		elsif ($objT eq 'param') {$new_id = NewObject($pr,"/Params/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'param',$user)}
d187 1
d202 27
@


1.108
log
@prefer access and rights logic changed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.107 2004/02/20 12:41:02 jiri_schmid Exp $
d45 2
a47 1
$width = 25 if ($width<10 || $width>50);
d54 2
a55 2
 $skinPath = "skins/$skin/";
 $style = "skins/$skin/css.css";
d57 1
a57 1
 $style = "css.css";
d186 1
a186 1
unlink(&Local::TreeFileName($Const::myPath,$pr, $user));
d203 5
a207 5
                     print <<END ;
		     <span class="error">ERROR: Saving Object [$fn] into metadata failed.</span>
		     <form action="">
		     <p><input type="submit" value="Continue"></p>
		     </form></body></html>
d209 1
a209 1
              	     die
d217 5
a221 5
          print <<END ;
	  <span class="error">ERROR: Max count of attempts to find unique Object Name was reached.</span>
	  <form action="">
	  <p><input type="submit" value="Continue"></p>
	  </form></body></html>
d223 1
a223 1
	  die
@


1.107
log
@rights for edit page finished
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.106 2004/02/18 16:19:06 jiri_schmid Exp $
d42 1
a42 1
my $all_params = "Lang=".$q->param('Lang')."&Cook=".$q->param('Cook')."&Open=".$q->param('Open')."&Proj=".$q->param('Proj')."&sqlA=".$q->param('sqlA')."&Skin=".$q->param('Skin');
@


1.106
log
@rights implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.105 2004/02/16 14:55:19 jiri_schmid Exp $
d80 5
a84 5
my $ID = &do_work(\$q,$use_lang,$user) if $q->param('Action');
my $decide = $q->param('Action') eq 'Confirm' ? "Break=$ID" : "item_id=$ID";	#when deleting item check dependecy of objects
my @@hlp; my $hlp;
foreach my $it_id (keys %{$Const::js->{$use_lang}}) { push (@@hlp,"$it_id|$Const::js->{$use_lang}{$it_id}") }
$hlp = join("|",@@hlp);
d87 1
a87 2
<input type='hidden' value="$hlp" id='lang_js' />
<script type="text/javascript">var loading=1; var dragObject = {name:"",id:"",icon:"",mg:"",typ:""};var savedAs;</script>
d109 12
a120 13
	my $id;
	my $Action=$$cgi->param('Action');
	if ($Action eq 'NewGrid') {$id = NewObject($$cgi->param('Proj'),"/Grids/",$Const::lang->{$use_lang}->{'New Grid'},'grid',$user) }
	elsif ($Action eq 'NewGraph3d') {$id = NewObject($$cgi->param('Proj'),"/Graphs3d/",$Const::lang->{$use_lang}->{'New Graph3d'},'graph3d',$user) }
	elsif ($Action eq 'NewFormat3d') {$id = NewObject($$cgi->param('Proj'),"/Formats3d/",$Const::lang->{$use_lang}->{'New Format3d'},'format3d',$user) }
	elsif ($Action eq 'NewFormat2d') {$id = NewObject($$cgi->param('Proj'),"/Formats2d/",$Const::lang->{$use_lang}->{'New Format2d'},'format2d',$user) }
	elsif ($Action eq 'NewMetric') {$id = NewObject($$cgi->param('Proj'),"/Metrics/",$Const::lang->{$use_lang}->{'New Metric'},'metric',$user) }
	elsif ($Action eq 'NewReport') {$id = NewObject($$cgi->param('Proj'),"/Reports/",$Const::lang->{$use_lang}->{'New Report'},'report',$user) }
	elsif ($Action eq 'NewFilter') {$id = NewObject($$cgi->param('Proj'),"/Filters/",$Const::lang->{$use_lang}->{'New Filter'},'filter',$user) }
	elsif ($Action eq 'NewFormat') {$id = NewObject($$cgi->param('Proj'),"/Formats/",$Const::lang->{$use_lang}->{'New Format'},'format',$user) }
	elsif ($Action eq 'NewParam') {$id = NewObject($$cgi->param('Proj'),"/Params/",$Const::lang->{$use_lang}->{'New Param'},'param',$user) }
	elsif ($Action eq 'Copy') { Copy($$cgi->param('Item'),$$cgi->param('Proj'),$use_lang,$user) }	
	elsif ($Action eq 'Confirm') { Drop($$cgi->param('Item'),$$cgi->param('Proj'),$user) }
d127 1
a127 1
	if (SOAP->CheckAccess('E',$user,$pr,$itemId,'W')) { #user has to have rights to write to object to erase it
d129 1
a129 1
		return $itemId if $type =~ /^urole$|^fact$|^attr$/;
d132 3
a134 1
		return join("~",@@depend);
d142 1
a142 1
	return if (!$fid);
d172 2
@


1.105
log
@security improvment for tabs
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.104 2004/02/13 17:09:33 jiri_schmid Exp $
d129 7
a135 5
	my $type = SOAP->GetObjectType($itemId);
	return $itemId if $type =~ /^urole$|^fact$|^attr$/;
	unlink(&Local::TreeFileName($Const::myPath,$pr,$user));
	my @@depend = SOAP->DropMData($pr,$itemId);
	return join("~",@@depend);
d143 5
a147 4
	my $obj = SOAP->GetMetadata($fid);
	my $objT=(keys %{$obj})[0];	#object type
	my $name=&Local::LocalizedObj($obj->{$objT}->{$fid}->{name}, "Object ~$fid", $use_lang, $Const::defaultLanguage);
	my $new_id;
d149 10
a158 10
	if ($objT eq 'format') {$new_id = NewObject($pr,"/Formats/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format',$user)}
	elsif ($objT eq 'report') {$new_id = NewObject($pr,"/Reports/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'report',$user)}
	elsif ($objT eq 'filter') {$new_id = NewObject($pr,"/Filters/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'filter',$user)}
	elsif ($objT eq 'metric') {$new_id = NewObject($pr,"/Metrics/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'metric',$user)}
	elsif ($objT eq 'grid') {$new_id = NewObject($pr,"/Grids/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'grid',$user)}
	elsif ($objT eq 'graph3d') {$new_id = NewObject($pr,"/Graphs3d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'graph3d',$user)}
	elsif ($objT eq 'format3d') {$new_id = NewObject($pr,"/Formats3d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format3d',$user)}
	elsif ($objT eq 'format2d') {$new_id = NewObject($pr,"/Formats2d/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'format2d',$user)}
	elsif ($objT eq 'param') {$new_id = NewObject($pr,"/Params/",$name.$Const::lang->{$use_lang}->{'New Duplicate'},'param',$user)}
	else { return } #non-duplicateable object
d160 13
a172 12
	if ($new_id) { 	#copy the old objet $obj into new one $obj_n and save
		unlink(&Local::TreeFileName($Const::myPath,$pr, $user));
 		my $obj_n = SOAP->GetMetadata($new_id);
		my $newName = $obj_n->{$objT}->{$new_id}->{name};
		$obj_n->{$objT}{$new_id} = $obj->{$objT}->{$fid};
		$obj_n->{$objT}{$new_id}->{name} = $newName;
		$obj_n->{$objT}{$new_id}{meta}{creator} = $user;
		$obj_n->{$objT}{$new_id}{meta}{created} = &Local::getTime;
		delete $obj_n->{$objT}{$new_id}{modifier} if exists $obj_n->{$objT}{$new_id}{modifier};
		delete $obj_n->{$objT}{$new_id}{modified} if exists $obj_n->{$objT}{$new_id}{modified};
		my $r=SOAP->SaveMData($obj_n,1);		
	};
@


1.104
log
@major tabs control implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.103 2004/02/10 16:17:45 jiri_schmid Exp $
d66 1
a66 1
if (SOAP->CheckAccess('E',$user,$q->param('Proj'))) {
a103 4
} else {
	print $q->start_html(-style=>{ -src=>"$style"});
	&Local::accessForbidden('Edit',$user);
}
@


1.103
log
@fix of new feature: blocking deleting of used object
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.102 2004/02/10 14:46:54 jiri_schmid Exp $
d49 1
a49 1
my $User = $q->remote_user() ? $q->remote_user() : 'anonymous';
d63 1
d66 1
d79 2
a80 1
my $ID = &do_work(\$q,$use_lang,$User) if $q->param('Action');
d97 5
a101 1
function closeRightPane() { if (self.frames['elements_iframe']) self.frames['elements_iframe'].document.getElementById('openClose').onclick(); }
a102 1

d104 4
a107 1

d167 1
a167 1
		$obj_n->{$objT}{$new_id}{meta}{creator} = $User;
@


1.102
log
@mod perl fixies, functionality improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.101 2003/12/04 14:30:09 jiri_schmid Exp $
d77 2
a78 2
my $delete = &do_work(\$q,$use_lang,$User) if $q->param('Action');

d90 1
a90 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:0px; width:$width%; height: 100%" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID&Break=$delete" ></IFRAME>
d123 1
a123 1
	my ($itemId,$pr,$user,) = (shift,shift,shift); #project name
@


1.101
log
@finishing replacing of gif files
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.100 2003/11/27 16:40:57 jiri_schmid Exp $
d77 1
a77 1
$ID = &do_work(\$q,$use_lang,$User) if $q->param('Action');
d90 1
a90 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:0px; width:$width%; height: 100%" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID" ></IFRAME>
d123 1
a123 1
	my ($itemId,$pr,$user) = (shift,shift,shift); #project name
d125 1
a125 1
	return 0 if $type =~ /^urole$|^fact$|^attr$/;
d127 2
a128 1
	SOAP->DropMData($pr,$itemId);
@


1.100
log
@something like drill implemeted
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.99 2003/11/20 16:34:03 jiri_schmid Exp $
d88 2
a89 2
<div id="maindiv" class='dragObject' style='visibility:hidden;'><img id="mainimg" src="img/transparentpixel.gif" alt="T"></div>
<div class="loading" id="loading"><img src="img/bear_tiny.gif">$Const::lang->{$use_lang}->{'Loading'}</div>
@


1.99
log
@fixed naming of unlocalized objects
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.98 2003/11/07 16:50:50 jiri_schmid Exp $
d157 1
a157 1
		$obj_n->{$objT}{$new_id}{meta}{owner} = $User;
d182 1
a182 1
		$nob->{$ft}{$id}{meta}{owner} = $user;
@


1.98
log
@tuning
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.97 2003/11/07 13:40:43 jiri_schmid Exp $
d137 1
a137 1
	my $name=&Local::LocalizedObj($obj->{$objT}->{$fid}->{name}, "Object #$fid", $use_lang, $Const::defaultLanguage);
@


1.97
log
@tested a fixed saving of all objects
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.96 2003/11/05 10:44:47 jiri_schmid Exp $
d125 1
a125 1
	return 0 if $type =~ /^urole$|^fact$|^attr$/;	# !!! anybody can delete any other role
@


1.96
log
@pointers everywhere, reapply of removed fix
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.95 2003/10/31 12:47:54 jiri_schmid Exp $
d124 3
a126 2
	return 0 if $itemId =~ /^${pr}_all$|^${pr}_root$/;	# !!! anybody can delete any other role
unlink(&Local::TreeFileName($Const::myPath,$pr,$user));
@


1.95
log
@mod perl rocks!
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.94 2003/10/16 14:08:51 jiri_schmid Exp $
d77 1
a77 1
$ID = &do_work($q,$use_lang,$User) if $q->param('Action');
d106 12
a117 12
	my $Action=$cgi->param('Action');
	if ($Action eq 'NewGrid') {$id = NewObject($cgi->param('Proj'),"/Grids/",$Const::lang->{$use_lang}->{'New Grid'},'grid',$user) }
	elsif ($Action eq 'NewGraph3d') {$id = NewObject($cgi->param('Proj'),"/Graphs3d/",$Const::lang->{$use_lang}->{'New Graph3d'},'graph3d',$user) }
	elsif ($Action eq 'NewFormat3d') {$id = NewObject($cgi->param('Proj'),"/Formats3d/",$Const::lang->{$use_lang}->{'New Format3d'},'format3d',$user) }
	elsif ($Action eq 'NewFormat2d') {$id = NewObject($cgi->param('Proj'),"/Formats2d/",$Const::lang->{$use_lang}->{'New Format2d'},'format2d',$user) }
	elsif ($Action eq 'NewMetric') {$id = NewObject($cgi->param('Proj'),"/Metrics/",$Const::lang->{$use_lang}->{'New Metric'},'metric',$user) }
	elsif ($Action eq 'NewReport') {$id = NewObject($cgi->param('Proj'),"/Reports/",$Const::lang->{$use_lang}->{'New Report'},'report',$user) }
	elsif ($Action eq 'NewFilter') {$id = NewObject($cgi->param('Proj'),"/Filters/",$Const::lang->{$use_lang}->{'New Filter'},'filter',$user) }
	elsif ($Action eq 'NewFormat') {$id = NewObject($cgi->param('Proj'),"/Formats/",$Const::lang->{$use_lang}->{'New Format'},'format',$user) }
	elsif ($Action eq 'NewParam') {$id = NewObject($cgi->param('Proj'),"/Params/",$Const::lang->{$use_lang}->{'New Param'},'param',$user) }
	elsif ($Action eq 'Copy') { Copy($cgi->param('Item'),$cgi->param('Proj'),$use_lang,$user) }	
	elsif ($Action eq 'Confirm') { Drop($cgi->param('Item'),$cgi->param('Proj'),$user) }
@


1.94
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.93 2003/10/13 14:43:16 jiri_schmid Exp $
d8 2
a9 1
binmode(STDOUT, ':utf8');
d13 2
a14 3
our $q = new CGI;
our $ID;
our $User=$q->remote_user();
d16 21
d38 8
a45 8
require "const.def";
our($StyleSheet,$bearHost,$bearPort,$compress_threshold,%js,$Languages,$lang,$DefaultLanguage);

my $use_lang = (param('Lang')) ? param('Lang') : "EN";
my $use_enc = $Languages->{$use_lang}->{enc};
my $all_params = "Lang=".param('Lang')."&Cook=".param('Cook')."&Open=".param('Open')."&Proj=".param('Proj')."&sqlA=".param('sqlA')."&Skin=".param('Skin');
my $projectName = param('Proj');
my $width = param('Width');
d49 2
a50 2

my $skin = param('Skin');
d59 3
a61 2
require $Languages->{$use_lang}->{'src'};
require "local/local_lib.pl";
a64 1

d67 1
a67 1
	-lang=>$Languages->{$use_lang}->{lang},	#return language specification in format: language-country (it differs from param Lang)
a75 9
if (! $use_lang) {print "<span style=\"color:#f00; font-weight:bold; font-size:20px\">Break! - no user prefernces specified.</span><br/><br/><span><a href=\"index.cgi?TabAct=P\" target=\"_top\">Set and save user preferences first.</a></span></body></html>"; die;};
# --- make SOAP connection ---
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => $compress_threshold}],
	encoding => 'UTF-8';
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
d77 1
a77 5
my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
d79 3
a81 1
&do_work($q) if $q->param('Action');
a82 8
my $it_id;
print "<input type='hidden' value='|";
foreach $it_id (keys %js)
        {
	   print "$it_id"."|"."$js{$it_id}"."|";
        }
print "' id='lang_js'>\n";
# >>>>> item_id - $ID valued only if new item was created, necessary for opening tree where new item was created
d84 1
d89 1
a89 1
<div class="loading" id="loading"><img src="img/bear_tiny.gif">$lang->{'Loading'}</div>
a92 1

d104 2
a105 1
	my($cgi) = @@_;
d107 11
a117 11
	if ($Action eq 'NewGrid') { NewObject($projectName,"/Grids/",$lang->{'New Grid'},'grid') }
	elsif ($Action eq 'NewGraph3d') { NewObject($projectName,"/Graphs3d/",$lang->{'New Graph3d'},'graph3d') }
	elsif ($Action eq 'NewFormat3d') { NewObject($projectName,"/Formats3d/",$lang->{'New Format3d'},'format3d') }
	elsif ($Action eq 'NewFormat2d') { NewObject($projectName,"/Formats2d/",$lang->{'New Format2d'},'format2d') }
	elsif ($Action eq 'NewMetric') { NewObject($projectName,"/Metrics/",$lang->{'New Metric'},'metric') }
	elsif ($Action eq 'NewReport') { NewObject($projectName,"/Reports/",$lang->{'New Report'},'report') }
	elsif ($Action eq 'NewFilter') { NewObject($projectName,"/Filters/",$lang->{'New Filter'},'filter') }
	elsif ($Action eq 'NewFormat') { NewObject($projectName,"/Formats/",$lang->{'New Format'},'format') }
	elsif ($Action eq 'NewParam') { NewObject($projectName,"/Params/",$lang->{'New Param'},'param') }
	elsif ($Action eq 'Copy') { Copy(param('Item')) }
	elsif ($Action eq 'Confirm') { Drop(param('Item')) }
d123 3
a125 3
	my $itemId=shift;	#object id
	my $pr=	SOAP->GetProjectName($itemId); #project name
unlink(main::TreeFileName($pr, $User));
d132 1
a132 1
	my $fid=shift;	#object id
a133 1
	my $pr=	SOAP->GetProjectName($fid); #project name
d136 1
a136 2
	my $lcLang = lc($use_lang);
	my $name=LocalizedObj($obj->{$objT}->{$fid}->{name}, "Object #$ID", $lcLang, $DefaultLanguage);
d139 9
a147 9
	if ($objT eq 'format') {$new_id = NewObject($pr,"/Formats/",$name.$lang->{'New Duplicate'},'format')}
	elsif ($objT eq 'report') {$new_id = NewObject($pr,"/Reports/",$name.$lang->{'New Duplicate'},'report')}
	elsif ($objT eq 'filter') {$new_id = NewObject($pr,"/Filters/",$name.$lang->{'New Duplicate'},'filter')}
	elsif ($objT eq 'metric') {$new_id = NewObject($pr,"/Metrics/",$name.$lang->{'New Duplicate'},'metric')}
	elsif ($objT eq 'grid') {$new_id = NewObject($pr,"/Grids/",$name.$lang->{'New Duplicate'},'grid')}
	elsif ($objT eq 'graph3d') {$new_id = NewObject($pr,"/Graphs3d/",$name.$lang->{'New Duplicate'},'graph3d')}
	elsif ($objT eq 'format3d') {$new_id = NewObject($pr,"/Formats3d/",$name.$lang->{'New Duplicate'},'format3d')}
	elsif ($objT eq 'format2d') {$new_id = NewObject($pr,"/Formats2d/",$name.$lang->{'New Duplicate'},'format2d')}
	elsif ($objT eq 'param') {$new_id = NewObject($pr,"/Params/",$name.$lang->{'New Duplicate'},'param')}
d151 1
a151 1
		unlink(main::TreeFileName($pr, $User));
d157 1
a157 1
		$obj_n->{$objT}{$new_id}{meta}{created} = &getTime;
d170 1
d172 1
a172 2
	
unlink(main::TreeFileName($pr, $User));
d180 3
a182 3
		$nob->{$ft}{$id}{name} = &setLocalizedObj(undef,$fnn." ~".$id,'');	#object name
		$nob->{$ft}{$id}{meta}{owner} = $User;
		$nob->{$ft}{$id}{meta}{created} = &getTime;
a196 1
			$ID=$id;	# set global ID
d211 1
a211 1
	return $id;	
@


1.93
log
@description tab defined under two files, bug fixies
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.92 2003/10/01 15:29:37 jiri_schmid Exp $
d13 3
a15 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $lang $DefaultLanguage);
d18 1
a18 4
require "local_lib.pl";

our $ID;
our $User=$q->remote_user();
d39 2
@


1.92
log
@prompt implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.91 2003/09/15 13:04:03 jiri_schmid Exp $
d178 1
a178 1
		$nob->{$ft}{$id}{name} = &setLocalizedObj(undef,$fnn." #".$id,'');	#object name
@


1.91
log
@code changes and improvments
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.90 2003/09/01 12:40:05 jiri_schmid Exp $
d110 2
a111 1
	elsif ($Action eq 'NewFormat') { NewObject($projectName,"/Formats/",$lang->{'New Format'},'format') }		
d145 1
d181 1
a181 1
		$nob->{$ft}{$id}{acl} = 'all';
@


1.90
log
@skins implemented. mozilla skin - temporarily copy msie content
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.89 2003/08/26 15:35:41 jiri_schmid Exp $
d179 1
@


1.89
log
@rights improvment, create delete duplicate rule implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.88 2003/08/25 15:09:09 jiri_schmid Exp $
d23 1
a23 1
my $all_params = "Lang=".param('Lang')."&Cook=".param('Cook')."&Open=".param('Open')."&Proj=".param('Proj')."&sqlA=".param('sqlA');
a24 2


d30 9
d49 1
a49 1
	-style=>{ -src=>'css.css' },
d73 1
a73 1
print "<input type=\"hidden\" value=\"|";
d78 1
a78 1
print "\" id=\"lang_js\">\n";
d80 1
a80 1
print <<END ;
d88 1
a88 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:$thirdLeft%; width:$width%; height: 100%" name="elements_iframe" id="elements_iframe" src="elements.cgi?Lang=$use_lang" ></IFRAME>
@


1.88
log
@object acl, owner, modifier, datetime creation and modification implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.87 2003/08/19 13:05:55 jiri_schmid Exp $
d145 2
a146 2
		$obj_n->{$objT}{$new_id}{owner} = $User;
		$obj_n->{$objT}{$new_id}{created} = &getTime;
d170 2
a171 2
		$nob->{$ft}{$id}{owner} = $User;
		$nob->{$ft}{$id}{created} = &getTime;
@


1.87
log
@formats2d implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.86 2003/08/12 14:09:45 jiri_schmid Exp $
d143 6
a148 2
		$obj_n->{$objT}->{$new_id} = $obj->{$objT}->{$fid};
		$obj_n->{$objT}->{$new_id}->{name} = $newName;
a168 5
		if ($ft eq 'format') {	#necessary values for format
			$nob->{$ft}{$id}{type} = "grid";
			$nob->{$ft}{$id}{form} = "default";
			$nob->{$ft}{$id}{header} = "none";
		}
d170 2
@


1.86
log
@left pane is colapsible now
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.85 2003/08/11 13:50:25 jiri_schmid Exp $
d99 1
d136 1
@


1.85
log
@admin page drag-drop implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.84 2003/08/01 15:24:41 jiri_schmid Exp $
d75 2
a76 1
<input type="hidden" value="0" id="changed">
@


1.84
log
@micro bug fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.83 2003/08/01 15:18:27 jiri_schmid Exp $
d42 1
a42 1
	-style=>{ -src=>$StyleSheet },		#do not remove, contains sizes of iframes
d76 1
a76 1
<div id="maindiv" style="display:block; visibility:hidden; position:absolute; z-index: 5;" ><img id="mainimg" src="img/transparentpixel.gif" alt="T"></div>
@


1.83
log
@minor improvment and code changes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.82 2003/07/31 12:15:58 jiri_schmid Exp $
d83 1
a83 1
function closeRightPane() { self.frames['elements_iframe'].document.getElementById('openClose').onclick(); }
@


1.82
log
@right pane stage 3
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.81 2003/07/29 12:28:26 jiri_schmid Exp $
d25 2
d31 1
d44 2
a45 1
	-id=>'edit'
d81 5
a86 2
#print $q->Dump();

@


1.81
log
@right frame implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.80 2003/07/18 10:50:59 jiri_schmid Exp $
d70 1
a70 1
<script type="text/javascript">var loading=1; var dragObject = {name:"",id:"",icon:"",mg:""};var savedAs;</script>
@


1.80
log
@format3d implemented, format changed all dependencies fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.79 2003/07/11 16:00:49 jiri_schmid Exp $
d27 2
a28 1
my $dropWidth = 100-$width;
d40 2
a41 1
	-name=>"Edit"
d72 1
a72 2
<div id="maindiv" style="display:block; visibility:hidden; position:absolute; z-index: 5;" >
<img id="mainimg" name="main" src="img/transparentpixel.gif" alt=""></div>
d76 1
@


1.79
log
@graph3d next stage
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.78 2003/07/08 07:12:02 jiri_schmid Exp $
d88 1
d124 1
@


1.78
log
@utf8 implementation in last stage
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.77 2003/07/07 14:17:10 jiri_schmid Exp $
d87 1
a87 1
	elsif ($Action eq 'NewGraph3d') { NewObject($projectName,"/Graphs3d/",$lang->{'New Graph 3d'},'graph3d') }
@


1.77
log
@utf8 may work properly
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.76 2003/07/04 14:29:27 jiri_schmid Exp $
d8 2
a150 1
		$nob->{$ft}->{$id}->{name} = &setLocalizedObj(undef,$fnn." #".$id,'');	#object name
d156 1
@


1.76
log
@utf8 handling fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.75 2003/05/30 09:13:25 jiri_schmid Exp $
a147 1
	
d149 6
a154 1
		$nob->{$ft}->{$id}->{name}= setLocalizedObj(undef,$fnn." #".$id,'');	#object name
@


1.75
log
@minor fixies and code improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.74 2003/05/29 08:18:59 jiri_schmid Exp $
d85 1
d120 1
@


1.74
log
@little bug fix
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.73 2003/05/28 15:44:11 jiri_schmid Exp $
d137 2
@


1.73
log
@control dialog when changing tabs implemnted
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.72 2003/05/28 15:18:32 jiri_schmid Exp $
d66 1
a66 1
<script type="text/javascript">var loading=1; var dragObject = {name:"s",id:"",icon:"",mg:""};var savedAs;</script>
@


1.72
log
@user pref changes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.71 2003/05/28 07:34:14 jiri_schmid Exp $
d67 1
@


1.71
log
@cvs add/remove changes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.70 2003/05/27 14:12:05 jiri_schmid Exp $
d24 1
a24 1
$width = 25 if ($width<10 && $width>50);
@


1.70
log
@implemented setLocalizedObj & LocalizedObj on client side
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.69 2003/05/26 15:01:23 jiri_schmid Exp $
d120 8
a127 7
	unlink(main::TreeFileName($pr, $User));

 	my $obj_n = SOAP->GetMetadata($new_id);
	my $newName = $obj_n->{$objT}->{$new_id}->{name};
	$obj_n->{$objT}->{$new_id} = $obj->{$objT}->{$fid};
	$obj_n->{$objT}->{$new_id}->{name} = $newName;
	my $r=SOAP->SaveMData($obj_n,1);		
a142 1
	my $lcLang = lc($use_lang);
@


1.69
log
@saving under non-selected language implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.68 2003/05/21 11:39:42 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $lang);
d110 1
a110 1
	my $name=$obj->{$objT}->{$fid}->{name}->{$lcLang};
d121 6
a126 1
	CopyObj($fid, $new_id);
d145 1
a145 1
		$nob->{$ft}->{$id}->{name}->{$lcLang} = $fnn." #".$id;	#object name
a177 14

sub CopyObj {
	my $old= shift; # object id already exists
	my $new = shift; # object id of new object
	my $obj_o = SOAP->GetMetadata($old);
 	my $obj_n = SOAP->GetMetadata($new);
	my $type = (keys %{$obj_o})[0];		#object type
	my $newName = $obj_n->{$type}->{$new}->{name};
	$obj_n->{$type}->{$new} = $obj_o->{$type}->{$old};
	$obj_n->{$type}->{$new}->{name} = $newName;
	my $r=SOAP->SaveMData($obj_n,1);		
#	use Data::Dumper;
#        print "<PRE>A".Dumper($obj_n)."</PRE>";
}
@


1.68
log
@visual and code improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.67 2003/05/19 14:18:21 jiri_schmid Exp $
d109 2
a110 1
	my $name=$obj->{$objT}->{$fid}->{name};
d137 2
a138 1

d140 1
a140 1
		$nob->{$ft}->{$id}->{name} = $fnn." #".$id;	#object name
@


1.67
log
@very minor fixies and code improvmetns
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.66 2003/05/16 11:28:22 jiri_schmid Exp $
d23 3
d36 2
a37 5
	-style=>{-src=>$StyleSheet},		#do not remove, contains sizes of iframes
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/dad_drag_only.js'}],
	-name=>"Edit",	
	-onload=>"init_var()",
	-onclick=>'hide_me();return true;'
d70 2
a71 7
<table class="folders" width="100%" border="0"><tr>
<td class="folders">
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:0px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID" ></IFRAME>
</td>
<td class="folders">
  <IFRAME frameborder="0" style="position: absolute; top:0px; left: 250px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?$all_params" ></IFRAME>
</td>
a73 1
print "</tr></table>\n";
@


1.66
log
@report page - save as functionality implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.65 2003/05/15 13:47:32 jiri_schmid Exp $
d70 1
a70 1
<table class="folders" width="100%" border = "0"><tr>
d72 1
a72 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID" ></IFRAME>
d75 1
a75 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left: 264px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?$all_params" ></IFRAME>
a76 1
<td class="folders">
a78 1
print "</td>";
@


1.65
log
@found a fixed bug, code improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.64 2003/05/15 12:01:27 jiri_schmid Exp $
d66 1
a66 1
<script type="text/javascript">var loading=1; var dragObject = {name:"s",id:"",icon:"",mg:""};</script>
d124 2
a125 2
	elsif ($objT eq 'grid') {$new_id = NewObject($pr,"/Grids/",$name.$lang->{'New Duplicate'},'grid')};
	return if (!$new_id); #non-duplicateable object
@


1.64
log
@code improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.63 2003/05/13 15:18:56 jiri_schmid Exp $
d96 2
a97 2
	elsif ($Action eq 'Copy') { Copy($cgi->param('Item')) }
	elsif ($Action eq 'Confirm') { Drop($cgi->param('Item')) }
a114 1
unlink(main::TreeFileName($pr, $User));
d119 9
a127 5
	if ($objT eq 'format') {$new_id = NewObject($pr,"/Formats/",$name.$lang->{'New Duplicate'},'format')};
	if ($objT eq 'report') {$new_id = NewObject($pr,"/Reports/",$name.$lang->{'New Duplicate'},'report')};
	if ($objT eq 'filter') {$new_id = NewObject($pr,"/Filters/",$name.$lang->{'New Duplicate'},'filter')};
	if ($objT eq 'metric') {$new_id = NewObject($pr,"/Metrics/",$name.$lang->{'New Duplicate'},'metric')};	
	if ($objT eq 'grid') {$new_id = NewObject($pr,"/Grids/",$name.$lang->{'New Duplicate'},'grid')};	
d185 4
a188 35
	my $type_o = (keys %{$obj_o})[0];		#object type
	my $data_o = $obj_o->{$type_o}->{$old};	#ptr to main part of data structure
	my $type_n = (keys %{$obj_n})[0];		#object type
	my $data_n = $obj_n->{$type_n}->{$new};	#ptr to main part of data structure
	$data_n->{description}=$data_o->{description};
        my $pok;
	if ($type_n eq 'format') {
		my $graph=$data_o->{graph}->{type};
		my $css=$data_o->{grid}->{css};
   		if ($css ne '') {
			$data_n->{grid}->{css} = $data_o->{grid}->{css};
		}  
		if ($graph ne '') {
			$data_n->{graph}->{type}=$data_o->{graph}->{type};
		}	
	}	
	if ($type_n eq 'filter') {
   		$data_n->{expr}=$data_o->{expr};
	}	
	if ($type_n eq 'metric') {
   		$data_n->{expr}=$data_o->{expr};
		$data_n->{filter}=$data_o->{filter};
		$data_n->{aggr}=$data_o->{aggr};
	}
	if ($type_n eq 'report') {
		$data_n->{filter}=$data_o->{filter};
		$data_n->{format}=$data_o->{format};
		$data_n->{grid}=$data_o->{grid};		
	}
	if ($type_n eq 'grid') {	
		$data_n->{row} = $data_o->{row};
		$data_n->{col} = $data_o->{col};
		$data_n->{page} =$data_o->{page};
		$data_n->{metric} =$data_o->{metric};	# nemely by metriky byt vnoreny do row|col|page ?	
	}	
@


1.63
log
@new report page seems to be fullfunctional, javascript code huge improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.62 2003/05/07 14:44:57 jiri_schmid Exp $
d21 1
a21 1
my $all_params = "Lang=".param('Lang')."&Cook=".param('Cook')."&Open=".param('Open')."&Proj=".param('Proj');;
@


1.62
log
@bug multiple opening tabs fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.61 2003/05/07 13:11:47 jiri_schmid Exp $
d66 2
a67 2
<script type="text/javascript">var loading=1;</script>
<div id="maindiv" style="display:block; visibility:hidden; position:absolute; z-index: 5;" name="">
@


1.61
log
@bug fixies, code improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.60 2003/05/05 06:41:42 michald Exp $
d72 1
a72 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID" frameborder="1"></IFRAME>
d75 1
a75 1
  <IFRAME frameborder="0" style="position: absolute; top:0px; left: 264px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?$all_params" frameborder="1"></IFRAME>
@


1.60
log
@implementation of full localized metadata
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.59 2003/05/01 12:17:12 michald Exp $
d21 1
a21 1
my $all_params = $ENV{QUERY_STRING};
@


1.59
log
@some minor fixes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.58 2003/04/30 14:45:39 jiri_schmid Exp $
a101 7
sub TreeFileName {
	my $pr=shift;	#project name
	return ("./html/$User-$pr.html")
}

#---------------------------------------------------

d105 1
a105 1
unlink(TreeFileName($pr));
d115 1
a115 1
unlink(TreeFileName($pr));
d134 1
a134 1
unlink(TreeFileName($pr));
@


1.58
log
@removing results implemented, minor code improvment
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.57 2003/04/28 07:39:37 jiri_schmid Exp $
a22 1
my $file = $User."-".$projectName;
d69 1
a69 1
<div class="loading" id="loading"><img src="img/bear_tiny2.gif">$lang->{'Loading'}</div>
d91 7
a97 7
	if ($Action eq 'NewGrid') { NewObject("$projectName/Grids/",$lang->{'New Grid'},'grid') }
	elsif ($Action eq 'NewMetric') { NewObject("$projectName/Metrics/",$lang->{'New Metric'},'metric') }
	elsif ($Action eq 'NewReport') { NewObject("$projectName/Reports/",$lang->{'New Report'},'report') }
	elsif ($Action eq 'NewFilter') { NewObject("$projectName/Filters/",$lang->{'New Filter'},'filter') }
	elsif ($Action eq 'NewFormat') { NewObject("$projectName/Formats/",$lang->{'New Format'},'format') }		
	elsif ($Action eq 'Copy') { Copy($cgi,$cgi->param('Item'),$projectName) }
	elsif ($Action eq 'Confirm') { Drop($projectName,$cgi->param('Item')) }
d101 8
a109 1
        my $project=shift;
d111 3
a113 2
unlink("./html/$file.html");
	SOAP->DropMData($project,$itemId);
a118 1
        my $cgi=shift;
d122 1
d127 5
a131 5
	if ($objT eq 'format') {$new_id = NewObject("$pr/Formats/",$name.$lang->{'New Duplicate'},'format')};
	if ($objT eq 'report') {$new_id = NewObject("$pr/Reports/",$name.$lang->{'New Duplicate'},'report')};
	if ($objT eq 'filter') {$new_id = NewObject("$pr/Filters/",$name.$lang->{'New Duplicate'},'filter')};
	if ($objT eq 'metric') {$new_id = NewObject("$pr/Metrics/",$name.$lang->{'New Duplicate'},'metric')};	
	if ($objT eq 'grid') {$new_id = NewObject("$pr/Grids/",$name.$lang->{'New Duplicate'},'grid')};	
d137 2
a138 1
	my $fp=shift;	# path to save
d141 1
a141 1
unlink("./html/$file.html");
d151 1
a151 1
		my $r=SOAP->SaveMData($nob,0,$fp);	#don't rewrite
d183 1
d186 1
a186 1
	my $new = shift; # object id of new
a188 1
unlink("./html/$file.html");
@


1.57
log
@bug erasing cached files fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.56 2003/04/25 14:30:54 jiri_schmid Exp $
d73 1
a73 1
  <IFRAME frameborder="0" style="position: absolute; top:10px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID" frameborder="1"></IFRAME>
d76 1
a76 1
  <IFRAME frameborder="0" style="position: absolute; top: 10px; left: 264px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?$all_params" frameborder="1"></IFRAME>
@


1.56
log
@switching among projects implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.54 2003/04/23 15:09:53 jiri_schmid Exp $
d23 1
d105 1
a105 1
unlink("./html/tree.html");
d133 1
a133 1
unlink("./html/tree.html");
d180 1
a180 1
unlink("./html/tree.html");
@


1.55
log
@switching among projects implemented
@
text
@@


1.54
log
@the tree is generated now on server side in html directory as tree.html
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.53 2003/04/23 14:38:57 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $lang $ProjectName);
d22 1
d72 1
a72 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?$all_params&item_id=$ID" frameborder="1"></IFRAME>
d75 1
a75 1
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?$all_params" frameborder="1"></IFRAME>
d91 7
a97 7
	if ($Action eq 'NewGrid') { NewObject("$ProjectName/Grids/",$lang->{'New Grid'},'grid') }
	elsif ($Action eq 'NewMetric') { NewObject("$ProjectName/Metrics/",$lang->{'New Metric'},'metric') }
	elsif ($Action eq 'NewReport') { NewObject("$ProjectName/Reports/",$lang->{'New Report'},'report') }
	elsif ($Action eq 'NewFilter') { NewObject("$ProjectName/Filters/",$lang->{'New Filter'},'filter') }
	elsif ($Action eq 'NewFormat') { NewObject("$ProjectName/Formats/",$lang->{'New Format'},'format') }		
	elsif ($Action eq 'Copy') { Copy($cgi,$cgi->param('Item'),$ProjectName) }
	elsif ($Action eq 'Confirm') { Drop($ProjectName,$cgi->param('Item')) }
@


1.53
log
@the tree is generated now on server side in html directory as tree.html
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.52 2003/04/18 13:22:10 jiri_schmid Exp $
a89 1
	unlink("./html/tree.html") if ($cgi->param('Action'));
d96 9
a104 1
	elsif ($Action eq 'Confirm') { SOAP->DropMData($ProjectName,$cgi->param('Item')) }
d131 1
d178 1
a178 1

@


1.52
log
@added disk-cache html/ for generated tree/tree.html and loading alert
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.51 2003/04/16 11:18:05 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $lang);
a88 1
	my $Project='StoreDemo';
d90 8
a97 7
	if ($Action eq 'NewGrid') { NewObject("$Project/Grids/",$lang->{'New Grid'},'grid') }
	elsif ($Action eq 'NewMetric') { NewObject("$Project/Metrics/",$lang->{'New Metric'},'metric') }
	elsif ($Action eq 'NewReport') { NewObject("$Project/Reports/",$lang->{'New Report'},'report') }
	elsif ($Action eq 'NewFilter') { NewObject("$Project/Filters/",$lang->{'New Filter'},'filter') }
	elsif ($Action eq 'NewFormat') { NewObject("$Project/Formats/",$lang->{'New Format'},'format') }		
	elsif ($Action eq 'Copy') { Copy($cgi,$cgi->param('Item'),$Project) }
	elsif ($Action eq 'Confirm') { SOAP->DropMData($Project,$cgi->param('Item')) }
@


1.51
log
@id substitution implemented in all of *_ed.pl
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.50 2003/04/14 15:11:47 jiri_schmid Exp $
d65 1
d68 1
@


1.50
log
@minor changes in naming of new objects
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.49 2003/04/14 11:05:53 jiri_schmid Exp $
d109 5
a113 5
	if ($objT eq 'format') {$new_id = NewObject("$pr/Formats/",$name.'(Copy)','format')};
	if ($objT eq 'report') {$new_id = NewObject("$pr/Reports/",$name.'(Copy)','report')};
	if ($objT eq 'filter') {$new_id = NewObject("$pr/Filters/",$name.'(Copy)','filter')};
	if ($objT eq 'metric') {$new_id = NewObject("$pr/Metrics/",$name.'(Copy)','metric')};	
	if ($objT eq 'grid') {$new_id = NewObject("$pr/Grids/",$name.'(Copy)','grid')};	
@


1.49
log
@new item localization implemented, prompt for changing name when saving under server side generated name
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.48 2003/03/25 15:37:34 jiri_schmid Exp $
d130 1
a130 1
		$nob->{$ft}->{$id}->{name} = $fnn;	#object name
@


1.48
log
@syntax checker for metrics imrpoved, loading user pref file when file missing fixed/imrpoved
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.47 2003/03/24 12:17:43 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages);
d89 5
a93 5
	if ($Action eq 'NewGrid') { NewObject("$Project/Grids/",'New Grid','grid') }
	elsif ($Action eq 'NewMetric') { NewObject("$Project/Metrics/",'New Metric','metric') }
	elsif ($Action eq 'NewReport') { NewObject("$Project/Reports/",'New Report','report') }
	elsif ($Action eq 'NewFilter') { NewObject("$Project/Filters/",'New Filter','filter') }
	elsif ($Action eq 'NewFormat') { NewObject("$Project/Formats/",'New Format','format') }		
@


1.47
log
@IE5 bug fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.46 2003/03/14 09:23:43 jiri_schmid Exp $
d19 1
a19 16
# --- make SOAP connection ---
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => $compress_threshold}],
	encoding => 'UTF-8';
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

my $use_lang = param('Lang');
d38 9
d48 5
@


1.46
log
@solved problem with CZ chars, by forced 8bit operating XML-UTF8 files, removed unused images
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.45 2003/03/12 16:32:43 jiri_schmid Exp $
d67 1
a67 1
<img id="mainimg" name="main" src="img/transparentpixel.gif" alt="" ></div>
@


1.45
log
@user prefernce - open result in: implemented
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.44 2003/03/11 16:17:05 jiri_schmid Exp $
d23 2
a24 1
	options => {compress_threshold => $compress_threshold}]; 
@


1.44
log
@fixed wrong calling of index.cgi, some unused variables removed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.43 2003/03/11 10:01:29 jiri_schmid Exp $
a32 1
my $use_cook = param('Cook');
d35 1
d63 1
d69 1
a69 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?Lang=$use_lang&Cookie=$use_cook&item_id=$ID" frameborder="1"></IFRAME>
d72 1
a72 1
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?Lang=$use_lang" frameborder="1"></IFRAME>
@


1.43
log
@unused directories mye be removed, minor language changes for more compatibility
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.42 2003/03/10 16:13:54 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $cookie_path $cookie_exp %js $CharSet $Languages);
@


1.42
log
@charset fixed
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.41 2003/03/10 10:28:36 jiri_schmid Exp $
d44 2
@


1.41
log
@charset test commit
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.40 2003/03/07 16:18:34 jiri_schmid Exp $
a18 3
# --- start of page ---
print $q->header();

d33 6
a38 4
my $ObjPref = SOAP->LoadUserPref($ENV{REMOTE_USER});
my $use_cook = $ObjPref->{'Beard'}->{'cookie'};
my $use_lang = $ObjPref->{'Beard'}->{'language'};
require $Languages->{$use_lang}->{src};
d42 3
a44 5
	-lang=>$Languages->{$use_lang}->{lang},
	-encoding=>$Languages->{$use_lang}->{enc},
	-head=>meta({	-http_equiv => 'Content-Type', 
			-content => "text/html; charset=$Languages->{$use_lang}->{'enc'}"}),
	-style=>{-src=>$StyleSheet},
@


1.40
log
@weekend commit, language not fixed :(
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.39 2003/03/06 15:52:13 jiri_schmid Exp $
d45 2
@


1.39
log
@language files and language options are from now specifed only in const.def
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.38 2003/03/06 14:48:56 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $cookie_path $cookie_exp %js $CharSet);
a14 1
require "const.def";
d20 1
a20 10
print $q->header(-charset=>$CharSet);

print $q->start_html(
	-title=>"Edit",
	-style=>{-src=>$StyleSheet},
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/dad_drag_only.js'}],
	-name=>"Edit",	
	-onload=>"init_var()",
	-onclick=>'hide_me();return true;'
);
a34 1
&do_work($q) if $q->param('Action');
d37 17
a53 2
my $cook = $ObjPref->{'Beard'}->{'cookie'};
my $lang = $ObjPref->{'Beard'}->{'language'};
a61 1
print "<input type=\"hidden\" value=\"0\" id=\"lang_js\">\n";
d67 1
a67 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?Lang=$lang&Cookie=$cook&item_id=$ID" frameborder="1"></IFRAME>
d70 1
a70 2
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?Lang=$lang" frameborder="1"></IFRAME>
</td>
@


1.38
log
@loading and saving user preferneces under its name functional, preferences affects edit.cgi, tabs.cgi and prefer.cgi for now
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.37 2003/03/04 15:35:51 spanhel Exp $
d48 1
a48 1
my $cook = "\"".$ObjPref->{'Beard'}->{'cookie'}."\"";
@


1.37
log
@JavaScript lang localization
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.36 2003/03/04 10:19:13 spanhel Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $cookie_path $cookie_exp $al %js $CharSet);
d15 1
a15 2
if ($al eq 'us') {require 'lang/us.def'}
if ($al eq 'cz') {require 'lang/cz.def'}
a16 1
#our $ID=&SetParam('ID','id');
d47 4
d64 1
a64 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?item_id=$ID" frameborder="1"></IFRAME>
d67 2
a68 1
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi" frameborder="1"> </IFRAME>
@


1.36
log
@added cz localization
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.35 2003/03/03 16:43:56 jiri_schmid Exp $
d50 1
a50 1
print "<input type=\"hidden\" value=\"";
@


1.35
log
@cookie managing improvment for better cooperation with user preferences
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.34 2003/02/26 14:48:06 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName $cookie_path $cookie_exp);
d15 2
d23 1
a23 1
print $q->header;
d49 8
@


1.34
log
@when file dad.js was optimized file dad_drag_only.js arised to be used by edit.cgi a edit_tree.obj only
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.33 2003/02/26 13:21:32 jiri_schmid Exp $
d55 1
a55 1
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop_iframe" id="drop_iframe" src="edit_obj.cgi?item_id=$ID" frameborder="1"> </IFRAME>
@


1.33
log
@huge javascript optimalization, also files moved to directory js
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.32 2003/02/25 09:18:00 jiri_schmid Exp $
d26 1
a26 1
	-script=>[{-language=>'JAVASCRIPT', -src=>'js/dad.js'}],
@


1.32
log
@added checking of unsaved-changed item, when traying to start editing another one
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.31 2003/02/24 15:31:09 jiri_schmid Exp $
d26 1
a26 4
	-script=>[{-language=>'JAVASCRIPT', -src=>'tree2.js'},
		{-language=>'JAVASCRIPT', -src=>'dad.js'},
		{-language=>'JAVASCRIPT', -src=>'DynFunct.js'},
		{-language=>'JAVASCRIPT', -src=>'attr.js'}],
d48 2
a49 2
<div id="maindiv" style="display:block; visibility:hidden; position:absolute; z-index: 5;" name=""></div>
<img id="mainimg" name="main" src="img/transparentpixel.gif" alt="" style="visibility:hidden;">
@


1.31
log
@new bugs just found fixed, some visual changes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.30 2003/02/21 13:33:41 jiri_schmid Exp $
d58 1
a58 1
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop" id="drop_iframe" src="edit_obj.cgi?item_id=$ID" frameborder="1"> </IFRAME>
@


1.30
log
@IE saving ULTRA BUG fixed, hope we fullfunctional on IE v. 5.0 and above| 6.0 tested
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.29 2003/02/19 16:06:47 jiri_schmid Exp $
d80 1
a80 1
	elsif ($Action eq 'Copy') { Copy($cgi,$ID,$Project) }
@


1.29
log
@activating of new items fullfunctional, deleting also
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.28 2003/02/19 13:11:12 jiri_schmid Exp $
d51 1
a51 1
<div id="maindiv" style="display:block; visibility:hidden; position:absolute; z-index: 5;"></div>
d55 1
a55 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" title="X" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?item_id=$ID" frameborder="1"></IFRAME>
@


1.28
log
@opening the new item after its creating almost fullfunctional
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.27 2003/02/17 16:16:53 jiri_schmid Exp $
d16 2
a17 1
our $ID=&SetParam('ID','id');
a47 1

a49 1

d55 1
a55 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" title="X" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi?iID=$ID" frameborder="1"></IFRAME>
d58 1
a58 1
  <IFRAME style="position: absolute; top: 10px; left: 260px;" class="drop" name="drop" id="drop_iframe" src="edit_obj.cgi" frameborder="1"> </IFRAME>
a144 1
	OverRideParam('id',$id,$cookie_path,$cookie_exp);
@


1.27
log
@finally deleting of tree items is woking properly
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.26 2003/02/17 09:58:18 jiri_schmid Exp $
d48 3
d56 1
a56 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" title="X" name="tree_iframe" id="tree_iframe" src="edit_tree.cgi" frameborder="1"></IFRAME>
a63 1
&do_work($q) if $q->param('Action');
@


1.26
log
@added directory for javascript files, deleting items from tree controled by javascipt - tabs.js/check_drop()
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.25 2003/02/06 12:57:51 jiri_schmid Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold $MyName);
d60 1
a60 1

a78 2
	
	elsif ($Action eq 'Drop') { ConfirmDrop($cgi,$ID) }
d80 1
a80 4
	
	elsif ($Action eq 'Confirm') { #if ($cgi->param('OrigAction') eq 'Drop') 
	 { SOAP->DropMData($Project,$ID) }
	}
a101 36
#function replaced by javascript - tabs.js - check_drop(); 2003.02.17 succesfully tested
sub ConfirmDrop {
	my $cgi=shift;
	my $id=shift;	#object id
	return if (!$id);
	my $pr=	SOAP->GetProjectName($id); #project name
	my $obj = SOAP->GetMetadata($id);
	my $objT=(keys %{$obj})[0];	#object type
	my $name=$obj->{$objT}->{$ID}->{name};
	my $desc=$obj->{$objT}->{$ID}->{description};
	print	$cgi->table({-border=>0},
	                    Tr(
			    [
			       td([h3("Delete $objT object from project \"$pr\"?")])			     
			    ]  
			    )			   
			   ),
		$cgi->table({-border=>0},
	                    Tr(
			    [
			       td({-class=>'main'},[h4("Name: \"$name\"")]),
			       td({-class=>'main'},[h4("Description: \"$desc\"")]),			      
			    ]  
			    )			   
			   ),	   
	        $cgi->start_form(-action=>$MyName),
		$cgi->hidden('ID',$id),
		$cgi->hidden('OrigAction',$cgi->param('Action')),
		$cgi->submit(-name=>'Action', -value=>'Confirm'),
		$cgi->submit('Cancel'),
		
		$cgi->end_form();
	exit
}

#---------------------------------------------------
d144 1
@


1.25
log
@some visual and control improvments
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.24 2003/01/30 12:50:41 jiri_schmid Exp $
d29 1
d53 1
a53 1
  <IFRAME style="position: absolute; top:10px; left:10px" class="tree" name="X" id="tree_iframe" src="edit_tree.cgi" frameborder="1"></IFRAME>
d83 2
a84 2
	elsif ($Action eq 'Confirm') { 
		if ($cgi->param('OrigAction') eq 'Drop') { SOAP->DropMData($Project,$ID) }
d107 1
a107 1

@


1.24
log
@Dad.js seems to be working properly
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.23 2003/01/30 06:36:20 michald Exp $
d26 1
a26 1
		{-language=>'JAVASCRIPT', -src=>'attr.js'},
d28 1
a28 1
		{-language=>'JAVASCRIPT', -src=>'dad.js'}],
@


1.23
log
@functionality for saving and retrieving attribute displays and metric groups in grid editor
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.22 2003/01/27 10:12:06 jiri_schmid Exp $
d48 2
a49 1
<img id="mainimg" name="main" style="visibility:hidden; position:absolute; z-index: 5;" src="img/transparentpixel.gif">
@


1.22
log
@previously added bug in dad.js removed, Metric gui improved
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.21 2003/01/26 14:16:27 michald Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort $MyName);
d37 1
a37 1
	options => {compress_threshold => 10000}]; 
a46 13
# --- load Metadata ---
#my $FullObj = SOAP->GetMetadata($ID);


# data dump for debuging
#print $q->Dump;
#my $FullObj = SOAP->GetMetadataSubstPtr2Name($ID);
#our $ObjT = (keys %{$FullObj})[0];		#object type
#our $Obj = $FullObj->{$ObjT}->{$ID};	#ptr to main part of data structure
#$Obj->{description}=~s/\\n/\n/g;	#substitute NL


#<button onclick="getSpecificData()" style="position:absolute; top:0; left:0; z-index: 3;">getSpcifiedData</button>
a58 10
# --- load functions for show and save specific for each particular object type ---
#if ($ObjT eq 'grid') { require 'edit/grid_ed.pl' }
#if ($ObjT eq 'metric') { require 'edit/metric_ed.pl' }
#if ($ObjT eq 'folder') { require 'edit/folder_ed.pl' }   
#if ($ObjT eq 'filter') { require 'edit/filter_ed.pl' }   
#if ($ObjT eq 'format') { require 'edit/format_ed.pl' }
#if ($ObjT eq 'report') { require 'edit/report_ed.pl' }   
#if ($ObjT eq 'attr') { require 'edit/attr_ed.pl' }   
#if ($ObjT eq 'fact') { require 'edit/fact_ed.pl' }   

a59 1
#&print_form($q);	# called from edit/*_ed.pl
a84 21

#sub do_work {
#	my($cgi) = @@_;
#
#	if ($cgi->param('Action') eq 'Save') {
#		($Obj->{name} = $cgi->param('name'))=~s/\n/\\n/g;	#object name
#		($Obj->{description} = $cgi->param('desc'))=~s/\n/\\n/g;	#object description
#		$Obj->{description}=~s/\r//g;
#		&set_next_param($cgi,$Obj);	# called from edit/*_ed.pl
#		use Data::Dumper;
#		print "<PRE>A".Dumper($FullObj)."</PRE>";

#		my $r=SOAP->SaveMData($FullObj,1);
#		if (!$r) {
#			my $n=$cgi->param('name');
#			print <<END ;
#<span class="error">aaaaaERROR: Saving Object [$n] into metadata failed.</span>
#END
#		}
#	}
#}
@


1.21
log
@some small fixes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.20 2003/01/24 16:34:22 jiri_schmid Exp $
d64 1
a64 1
  <IFRAME name="X" id="tree_iframe" class="tree" src="edit_tree.cgi" frameborder="1"></IFRAME>
d67 1
a67 1
  <IFRAME name="drop" id="drop_iframe" class="drop" src="edit_obj.cgi" frameborder="1"> </IFRAME>
@


1.20
log
@minor bugs in dad.js fixed, some visual changes in interfaceoB
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.19 2003/01/23 16:43:01 spanhel Exp $
d59 12
a70 10
print "<img id=\"mainimg\" name=\"main\" style=\"visibility:hidden; position:absolute; z-index: 5;\" src=\"img/transparentpixel.gif\">\n";
print "<button onclick=\"getSpecificData()\" style=\"position:absolute; top:0; left:0; z-index: 3;\">getSpcifiedData</button>\n";
print "<table class=\"folders\" width=\"100%\" border = \"0\"><tr>\n";
print "<td class=\"folders\">\n";
print "<IFRAME name=\"X\" id=\"tree_iframe\" class=\"tree\" src=\"edit_tree.cgi\" frameborder=\"1\"></IFRAME>";
print "</td>\n";
print "<td class=\"folders\">\n";
print "<IFRAME name=\"drop\" id=\"drop_iframe\" class=\"drop\" src=\"edit_obj.cgi\" frameborder=\"1\"> </IFRAME>";
print "</td>\n";
print "<td class=\"folders\">\n";
d132 1
a132 1
#---------------------------------------------------
@


1.19
log
@added object metric in grid_ed.pl
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.18 2003/01/23 09:47:23 spanhel Exp $
d59 2
a60 1
print "<img id=\"mainimg\" name=\"main\" style=\"visibility:hidden; position:absolute; z-index: 5\" src=\"img/transparentpixel.gif\">\n";
d63 1
a63 1
print "<IFRAME name=\"X\" id=\"tree_iframe\" src=\"edit_tree.cgi\" width=\"250\" height=\"500\" scrolling=\"auto\" frameborder=\"1\" style=\"position:absolute; top:10px; left:10px\"> </IFRAME>";
d66 1
a66 1
print "<IFRAME id=\"drop_iframe\" src=\"edit_obj.cgi\" width=\"710\" height=\"500\" scrolling=\"auto\" frameborder=\"1\" style=\"position:absolute; top:10px; left:260px\"> </IFRAME>";
@


1.18
log
@removed ID used by Drag and Drop
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.17 2003/01/20 18:23:45 spanhel Exp $
d59 1
a59 1
print "<img id=\"mainimg\" style=\"visibility:hidden; position:absolute; z-index: 5\" src=\"img/transparentpixel.gif\">\n";
@


1.17
log
@reduce number of tabs
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.16 2003/01/16 17:20:19 spanhel Exp $
d59 1
a59 1
print "<img id=\"mainimg\" style=\"visibility:hidden; position:absolute; z-index: 5\" src=\"img/transparentpixel.gif\">";
d61 1
a61 1
print "<td class=\"folders\">";
d63 2
a64 2
print "</td>";
print "<td class=\"folders\">";
d66 2
a67 4
print "</td>";
print "<td class=\"folders\">";


@


1.16
log
@change edit.cgi - tree and object edit desided into two iframes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.15 2002/11/26 12:44:36 spanhel Exp $
d11 1
a11 1
use vars qw($StyleSheet $bearHost $bearPort);
d49 1
a49 1
my $FullObj = SOAP->GetMetadataSubstPtr2Name($ID);
d53 5
a57 2
#use Data::Dumper;
#print "<PRE>A".Dumper($FullObj)."</PRE>";
d62 1
a62 1
print "<IFRAME name=\"G\" id=\"tree_iframe\" src=\"edit_tree.cgi\" width=\"250\" height=\"500\" scrolling=\"auto\" frameborder=\"1\" style=\"position:absolute; top:10px; left:10px\"> </IFRAME>";
a69 3
our $ObjT = (keys %{$FullObj})[0];		#object type
our $Obj = $FullObj->{$ObjT}->{$ID};	#ptr to main part of data structure
$Obj->{description}=~s/\\n/\n/g;	#substitute NL
d93 56
d150 59
a208 13
	if ($cgi->param('Action') eq 'Save') {
		($Obj->{name} = $cgi->param('name'))=~s/\n/\\n/g;	#object name
		($Obj->{description} = $cgi->param('desc'))=~s/\n/\\n/g;	#object description
		$Obj->{description}=~s/\r//g;
		&set_next_param($cgi,$Obj);	# called from edit/*_ed.pl
		use Data::Dumper;
		print "<PRE>A".Dumper($FullObj)."</PRE>";

		my $r=SOAP->SaveMData($FullObj,1);
		if (!$r) {
			my $n=$cgi->param('name');
			print <<END ;
<span class="error">aaaaaERROR: Saving Object [$n] into metadata failed.</span>
d210 4
d215 11
d227 1
d230 46
a275 1
#---------------------------------------------------
d277 1
@


1.15
log
@two types of format grid and graph
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.14 2002/11/26 08:08:29 michald Exp $
d21 1
d27 4
a30 2
		{-language=>'JAVASCRIPT', -src=>'DynFunct.js'}],
	-onunload=>'set_fid();return true;'
d56 11
d72 8
a79 8
if ($ObjT eq 'grid') { require 'edit/grid_ed.pl' }
if ($ObjT eq 'metric') { require 'edit/metric_ed.pl' }
if ($ObjT eq 'folder') { require 'edit/folder_ed.pl' }   
if ($ObjT eq 'filter') { require 'edit/filter_ed.pl' }   
if ($ObjT eq 'format') { require 'edit/format_ed.pl' }   
if ($ObjT eq 'report') { require 'edit/report_ed.pl' }   
if ($ObjT eq 'attr') { require 'edit/attr_ed.pl' }   
if ($ObjT eq 'fact') { require 'edit/fact_ed.pl' }   
d82 4
a85 1
&print_form($q);	# called from edit/*_ed.pl
d99 3
d106 1
a106 1
<span class="error">ERROR: Saving Object [$n] into metadata failed.</span>
@


1.14
log
@name to ID translation
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.13 2002/11/22 16:15:40 spanhel Exp $
d26 2
a27 2
		{-language=>'JAVASCRIPT', -src=>'DynFunct.js'}]
#,	-onunload=>'set_cookie();return true;'
d49 1
a49 1
print $q->Dump;
@


1.13
log
@object duplicity - fold.cgi
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.12 2002/11/12 10:25:53 spanhel Exp $
d45 2
a46 1
my $obj = SOAP->GetMetadata($ID);
d49 1
a49 1
#print $q->Dump;
d51 1
a51 1
#print "<PRE>A".Dumper($obj)."</PRE>";
d53 2
a54 2
	our $ObjT = (keys %{$obj})[0];		#object type
our $Obj = $obj->{$ObjT}->{$ID};	#ptr to main part of data structure
d82 1
a82 1
		my $r=SOAP->SaveMData($obj,1);		
d84 1
d86 1
a86 1
<span class="error">ERROR: Saving Object [$cgi->param('name')] into metadata failed.</span>
@


1.12
log
@laoding saved metadata + adding and removing _METRICS_ (grid_ed.pl)
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.11 2002/11/10 17:17:27 michald Exp $
d52 1
a52 1
our $ObjT = (keys %{$obj})[0];		#object type
@


1.11
log
@saving object metadata
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.10 2002/11/08 07:15:01 michald Exp $
d48 3
a50 3
print $q->Dump;
use Data::Dumper;
print "<PRE>A".Dumper($obj)."</PRE>";
@


1.10
log
@Grid metadata save
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.9 2002/11/07 16:32:35 spanhel Exp $
d48 3
a50 3
#print $q->Dump;
#use Data::Dumper;
#print "<PRE>A".Dumper($obj)."</PRE>";
@


1.9
log
@additional parametrs - grid_ed.pl
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.8 2002/11/04 05:53:53 michald Exp $
d19 1
d30 1
a30 1

d44 1
d47 1
d52 2
a53 2
our $ObjT = (keys %{$obj})[0];	#object type
our $Obj = $obj->{$ObjT}->{$ID};
d56 1
a56 2
&do_work($q);

d66 3
a68 1
&print_form($q);
d74 1
a74 1
   my($cgi) = @@_;
d76 1
a76 2
   if ($cgi->param('Action') eq 'Save') {
#		my $id=$cgi->param('ID');
d80 1
a80 3
#  !!!! volani fce, z ed frormu 
		&next_param(\$Obj);
#  $Obj->{description} = "sdsd";
d87 1
a87 1
   }
@


1.8
log
@fix of GetMetadata usage
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.7 2002/11/02 09:17:01 michald Exp $
d77 4
a80 1
		my $r=SOAP->SaveMData($obj,1);
@


1.7
log
@fix GetMetadata to be fully reciprocal to SaveMData
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.6 2002/11/01 13:20:43 spanhel Exp $
d73 4
a76 4
		my $id=$cgi->param('ID');
		($obj->{$ObjT}->{$id}->{name} = $cgi->param('name'))=~s/\n/\\n/g;	#object name
		($obj->{$ObjT}->{$id}->{description} = $cgi->param('desc'))=~s/\n/\\n/g;	#object description
		$obj->{$ObjT}->{$id}->{description}=~s/\r//g;
@


1.6
log
@change folder metadata
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.5 2002/11/01 11:49:38 spanhel Exp $
d43 5
a47 1
&do_work($q);
a48 1
my $obj = SOAP->GetMetadata($ID);
d50 1
a50 1
our $Obj = $obj->{$ObjT};
d53 2
a54 1
#print $q->h2("Edit $ObjT \"$Obj->{name}\"");
d57 6
a62 6
if ($ObjT eq 'folder') { require 'edit/folder_ed.pl'}   
if ($ObjT eq 'filter') { require 'edit/filter_ed.pl'}   
if ($ObjT eq 'format') { require 'edit/format_ed.pl'}   
if ($ObjT eq 'report') { require 'edit/report_ed.pl'}   
if ($ObjT eq 'attr') { require 'edit/attr_ed.pl'}   
if ($ObjT eq 'fact') { require 'edit/fact_ed.pl'}   
a64 4
print <<END ;
# vypis objektu <b>"$ObjT"</b>
  vypis stylu <b>"$StyleSheet"</b>
END
a70 2
print $cgi->Dump;
#print "<P>ID=$ID";
d74 4
a77 10
		my $nob=SOAP->GetMetadata($id);		# load original object
use Data::Dumper;
print "<PRE>".Dumper($nob)."</PRE>";
		my $ObjT = (keys %{$obj})[0];	#object type
#		my $objT=$cgi->param('ObjT');
		($nob->{$ObjT}->{$id}->{name} = $cgi->param('name'))=~s/\n/\\n/g;	#object name
		($nob->{$ObjT}->{$id}->{description} = $cgi->param('desc'))=~s/\n/\\n/g;	#object description
		$nob->{$ObjT}->{$id}->{description}=~s/\r//g;
print "<PRE>".Dumper($nob)."</PRE>";
		my $r=SOAP->SaveMData($nob,1);
@


1.5
log
@added dynamic tree for edit html pages, created format_ed.pl (CSS), changed cookie ID (edit.cgi)
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.4 2002/10/25 15:05:20 spanhel Exp $
d71 1
a71 1
#print $cgi->Dump;
a74 1
		my $nob;		# new object
d76 9
a84 6
		my $objT=$cgi->param('ObjT');
		($nob->{$objT}->{$id}->{name} = $cgi->param('name'))=~s/\n/\\n/g;	#object name
		($nob->{$objT}->{$id}->{description} = $cgi->param('desc'))=~s/\n/\\n/g;	#object description
		$nob->{$objT}->{$id}->{description}=~s/\r//g;
		# use Data::Dumper;
		# print "<TT>D".Dumper($nob)."</TT>";
@


1.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.3 2002/10/25 14:03:18 spanhel Exp $
d25 2
a26 3
		{-language=>'JAVASCRIPT', -src=>'DynFunct.js'}],
	-onunload=>'set_cookie();return true;'

d81 2
a82 2
#use Data::Dumper;
#print "<TT>D".Dumper($nob)."</TT>";
@


1.3
log
@edit pages created
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.2 2002/10/23 11:17:36 michald Exp $
d52 1
a52 1
if ($ObjT eq 'grid') { require 'grid_ed.pl' }
@


1.2
log
@minor fixes
@
text
@d5 1
a5 1
# $Id: edit.cgi,v 1.1 2002/10/05 17:35:13 michald Exp $
d21 1
a21 1
	-title=>"Edit Grid",
d27 1
d30 1
d53 7
d62 4
a65 1

@


1.1
log
@struc change of edit window
@
text
@d5 1
a5 1
# $Id$
d45 6
a50 4
my $objT=(keys %{$obj})[0];	#object type
our $Obj = $obj->{$objT};
#print $q->h2("Edit $objT \"$Obj->{name}\"");
if ($objT eq 'grid') { require 'grid_ed.pl' }
d64 14
a77 1

@


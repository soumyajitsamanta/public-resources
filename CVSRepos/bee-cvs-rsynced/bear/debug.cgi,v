head	1.31;
access;
symbols;
locks; strict;
comment	@# @;


1.31
date	2004.05.03.16.22.37;	author michald;	state Exp;
branches;
next	1.30;

1.30
date	2004.04.13.12.42.23;	author michald;	state Exp;
branches;
next	1.29;

1.29
date	2004.04.09.07.04.07;	author michald;	state Exp;
branches;
next	1.28;

1.28
date	2004.02.25.16.05.02;	author jiri_schmid;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.18.16.19.06;	author jiri_schmid;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.13.17.09.33;	author jiri_schmid;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.02.09.13.55;	author michald;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.09.15.29.37;	author michald;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.31.13.45.57;	author jiri_schmid;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.31.12.47.54;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.16.14.08.51;	author jiri_schmid;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.29.05.43.13;	author michald;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.16.14.37.43;	author jiri_schmid;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.01.12.40.04;	author jiri_schmid;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.18.05.50.52;	author michald;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.29.06.52.44;	author michald;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.08.08.24.43;	author jiri_schmid;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.07.07.10.39;	author michald;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.04.06.19.13;	author michald;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.23.08.59.37;	author michald;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.21.16.13.05;	author michald;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.20.08.42.29;	author michald;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.23.06.40.44;	author michald;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.21.08.04.57;	author michald;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.05.06.41.42;	author michald;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.01.15.40.14;	author jiri_schmid;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.01.12.17.12;	author michald;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.30.17.03.35;	author michald;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.07.13.28.11;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.14.09.23.43;	author jiri_schmid;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.11.16.51.01;	author michald;	state Exp;
branches;
next	;


desc
@@


1.31
log
@some fixes from Vlada
@
text
@#!/usr/bin/perl
#-----------------------------------------------------
#  Debug Page
#-----------------------------------------------------
# $Id: debug.cgi,v 1.30 2004/04/13 12:42:23 michald Exp $

use strict;
my $run_mod_perl = defined(&Apache::RequestRec::BINMODE);	# are we running under mod_perl?
if ($run_mod_perl) { Apache::RequestRec::BINMODE(':utf8') } else { binmode STDOUT,':utf8' }

use CGI qw( :standard );
use CGI::Pretty;
use Encode;
use GraphViz;

require "const/Const.pm";
require "local/Local.pm";

use Data::Dumper;

# ---- init SOAP ---------
#-------------------------
our $load = 1;
if ($load) {	# ensure require will be performed only once in case of mod_perl execution
	eval "use SOAP::Lite +autodispatch => 
		uri => 'Bear', 
		proxy => ['http://$Const::bearHost:$Const::bearPort/',
		options => {compress_threshold => $Const::compressThreshold}];
		1"
	or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );
	undef $load;
}
my $q = new CGI;

# --- test SOAP connection ---
#-----------------------------
my $serverVerbName="SOAP Server http://$Const::bearHost:$Const::bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

# --- determine user and his preferences ---
#-------------------------------------------
my $user = $q->remote_user() ? $q->remote_user() : 'anonymous';
my $use_lang = ($q->param('Lang')) ? $q->param('Lang') : $Const::defaultLanguage;
my $use_enc = $Const::languages->{$use_lang}->{enc};

# --- determine skin ---
#-----------------------
my $skin = $q->param('Skin');

# --- print out html form ---
#----------------------------
print $q->header(-charset=>$use_enc);

print $q->start_html(
	-title=>"Debug",
  	-lang=>$Const::languages->{$use_lang}->{lang},	#return language specification in format: language-country (it differs from param Lang)
	-encoding=>$use_enc,
	-head=>meta({ -http_equiv => 'Content-Type', -content => "text/html; charset=$use_enc" }),
	-style=>{-src=>"skins/mozilla/default/css.css"},
);

#*SOAP::Serializer::as_string = \&SOAP::XMLSchema1999::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
#*SOAP::Deserializer::as_string = \&SOAP::XMLSchema1999::Deserializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
#$SOAP::Constants::DO_NOT_USE_XML_PARSER = 1;	# use XML::Parser::Lite for faster parsing

my $ID = $q->param('ID');
$ID = &Local::getCookie($ENV{HTTP_COOKIE},'gid') if !$ID;
	
if (SOAP->CheckAccess('D',$user,$q->param('Proj')),$ID,'R') { #check access 4 page and 4 reading object
	my $allCookies = $ENV{HTTP_COOKIE};
	&do_work($q,$ID);
	print $q->hidden('ID',$ID);
} else {
	&Local::accessForbidden('access forbiden');
}

print $q->end_html;


#------------------------

sub do_work {
	my($cgi,$ID) = @@_;

	my $obj;
	if ($cgi->param('Action') eq 'MD') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->h2($pn);
		$obj = SOAP->GetDebug('MD',$ID);
	} elsif ($cgi->param('Action') eq 'MDi') {
		$obj = SOAP->GetDebug('MDi',$ID);
	} elsif ($cgi->param('Action') eq 'MDk') {
		$obj = SOAP->GetDebug('MDk',$ID);
	} elsif ($cgi->param('Action') eq 'MDl') {
		$obj = SOAP->GetDebug('MDl',$ID);
	} elsif ($cgi->param('Action') eq 'MDg') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->h2($pn);
		$obj = SOAP->GetDebug('MDg',$ID);
	} elsif ($cgi->param('Action') eq 'MDgV') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->b("$pn MDg");
		my @@ds = SOAP->GetDataSources($pn);	# returns list of the data sources
		print join(', ', map {"<A HREF=''>$_</A>"} @@ds);
		my $edges = SOAP->GetDebug('MDgV', $ID, $ds[0], $use_lang);
		saveGraphViz("$Const::myPath$Const::cacheReport/MDg_$pn.png", $edges, 'dot', 1);
		print img {src=>"$Const::cacheReport/MDg_$pn.png"};
		return
	} elsif ($cgi->param('Action') eq 'MDga') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->h2($pn);
		$obj = SOAP->GetDebug('MDga',$ID);
	} elsif ($cgi->param('Action') eq 'MDgaV') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->b("$pn MDga");
		my $edges = SOAP->GetDebug('MDgaV', $ID, undef, $use_lang);
		saveGraphViz("$Const::myPath$Const::cacheReport/MDga_$pn.png", $edges, 'dot', 1);
		print img {src=>"$Const::cacheReport/MDga_$pn.png"};
		return
	} elsif ($cgi->param('Action') eq 'MDgo') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->h2("$pn MDgo");
#		$obj .= "<BR>$ID -> 9202.fakturace" if SOAP->HasPath('MDga', $ID, '9202.fakturace');
		$obj = SOAP->GetDebug('MDgo',$ID);
	} elsif ($cgi->param('Action') eq 'MDgoV') {
		my $pn = SOAP->GetProjectName($ID);
		print $cgi->b("$pn MDgo");
		my $edges = SOAP->GetDebug('MDgoV', $ID, undef, $use_lang);
		saveGraphViz("$Const::myPath$Const::cacheReport/MDgo_$pn.png", $edges, 'dot', 1);
		print img {src=>"$Const::cacheReport/MDgo_$pn.png"};
		return
	} elsif ($cgi->param('Action') eq 'Depend') {
		sub form {
			my $p = join(',', @@_);
			$p =~ s/([^,]+)/<a href="debug.cgi?ID=$1">$1<\/a>/g;
			$p =~ s/,/, /g;
			return $p
		}
		print "<h2><a href=\"debug.cgi?ID=$ID\">$ID</a>:</h2><b>All Predecessors: </b>";
		print form(SOAP->GetObjPredecessors($ID));
		print "<BR><b>All Succesors: </b>";
		print form(SOAP->GetObjSuccessors($ID));
		print "<BR><b>All Succeeded Reports: </b>";
		print form(SOAP->GetObjSuccessors($ID,0,'report'));
		print "<p><b>Proximate Predecessors: </b>";
		print form(SOAP->GetObjPredecessors($ID,1));
		print "<BR><b>Proximate Succesors: </b>";
		print form(SOAP->GetObjSuccessors($ID,1));
		return;
	} elsif ($cgi->param('Action') eq 'RCache') {
		$obj = SOAP->GetDebug('RCache',$ID);
	} elsif ($cgi->param('Action') eq 'SCache') {
		$obj = SOAP->GetDebug('SCache');
	} elsif ($cgi->param('Action') eq 'Lookup') {
		$obj = SOAP->GetDebug('Lookup',$ID);
	} elsif ($cgi->param('Action') eq 'Links') {
	} elsif ($cgi->param('Action') eq 'UserPref') {
		$obj = SOAP->GetDebug('UserPref');
	} elsif ($cgi->param('Action') eq 'UsRL') {
		$obj = SOAP->GetDebug('UsRL',$ID);
	} elsif ($cgi->param('Action') eq 'Users') {
		$obj = SOAP->GetDebug('Users');
	} elsif ($cgi->param('Action') eq 'Lang') {
		$obj = $Const::languages;
	} else {
		$obj = SOAP->GetMetadata($ID);
	}
	my $p=Dumper($obj);
	$p=~s/^.{8}//g;
	$p=~s/\n.{8}/\n/g;
	$p=~s/{\s*\n\s*'s-gensym\d+'\s+=>/{       ... =&gt;/g;
	# highlighting of IDs
	$p=~s/(['\[])([0-9A-f]{3,10}|\w[0-9A-Za-z]{9}|[0-9A-f]{3,10}\.\w+?|\w[0-9A-Za-z]{9}\.\w+?)([~'\]])/$1<A HREF="debug.cgi?ID=$2">$2<\/A>$3/g;
#	$p=~s/'([0-9a-f]{3,10})'/'<FONT COLOR="blue">$1<\/FONT>'/g;
	$p=~s|'([^']*)'(\s+=>)|'<B>$1</B>'$2|g;	#'
	$p=~s/(=>)/<FONT COLOR="red">$1<\/FONT>/g;
#	$p=~s/([{}\[\]])/<B>$1<\/B>/g;	#'
	print "<PRE>$p</PRE>";
}

#---------------------------------------------------

sub saveGraphViz {
	my $imgN = shift;
	my $obj = shift;
	my $layout = shift;
	my $rankdir = shift;
	my $g = GraphViz->new(
		rankdir=>$rankdir,
		layout=>$layout,
		no_overlap=>1,
		concentrate=>1,
		width => 11, height => 8
	);
	
	my $enc = "iso-8859-2";

	foreach my $f (keys %{$obj}) {
		foreach my $t (keys %{$obj->{$f}}) {
			next if $f eq $t;
			if (exists $obj->{$f}->{$t}->{w}) {
				$g->add_edge($f=>$t, label=>$obj->{$f}->{$t}->{w}, fontcolor=>'blue');
			} elsif (exists $obj->{$f}->{$t}->{fn}) {
				$g->add_edge(encode($enc, $obj->{$f}->{$t}->{fn})=>encode($enc, $obj->{$f}->{$t}->{tn}));
			} else {
				$g->add_edge(encode($enc, $f)=>encode($enc, $t));
			}
		}
	}

	$g->as_png($imgN);
	
}

#---------------------------------------------------

1
@


1.30
log
@foundation for N:M relations
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.29 2004/04/09 07:04:07 michald Exp $
d108 1
a108 1
		my $edges = SOAP->GetDebug('MDgV', $ID, $ds[0]);
d119 1
a119 1
		my $edges = SOAP->GetDebug('MDgaV', $ID);
d198 2
a203 2
			$f = encode("iso-8859-2",$f);
			$t = encode("iso-8859-2",$t);
d206 2
d209 1
a209 1
				$g->add_edge($f=>$t);
@


1.29
log
@Directed Graph visualization for debugging purposes implemented - need to install GraphViz (look at README)
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.28 2004/02/25 16:05:02 jiri_schmid Exp $
d13 3
d105 1
a105 1
		print $cgi->h2("$pn MDg");
d108 2
a109 2
		my @@edges = SOAP->GetDebug('MDgV', $ID, $ds[0]);
		saveGraphViz("$Const::myPath$Const::cacheReport/MDg_$pn.png", \@@edges, 'dot', 1);
d118 3
a120 3
		print $cgi->h2("$pn MDga");
		my @@edges = SOAP->GetDebug('MDgaV', $ID);
		saveGraphViz("$Const::myPath$Const::cacheReport/MDga_$pn.png", \@@edges, 'dot', 1);
d130 3
a132 3
		print $cgi->h2($pn);
		my @@edges = SOAP->GetDebug('MDgoV', $ID);
		saveGraphViz("$Const::myPath$Const::cacheReport/MDgo_$pn.png", \@@edges, 'dot', 1);
a185 2
use GraphViz;

d199 11
a209 6
	while (@@{$obj}) {
		my $f = shift @@{$obj};
		my $t = shift @@{$obj};
		next if $f eq $t;
#print "<br>$f => $t";
		$g->add_edge($f => $t);
a211 3
#	$g->add_node('London');
#	$g->add_edge('Boston2' => 'New York');

@


1.28
log
@fixed rights logic and folder XML definition files are specific for each project now
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.27 2004/02/18 16:19:06 jiri_schmid Exp $
d88 1
a88 1
		print $cgi->h1($pn);
d98 1
a98 1
		print $cgi->h1($pn);
d100 9
d111 1
a111 1
		print $cgi->h1($pn);
d113 7
d122 1
a122 1
		print $cgi->h1($pn);
d125 7
d183 32
@


1.27
log
@rights implemented
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.26 2004/02/13 17:09:33 jiri_schmid Exp $
d65 5
a69 1
if (SOAP->CheckAccess('D',$user,$q->param('Proj'))) {
a70 2
	my $ID = $q->param('ID');
	$ID = &Local::getCookie($ENV{HTTP_COOKIE},'gid') if !$ID;
@


1.26
log
@major tabs control implemented
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.25 2004/02/02 09:13:55 michald Exp $
d72 1
a72 1
	&Local::accessForbidden('Debug',$user);
@


1.25
log
@Make independent project specific spaces in MDk, MDl
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.24 2003/11/09 15:29:37 michald Exp $
d43 1
a43 1
my $use_lang = (param('Lang')) ? param('Lang') : $Const::defaultLanguage;
d65 9
a74 7
my $allCookies = $ENV{HTTP_COOKIE};
my $ID = $q->param('ID');
$ID = &Local::getCookie($ENV{HTTP_COOKIE},'gid') if !$ID;

&do_work($q,$ID);

print $q->hidden('ID',$ID);
@


1.24
log
@some small fixes
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.23 2003/10/31 13:45:57 jiri_schmid Exp $
d87 1
a87 3
		$obj = SOAP->GetDebug('MDi');
	} elsif ($cgi->param('Action') eq 'MDn') {
		$obj = SOAP->GetDebug('MDn');
d89 1
a89 1
		$obj = SOAP->GetDebug('MDk');
d91 1
a91 1
		$obj = SOAP->GetDebug('MDl');
@


1.23
log
@debug read cookies through Local::getCookie and works from now
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.22 2003/10/31 12:47:54 jiri_schmid Exp $
d67 2
a68 1
my $ID = &Local::getCookie($ENV{HTTP_COOKIE},'gid');
@


1.22
log
@mod perl rocks!
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.21 2003/10/16 14:08:51 jiri_schmid Exp $
d14 1
a45 2
my $ID=&SetParam($q,'ID','gid','');

d65 3
@


1.21
log
@mod-perl implementation stage 1, rebuilding global vars in .pl to global pointers
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.20 2003/09/29 05:43:13 michald Exp $
d8 2
a9 2
use utf8;
binmode(STDOUT, ":utf8");
d13 1
a13 3
our $q = new CGI;
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $DefaultLanguage @@cookie $cookie_path $cookie_exp);
our $User=$q->remote_user();
a14 2
require "const.def";
require "local/local_lib.pl";
d17 13
a29 1
our $ID=&SetParam($q,\@@cookie,'ID','gid','',$cookie_path,$cookie_exp);
d31 7
a37 2
my $use_lang = (param('Lang')) ? param('Lang') : $DefaultLanguage;
my $use_enc = $Languages->{$use_lang}->{enc};
d39 11
a49 3
our $skin = (param('Skin')) ? param('Skin') : (param('skin')) ? param('skin') : "";
our $skinPath = ($skin) ? "skins/$skin/" : "";
my $style = ($skin) ? "${skinPath}css.css" : "css.css";
d51 2
d57 1
a57 1
	-lang=>$Languages->{$use_lang}->{lang},	#return language specification in format: language-country (it differs from param Lang)
d59 2
a60 2
	-head=>meta({	-http_equiv => 'Content-Type', -content => "text/html; charset=$use_enc" }),
	-style=>{-src=>$style},
a62 8
# --- make SOAP connection ---
eval "use SOAP::Lite +autodispatch => 
	uri => 'Bear', 
	proxy => ['http://$bearHost:$bearPort/', 
	options => {compress_threshold => 10000}]; 
	1"
or ( &ErrorDie("ERROR in eval of \"use SOAP::Lite ...\".") );

d67 1
a67 6
my $serverVerbName="SOAP Server http://$bearHost:$bearPort/";
if (! eval "SOAP::Lite->self->fault") {
	ErrorDie('ERROR: '.$serverVerbName.' not responding<br><form><input type="submit" name="Refresh" value="Refresh" /></form>');
}

&do_work($q);
d76 1
a76 1
	my($cgi) = @@_;
d136 1
a136 1
		$obj = $Languages;
d155 1
@


1.20
log
@new version of the metadata - multiple attribute PK implementation; improvement of the PrepareSQL
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.19 2003/09/16 14:37:43 jiri_schmid Exp $
d14 1
a14 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $DefaultLanguage);
d18 1
a18 1
require "local_lib.pl";
d21 1
a21 1
our $ID=&SetParam('ID','gid');
@


1.19
log
@rights page user improvments, unbelieveble IE bug fixed
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.18 2003/09/01 12:40:04 jiri_schmid Exp $
a8 2
#binmode(STDOUT, ":encoding(iso-8859-1)");
#binmode(STDIN, ":encoding(iso-8859-2)");
d113 3
a115 3
		$obj = SOAP->GetDebug('RCache');
	} elsif ($cgi->param('Action') eq 'MCache') {
		$obj = SOAP->GetDebug('MCache');
@


1.18
log
@skins implemented. mozilla skin - temporarily copy msie content
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.17 2003/08/18 05:50:52 michald Exp $
d23 1
a23 1
our $ID=&SetParam('ID','id');
@


1.17
log
@some ACL improvement
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.16 2003/07/29 06:52:44 michald Exp $
d28 4
d39 1
a39 1
	-style=>{-src=>$StyleSheet},
@


1.16
log
@Cache::GetAttrElements implementation
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.15 2003/07/08 08:24:43 jiri_schmid Exp $
d119 4
d132 2
a133 1
	$p=~s/(['\[])([0-9a-f]{3,10}|[0-9a-f]{3,10}\..+?)([~'\]])/$1<A HREF="debug.cgi?ID=$2">$2<\/A>$3/g;
@


1.15
log
@binmode for STDIN changes
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.14 2003/07/07 07:10:39 michald Exp $
d116 1
@


1.14
log
@some minor code improvements
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.13 2003/07/04 06:19:13 michald Exp $
a11 1
binmode(STDIN, ":utf8");
@


1.13
log
@some fixes for proper utf8 encoding, see README for details
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.12 2003/06/23 08:59:37 michald Exp $
a132 1
print @@{$obj->{data}->{5}}[0];
@


1.12
log
@new debug func: Obj Dependency
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.11 2003/06/21 16:13:05 michald Exp $
d8 6
d17 1
a17 1
use vars qw($StyleSheet $bearHost $bearPort $compress_threshold %js $Languages $lang);
a24 1
$User=$q->remote_user();
d26 1
a26 1
my $use_lang = (param('Lang')) ? param('Lang') : "EN";
d32 1
a32 1
   -title=>"Debug",
d35 2
a36 3
	-head=>meta({	-http_equiv => 'Content-Type', 
			-content => "text/html; charset=$use_enc" }),
   -style=>{-src=>$StyleSheet},
d47 4
a54 1
#*SOAP::Serializer::as_string = \&SOAP::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
d57 1
a57 4
print <<END ;
</td></tr>
</table>
END
d119 2
d133 1
@


1.11
log
@improvement of object dependency directed graph
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.10 2003/06/20 08:42:29 michald Exp $
d100 2
@


1.10
log
@introduction of new directed graph structures MDga and MDgo
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.9 2003/05/23 06:40:44 michald Exp $
d89 15
a103 5
	} elsif ($cgi->param('Action') eq 'Pred') {
		print "$ID < ".join(', ',SOAP->GetObjPredecessors('MDgo', $ID));
		return;
	} elsif ($cgi->param('Action') eq 'Succ') {
		print "$ID > ".join(', ',SOAP->GetObjSuccessors('MDgo', $ID));
@


1.9
log
@implementation of attribute roles into directed graph
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.8 2003/05/21 08:04:57 michald Exp $
d74 2
d80 15
d110 1
a110 1
	$p=~s/(['\[])([0-9a-f]{3,10}|[0-9a-f]{3,10}\..+?)([~'\]])/$1<A HREF="index.cgi?TabAct=E&item_id=$2" TARGET="_top">$2<\/A>$3/g;
@


1.8
log
@minor improovement in debug list page
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.7 2003/05/05 06:41:42 michald Exp $
d72 6
d93 1
a93 1
	$p=~s/(['\[])([0-9a-f]{3,10})(['.\]])/$1<A HREF="index.cgi?TabAct=E&item_id=$2" TARGET="_top">$2<\/A>$3/g;
@


1.7
log
@implementation of full localized metadata
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.6 2003/05/01 15:40:14 jiri_schmid Exp $
d67 1
a67 1
		$obj = SOAP->GetDebug('MD',$pn);
d77 1
a77 1
		$obj = SOAP->GetDebug('Lookup');
@


1.6
log
@code improvment
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.5 2003/05/01 12:17:12 michald Exp $
a48 8
print <<END ;
<table width="100%"><tr><td bgcolor="#CCCCCC">
<A HREF="debug.cgi">Current Object</A>&nbsp;|&nbsp;
<A HREF="debug.cgi?Action=MD">MD</A>&nbsp;|&nbsp;
<A HREF="debug.cgi?Action=MDi">MDi</A>&nbsp;|&nbsp;
<A HREF="debug.cgi?Action=MDn">MDn</A>
</td></tr><tr><td>
END
d72 8
@


1.5
log
@some minor fixes
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.4 2003/04/30 17:03:35 michald Exp $
d10 3
a12 1
$q = new CGI;
@


1.4
log
@UTF-8 support for debug page
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.3 2003/04/07 13:28:11 michald Exp $
d7 1
@


1.3
log
@object name substitution in expressions
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.2 2003/03/14 09:23:43 jiri_schmid Exp $
d18 4
a21 1
print $q->header;
d25 4
@


1.2
log
@solved problem with CZ chars, by forced 8bit operating XML-UTF8 files, removed unused images
@
text
@d5 1
a5 1
# $Id: debug.cgi,v 1.1 2002/11/11 16:51:01 michald Exp $
d77 1
a77 1
	$p=~s/'([0-9a-f]{3,10})'/'<A HREF="index.cgi?TabAct=E&ID=$1" TARGET="_top">$1<\/A>'/g;
@


1.1
log
@add debug page
@
text
@d5 1
a5 1
# $Id$
d10 1
@


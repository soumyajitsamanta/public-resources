head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2003.07.30.07.46.09;	author michald;	state Exp;
branches;
next	;


desc
@@


1.1
log
@creation of lookup table combinations
@
text
@#-----------------------------------------------------
#  package for creating combination of 2D Array elements
#-----------------------------------------------------
# $Id$

package ArrComb;

use strict;
use warnings;

our $rep;	# number of combinations
my @@r;	# array of cardinalities of each element
my @@l;	# array to keep latest combination returned

#-------------------------------------------

sub init {
    @@r = @@_;	# array of cardinalities of each element
	$rep = 1;
	@@l = ();
	
	map {$rep*=($_); push(@@l,0)} @@r;	# set 'rep' as product of all values and initialize 'l'
}

#-------------------------------------------

sub getIndex {
	foreach (0..$#l) {	# let increment all elements
		$l[$_]++;
		if ($l[$_]==$r[$_]) {
			$l[$_]=0 ;	# reset it if element overflows
			next;
		}
		last;
	}
	return @@l;	# return elements
}

#-------------------------------------------
    
1

__END__

=head1 NAME

ArrComb - library for creating all possible combinations of array of indexes

=head1 SYNOPSIS

require 'ArrComb.pl';

ArrComb::init(3,2,2);

for (my $i=0; $i<$ArrComb::rep; $i++) {
	my @@x=ArrComb::getIndex();
	print sprintf("%5d: ",$i).join('-', @@x)."\n";
}

=head1 DESCRIPTION

=cut

@

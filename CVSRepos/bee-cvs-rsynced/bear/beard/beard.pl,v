head	1.23;
access;
symbols;
locks; strict;
comment	@# @;


1.23
date	2004.05.04.11.28.06;	author vasekd;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.14.09.06.45;	author jiri_schmid;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.02.04.46.05;	author michald;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.21.07.01.13;	author michald;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.17.15.53.54;	author vasekd;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.05.10.11.43;	author vasekd;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.03.16.19.20;	author vasekd;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.26.05.36.27;	author michald;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.25.10.07.14;	author michald;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.10.06.35.57;	author michald;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.06.08.43.26;	author michald;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.21.12.02.13;	author jiri_schmid;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.15.10.59.39;	author michald;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.04.05.12.23;	author michald;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.04.06.19.19;	author michald;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.28.15.33.34;	author michald;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.21.07.47.24;	author michald;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.05.06.41.47;	author michald;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.14.09.23.52;	author jiri_schmid;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.20.18.33.57;	author michald;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.30.10.02.24;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.25.18.24.13;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.15.42.38;	author michald;	state Exp;
branches;
next	;


desc
@@


1.23
log
@repaired killsignal from 9 to 15(sigkill)
@
text
@#!/usr/bin/perl -w
#-----------------------------------------------------
#  Bear Daemon
#-----------------------------------------------------
# $Id: beard.pl,v 1.22 2004/04/14 09:06:45 jiri_schmid Exp $

use strict;

#use lib "/var/www/html/bear/beard/"; #need only for start with -d

use utf8;
binmode(STDOUT, ':utf8');
binmode(STDIN, ':utf8');

#my $const = "const.def";
#if ($ARGV[0]) {
#	if (-f $ARGV[0] && -r _) {
#		$const = $ARGV[0]
#	} else {
#		die "ERROR: $0 expects name of configuration file as command line parameter\n";
#
#	}
#}
#require $const;
#require "bearlib.pl";
use Const;
require Bearlib;

use SOAP::Transport::HTTP;
use Bear;
use SQLGen;
use Cache;
use Acl;
use Getopt::Std;

###########################################################################
# Handle command line options
###########################################################################
my %opts;
if ( !getopts("d", \%opts) || @@ARGV != 0 ) {
    print("usage: $0 [-d]\n");
    exit(1);
}
###########################################################################
# dead create son and wait
###########################################################################
my $pid;
if ( $opts{d} ) {
        #
        # daemonize by forking
        #
        defined($pid = fork) or die "Can't fork: $!";
        wait if $pid;	# parent waits
		}

#main::WriteLog('Starting beard', "param file: $const", 1) if ($Const::LogLevel>0);
Bearlib::WriteLog('Starting beard', '', 1) if ($Const::LogLevel>0);

# load Plugins
foreach my $pln (keys %{$Const::Plugin}) {
	require $Const::Plugin->{$pln};	# load all plugins defined in Const.pm
	Bearlib::WriteLog('Load Plug-In', eval "${pln}::about()", 3) if ($Const::LogLevel>2);
}

# don't want to die on 'Broken pipe' or Ctrl-C
$SIG{PIPE} = $SIG{INT} = 'IGNORE';

# Daemon Initialization
#*SOAP::Serializer::as_string = \&SOAP::XMLSchema1999::Serializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)
#*SOAP::Deserializer::as_string = \&SOAP::XMLSchema1999::Deserializer::as_base64;	#reducing number of XML::Parser char() callbaks  for every single portion of processed stream (e.g. \n)

my $daemon = SOAP::Transport::HTTP::Daemon
	-> new (LocalPort => $Const::Port, Reuse => 1)
	-> dispatch_to('Bear')
	-> options({compress_threshold => $Const::compress_threshold});

Bearlib::WriteLog("Start of BEAR Server v$Const::version","SOAP server (PID $$) is listening at ".$daemon->url."\n",1) if ($Const::LogLevel);

Acl::LoadUserGroups($Const::MDataDir);
Bearlib::LoadMData($Const::MDataDir);
foreach my $ProjectName (keys %{$main::MD}) {
	&Cache::LoadProjLookupCache($ProjectName);
}

###########################################################################
# kill dead if this proces is son
###########################################################################
if (!$pid and $opts{d}) {
	my $ppid=getppid;
	kill(15,$ppid);
}

$daemon->handle;

__END__

@


1.22
log
@universal custom folders system implemented 4 facts
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.21 2004/04/02 04:46:05 michald Exp $
d90 1
a90 1
	kill(9,$ppid);
@


1.21
log
@fix wrng table nameing in Cache.pm:GetAttrElements
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.20 2004/03/21 07:01:13 michald Exp $
d9 1
a9 1
#use lib "/var/www/html/bear/beard/"; #need only for start with -d 
d21 1
a21 1
#		
@


1.20
log
@slight modification of the Metric Filter Intersection MD presentation
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.19 2004/03/17 15:53:54 vasekd Exp $
d35 1
a35 1
print $ARGV[0];
@


1.19
log
@fixed run beard as a daemon
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.18 2004/03/05 10:11:43 vasekd Exp $
d8 1
@


1.18
log
@fix error in fork
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.17 2004/03/03 16:19:20 vasekd Exp $
d8 1
a8 1
use lib "/var/www/html/bear/beard/"; #need only for start with -d 
d34 1
a34 1

@


1.17
log
@added parametr -d for start as a daemon
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.16 2003/11/26 05:36:27 michald Exp $
d87 1
a87 1
if ($pid==0) {
@


1.16
log
@cleadnup of some obsolete files
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.15 2003/11/25 10:07:14 michald Exp $
d8 1
d33 21
d84 8
@


1.15
log
@Project ACL implementation
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.14 2003/11/10 06:35:57 michald Exp $
a32 1
use vars qw($version $Port $LogLevel $compress_threshold $MDataDir $IOEncoding $Plugin);	# vars from const.def
d38 1
a38 1
	require $Const::Plugin->{$pln};	# load all plugins defined in const.def
d54 1
a54 1
WriteLog("Start of BEAR Server v$Const::version","SOAP server (PID $$) is listening at ".$daemon->url."\n",1) if ($LogLevel);
@


1.14
log
@map graph prototype
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.13 2003/11/06 08:43:26 michald Exp $
d59 1
a59 1
foreach my $ProjectName (Bear::GetProjects()) {
@


1.13
log
@small change to log output
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.12 2003/08/21 12:02:13 jiri_schmid Exp $
d13 13
a25 11
my $const = "const.def";
if ($ARGV[0]) {
	if (-f $ARGV[0] && -r _) {
		$const = $ARGV[0]
	} else {
		die "ERROR: $0 expects name of configuration file as command line parameter\n";
		
	}
}
require $const;
require "bearlib.pl";
d34 2
a35 1
main::WriteLog('Starting beard', "param file: $const", 1) if ($main::LogLevel>0);
d38 3
a40 3
foreach my $pln (keys %{$Plugin}) {
	require $Plugin->{$pln};	# load all plugins defined in const.def
	main::WriteLog('Load Plug-In', eval "${pln}::about()", 3) if ($main::LogLevel>2);
d51 1
a51 1
	-> new (LocalPort => $Port, Reuse => 1)
d53 1
a53 1
	-> options({compress_threshold => $compress_threshold});
d55 1
a55 1
WriteLog("Start of BEAR Server v$version","SOAP server (PID $$) is listening at ".$daemon->url."\n",1) if ($LogLevel);
d57 2
a58 2
Acl::LoadUserGroups($MDataDir);
&LoadMData($MDataDir);
@


1.12
log
@description for access tree changes
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.11 2003/08/15 10:59:39 michald Exp $
d13 10
a22 1
require "const.def";
d32 1
@


1.11
log
@initial ACL implementation
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.10 2003/08/04 05:12:23 michald Exp $
d44 1
a44 1
Acl::LoadUserGroups();
@


1.10
log
@Plug-Ins implementation
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.9 2003/07/04 06:19:19 michald Exp $
d20 1
d44 1
@


1.9
log
@some fixes for proper utf8 encoding, see README for details
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.8 2003/05/28 15:33:34 michald Exp $
d21 7
a27 1
use vars qw($version $Port $LogLevel $compress_threshold $MDataDir $IOEncoding);	# vars from const.def
@


1.8
log
@move of some code into separate modules
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.7 2003/05/21 07:47:24 michald Exp $
d10 2
a11 2
binmode(STDOUT, ":utf8");
binmode(STDIN, ":utf8");
d21 1
a21 1
use vars qw($version $Port $LogLevel $compress_threshold $MDataDir);	# vars from const.def
d27 3
@


1.7
log
@implementation of attribute roles and groups
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.6 2003/05/05 06:41:47 michald Exp $
a8 2
use SOAP::Transport::HTTP;
use Bear;
d11 1
a14 1
require 'dbi_mysql.pl';
d16 6
a21 1
use vars qw($version $Port $LogLevel $compress_threshold $MDataDir);
d36 1
a36 1
	&LoadProjLookupCache($ProjectName);
@


1.6
log
@implementation of full localized metadata
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.5 2003/03/14 09:23:52 jiri_schmid Exp $
a34 1
#	&LoadProjLookupCache('StoreDemo');
@


1.5
log
@solved problem with CZ chars, by forced 8bit operating XML-UTF8 files, removed unused images
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.4 2003/01/20 18:33:57 michald Exp $
d32 4
@


1.4
log
@fix Clone disappearing
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.3 2002/09/30 10:02:24 michald Exp $
d11 2
d27 1
a27 1
	-> options({compress_threshold => $compress_threshold});                
@


1.3
log
@client metadata connection, client tree presentation
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.2 2002/09/25 18:24:13 michald Exp $
d14 2
@


1.2
log
@beard metadata connection
@
text
@d5 1
a5 1
# $Id: beard.pl,v 1.1.1.1 2002/09/24 01:56:46 michald Exp $
d14 1
a14 1
use vars qw($version $Port $LogLevel $compress_threshold);
d27 1
a27 1
&LoadMData;
@


1.1
log
@minor change of cvs tree structure
@
text
@d10 1
d12 3
a14 1
use Bear;
d17 1
a17 1
$SIG{PIPE} = $SIG{INT} = 'IGNORE'; 
d19 1
d21 1
a21 1
	-> new (LocalPort => 3000, Reuse => 1)
d23 5
a27 1
	-> options({compress_threshold => 10000});                
a28 1
print "Contact to SOAP server (PID $$) at ", $daemon->url, "\n";
@


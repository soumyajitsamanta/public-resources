head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2004.05.03.09.06.45;	author michald;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.13.12.42.37;	author michald;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.02.04.46.05;	author michald;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.29.06.04.55;	author michald;	state Exp;
branches;
next	;


desc
@@


1.4
log
@N:M implementation, foundation for slowly changing dimensions
@
text
@
#-----------------------------------------------------
#  Beard Cache Metadata
#-----------------------------------------------------
# $Id: CacheMD.pm,v 1.3 2004/04/13 12:42:37 michald Exp $

package CacheMD;

use strict;

use Data::Dumper;
use Time::HiRes;

use utf8;
binmode(STDOUT, ':utf8');
binmode(STDIN, ':utf8');

our $lMDn = "__md";	#name of the lookup metadata table
our $lMDcr = "CREATE TABLE $lMDn (
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	project VARCHAR(255) NOT NULL,
	atr_name VARCHAR(255) NOT NULL,
	table_name VARCHAR(255) NOT NULL,
	loaded_at TIMESTAMP NOT NULL,
	loading_time INT UNSIGNED NOT NULL,
	records INT UNSIGNED NOT NULL,
	pk_def VARCHAR(255) NOT NULL,
	pk_type VARCHAR(255) NOT NULL
) TYPE=$Const::CacheDB->{table_type}";
our $lMDFn = "__mdd";	#name of the lookup forms metadata table
our $lMDFcr = "CREATE TABLE $lMDFn (
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	attr_id INT UNSIGNED NOT NULL,
	form VARCHAR(255) NOT NULL,
	lang CHAR(2),
	column_id SMALLINT UNSIGNED NOT NULL,
	def VARCHAR(255) NOT NULL,
	type VARCHAR(255) NOT NULL
) TYPE=$Const::CacheDB->{table_type}";

#-----------------------------------------------------

sub CheckDBConnection {
	if (!DBlib::IsDBConnected($Const::CacheDB->{db})) {
		DBlib::DBConnect('CacheDB', $Const::CacheDB->{db}, $Const::CacheDB->{user}, $Const::CacheDB->{passwd}, 'localhost', $Const::CacheDB->{port}, $Const::CacheDB->{enc}, 1);
		if (@@DBlib::SQLErrors) {
			Bearlib::WriteLog('Cache DB Connection Falied', 'Probably there is no database accesible in consodance with $Const::CacheDB parameters. Let create one or fix $Const::CacheDB parameters.', 1) if ($Const::LogLevel>0);
			die;
		} else {
			Bearlib::WriteLog('Open Cache DB Connection', '', 3) if ($Const::LogLevel>2);
		}
		CheckMDTables();
	}
}

#-----------------------------------------------------

sub CheckMDTables {
	# Create MD tables if not exists

	if ((!DBlib::TableInfo('CacheDB', $lMDn)) || (!DBlib::TableInfo('CacheDB', $lMDFn))) {	# cache MD table not exists, let create one
		DBlib::SQLQuery('CacheDB', "DROP TABLE IF EXISTS $lMDn");
		DBlib::SQLQuery('CacheDB', "DROP TABLE IF EXISTS $lMDFn");
		DBlib::SQLQuery('CacheDB', $lMDcr);
		DBlib::SQLQuery('CacheDB', $lMDFcr);
		if (@@main::SQLErrors) {
			Bearlib::WriteLog("Creation of the lookup metadata table failed", join(', ', @@main::SQLErrors) , 1) if ($Const::LogLevel>0);
			undef @@main::SQLErrors;
			return 0
		} else {
			Bearlib::WriteLog('Lookup metadata tables has been created succesfully', '', 4) if ($Const::LogLevel>3);
		}
	}
}

#-----------------------------------------------------

sub CompareLMD {
	# Compare two MD hashes
	my $md1 = shift;
	my $md2 = shift;
	
	# here is not enought to compare hashes as order of the columns in lookup cache is not important (ie. only keys from $md->{form_idx}->{$form}->{$lang} hash are important, not values)

	my $str1 = '';
	my $str2 = '';
	foreach my $form (sort keys %{$md1->{form_idx}}) {
		foreach my $lang (sort keys %{$md1->{form_idx}->{$form}}) {
			$str1 .= $form."\t".$lang."\t".${$md1->{def}}[$md1->{form_idx}->{$form}->{$lang}]."\t";
		}
	}
	foreach my $form (sort keys %{$md2->{form_idx}}) {
		foreach my $lang (sort keys %{$md2->{form_idx}->{$form}}) {
			$str2 .= $form."\t";
			$str2 .= $lang."\t";
			$str2 .= ${$md2->{def}}[$md2->{form_idx}->{$form}->{$lang}]."\t";
		}
	}
	return $str1 eq $str2
	
}

#-----------------------------------------------------

sub SaveLMD {
	# Save Lookup MD
	my $project = shift;	# project ID
	my $AttrID = shift;	# attribute ID
	my $md = shift;
	# ---------------------------
	# $md->{form_idx}->{$form}->{$lang} = $ColIndex	# index of DB column containing specific form
	#    ->{table_name} = $table_name	# lookup cache Db table name
	#    ->{load_time} = $ltime	# loading time of the lookup cache in [ms]
	#    ->{records} = $rec	# number of records
	#    ->{def} = [pk, def1, def2, ...]	# array of the display form definitions
	#    ->{type} = [pktype, coltype1, coltype2, ...]	# array of the column data types
	# ---------------------------

	DBlib::SQLQuery('CacheDB', "LOCK TABLES $lMDn WRITE, $lMDFn WRITE");
	DBlib::SQLPrepareQuery('CacheDB', 'I', "INSERT INTO $lMDn (project, atr_name, table_name, loading_time, records, pk_def, pk_type) VALUES (?,?,?,?,?,?,?)");	# there is not possible to use simple DBlib::SQLQuery however we have to colect LastInsertedID later 
	my $d = DBlib::FixSQLString('CacheDB', @@{$md->{def}}[0]);	# this is used for proper escape of special characters
	$d =~ s/^'(.*)'$/$1/;	# we have to cut outer quotation as we will insert it by SQLExecuteQuery
	my $t = DBlib::FixSQLString('CacheDB', @@{$md->{type}}[0]);	# this is used for proper escape of special characters
	$t =~ s/^'(.*)'$/$1/;	# we have to cut outer quotation as we will insert it by SQLExecuteQuery
	DBlib::SQLExecuteQuery('CacheDB', 'I', ($project, $AttrID, $md->{table_name}, $md->{load_time}, $md->{records}, $d, $t) );

	my $lii = DBlib::LastInsertedID('CacheDB', 'I');	# ID of the last inserted record
	foreach my $form (keys %{$md->{form_idx}}) {
		foreach my $lang (keys %{$md->{form_idx}->{$form}}) {
			if ($lii) {
				my $i = $md->{form_idx}->{$form}->{$lang};
				my $d = DBlib::FixSQLString('CacheDB', @@{$md->{def}}[$i]);
				my $t = DBlib::FixSQLString('CacheDB', @@{$md->{type}}[$i]);
				DBlib::SQLQuery('CacheDB', "INSERT INTO $lMDFn (attr_id, form, lang, column_id, def, type) ".
					"VALUES ($lii, '$form', '$lang', $i, $d, $t)");
			}
		}
	}
	DBlib::SQLFetchClose('CacheDB', 'I');
	
	if (@@main::SQLErrors) {
		if ($lii) {
			DBlib::SQLQuery('CacheDB', "DELETE FROM $lMDn WHERE id=$lii");
			DBlib::SQLQuery('CacheDB', "DELETE FROM $lMDFn WHERE attr_id=$lii");
		}
		DBlib::SQLQuery('CacheDB', "UNLOCK TABLES");
		Bearlib::WriteLog("Writing into Lookup metadata failed", join(', ', @@main::SQLErrors) , 1) if ($Const::LogLevel>0);
		undef @@main::SQLErrors;
		return 0
	} else {
		DBlib::SQLQuery('CacheDB', "UNLOCK TABLES");
		Bearlib::WriteLog('Lookup metadata has been saved succesfully', "$project:$AttrID", 4) if ($Const::LogLevel>3);
	}
}

#-----------------------------------------------------

sub LoadLMD {
	# Load Lookup MD
	my $project = shift;	# project ID
	my $AttrID = shift;	# attribute ID

	my $m={};	# temp hash for output data
	my $id;
	DBlib::SQLQuery('CacheDB', "LOCK TABLES $lMDn READ, $lMDFn READ");
	($id, $m->{table_name}, $m->{loaded_at}, $m->{loading_time}, $m->{records}, @@{$m->{def}}[0], @@{$m->{type}}[0])
		= DBlib::SQLFetchOneLineQuery('CacheDB', "SELECT id, table_name, loaded_at, loading_time, records, pk_def, pk_type FROM $lMDn WHERE project='$project' AND atr_name='$AttrID'");
	return {} if !$id;
	DBlib::SQLPrepareFetch('CacheDB', 'mdf', "SELECT form, lang, column_id, def, type FROM $lMDFn WHERE attr_id=$id");
	while ( my ($form, $lang, $column_id, $def, $type) = DBlib::SQLFetch('CacheDB','mdf') ) {
		$m->{form_idx}->{$form}->{$lang} = $column_id;
		@@{$m->{def}}[$column_id] = $def;
		@@{$m->{type}}[$column_id] = $def;
		last if (@@DBlib::SQLErrors);
	}
	DBlib::SQLQuery('CacheDB', "UNLOCK TABLES");
	DBlib::SQLFetchClose('CacheDB', 'mdf');

	if (@@main::SQLErrors) {
		Bearlib::WriteLog("Loading of the Lookup metadata failed", join(', ', @@main::SQLErrors) , 1) if ($Const::LogLevel>0);
		undef @@main::SQLErrors;
		return 0
	} else {
		Bearlib::WriteLog('Succesfull Load of the Lookup metadata', "$project:$AttrID", 4) if ($Const::LogLevel>3);
		return $m;
	}
}

#-----------------------------------------------------

sub DeleteLMD {
	# Load Lookup MD
	my $project = shift;	# project ID
	my $AttrID = shift;	# attribute ID

	my ($id) = DBlib::SQLFetchOneLineQuery('CacheDB', "SELECT id FROM $lMDn WHERE project='$project' AND atr_name='$AttrID'");
	if ($id) {
		DBlib::SQLQuery('CacheDB', "LOCK TABLES $lMDn WRITE, $lMDFn WRITE");
		DBlib::SQLQuery('CacheDB', "DELETE FROM $lMDn WHERE id=$id");
		DBlib::SQLQuery('CacheDB', "DELETE FROM $lMDFn WHERE attr_id=$id");
		DBlib::SQLQuery('CacheDB', "UNLOCK TABLES");
	}
	if (@@main::SQLErrors) {
		Bearlib::WriteLog("Deleting of the Lookup metadata failed", join(', ', @@main::SQLErrors) , 1) if ($Const::LogLevel>0);
		undef @@main::SQLErrors;
		return 0
	} else {
		Bearlib::WriteLog('Record of the Lookup metadata has been deleted', "$project:$AttrID", 4) if ($Const::LogLevel>3);
	}
}

#-----------------------------------------------------

1

__END__


@


1.3
log
@foundation for N:M relations
@
text
@d5 1
a5 1
# $Id: CacheMD.pm,v 1.2 2004/04/02 04:46:05 michald Exp $
d45 1
a45 1
		DBlib::DBConnect('CacheDB', $Const::CacheDB->{db}, $Const::CacheDB->{user}, $Const::CacheDB->{password}, $Const::CacheDB->{passwd}, $Const::CacheDB->{port}, $Const::CacheDB->{enc}, 1);
d47 1
a47 1
			Bearlib::WriteLog('Cache DB Connection Falied', 'Proably there is no database accesible in consodance with $Const::CacheDB parameters. Let create one or fix $Const::CacheDB parameters.', 1) if ($Const::LogLevel>0);
@


1.2
log
@fix wrng table nameing in Cache.pm:GetAttrElements
@
text
@d5 1
a5 1
# $Id: CacheMD.pm,v 1.1 2004/03/29 06:04:55 michald Exp $
d27 2
a28 1
	pk_def VARCHAR(255) NOT NULL
d37 2
a38 1
	def VARCHAR(255) NOT NULL
d120 1
a120 1
	DBlib::SQLPrepareQuery('CacheDB', 'I', "INSERT INTO $lMDn (project, atr_name, table_name, loading_time, records, pk_def) VALUES (?,?,?,?,?,?)");	# there is not possible to use simple DBlib::SQLQuery however we have to colect LastInsertedID later 
d123 3
a125 1
	DBlib::SQLExecuteQuery('CacheDB', 'I', ($project, $AttrID, $md->{table_name}, $md->{load_time}, $md->{records}, $d) );
d133 3
a135 2
				DBlib::SQLQuery('CacheDB', "INSERT INTO $lMDFn (attr_id, form, lang, column_id, def) ".
					"VALUES ($lii, '$form', '$lang', $i, $d)");
d166 2
a167 2
	($id, $m->{table_name}, $m->{loaded_at}, $m->{loading_time}, $m->{records}, @@{$m->{def}}[0])
		= DBlib::SQLFetchOneLineQuery('CacheDB', "SELECT id, table_name, loaded_at, loading_time, records, pk_def FROM $lMDn WHERE project='$project' AND atr_name='$AttrID'");
d169 2
a170 2
	DBlib::SQLPrepareFetch('CacheDB', 'mdf', "SELECT form, lang, column_id, def FROM $lMDFn WHERE attr_id=$id");
	while ( my ($form, $lang, $column_id, $def) = DBlib::SQLFetch('CacheDB','mdf') ) {
d173 1
@


1.1
log
@new lookup cache management
@
text
@d5 1
a5 1
# $Id$
d123 1
a123 1
	my $lii;	# ID of the last inserted record
a125 1
			$lii = DBlib::LastInsertedID('CacheDB', 'I');
@

